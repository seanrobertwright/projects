{"!name":"sap.ui.integration","!version":"1.20.0","!define":{"sap.ui.integration.Host":{"!description":"Provides application-level functions and services to an integration card.\n\nExamples may include, but are not limited to options like: share a card, remove a card.","extend":{"!description":"Creates a new subclass of class sap.ui.integration.Host with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.Extension.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.Host.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>Host<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getResolveDestination resolveDestination} : function<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.Extension#constructor sap.ui.integration.Extension}\ncan be used as well.","!module":"sap/ui/integration/Host","getDestination":{"!description":"Resolves the destination and returns its URL.","!static":false,"!category":"function","!type":"fn(sDestinationName: String) -> Promise","parameters":{"sDestinationName":"type: string, description: The name of the destination. Most often the name which is used in the SAP Cloud Platform."}},"!helpDescription":"Provides application-level functions and services to an integration card.\n\nExamples may include, but are not limited to options like: share a card, remove a card.","getResolveDestination":{"!description":"Gets current value of property {@link #getResolveDestination resolveDestination}.\n\nA function that resolves the given destination name to a URL.\n\nThe Card calls this function when it needs to send a request to a destination. Function returns the URL to which the request is sent.\n\nIf a card depends on a destination, but this callback is not implemented, an error will be logged.\n\nThe callback receives <code>destinationName<\/code> as parameter and returns a string with the URL. Or alternatively the callback may return a <code>Promise<\/code> with the URL as an argument.","!static":false,"!category":"function","!type":"fn() -> fn()"},"!proto":"sap.ui.integration.Extension","!category":"class","setResolveDestination":{"!description":"Sets a new value for property {@link #getResolveDestination resolveDestination}.\n\nA function that resolves the given destination name to a URL.\n\nThe Card calls this function when it needs to send a request to a destination. Function returns the URL to which the request is sent.\n\nIf a card depends on a destination, but this callback is not implemented, an error will be logged.\n\nThe callback receives <code>destinationName<\/code> as parameter and returns a string with the URL. Or alternatively the callback may return a <code>Promise<\/code> with the URL as an argument.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(fnResolveDestination: fn()) -> sap.ui.integration.Host","parameters":{"fnResolveDestination":"type: function, description: New value for property <code>resolveDestination<\/code>"}}},"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor":{"ListEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.PropertyEditors":{"getEditor":{"!description":"ID of the element which is the current target of the association {@link #getEditor editor}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"},"attachPropertyEditorsChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyEditorsChange propertyEditorsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireEditorChange":{"!description":"Fires event {@link #event:editorChange editorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireTagsChange":{"!description":"Fires event {@link #event:tagsChange tagsChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireInit":{"!description":"Fires event {@link #event:init init} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.core.Control","detachTagsChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:tagsChange tagsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!category":"class","detachEditorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getTags":{"!description":"Gets current value of property {@link #getTags tags}.","!static":false,"!category":"function","!type":"fn() -> String"},"setTags":{"!description":"Sets a new value for property {@link #getTags tags}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sTags: String) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"sTags":"type: string, description: New value for property <code>tags<\/code>"}},"getRenderLabels":{"!description":"Gets current value of property {@link #getRenderLabels renderLabels}.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sConfig: Array) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"sConfig":"type: array, description: New value for property <code>config<\/code>"}},"attachInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:init init} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTags tags} : string<\/li>\n<li>{@link #getRenderLabels renderLabels} : boolean<\/li>\n<li>{@link #getConfig config} : array<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getEditor editor} : (sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:editorChange editorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyEditorsChange propertyEditorsChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:init init} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:tagsChange tagsChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setRenderLabels":{"!description":"Sets a new value for property {@link #getRenderLabels renderLabels}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bRenderLabels: Boolean) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"bRenderLabels":"type: boolean, description: New value for property <code>renderLabels<\/code>"}},"attachEditorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachPropertyEditorsChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyEditorsChange propertyEditorsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!description":"Renders a group of {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on specified <code>tags<\/code> or custom <code>config<\/code>.","firePropertyEditorsChange":{"!description":"Fires event {@link #event:propertyEditorsChange propertyEditorsChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.PropertyEditors.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.","!static":false,"!category":"function","!type":"fn() -> Array"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditors with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/designtime/baseEditor/PropertyEditors","attachTagsChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:tagsChange tagsChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!helpDescription":"Renders a group of {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on specified <code>tags<\/code> or custom <code>config<\/code>.","detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditors<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setEditor":{"!description":"Sets the associated {@link #getEditor editor}.","!static":false,"!category":"function","!type":"fn(oEditor: sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"oEditor":"type: sap.ui.core.ID|sap.ui.integration.designtime.baseEditor.BaseEditor, description: ID of an element which becomes the new target of this editor association; alternatively, an element instance may be given"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditors","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","EnumStringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link M.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor"},"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor"},"sap.ui.integration.widgets.Card":{"getManifest":{"!description":"Overwrites getter for card manifest.","!static":false,"!category":"function","!type":"fn() -> String | Object"},"isReady":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.core.Control","fireAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","attachManifestReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:manifestReady manifestReady} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.widgets.Card<\/code> itself.\n\nFired when the manifest is loaded.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nDefines the width of the card.\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"attachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.widgets.Card<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setParameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.integration.widgets.Card","parameters":{"oParameters":"type: object, description: New value for property <code>parameters<\/code>"}},"getBaseUrl":{"!description":"Gets current value of property {@link #getBaseUrl baseUrl}.\n\nDefines the base URL of the Card Manifest. It should be used when manifest property is an object instead of a URL.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nDefines the height of the card.\n\nDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new <code>Card<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getManifest manifest} : any (default: )<\/li>\n<li>{@link #getParameters parameters} : object<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getDataMode dataMode} : sap.ui.integration.CardDataMode (default: Active)<\/li>\n<li>{@link #getBaseUrl baseUrl} : sap.ui.core.URI<\/li>\n<li>{@link #getManifestChanges manifestChanges} : object[]<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getHostConfigurationId hostConfigurationId} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<li>{@link #getHost host} : (sap.ui.core.ID | sap.ui.core.Control)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:action action} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:manifestReady manifestReady} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getCardHeader":{"!description":"Implements sap.f.ICard interface.","!static":false,"!category":"function","!type":"fn() -> sap.f.cards.IHeader"},"getCardHeaderPosition":{"!description":"Implements sap.f.ICard interface.","!static":false,"!category":"function","!type":"fn() -> sap.f.cards.HeaderPosition"},"getDataMode":{"!description":"Gets current value of property {@link #getDataMode dataMode}.\n\nDefines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.\n\nDefault value is <code>Active<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.CardDataMode"},"setDataMode":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sMode: sap.ui.integration.CardDataMode) -> sap.ui.integration.widgets.Card","parameters":{"sMode":"type: sap.ui.integration.CardDataMode, description: The mode to set to the Card."}},"getHost":{"!description":"ID of the element which is the current target of the association {@link #getHost host}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"},"fireManifestReady":{"!description":"Fires event {@link #event:manifestReady manifestReady} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.widgets.Card","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!description":"A control that represents a container with a header and content.\n\n<h3>Overview<\/h3> Cards are small user interface elements which provide the most important information from an app, related to a specific role or task. The information is represented in a compact manner, allowing for actions to be executed. Cards can be described as small representations of an app which can be integrated in different systems.\n\nThe integration card is defined in a declarative way, using a manifest.json to be: <ul> <li>Easily integrated into apps<\/li> <li>Easily reused across apps<\/li> <li>Understandable by other technologies<\/li> <li>Self-contained (has a built-in functionality and doesn't need external configuration)<\/li> <li>Dynamic parameter handling<\/li> <li>Clear separation of the roles of the card and app developers<\/li> <\/ul>\n\nThe role of the card developer is to describe the card in a manifest.json file and define: <ul> <li>Header<\/li> <li>Content<\/li> <li>Data source<\/li> <li>Possible actions<\/li> <\/ul>\n\nThe role of the app developer is to integrate the card into the app and define: <ul> <li>The dimensions of the card inside a layout of choice, using the <code>width<\/code> and <code>height<\/code> properties<\/li> <li>The behavior for the actions described in the manifest.json file, using the action event<\/li> <\/ul>\n\n<strong>You can learn more about integration cards in the <a href=\"test-resources/sap/ui/integration/demokit/cardExplorer/index.html\">Card Explorer<\/a><\/strong>\n\n<i>When to use<\/i> <ul> <li>When you want to reuse the card across apps.<\/li> <li>When you need easy integration and configuration.<\/li> <\/ul>\n\n<i>When not to use<\/i> <ul> <li>When you need more header and content flexibility.<\/li> <li>When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you have to use an application model. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you need complex behavior. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <\/ul>","setHost":{"!description":"Sets the associated {@link #getHost host}.","!static":false,"!category":"function","!type":"fn(oHost: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.integration.widgets.Card","parameters":{"oHost":"type: sap.ui.core.ID|sap.ui.core.Control, description: ID of an element which becomes the new target of this host association; alternatively, an element instance may be given"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.widgets.Card.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setManifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sManifestChanges: [Object]) -> sap.ui.integration.widgets.Card","parameters":{"sManifestChanges":"type: object[], description: New value for property <code>manifestChanges<\/code>"}},"getCardContent":{"!description":"Implements sap.f.ICard interface.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"refresh":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn()"},"setManifest":{"!description":"Sets a new value for property {@link #getManifest manifest}.\n\nThe URL of the manifest or an object.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(oManifest: Object) -> sap.ui.integration.widgets.Card","parameters":{"oManifest":"type: any, description: New value for property <code>manifest<\/code>"}},"detachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nDefines the height of the card.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.integration.widgets.Card","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nDefines the width of the card.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.integration.widgets.Card","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.widgets.Card with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/widgets/Card","loadDesigntime":{"!description":"Loads the module designtime/Card.designtime or the module given in \"sap.card\": { \"designtime\": \"designtime/Own.designtime\" } This file should contain the designtime configuration for the card.\n\nReturns a promise that resolves with an object { designtime: the designtime modules response manifest: the complete manifest json } The promise is rejected if the module cannot be loaded with an object: { error: \"Card.designtime not found\" }","!static":false,"!category":"function","!type":"fn() -> Promise"},"!helpDescription":"A control that represents a container with a header and content.\n\n<h3>Overview<\/h3> Cards are small user interface elements which provide the most important information from an app, related to a specific role or task. The information is represented in a compact manner, allowing for actions to be executed. Cards can be described as small representations of an app which can be integrated in different systems.\n\nThe integration card is defined in a declarative way, using a manifest.json to be: <ul> <li>Easily integrated into apps<\/li> <li>Easily reused across apps<\/li> <li>Understandable by other technologies<\/li> <li>Self-contained (has a built-in functionality and doesn't need external configuration)<\/li> <li>Dynamic parameter handling<\/li> <li>Clear separation of the roles of the card and app developers<\/li> <\/ul>\n\nThe role of the card developer is to describe the card in a manifest.json file and define: <ul> <li>Header<\/li> <li>Content<\/li> <li>Data source<\/li> <li>Possible actions<\/li> <\/ul>\n\nThe role of the app developer is to integrate the card into the app and define: <ul> <li>The dimensions of the card inside a layout of choice, using the <code>width<\/code> and <code>height<\/code> properties<\/li> <li>The behavior for the actions described in the manifest.json file, using the action event<\/li> <\/ul>\n\n<strong>You can learn more about integration cards in the <a href=\"test-resources/sap/ui/integration/demokit/cardExplorer/index.html\">Card Explorer<\/a><\/strong>\n\n<i>When to use<\/i> <ul> <li>When you want to reuse the card across apps.<\/li> <li>When you need easy integration and configuration.<\/li> <\/ul>\n\n<i>When not to use<\/i> <ul> <li>When you need more header and content flexibility.<\/li> <li>When you have to achieve simple card visualization. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you have to use an application model. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <li>When you need complex behavior. For such cases, use: {@link sap.f.Card sap.f.Card}.<\/li> <\/ul>","detachManifestReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:manifestReady manifestReady} event of this <code>sap.ui.integration.widgets.Card<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.widgets.Card","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setHostConfigurationId":{"!description":"Sets the associated {@link #getHostConfigurationId hostConfigurationId}.","!static":false,"!category":"function","!type":"fn(oHostConfigurationId: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.integration.widgets.Card","parameters":{"oHostConfigurationId":"type: sap.ui.core.ID|sap.ui.core.Control, description: ID of an element which becomes the new target of this hostConfigurationId association; alternatively, an element instance may be given"}},"setBaseUrl":{"!description":"Sets a new value for property {@link #getBaseUrl baseUrl}.\n\nDefines the base URL of the Card Manifest. It should be used when manifest property is an object instead of a URL.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sBaseUrl: sap.ui.core.URI) -> sap.ui.integration.widgets.Card","parameters":{"sBaseUrl":"type: sap.ui.core.URI, description: New value for property <code>baseUrl<\/code>"}},"getParameters":{"!description":"Overwrites getter for card parameters.","!static":false,"!category":"function","!type":"fn() -> Object"},"getManifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> [Object]"},"getHostConfigurationId":{"!description":"ID of the element which is the current target of the association {@link #getHostConfigurationId hostConfigurationId}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"}},"sap.ui.integration":{"!description":"SAPUI5 library with controls specialized for SAP Fiori apps.","Extension":"sap.ui.integration.Extension_obj","CardDataMode":"sap.ui.integration.CardDataMode","resolveDestination":{"!description":"A function that resolves the given destination name to a URL.\n\nThe Card calls this function when it needs to send a request to a destination. Function returns the URL to which the request is sent.\n\nIf a card depends on a destination, but this callback is not implemented, an error will be logged.\n\nThe callback receives <code>destinationName<\/code> as parameter and returns a string with the URL. Or alternatively the callback may return a <code>Promise<\/code> with the URL as an argument.","!category":"enum","!type":"fn()"},"!module":"sap/ui/integration/library","!helpDescription":"SAPUI5 library with controls specialized for SAP Fiori apps.","designtime":"sap.ui.integration.designtime","CardActionType":"sap.ui.integration.CardActionType","!category":"namespace","Host":"sap.ui.integration.Host_obj","widgets":"sap.ui.integration.widgets","actions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"Array"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/mapEditor/MapEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"IntegerEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor_obj","fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime":{"baseEditor":"sap.ui.integration.designtime.baseEditor","cardEditor":"sap.ui.integration.designtime.cardEditor","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/iconEditor/IconEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.Extension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Extension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.Extension"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link D.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor"},"sap.ui.integration.designtime.baseEditor.PropertyEditors_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditors with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.PropertyEditors"},"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor"},"sap.ui.integration.designtime.baseEditor.BaseEditor":{"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","!category":"class","attachPropertyEditorsReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyEditorsReady propertyEditorsReady} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>{\"i18n\":[\"sap/ui/integration/designtime/baseEditor/i18n/i18n.properties\"]}<\/code>.","!static":false,"!category":"function","!type":"fn(oConfig: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oConfig":"type: object, description: New value for property <code>config<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getJson json} : object<\/li>\n<li>{@link #getConfig config} : object (default: {\n\t\t\t\t\t\t\"i18n\": [\n\t\t\t\t\t\t\t\"sap/ui/integration/designtime/baseEditor/i18n/i18n.properties\"\n\t\t\t\t\t\t]\n\t\t\t\t\t})<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:jsonChange jsonChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyEditorsReady propertyEditorsReady} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.designtime.baseEditor.BaseEditor"},"getJson":{"!description":"Gets current value of property {@link #getJson json}.","!static":false,"!category":"function","!type":"fn() -> Object"},"!description":"<h3>Overview<\/h3> Configurable JSON editor <h4>Example<\/h4> <pre>\nsap.ui.require([\"sap/ui/integration/designtime/baseEditor/BaseEditor\"], function (Editor) {\n    var oJson = {\n        root: {\n            context: {\n                id: \"404\",\n                name: \"Kate\",\n                role: \"End User\"\n            },\n            foo: {\n                bar: true\n            }\n        }\n    };\n    var oEditor = new Editor();\n    oEditor.setJson(oJson);\n    oEditor.setConfig({\n        \"context\": \"root/context\",\n        \"properties\" : {\n            \"name\": {\n                \"label\": \"Name\",\n                \"path\": \"name\",\n                \"type\": \"string\"\n            },\n            \"role\": {\n                \"label\": \"Role\",\n                \"path\": \"role\",\n                \"type\": \"enum\",\n                \"enum\": [\"Developer\", \"Key User\", \"End User\"]\n            },\n            \"department\": {\n                \"label\": \"Department\",\n                \"path\": \"department\",\n                \"type\": \"enum\",\n                \"enum\": [\"Sales\", \"HR\", \"Development\"],\n                \"visible\": \"{= ${context>/role} === 'Key User'}\"\n            }\n        },\n        \"propertyEditors\": {\n            \"enum\" : \"sap/ui/integration/designtime/baseEditor/propertyEditors/enumStringEditor/EnumStringEditor\",\n            \"string\" : \"sap/ui/integration/designtime/baseEditor/propertyEditors/stringEditor/StringEditor\"\n        }\n    });\n    oEditor.attachJsonChange(function(oEvent) {\n        var oJson = oEvent.getParameter(\"json\");\n        // live change\n    })\n    oEditor.placeAt(\"content\");\n})\n<\/pre>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.BaseEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"setJson":{"!description":"Sets a new value for property {@link #getJson json}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oJson: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oJson":"type: object, description: New value for property <code>json<\/code>"}},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"firePropertyEditorsReady":{"!description":"Fires event {@link #event:propertyEditorsReady propertyEditorsReady} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachJsonChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:jsonChange jsonChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"}},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.\n\nDefault value is <code>{\"i18n\":[\"sap/ui/integration/designtime/baseEditor/i18n/i18n.properties\"]}<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.BaseEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/integration/designtime/baseEditor/BaseEditor","!helpDescription":"<h3>Overview<\/h3> Configurable JSON editor <h4>Example<\/h4> <pre>\nsap.ui.require([\"sap/ui/integration/designtime/baseEditor/BaseEditor\"], function (Editor) {\n    var oJson = {\n        root: {\n            context: {\n                id: \"404\",\n                name: \"Kate\",\n                role: \"End User\"\n            },\n            foo: {\n                bar: true\n            }\n        }\n    };\n    var oEditor = new Editor();\n    oEditor.setJson(oJson);\n    oEditor.setConfig({\n        \"context\": \"root/context\",\n        \"properties\" : {\n            \"name\": {\n                \"label\": \"Name\",\n                \"path\": \"name\",\n                \"type\": \"string\"\n            },\n            \"role\": {\n                \"label\": \"Role\",\n                \"path\": \"role\",\n                \"type\": \"enum\",\n                \"enum\": [\"Developer\", \"Key User\", \"End User\"]\n            },\n            \"department\": {\n                \"label\": \"Department\",\n                \"path\": \"department\",\n                \"type\": \"enum\",\n                \"enum\": [\"Sales\", \"HR\", \"Development\"],\n                \"visible\": \"{= ${context>/role} === 'Key User'}\"\n            }\n        },\n        \"propertyEditors\": {\n            \"enum\" : \"sap/ui/integration/designtime/baseEditor/propertyEditors/enumStringEditor/EnumStringEditor\",\n            \"string\" : \"sap/ui/integration/designtime/baseEditor/propertyEditors/stringEditor/StringEditor\"\n        }\n    });\n    oEditor.attachJsonChange(function(oEvent) {\n        var oJson = oEvent.getParameter(\"json\");\n        // live change\n    })\n    oEditor.placeAt(\"content\");\n})\n<\/pre>","detachPropertyEditorsReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyEditorsReady propertyEditorsReady} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireJsonChange":{"!description":"Fires event {@link #event:jsonChange jsonChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"}},"detachJsonChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:jsonChange jsonChange} event of this <code>sap.ui.integration.designtime.baseEditor.BaseEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.BaseEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link M.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/parametersEditor/ParametersEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor","!category":"class"},"sap.ui.integration.CardActionType":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","Navigation":{"!description":"Used for navigation actions","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","Submit":{"!description":"Used for submit actions","!category":"enum","!type":"String"},"!category":"static class","Custom":{"!description":"Used for custom actions","!category":"enum","!type":"String"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/stringEditor/StringEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"ComplexMapEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.Extension":{"!description":"Provides additional functions and services to an integration card.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.Extension.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setActions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sActions: Array) -> sap.ui.integration.Extension","parameters":{"sActions":"type: array, description: New value for property <code>actions<\/code>"}},"!proto":"sap.ui.base.ManagedObject","fireAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","getActions":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn() -> Array"},"detachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.Extension","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachAction":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.Extension","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.Extension<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Extension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new <code>Extension<\/code>.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getActions actions} : array<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:action action} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/integration/Extension","!helpDescription":"Provides additional functions and services to an integration card."},"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor.EnumStringEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/enumStringEditor/EnumStringEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor"},"sap.ui.integration.designtime.baseEditor.PropertyEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.PropertyEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.","!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getValue value} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor#constructor sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor}\ncan be used as well.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/arrayEditor/ArrayEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor","parameters":{"oValue":"type: any, description: New value for property <code>value<\/code>"}},"!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link N.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link N.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor.IntegerEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/integerEditor/IntegerEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","ParametersEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor.ParametersEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/dateEditor/DateEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"IconEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor_obj"},"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/numberEditor/NumberEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","StringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor":{"DateTimeEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor":{"setContent":{"!description":"Sets the aggregated {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to set"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"!proto":"sap.ui.core.Control","!category":"class","setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oConfig: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oConfig":"type: object, description: New value for property <code>config<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getRenderLabel renderLabel} : boolean (default: true)<\/li>\n<li>{@link #getValue value} : any<\/li>\n<li>{@link #getConfig config} : object<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:beforeValueChange beforeValueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:valueChange valueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setRenderLabel":{"!description":"Sets a new value for property {@link #getRenderLabel renderLabel}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bRenderLabel: Boolean) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"bRenderLabel":"type: boolean, description: New value for property <code>renderLabel<\/code>"}},"attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"destroyContent":{"!description":"Destroys the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor"},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachBeforeValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachBeforeValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.","!static":false,"!category":"function","!type":"fn() -> Object"},"fireBeforeValueChange":{"!description":"Fires event {@link #event:beforeValueChange beforeValueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/BasePropertyEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getRenderLabel":{"!description":"Gets current value of property {@link #getRenderLabel renderLabel}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"attachValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireValueChange":{"!description":"Fires event {@link #event:valueChange valueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.integration.designtime.baseEditor.PropertyEditor":{"getEditor":{"!description":"ID of the element which is the current target of the association {@link #getEditor editor}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"},"fireEditorChange":{"!description":"Fires event {@link #event:editorChange editorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"firePropertyEditorChange":{"!description":"Fires event {@link #event:propertyEditorChange propertyEditorChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachReady":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.core.Control","!category":"class","detachEditorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setConfig":{"!description":"Sets a new value for property {@link #getConfig config}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oConfig: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oConfig":"type: object, description: New value for property <code>config<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getPropertyName propertyName} : string<\/li>\n<li>{@link #getRenderLabel renderLabel} : boolean<\/li>\n<li>{@link #getValue value} : any<\/li>\n<li>{@link #getConfig config} : object<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getEditor editor} : (sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:editorChange editorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyEditorChange propertyEditorChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:configChange configChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:propertyNameChange propertyNameChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:ready ready} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeValueChange beforeValueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:valueChange valueChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setRenderLabel":{"!description":"Sets a new value for property {@link #getRenderLabel renderLabel}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bRenderLabel: Boolean) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"bRenderLabel":"type: boolean, description: New value for property <code>renderLabel<\/code>"}},"attachConfigChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachEditorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:editorChange editorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachPropertyEditorChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyEditorChange propertyEditorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"detachValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getPropertyName":{"!description":"Gets current value of property {@link #getPropertyName propertyName}.","!static":false,"!category":"function","!type":"fn() -> String"},"attachPropertyEditorChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyEditorChange propertyEditorChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"firePropertyNameChange":{"!description":"Fires event {@link #event:propertyNameChange propertyNameChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!description":"Renders one of the {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on a specified <code>propertyName<\/code> or custom <code>config<\/code>.","attachPropertyNameChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyNameChange propertyNameChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.PropertyEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachBeforeValueChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachReady":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ready ready} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireConfigChange":{"!description":"Fires event {@link #event:configChange configChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.PropertyEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachBeforeValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeValueChange beforeValueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachPropertyNameChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyNameChange propertyNameChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.","!static":false,"!category":"function","!type":"fn() -> Object"},"fireBeforeValueChange":{"!description":"Fires event {@link #event:beforeValueChange beforeValueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setPropertyName":{"!description":"Sets a new value for property {@link #getPropertyName propertyName}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"sPropertyName":"type: string, description: New value for property <code>propertyName<\/code>"}},"!module":"sap/ui/integration/designtime/baseEditor/PropertyEditor","!helpDescription":"Renders one of the {@link sap.ui.integration.designtime.baseEditor.propertyEditor property editors} based on a specified <code>propertyName<\/code> or custom <code>config<\/code>.","detachConfigChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:configChange configChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getRenderLabel":{"!description":"Gets current value of property {@link #getRenderLabel renderLabel}.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setEditor":{"!description":"Sets the associated {@link #getEditor editor}.","!static":false,"!category":"function","!type":"fn(oEditor: sap.ui.core.ID | sap.ui.integration.designtime.baseEditor.BaseEditor) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oEditor":"type: sap.ui.core.ID|sap.ui.integration.designtime.baseEditor.BaseEditor, description: ID of an element which becomes the new target of this editor association; alternatively, an element instance may be given"}},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oValue":"type: any, description: New value for property <code>value<\/code>"}},"attachValueChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:valueChange valueChange} event of this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.integration.designtime.baseEditor.PropertyEditor<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireReady":{"!description":"Fires event {@link #event:ready ready} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireValueChange":{"!description":"Fires event {@link #event:valueChange valueChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.integration.designtime.baseEditor.PropertyEditor","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","MapEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor.MapEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/booleanEditor/BooleanEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor":{"complexMapEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor","parametersEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor.parametersEditor","!category":"namespace"},"sap":{"sap":"sap","ui":"sap.ui","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","NumberEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor.NumberEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.widgets":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"manifest":{"!description":"The URL of the manifest or an object.","!category":"enum","!type":"Object"},"!category":"namespace","Card":"sap.ui.integration.widgets.Card_obj","dataMode":{"!description":"Defines the state of the <code>Card<\/code>. When set to <code>Inactive<\/code>, the <code>Card<\/code> doesn't make requests.","!category":"enum","!type":"sap.ui.integration.CardDataMode"},"baseUrl":{"!description":"Defines the base URL of the Card Manifest. It should be used when manifest property is an object instead of a URL.","!category":"enum","!type":"sap.ui.core.URI"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"manifestChanges":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"[Object]"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"width":{"!description":"Defines the width of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"},"parameters":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!category":"enum","!type":"Object"},"height":{"!description":"Defines the height of the card.","!category":"enum","!type":"sap.ui.core.CSSSize"}},"sap.ui":{"integration":"sap.ui.integration","!category":"namespace"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"DateEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.PropertyEditorFactory":{"!description":"Factory for the creation of <code>BasePropertyEditor<\/code> instances.","!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/PropertyEditorFactory","deregisterType":{"!description":"Deregisters a type and removes the loaded property editor class.","!static":"true","!category":"function","!type":"fn(sType: String)"},"!helpDescription":"Factory for the creation of <code>BasePropertyEditor<\/code> instances.","registerTypes":{"!description":"Registers classes for the given editor types. If an editor type is already registered, it will be skipped and must first be deregistered using the <code>PropertyEditorFactory.deregisterType<\/code> function.","!static":"true","!category":"function","!type":"fn(mTypes: map)"},"create":{"!description":"Creates a new <code>BasePropertyEditor<\/code> instance of the given editor type.","!static":"true","!category":"function","!type":"fn(sPropertyType: String) -> Promise"},"!category":"namespace","deregisterAllTypes":{"!description":"Deregisters all editor types and removes the loaded classes.","!static":"true","!category":"function","!type":"fn()"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor":{"ArrayEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor.ArrayEditor_obj","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.Host_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.Host with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.integration.Extension.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.Host"},"sap.ui.integration.designtime.baseEditor.BaseEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.BaseEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link C.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.BaseEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor.IconEditor"},"sap.ui.integration.designtime.baseEditor.propertyEditor":{"PropertyEditorFactory":"sap.ui.integration.designtime.baseEditor.propertyEditor.PropertyEditorFactory","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"mapEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.mapEditor","!category":"namespace","arrayEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.arrayEditor","integerEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.integerEditor","booleanEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor","enumStringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.enumStringEditor","iconEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.iconEditor","jsonEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor","listEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"dateEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor","numberEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.numberEditor","stringEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"dateTimeEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"},"BasePropertyEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor_obj"},"sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link D.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.dateTimeEditor.DateTimeEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/dateTimeEditor/DateTimeEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.dateEditor.DateEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.listEditor.ListEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/listEditor/ListEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.stringEditor.StringEditor"},"sap.ui.integration.CardDataMode":{"!description":"Possible data modes for <code>{@link sap.ui.integration.widgets.Card}<\/code>.","Active":{"!description":"When in this mode, the card can make requests.","!category":"enum","!type":"String"},"!module":"sap/ui/integration/library","Inactive":{"!description":"When in this mode, the card cannot make requests.","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.integration.designtime.baseEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabels":{"!description":"renderLabels : Boolean","!category":"enum","!type":"Boolean"},"!category":"namespace","tags":{"!description":"tags : String","!category":"enum","!type":"String"},"BaseEditor":"sap.ui.integration.designtime.baseEditor.BaseEditor_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"propertyName":{"!description":"propertyName : String","!category":"enum","!type":"String"},"propertyEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"PropertyEditor":"sap.ui.integration.designtime.baseEditor.PropertyEditor_obj","json":{"!description":"json : Object","!category":"enum","!type":"Object"},"PropertyEditors":"sap.ui.integration.designtime.baseEditor.PropertyEditors_obj","config":{"!description":"config : Array","!category":"enum","!type":"Array"},"value":{"!description":"value : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor"},"sap.ui.integration.designtime.cardEditor":{"propertyEditor":"sap.ui.integration.designtime.cardEditor.propertyEditor","!category":"namespace"},"sap.ui.integration.widgets.Card_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.integration.widgets.Card with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.integration.widgets.Card"},"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","JsonEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor_obj","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"BooleanEditor":"sap.ui.integration.designtime.baseEditor.propertyEditor.booleanEditor.BooleanEditor_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"renderLabel":{"!description":"renderLabel : Boolean","!category":"enum","!type":"Boolean"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"!category":"namespace","value":{"!description":"value : Object","!category":"enum","!type":"Object"},"config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.baseEditor.propertyEditor.jsonEditor.JsonEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/baseEditor/propertyEditor/jsonEditor/JsonEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"},"sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link B.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.integration.designtime.cardEditor.propertyEditor.complexMapEditor.ComplexMapEditor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/integration/designtime/cardEditor/propertyEditor/complexMapEditor/ComplexMapEditor","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.integration.designtime.baseEditor.propertyEditor.BasePropertyEditor","!category":"class"}}}