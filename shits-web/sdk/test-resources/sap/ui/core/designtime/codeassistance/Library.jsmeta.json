{"!name":"sap.ui.core","!version":"1.20.0","!define":{"sap.ui.base.ObjectPool_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.base.ObjectPool with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oObjectClass: fn())","prototype":"sap.ui.base.ObjectPool"},"sap.ui.test.matchers.PropertyStrictEquals":{"!description":"Checks if a property has the exact same value.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    propertyStrictEquals: {\n        name: \"string\",\n        value: \"any\"\n    }\n}\n<\/code><\/pre>","setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nThe Name of the property that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.test.matchers.PropertyStrictEquals","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.PropertyStrictEquals.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getName":{"!description":"Gets current value of property {@link #getName name}.\n\nThe Name of the property that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.test.matchers.Matcher","!category":"class","isMatching":{"!description":"Checks if the control has a property that matches the value","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}},"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.PropertyStrictEquals with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nThe value of the property that is used for matching.","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getValue value} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","!module":"sap/ui/test/matchers/PropertyStrictEquals","!helpDescription":"Checks if a property has the exact same value.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    propertyStrictEquals: {\n        name: \"string\",\n        value: \"any\"\n    }\n}\n<\/code><\/pre>","setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nThe value of the property that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> sap.ui.test.matchers.PropertyStrictEquals","parameters":{"oValue":"type: any, description: New value for property <code>value<\/code>"}}},"sap.ui.model.PropertyBinding":{"!description":"The PropertyBinding is used to access single data values in the data model.","getBindingMode":{"!description":"Returns the binding mode","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.BindingMode"},"resume":{"!description":"Resumes the binding update. Change events will be fired again.\n\nWhen the binding is resumed and the control value was changed in the meantime, the control value will be set to the current value from the model and a change event will be fired.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.PropertyBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setRawValue":{"!description":"Sets the value for this binding with the raw model value. This setter will perform type validation, in case a type is defined on the binding.","!static":false,"!category":"function","!type":"fn(vValue: Object)","parameters":{"vValue":"type: any, description: the value to set for this binding"}},"getInternalValue":{"!description":"Returns the related JavaScript primitive value of the bound target which is parsed by the {@link sap.ui.model.SimpleType#getModelFormat model format} of this binding's type. If this binding doesn't have a type, the original value which is stored in the model is returned.\n\nThis method will be used when targetType if set to \"internal\" or it's included in a {@link sap.ui.model.CompositeBinding CompositeBinding} and the CompositeBinding needs to have the related JavaScript primitive values for its type or formatter.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.model.Binding","getRawValue":{"!description":"Returns the raw model value, as it exists in the model dataset\n\nThis method will be used when targetType of a binding is set to \"raw\" or it's included in a {@link sap.ui.model.CompositeBinding CompositeBinding} and the CompositeBinding needs to have the related JavaScript primitive values for its type or formatter.","!static":false,"!category":"function","!type":"fn() -> Object"},"!category":"class","setType":{"!description":"Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly. The internal type is the property type of the element which the value is formatted to.","!static":false,"!category":"function","!type":"fn(oType: sap.ui.model.Type, sInternalType: String)","parameters":{"sInternalType":"type: string, description: the internal type of the element property which this binding is bound against.","oType":"type: sap.ui.model.Type, description: the type for the binding"}},"getExternalValue":{"!description":"Returns the current external value of the bound target which is formatted via a type or formatter function.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setExternalValue":{"!description":"Sets the value for this binding. The value is parsed and validated against its type and then set to the binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.","!static":false,"!category":"function","!type":"fn(vValue: Object) -> undefined | Promise","parameters":{"vValue":"type: any, description: the value to set for this binding"}},"getValue":{"!description":"Returns the current value of the bound target","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Constructor for PropertyBinding","setFormatter":{"!description":"Sets the optional formatter function for the binding.","!static":false,"!category":"function","!type":"fn(fnFormatter: fn())","parameters":{"fnFormatter":"type: function, description: the formatter function for the binding"}},"!module":"sap/ui/model/PropertyBinding","!helpDescription":"The PropertyBinding is used to access single data values in the data model.","getType":{"!description":"Returns the type if any for the binding.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Type"},"setValue":{"!description":"Sets the value for this binding. A model implementation should check if the current default binding mode permits setting the binding value and if so set the new value also in the model.","!static":false,"!category":"function","!type":"fn(vValue: Object)","parameters":{"vValue":"type: any, description: the value to set for this binding"}},"getFormatter":{"!description":"Returns the formatter function","!static":false,"!category":"function","!type":"fn() -> fn()"},"setInternalValue":{"!description":"Sets the value for this binding with the related JavaScript primitive type. The value is formatted with the {@link sap.ui.model.SimpleType#getModelFormat model format} and validated against its type and then set to the model.","!static":false,"!category":"function","!type":"fn(vValue: Object)","parameters":{"vValue":"type: any, description: the value to set for this binding"}},"setBindingMode":{"!description":"Sets the binding mode","!static":false,"!category":"function","!type":"fn(sBindingMode: sap.ui.model.BindingMode)","parameters":{"sBindingMode":"type: sap.ui.model.BindingMode, description: the binding mode"}}},"sap.ui.core.util.serializer":{"delegate":"sap.ui.core.util.serializer.delegate","ViewSerializer":"sap.ui.core.util.serializer.ViewSerializer_obj","XMLViewSerializer":"sap.ui.core.util.serializer.XMLViewSerializer_obj","!category":"namespace","HTMLViewSerializer":"sap.ui.core.util.serializer.HTMLViewSerializer_obj","Serializer":"sap.ui.core.util.serializer.Serializer_obj"},"sap.ui.model.odata.type.Guid":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Guid<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Guid with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Guid.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.Guid<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","sValue":"type: string, description: the value to be formatted"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Guid","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Guid<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the given constraints.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value to a GUID.","!static":false,"!category":"function","!type":"fn(sValue: String, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>sValue<\/code>); must be \"string\", or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","sValue":"type: string, description: the value to be parsed, maps <code>\"\"<\/code> to <code>null<\/code>"}}},"jQuery.sap.storage.Type":{"!description":"Enumeration of the storage types supported by {@link jQuery.sap.storage.Storage}","!module":"jquery.sap.storage","session":{"!description":"Indicates usage of the browser's sessionStorage feature","!category":"enum","!type":"String"},"!category":"static class","local":{"!description":"Indicates usage of the browser's localStorage feature","!category":"enum","!type":"String"}},"sap.ui.core.UIComponent_obj":{"extend":{"!description":"Creates a new subclass of class <code>sap.ui.core.UIComponent<\/code> with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>. <code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object. If not given, it defaults to an internal subclass of <code>sap.ui.core.ComponentMetadata<\/code>.","sClassName":"type: string, description: Qualified name of the newly created class"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.UIComponent"},"sap.ui.core.mvc.HTMLView_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.HTMLView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.mvc.HTMLView"},"sap.ui.model.odata.v4.ODataListBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.odata.v4.ODataListBinding"},"sap.ui.core.Configuration.AnimationMode":{"!description":"Enumerable list with available animation modes.\n\nThis enumerable is used to validate the animation mode. Animation modes allow to specify different animation scenarios or levels. The implementation of the Control (JavaScript or CSS) has to be done differently for each animation mode.","minimal":{"!description":"<code>minimal<\/code> includes animations of fundamental functionality.","!category":"enum","!type":"String"},"!module":"sap/ui/core/Configuration","!category":"static class","none":{"!description":"<code>none<\/code> deactivates the animation completely.","!category":"enum","!type":"String"},"basic":{"!description":"<code>basic<\/code> can be used for a reduced, more light-weight set of animations.","!category":"enum","!type":"String"},"full":{"!description":"<code>full<\/code> represents a mode with unrestricted animation capabilities.","!category":"enum","!type":"String"}},"sap.ui.model.odata.type.String_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.String with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.String"},"sap.ui.core.HTML_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.HTML"},"jQuery.sap.storage.Storage":{"!description":"A Storage API for JavaScript.\n\nProvides methods to store data on the client using Web Storage API support by the browser. The data received by this API must be already serialized, in string format. Similarly, the API returns the retrieved data in serialized string format, so it is the responsibility of the caller to de-serialize it, if applicable.\n\nAttention: The Web Storage API stores the data on the client. Therefore do not use this API for confidential information.\n\nOne can get access to the 'default' storage by using {@link jQuery.sap.storage} directly or alternatively via factory functionality available as <code>jQuery.sap.storage(jQuery.sap.storage.Type.session)<\/code> returning an object implementing this interface.\n\nA typical intended usage of this API is the storage of a string representing the state of a control. In such usage, the data is stored in the browser session, and the methods to be used are {@link #put} and {@link #get}. The method {@link #remove} can be used to delete the previously saved state.\n\nIn sake of completeness, the method {@link #clear} is available. However, it should be called only in very particular situations, when a global erasing of data is required. If only keys with certain prefix should be deleted the method {@link #removeAll} should be used.","!module":"jquery.sap.storage","!category":"static class"},"sap.ui.core.routing.HashChangerBase_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.HashChangerBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.routing.HashChangerBase"},"sap.ui.model.analytics.odata4analytics.Parameter":{"!description":"Representation of a property annotated with sap:parameter.","getURIToValueEntitySet":{"!description":"Get the URI to locate the entity set holding the value set, if it is available.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String)","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"getName":{"!description":"Get the name of the parameter","!static":false,"!category":"function","!type":"fn() -> String"},"getProperty":{"!description":"Get property","!static":false,"!category":"function","!type":"fn() -> Object"},"isValueSetAvailable":{"!description":"Get indicator if a set of values is available for this parameter. Typically, this is true for parameters with a finite set of known values such as products, business partners in different roles, organization units, and false for integer or date parameters","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.base.Object","getPeerIntervalBoundaryParameter":{"!description":"Get property for the parameter representing the peer boundary of the same interval","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.Parameter"},"!category":"class","isIntervalBoundary":{"!description":"Get indicator if the parameter represents an interval boundary","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isOptional":{"!description":"Get indicator whether or not the parameter is optional","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isLowerIntervalBoundary":{"!description":"Get indicator if the parameter represents the lower boundary of an interval","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Create a representation of a single parameter contained in a parameterization. Do not create your own instances.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of a property annotated with sap:parameter.","getTextProperty":{"!description":"Get text property related to this parameter","!static":false,"!category":"function","!type":"fn() -> Object"},"getContainingParameterization":{"!description":"Get parameterization containing this parameter","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.Parameterization"},"getLabelText":{"!description":"Get label","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.test.OpaPlugin":{"!description":"A Plugin to search UI5 controls.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.OpaPlugin.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getControlByGlobalId":{"!description":"Find a control by its global ID","!static":false,"!category":"function","!type":"fn(oOptions: undefined) -> [sap.ui.core.Element | sap.ui.core.Element]","parameters":{"oOptions":"type: undefined, description: must contain ID property of type string, regex or array of strings; optionally it can contain a controlType property."}},"!proto":"sap.ui.base.Object","getMatchingControls":{"!description":"Find a control matching the provided options autowait and Interactable matcher will be enforced if neccessary","!static":false,"!category":"function","!type":"fn(oOptions?: Object) -> [sap.ui.core.Element | sap.ui.core.Element]","parameters":{"oOptions":"type: object, description: a map of options used to describe the control you are looking for."}},"getAllControls":{"!description":"Gets all the controls or elements of a certain type that are currently instantiated. If the type is omitted, all controls and elements are returned.","!static":false,"!category":"function","!type":"fn(fnConstructorType?: fn(), sControlType?: String) -> Array","parameters":{"fnConstructorType":"type: function, description: the control type, e.g: sap.m.CheckBox","sControlType":"type: string, description: optional control type name, e.g: \"sap.m.CheckBox\""}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.test.OpaPlugin with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getControlInView":{"!description":"Gets a control inside the view (same as calling oView.byId) Returns all matching controls inside a view (also nested views and their children).<br/> The view can be specified by viewName, viewNamespace, viewId, and any combination of three. eg : { id : \"foo\" } will search globally for a control with the ID foo<br/> eg : { id : \"foo\" , viewName : \"bar\" } will search for a control with the ID foo inside the view with the name bar<br/> eg : { viewName : \"bar\" } will return all the controls inside the view with the name bar<br/> eg : { viewName : \"bar\", controlType : sap.m.Button } will return all the Buttons inside a view with the name bar<br/> eg : { viewName : \"bar\", viewNamespace : \"baz.\" } will return all the Controls in the view with the name baz.bar<br/> eg : { viewId : \"viewBar\" } will return all the controls inside the view with the ID viewBar<br/>","!static":false,"!category":"function","!type":"fn(oOptions: Object) -> [sap.ui.core.Element | sap.ui.core.Element]","parameters":{"oOptions":"type: object, description: can contain a viewName, viewNamespace, viewId, fragmentId, id and controlType properties. oOptions.id can be string, array or regular expression"}},"!module":"sap/ui/test/OpaPlugin","!helpDescription":"A Plugin to search UI5 controls.","getControlConstructor":{"!description":"Gets the constructor function of a certain controlType","!static":false,"!category":"function","!type":"fn(sControlType: String) -> null | fn()","parameters":{"sControlType":"type: string, description: the name of the type eg: \"sap.m.Button\""}},"getView":{"!description":"Returns the view with a specific name. The result should be a unique view. If there are multiple visible views with that name, none will be returned.","!static":false,"!category":"function","!type":"fn(sViewName: String) -> sap.ui.core.mvc.View","parameters":{"sViewName":"type: string, description: the name of the view"}}},"sap.ui.core.TextAlign":{"!description":"Configuration options for text alignments.","Center":{"!description":"Centered text alignment.","!category":"enum","!type":"String"},"Left":{"!description":"Hard option for left alignment.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Begin":{"!description":"Locale-specific positioning at the beginning of the line.","!category":"enum","!type":"String"},"Right":{"!description":"Hard option for right alignment.","!category":"enum","!type":"String"},"!category":"static class","End":{"!description":"Locale-specific positioning at the end of the line.","!category":"enum","!type":"String"},"Initial":{"!description":"Sets no text align, so the browser default is used.","!category":"enum","!type":"String"}},"module:sap/ui/core/InvisibleRenderer":{"!description":"Provides the default renderer for the controls that have set their <code>visible<\/code> property to <code>false<\/code>.","module:sap/ui/core/InvisibleRenderer":"module:sap/ui/core/InvisibleRenderer","!module":"sap/ui/core/InvisibleRenderer","!helpDescription":"Provides the default renderer for the controls that have set their <code>visible<\/code> property to <code>false<\/code>.","!category":"namespace","createInvisiblePlaceholderId":{"!description":"Creates the ID to be used for the invisible placeholder DOM element. This method can be used to get direct access to the placeholder DOM element.","!category":"function","!type":"fn(oElement: sap.ui.core.Element) -> String"},"render":{"!description":"Renders an invisible placeholder to identify the location of the invisible control within the DOM tree.\n\nThe standard implementation renders an invisible &lt;span&gt; element for controls with <code>visible:false<\/code> to improve re-rendering performance. Due to the fault tolerance of the HTML5 standard, such &lt;span&gt; elements are accepted in many scenarios and won't appear in the render tree of the browser. However, in some cases, controls might need to write a different element if &lt;span&gt; is not an allowed element (for example, within the &lt;tr&gt; or &lt;li&gt; group). In this case, the caller can require this module and use the third parameter to define the HTML tag.","!category":"function","!type":"fn(oRm?: sap.ui.core.RenderManager, oElement?: sap.ui.core.Element, sTagName?: String)"},"PlaceholderPrefix":{"!description":"The prefix of the invisible placeholder.","!category":"enum","!type":"String"}},"sap.ui.core.tmpl.DOMElement":{"!proto":"sap.ui.core.Control","!category":"class","!constructorDescription":"Constructor for a new tmpl/DOMElement.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string<\/li>\n<li>{@link #getTag tag} : string (default: span)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getAttributes attributes} : sap.ui.core.tmpl.DOMAttribute[] (default)<\/li>\n<li>{@link #getElements elements} : sap.ui.core.tmpl.DOMElement[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","indexOfAttribute":{"!description":"Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute<\/code> in the aggregation {@link #getAttributes attributes}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oAttribute: sap.ui.core.tmpl.DOMAttribute) -> Number","parameters":{"oAttribute":"type: sap.ui.core.tmpl.DOMAttribute, description: The attribute whose index is looked for"}},"setTag":{"!description":"Sets a new value for property {@link #getTag tag}.\n\nThe HTML-tag of the DOM element which contains the text\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>span<\/code>.","!static":false,"!category":"function","!type":"fn(sTag: String) -> sap.ui.core.tmpl.DOMElement","parameters":{"sTag":"type: string, description: New value for property <code>tag<\/code>"}},"attr":{"!description":"Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only. When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute. In this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.","!static":false,"!category":"function","!type":"fn(sName: String, sValue: String) -> Object","parameters":{"sName":"type: string, description: The name of the DOM attribute.","sValue":"type: string, description: The value of the DOM attribute. If the value is undefined the DOM attribute will be removed."}},"removeAttribute":{"!description":"Removes a attribute from the aggregation {@link #getAttributes attributes}.","!static":false,"!category":"function","!type":"fn(vAttribute: Number | String | sap.ui.core.tmpl.DOMAttribute) -> sap.ui.core.tmpl.DOMAttribute","parameters":{"vAttribute":"type: int|string|sap.ui.core.tmpl.DOMAttribute, description: The attribute to remove or its index or id"}},"removeAllElements":{"!description":"Removes all the controls from the aggregation {@link #getElements elements}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.tmpl.DOMElement]"},"destroyAttributes":{"!description":"Destroys all the attributes in the aggregation {@link #getAttributes attributes}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.tmpl.DOMElement"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.","removeAllAttributes":{"!description":"Removes all the controls from the aggregation {@link #getAttributes attributes}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.tmpl.DOMAttribute]"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.tmpl.DOMElement.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getAttributes":{"!description":"Gets content of aggregation {@link #getAttributes attributes}.\n\nDOM attributes which are rendered as part of the DOM element and bindable","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.tmpl.DOMAttribute]"},"destroyElements":{"!description":"Destroys all the elements in the aggregation {@link #getElements elements}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.tmpl.DOMElement"},"insertElement":{"!description":"Inserts a element into the aggregation {@link #getElements elements}.","!static":false,"!category":"function","!type":"fn(oElement: sap.ui.core.tmpl.DOMElement, iIndex: Number) -> sap.ui.core.tmpl.DOMElement","parameters":{"oElement":"type: sap.ui.core.tmpl.DOMElement, description: The element to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the element should be inserted at; for a negative value of <code>iIndex<\/code>, the element is inserted at position 0; for a value greater than the current size of the aggregation, the element is inserted at the last position"}},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text content of the DOM element","!static":false,"!category":"function","!type":"fn() -> String"},"removeAttr":{"!description":"Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.tmpl.DOMElement","parameters":{"sName":"type: string, description: The name of the DOM attribute."}},"getTag":{"!description":"Gets current value of property {@link #getTag tag}.\n\nThe HTML-tag of the DOM element which contains the text\n\nDefault value is <code>span<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"indexOfElement":{"!description":"Checks for the provided <code>sap.ui.core.tmpl.DOMElement<\/code> in the aggregation {@link #getElements elements}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oElement: sap.ui.core.tmpl.DOMElement) -> Number","parameters":{"oElement":"type: sap.ui.core.tmpl.DOMElement, description: The element whose index is looked for"}},"!module":"sap/ui/core/tmpl/DOMElement","addAttribute":{"!description":"Adds some attribute to the aggregation {@link #getAttributes attributes}.","!static":false,"!category":"function","!type":"fn(oAttribute: sap.ui.core.tmpl.DOMAttribute) -> sap.ui.core.tmpl.DOMElement","parameters":{"oAttribute":"type: sap.ui.core.tmpl.DOMAttribute, description: The attribute to add; if empty, nothing is inserted"}},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.","insertAttribute":{"!description":"Inserts a attribute into the aggregation {@link #getAttributes attributes}.","!static":false,"!category":"function","!type":"fn(oAttribute: sap.ui.core.tmpl.DOMAttribute, iIndex: Number) -> sap.ui.core.tmpl.DOMElement","parameters":{"oAttribute":"type: sap.ui.core.tmpl.DOMAttribute, description: The attribute to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the attribute should be inserted at; for a negative value of <code>iIndex<\/code>, the attribute is inserted at position 0; for a value greater than the current size of the aggregation, the attribute is inserted at the last position"}},"getElements":{"!description":"Gets content of aggregation {@link #getElements elements}.\n\nNested DOM elements to support nested bindable structures","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.tmpl.DOMElement]"},"addElement":{"!description":"Adds some element to the aggregation {@link #getElements elements}.","!static":false,"!category":"function","!type":"fn(oElement: sap.ui.core.tmpl.DOMElement) -> sap.ui.core.tmpl.DOMElement","parameters":{"oElement":"type: sap.ui.core.tmpl.DOMElement, description: The element to add; if empty, nothing is inserted"}},"removeElement":{"!description":"Removes a element from the aggregation {@link #getElements elements}.","!static":false,"!category":"function","!type":"fn(vElement: Number | String | sap.ui.core.tmpl.DOMElement) -> sap.ui.core.tmpl.DOMElement","parameters":{"vElement":"type: int|string|sap.ui.core.tmpl.DOMElement, description: The element to remove or its index or id"}},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text content of the DOM element\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.tmpl.DOMElement","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.base.Interface":{"!description":"A class whose instances act as a facade for other objects.\n\n<b>Note:<\/b> If a class returns a facade in its constructor, only the defined functions will be visible, no internals of the class can be accessed.","!constructorDescription":"Constructs a facade for the given object, containing only the named methods.\n\nFor each method named in <code>aMethods<\/code>, a wrapper function will be added to the facade.\nWhen called, the wrapper function calls the method with the same name in the original <code>oObject<\/code>,\npassing all its call parameters to it without modification. A return value of the original method will\nbe returned to the caller. Before returning it, values of type <code>sap.ui.base.Object<\/code> will be\nreplaced by their facades, calling {@link sap.ui.base.Object#getInterface getInterface} on them.\n\nIt is possible to create different facades exposing different sets of methods for the same object,\nbut as <code>getInterface<\/code> can only return one of those interfaces, the special handling of the\nreturn values doesn't support multiple facades per object.","!module":"sap/ui/base/Interface","!helpDescription":"A class whose instances act as a facade for other objects.\n\n<b>Note:<\/b> If a class returns a facade in its constructor, only the defined functions will be visible, no internals of the class can be accessed.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.format.FileSizeFormat":{"!description":"The FileSizeFormat is a static class for formatting and parsing numeric file size values according to a set of format options.\n\nSupports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance} For format options which are not specified default values according to the type and locale settings are used.\n\nSupported format options (additional to NumberFormat): <ul> <li>binaryFilesize: if true, base 2 is used: 1 Kibibyte = 1024 Byte, ... , otherwise base 10 is used: 1 Kilobyte = 1000 Byte (Default is false)<\/li> <\/ul>","extend":{"!description":"Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.format.FileSizeFormat.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for FileSizeFormat - must not be used: To get a FileSizeFormat instance, please use getInstance.","!module":"sap/ui/core/format/FileSizeFormat","!helpDescription":"The FileSizeFormat is a static class for formatting and parsing numeric file size values according to a set of format options.\n\nSupports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance} For format options which are not specified default values according to the type and locale settings are used.\n\nSupported format options (additional to NumberFormat): <ul> <li>binaryFilesize: if true, base 2 is used: 1 Kibibyte = 1024 Byte, ... , otherwise base 10 is used: 1 Kilobyte = 1000 Byte (Default is false)<\/li> <\/ul>","!proto":"sap.ui.base.Object","format":{"!description":"Format a filesize (in bytes) according to the given format options.","!static":false,"!category":"function","!type":"fn(oValue: Number | String) -> String","parameters":{"oValue":"type: number|string, description: the number (or hex string) to format"}},"!category":"class","getInstance":{"!description":"Get an instance of the FileSizeFormat, which can be used for formatting.\n\nIf no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.FileSizeFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: Object which defines the format options"}},"parse":{"!description":"Parse a string which is formatted according to the given format options.","!static":false,"!category":"function","!type":"fn(sValue: String) -> Number","parameters":{"sValue":"type: string, description: the string containing a formatted filesize value"}}},"sap.ui.core.postmessage":{"Bus":"sap.ui.core.postmessage.Bus_obj","!category":"namespace"},"module:sap/ui/performance/XHRInterceptor":{"!module":"sap/ui/performance/XHRInterceptor","module:sap/ui/performance/XHRInterceptor":"module:sap/ui/performance/XHRInterceptor","unregister":{"!description":"Unregister a registered function.","!category":"function","!type":"fn(sName: String, sXHRMethod: String) -> Boolean"},"!category":"namespace","register":{"!description":"Register a function callback which gets called as it would be an own method of XHR.","!category":"function","!type":"fn(sName: String, sXHRMethod: String, fnCallback: fn())"}},"jQuery.sap.Version":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/Version} instead<br>Represents a version consisting of major, minor, patch version and suffix, e.g. '1.2.7-SNAPSHOT'.","getPatch":{"!description":"Returns the patch (or micro) version part of this version.","!static":false,"!category":"function","!type":"fn() -> Number"},"!proto":"Object","getMajor":{"!description":"Returns the major version part of this version.","!static":false,"!category":"function","!type":"fn() -> Number"},"!category":"class","compareTo":{"!description":"Compares this version with a given one.\n\nThe version with which this version should be compared can be given as a <code>jQuery.sap.Version<\/code> instance, as a string (e.g. <code>v.compareto(\"1.4.5\")<\/code>). Or major, minor, patch and suffix values can be given as separate parameters (e.g. <code>v.compareTo(1, 4, 5)<\/code>) or in an array (e.g. <code>v.compareTo([1, 4, 5])<\/code>).","!static":false,"!category":"function","!type":"fn() -> Number"},"inRange":{"!description":"Checks whether this version is in the range of the given interval (start inclusive, end exclusive).\n\nThe boundaries against which this version should be checked can be given as <code>jQuery.sap.Version<\/code> instances (e.g. <code>v.inRange(v1, v2)<\/code>), as strings (e.g. <code>v.inRange(\"1.4\", \"2.7\")<\/code>) or as arrays (e.g. <code>v.inRange([1,4], [2,7])<\/code>).","!static":false,"!category":"function","!type":"fn(vMin: [String | Object], vMax: [String | Object]) -> Boolean","parameters":{"vMax":"type: string|any[]|jQuery.sap.Version, description: the end of the range (exclusive)","vMin":"type: string|any[]|jQuery.sap.Version, description: the start of the range (inclusive)"}},"getMinor":{"!description":"Returns the minor version part of this version.","!static":false,"!category":"function","!type":"fn() -> Number"},"getSuffix":{"!description":"Returns the version suffix of this version.","!static":false,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Returns a Version instance created from the given parameters.\n\nThis function can either be called as a constructor (using <code>new<\/code>) or as a normal function.\nIt always returns an immutable Version instance.\n\nThe parts of the version number (major, minor, patch, suffix) can be provided in several ways:\n<ul>\n<li>Version(\"1.2.3-SNAPSHOT\")    - as a dot-separated string. Any non-numerical char or a dot followed\n                                   by a non-numerical char starts the suffix portion. Any missing major,\n                                   minor or patch versions will be set to 0.<\/li>\n<li>Version(1,2,3,\"-SNAPSHOT\")   - as individual parameters. Major, minor and patch must be integer numbers\n                                   or empty, suffix must be a string not starting with digits.<\/li>\n<li>Version([1,2,3,\"-SNAPSHOT\"]) - as an array with the individual parts. The same type restrictions apply\n                                   as before.<\/li>\n<li>Version(otherVersion)        - as a Version instance (cast operation). Returns the given instance instead\n                                   of creating a new one.<\/li>\n<\/ul>\n\nTo keep the code size small, this implementation mainly validates the single string variant.\nAll other variants are only validated to some degree. It is the responsibility of the caller to\nprovide proper parts.","!module":"jquery.sap.global","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/Version} instead<br>Represents a version consisting of major, minor, patch version and suffix, e.g. '1.2.7-SNAPSHOT'.","toString":{"!description":"Returns a string representation of this version.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"}},"sap.ui.model.type.Date":{"!description":"This class represents date simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Date.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Date type.","!module":"sap/ui/model/type/Date","!helpDescription":"This class represents date simple types.","!proto":"sap.ui.model.SimpleType","!category":"class","getOutputPattern":{"!static":false,"!category":"function","!type":"fn()"}},"module:sap/ui/dom/jquery/Aria":{"!description":"This module provides the following API: <ul> <li>{@link jQuery#addAriaLabelledBy}<\/li> <li>{@link jQuery#removeAriaLabelledBy}<\/li> <li>{@link jQuery#addAriaDescribedBy}<\/li> <li>{@link jQuery#removeAriaDescribedBy}<\/li> <\/ul>","!module":"sap/ui/dom/jquery/Aria","!helpDescription":"This module provides the following API: <ul> <li>{@link jQuery#addAriaLabelledBy}<\/li> <li>{@link jQuery#removeAriaLabelledBy}<\/li> <li>{@link jQuery#addAriaDescribedBy}<\/li> <li>{@link jQuery#removeAriaDescribedBy}<\/li> <\/ul>","module:sap/ui/dom/jquery/Aria":"module:sap/ui/dom/jquery/Aria","!category":"namespace"},"sap.ui.model.odata":{"!description":"OData-based DataBinding Utility Class","ODataModel":"sap.ui.model.odata.ODataModel_obj","ODataTreeBindingFlat":{"!description":"Adapter for TreeBindings to add the ListBinding functionality and use the tree structure in list based controls.","!static":"true","!category":"function","!type":"fn()"},"AnnotationHelper":"sap.ui.model.odata.AnnotationHelper","ODataTreeBindingAdapter":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":"true","!category":"function","!type":"fn()"},"ODataMessageParser":"sap.ui.model.odata.ODataMessageParser_obj","!category":"namespace","ODataMetadata":"sap.ui.model.odata.ODataMetadata_obj","type":"sap.ui.model.odata.type","ODataPropertyBinding":"sap.ui.model.odata.ODataPropertyBinding_obj","ODataAnnotations":"sap.ui.model.odata.ODataAnnotations_obj","ODataMetaModel":"sap.ui.model.odata.ODataMetaModel_obj","CountMode":"sap.ui.model.odata.CountMode","!module":"sap/ui/model/odata/ODataUtils","Filter":"sap.ui.model.odata.Filter_obj","ODataContextBinding":"sap.ui.model.odata.ODataContextBinding_obj","!helpDescription":"OData-based DataBinding Utility Class","UpdateMethod":"sap.ui.model.odata.UpdateMethod","v2":"sap.ui.model.odata.v2","ODataListBinding":"sap.ui.model.odata.ODataListBinding_obj","OperationMode":"sap.ui.model.odata.OperationMode","ODataUtils":"sap.ui.model.odata.ODataUtils","v4":"sap.ui.model.odata.v4","MessageScope":"sap.ui.model.odata.MessageScope"},"sap.ui.core.AbsoluteCSSSize":{"!description":"A string type that represents non-relative CSS size values.\n\nThis is a subtype of the <code>'&lt;length&gt; type'<\/code> defined in the CSS specifications. Allowed values are only absolute CSS sizes like &quot;1px&quot; or &quot;2em&quot;. Percentage sizes like &quot;50%&quot; and the special values &quot;auto&quot; and &quot;inherit&quot; are NOT allowed. Mathematical expressions using the CSS3 <code>calc(<i>expression<\/i>)<\/code> operator are allowed as long as they do not use percentage sizes.\n\nNote that CSS might not allow all these values for every CSS property representing a size. So even if a value is accepted by <code>sap.ui.core.AbsoluteCSSSize<\/code>, it still might have no effect in a specific context. In other words: UI5 controls usually don't extend the range of allowed values in CSS.\n\n<b>Units<\/b>\n\nValid font-relative units are <code>em, ex<\/code> and <code>rem<\/code>. Supported absolute units are <code>cm, mm, in, pc, pt<\/code> and <code>px<\/code>. Other units are not supported.\n\n<b>Mathematical Expressions<\/b>\n\nExpressions inside the <code>calc()<\/code> operator are only roughly checked for validity. Not every value that this type accepts is a valid expression in the sense of the CSS spec. But vice versa, any expression that is valid according to the spec should be accepted by this type. The current implementation is based on the {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April 2015}.\n\nNoteworthy details: <ul> <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise<\/li> <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)<\/li> <li>semantic constraints like type restrictions are not checked<\/li> <\/ul>\n\nFuture versions of UI5 might check <code>calc()<\/code> expressions in more detail, so applications should not assume that a value, that is invalid according to the CSS spec but currently accepted by this type still will be accepted by future versions of this type.","!module":"sap/ui/core/library","!helpDescription":"A string type that represents non-relative CSS size values.\n\nThis is a subtype of the <code>'&lt;length&gt; type'<\/code> defined in the CSS specifications. Allowed values are only absolute CSS sizes like &quot;1px&quot; or &quot;2em&quot;. Percentage sizes like &quot;50%&quot; and the special values &quot;auto&quot; and &quot;inherit&quot; are NOT allowed. Mathematical expressions using the CSS3 <code>calc(<i>expression<\/i>)<\/code> operator are allowed as long as they do not use percentage sizes.\n\nNote that CSS might not allow all these values for every CSS property representing a size. So even if a value is accepted by <code>sap.ui.core.AbsoluteCSSSize<\/code>, it still might have no effect in a specific context. In other words: UI5 controls usually don't extend the range of allowed values in CSS.\n\n<b>Units<\/b>\n\nValid font-relative units are <code>em, ex<\/code> and <code>rem<\/code>. Supported absolute units are <code>cm, mm, in, pc, pt<\/code> and <code>px<\/code>. Other units are not supported.\n\n<b>Mathematical Expressions<\/b>\n\nExpressions inside the <code>calc()<\/code> operator are only roughly checked for validity. Not every value that this type accepts is a valid expression in the sense of the CSS spec. But vice versa, any expression that is valid according to the spec should be accepted by this type. The current implementation is based on the {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April 2015}.\n\nNoteworthy details: <ul> <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise<\/li> <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)<\/li> <li>semantic constraints like type restrictions are not checked<\/li> <\/ul>\n\nFuture versions of UI5 might check <code>calc()<\/code> expressions in more detail, so applications should not assume that a value, that is invalid according to the CSS spec but currently accepted by this type still will be accepted by future versions of this type.","!category":"namespace"},"sap.ui.core.mvc.JSONView":{"!description":"A View defined using JSON.","extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.JSONView.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new mvc/JSONView.","!module":"sap/ui/core/mvc/JSONView","!helpDescription":"A View defined using JSON.","!proto":"sap.ui.core.mvc.View","create":{"!description":"Creates a JSON view of the given configuration.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<sap.ui.core.mvc.JSONView>","parameters":{"oOptions":"type: object, description: An object containing the view configuration options."}},"!category":"class"},"sap.ui.model.analytics.odata4analytics.Dimension_obj":{"!type":"fn(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: Object)","prototype":"sap.ui.model.analytics.odata4analytics.Dimension"},"sap.ui.model.analytics.odata4analytics.QueryResult_obj":{"!type":"fn(oModel: sap.ui.model.analytics.odata4analytics.Model, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet: sap.ui.model.analytics.odata4analytics.EntitySet, oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization)","prototype":"sap.ui.model.analytics.odata4analytics.QueryResult"},"sap.ui.model.odata.ODataContextBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.odata.ODataContextBinding"},"sap.ui.core.IFormContent":{"!description":"Marker interface for controls that can be used as content of <code>sap.ui.layout.form.Form<\/code> or <code>sap.ui.layout.form.SimpleForm<\/code>.\n\nIf the control's width must not be adjusted by the <code>Form<\/code> control to meet the cell's width, the control must implement the <code>getFormDoNotAdjustWidth<\/code> function and return <code>true<\/code>.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.test.matchers.AggregationEmpty":{"!description":"Checks if an aggregation is empty.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    aggregationEmpty: {\n        name: \"string\"\n    }\n}\n<\/code>","extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationEmpty with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nThe name of the aggregation that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.test.matchers.AggregationEmpty","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.AggregationEmpty.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","getName":{"!description":"Gets current value of property {@link #getName name}.\n\nThe name of the aggregation that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/test/matchers/AggregationEmpty","!helpDescription":"Checks if an aggregation is empty.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    aggregationEmpty: {\n        name: \"string\"\n    }\n}\n<\/code>","!proto":"sap.ui.test.matchers.Matcher","!category":"class","isMatching":{"!description":"Checks if the control has an empty aggregation.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}}},"sap.ui.core.LocalBusyIndicator_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.LocalBusyIndicator with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.LocalBusyIndicator"},"module:sap/ui/model/FilterProcessor":{"!description":"Helper class for processing of filter objects","groupFilters":{"!description":"Groups filters according to their path and combines filters on the same path using \"OR\" and filters on different paths using \"AND\", all multi-filters contained are ANDed.","!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter]) -> sap.ui.model.Filter"},"!module":"sap/ui/model/FilterProcessor","!helpDescription":"Helper class for processing of filter objects","module:sap/ui/model/FilterProcessor":"module:sap/ui/model/FilterProcessor","!category":"namespace"},"sap.ui.core.routing.HashChanger":{"!description":"Class for manipulating and receiving changes of the browserhash with the hasher framework.\n\nFires a <code>hashChanged<\/code> event if the browser hash changes.","init":{"!description":"Will start listening to hashChanges with the parseHash function. This will also fire a hashchanged event with the initial hash.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.HashChanger.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getHash":{"!description":"Gets the current hash","!static":false,"!category":"function","!type":"fn() -> String"},"fireHashChanged":{"!description":"Fires the hashchanged event, may be extended to modify the hash before fireing the event","!static":false,"!category":"function","!type":"fn(sNewHash: String, sOldHash: String)","parameters":{"sOldHash":"type: string, description: the previous hash","sNewHash":"type: string, description: the new hash of the browser"}},"!proto":"sap.ui.base.EventProvider","destroy":{"!description":"Cleans the event registration","!static":false,"!category":"function","!type":"fn()"},"!category":"class","replaceHashChanger":{"!description":"Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the new one","!static":true,"!category":"function","!type":"fn(oHashChanger: sap.ui.core.routing.HashChanger)","parameters":{"oHashChanger":"type: sap.ui.core.routing.HashChanger, description: the new instance for the global singleton"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.HashChanger with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/core/routing/HashChanger","!helpDescription":"Class for manipulating and receiving changes of the browserhash with the hasher framework.\n\nFires a <code>hashChanged<\/code> event if the browser hash changes.","getRelevantEventsInfo":{"!description":"Defines the events and its parameters which should be used for tracking the hash changes","!static":false,"!category":"function","!type":"fn() -> [Object]"},"setHash":{"!description":"Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the {@link #replaceHash} function.","!static":false,"!category":"function","!type":"fn(sHash: String)","parameters":{"sHash":"type: string, description: New hash"}},"getInstance":{"!description":"Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked for the first time.","!static":true,"!category":"function","!type":"fn() -> sap.ui.core.routing.HashChanger"},"replaceHash":{"!description":"Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the {@link #setHash} function.","!static":false,"!category":"function","!type":"fn(sHash: String)","parameters":{"sHash":"type: string, description: New hash"}}},"sap.ui.core.routing.HashChangerBase":{"!description":"Base Class for manipulating and receiving changes of hash segment.\n\nFires a <code>hashChanged<\/code> event if the relevant hash changes.","extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.HashChangerBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.HashChangerBase.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/core/routing/HashChangerBase","!helpDescription":"Base Class for manipulating and receiving changes of hash segment.\n\nFires a <code>hashChanged<\/code> event if the relevant hash changes.","!proto":"sap.ui.base.EventProvider","!category":"class","setHash":{"!description":"Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the {@link #replaceHash} function.","!static":false,"!category":"function","!type":"fn(sHash: String)","parameters":{"sHash":"type: string, description: New hash"}},"replaceHash":{"!description":"Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the {@link #setHash} function.","!static":false,"!category":"function","!type":"fn(sHash: String)","parameters":{"sHash":"type: string, description: New hash"}}},"sap.ui.core.tmpl.HandlebarsTemplate":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>The class for Handlebars Templates.","extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.tmpl.Template.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.tmpl.HandlebarsTemplate.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates and initializes a new handlebars template with the given <code>sId<\/code>\nand settings.\n\nThe set of allowed entries in the <code>mSettings<\/code> object depends on\nthe concrete subclass and is described there.","!module":"sap/ui/core/tmpl/HandlebarsTemplate","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>The class for Handlebars Templates.","!proto":"sap.ui.core.tmpl.Template","!category":"class"},"sap.ui.model.PropertyBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.PropertyBinding"},"sap.ui.model.StaticBinding":{"!description":"The StaticBinding allows to define static values within a CompositeBinding. It behaves like a property binding but always returns the value, which is stored in the binding itself.","extend":{"!description":"Creates a new subclass of class sap.ui.model.StaticBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.StaticBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for StaticBinding","!module":"sap/ui/model/StaticBinding","!helpDescription":"The StaticBinding allows to define static values within a CompositeBinding. It behaves like a property binding but always returns the value, which is stored in the binding itself.","!proto":"sap.ui.model.PropertyBinding","!category":"class"},"module:sap/ui/performance/trace/FESR":{"!description":"FESR API, consumed by E2eTraceLib instead of former EppLib.js. Provides functionality for creating the headers for the frontend-subrecords which will be sent with each first request of an interaction. The headers have a specific format, you may have a look at the createFESR methods.<br> There is a special order in which things are happening: <pre>\n1. Interaction starts\n1.1. Request 1.1 sent\n1.2. Request 1.2 sent\n2. Interaction starts\n2.1 Creation of FESR for 1. interaction\n2.2 Request 2.1 sent with FESR header for 1. interaction\n...\n<\/pre>","setActive":{"!category":"function","!type":"fn(bOn: Boolean, aCategories: [String | String], bActive: Boolean, sUrl?: String)"},"!module":"sap/ui/performance/trace/FESR","!helpDescription":"FESR API, consumed by E2eTraceLib instead of former EppLib.js. Provides functionality for creating the headers for the frontend-subrecords which will be sent with each first request of an interaction. The headers have a specific format, you may have a look at the createFESR methods.<br> There is a special order in which things are happening: <pre>\n1. Interaction starts\n1.1. Request 1.1 sent\n1.2. Request 1.2 sent\n2. Interaction starts\n2.1 Creation of FESR for 1. interaction\n2.2 Request 2.1 sent with FESR header for 1. interaction\n...\n<\/pre>","onBeforeCreated":{"!description":"Hook function that allows to override specific FESR header information.","!category":"function","!type":"fn(oFESRHandle: Object, oInteraction: Object) -> Object"},"!category":"namespace","getActive":{"!category":"function","!type":"fn() -> Boolean"},"module:sap/ui/performance/trace/FESR":"module:sap/ui/performance/trace/FESR"},"sap.ui.model.odata.type.Time_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Time with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Time"},"sap.ui.model.odata.type.Stream":{"!description":"This class represents the OData V4 primitive type {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element <code>Edm.Stream<\/code>}. The values for stream properties do not appear in the entity payload. Instead, the values are read or written through URLs.\n\nThis type only supports reading streams. For this purpose bind the stream property to a control property of type <code>sap.ui.core.URI<\/code>. {#formatValue} will then deliver the correct URL to read the stream.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Stream with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Stream.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.Stream<\/code>.","formatValue":{"!description":"Returns the input value unchanged.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> String","parameters":{"sTargetType":"type: string, description: The target type; must be \"any\" or \"string\"","sValue":"type: string, description: the read URL"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Stream","!helpDescription":"This class represents the OData V4 primitive type {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element <code>Edm.Stream<\/code>}. The values for stream properties do not appear in the entity payload. Instead, the values are read or written through URLs.\n\nThis type only supports reading streams. For this purpose bind the stream property to a control property of type <code>sap.ui.core.URI<\/code>. {#formatValue} will then deliver the correct URL to read the stream.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"!category":"class","parseValue":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.model.Model":{"bindList":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, aSorters?: sap.ui.model.Sorter, aFilters?: Array, mParameters?: Object) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: array, description: predefined filter/s (can be either a filter or an array of filters) (optional)","sPath":"type: string, description: the path pointing to the list / array that should be bound","oContext":"type: object, description: the context object for this databinding (optional)","aSorters":"type: sap.ui.model.Sorter, description: initial sort order (can be either a sorter or an array of sorters) (optional)","mParameters":"type: object, description: additional model specific parameters (optional)"}},"bindTree":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, aFilters?: Array, mParameters?: Object, aSorters?: Array) -> sap.ui.model.TreeBinding","parameters":{"aFilters":"type: array, description: predefined filter/s contained in an array (optional)","sPath":"type: string, description: the path pointing to the tree / array that should be bound","oContext":"type: object, description: the context object for this databinding (optional)","aSorters":"type: array, description: predefined sap.ui.model.sorter/s contained in an array (optional)","mParameters":"type: object, description: additional model specific parameters (optional)"}},"getOriginalProperty":{"!description":"Returns the original value for the property with the given path and context.\n\nThe original value is the value that was last responded by a server if using a server model implementation.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object) -> Object","parameters":{"sPath":"type: string, description: Path/name of the property","oContext":"type: object, description: Context if available to access the property value"}},"attachRequestFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:requestFailed requestFailed} event of this <code>sap.ui.model.Model<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Model<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.Model<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireRequestCompleted":{"!description":"Fires event {@link #event:requestCompleted requestCompleted} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.Model","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"!proto":"sap.ui.core.message.MessageProcessor","setLegacySyntax":{"!description":"Enables legacy path syntax handling.\n\nThis defines, whether relative bindings, which do not have a defined binding context, should be compatible to earlier releases which means they are resolved relative to the root element or handled strict and stay unresolved until a binding context is set.","!static":false,"!category":"function","!type":"fn(bLegacySyntax: Boolean)","parameters":{"bLegacySyntax":"type: boolean, description: The path syntax to use"}},"setMessages":{"!description":"Sets the messages for this model and notifies the bindings if the new messages differ from the current model messages.","!static":false,"!category":"function","!type":"fn(mMessages?: [Object.<string,sap.ui.core.message.Message])","parameters":{"mMessages":"type: Object.<string,sap.ui.core.message.Message[]>, description: The new messages for the model, mapping a binding path to an array of {@link sap.ui.core.message.Message} objects"}},"!category":"class","bindContext":{"!description":"Create ContextBinding.","!static":false,"!category":"function","!type":"fn(sPath: String | Object, oContext?: Object, mParameters?: Object, oEvents?: Object) -> sap.ui.model.ContextBinding","parameters":{"sPath":"type: string|object, description: the path pointing to the property that should be bound or an object which contains the following parameter properties: path, context, parameters","oContext":"type: object, description: the context object for this databinding (optional)","oEvents":"type: object, description: event handlers can be passed to the binding ({change:myHandler})","mParameters":"type: object, description: additional model specific parameters (optional)"}},"detachRequestCompleted":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:requestCompleted requestCompleted} event of this <code>sap.ui.model.Model<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireParseError":{"!description":"Fires event {@link #event:parseError parseError} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.Model","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"detachRequestFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:requestFailed requestFailed} event of this <code>sap.ui.model.Model<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMessages":{"!description":"Returns messages of this model associated with the given context, that is messages belonging to the object referred to by this context or a child object of that object. The messages are sorted by their {@link sap.ui.core.message.Message#getType type} according to the type's severity in a way that messages with highest severity come first.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> [sap.ui.core.message.Message]","parameters":{"oContext":"type: sap.ui.model.Context, description: The context to retrieve messages for"}},"!constructorDescription":"Constructor for a new Model.\n\nEvery Model is a MessageProcessor that is able to handle Messages with the normal binding path syntax in the target.","getDefaultBindingMode":{"!description":"Get the default binding mode for the model.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.BindingMode"},"attachParseError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:parseError parseError} event of this <code>sap.ui.model.Model<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Model<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.Model<\/code> itself.","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachPropertyChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:propertyChange propertyChange} event of this <code>sap.ui.model.Model<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Model<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.Model<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setDefaultBindingMode":{"!description":"Set the default binding mode for the model.\n\nIf the default binding mode should be changed, this method should be called directly after model instance creation and before any binding creation. Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.","!static":false,"!category":"function","!type":"fn(sMode: sap.ui.model.BindingMode) -> sap.ui.model.Model","parameters":{"sMode":"type: sap.ui.model.BindingMode, description: The default binding mode to set for the model"}},"checkFilterOperation":{"!description":"Checks whether the given filters contain an unsupported operator.\n\nOData v1, v2 and Client Bindings cannot be filtered with <code>sap.ui.model.FilterOperator<\/code>s <code>\"Any\"<\/code> and <code>\"All\"<\/code>. The model property <code>mUnsupportedFilterOperators<\/code> can be configured in each model subclass to describe the unsupported operators.\n\nIf any of the given filters contains nested filters, those are checked recursively.","!static":false,"!category":"function","!type":"fn(vFilters: [sap.ui.model.Filter | sap.ui.model.Filter])","parameters":{"vFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Single filter or an array of filter instances"}},"detachRequestSent":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:requestSent requestSent} event of this <code>sap.ui.model.Model<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMetaModel":{"!description":"Returns the meta model associated with this model if it is available for the concrete model type.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.MetaModel"},"isBindingModeSupported":{"!description":"Check if the specified binding mode is supported by the model.","!static":false,"!category":"function","!type":"fn(sMode: sap.ui.model.BindingMode)","parameters":{"sMode":"type: sap.ui.model.BindingMode, description: The binding mode to check"}},"!description":"This is an abstract base class for model objects.","detachPropertyChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:propertyChange propertyChange} event of this <code>sap.ui.model.Model<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.Model.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getObject":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: Path to where to read the object","oContext":"type: object, description: Context with which the path should be resolved","mParameters":"type: object, description: Additional model specific parameters"}},"firePropertyChange":{"!description":"Fires event {@link #event:propertyChange propertyChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.Model","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"getProperty":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object)","parameters":{"sPath":"type: string, description: the path to where to read the attribute value","oContext":"type: object, description: the context with which the path should be resolved"}},"destroy":{"!description":"Destroys the model and clears the model data.\n\nA model implementation may override this function and perform model specific cleanup tasks e.g. abort requests, prevent new requests, etc.","!static":false,"!category":"function","!type":"fn()"},"fireRequestFailed":{"!description":"Fires event {@link #event:requestFailed requestFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.Model","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"refresh":{"!description":"Refresh the model.\n\nThis will check all bindings for updated data and update the controls if data has been changed.","!static":false,"!category":"function","!type":"fn(bForceUpdate: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: Update controls even if data has not been changed"}},"attachRequestCompleted":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:requestCompleted requestCompleted} event of this <code>sap.ui.model.Model<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Model<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.Model<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMessagesByPath":{"!description":"Returns model messages for which the target matches the given resolved binding path.","!static":false,"!category":"function","!type":"fn(sPath: String, bPrefixMatch?: Boolean) -> [sap.ui.core.message.Message]","parameters":{"sPath":"type: string, description: The resolved binding path","bPrefixMatch":"type: boolean, description: Whether also messages with a target starting with the given path are returned, not just the messages with a target identical to the given path"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.Model with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"bindProperty":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, mParameters?: Object) -> sap.ui.model.PropertyBinding","parameters":{"sPath":"type: string, description: the path pointing to the property that should be bound","oContext":"type: object, description: the context object for this databinding (optional)","mParameters":"type: object, description: additional model specific parameters (optional)"}},"detachParseError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:parseError parseError} event of this <code>sap.ui.model.Model<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!module":"sap/ui/model/Model","setSizeLimit":{"!description":"Set the maximum number of entries which are used for list bindings.\n\nThe default size limit for models is 100.","!static":false,"!category":"function","!type":"fn(iSizeLimit: Number)","parameters":{"iSizeLimit":"type: int, description: Collection size limit"}},"!helpDescription":"This is an abstract base class for model objects.","attachRequestSent":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:requestSent requestSent} event of this <code>sap.ui.model.Model<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Model<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.Model","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.Model<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"createBindingContext":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, mParameters?: Object, fnCallBack?: fn(), bReload?: Boolean) -> sap.ui.model.Context","parameters":{"sPath":"type: string, description: the path to create the new context from","oContext":"type: object, description: the context which should be used to create the new binding context","bReload":"type: boolean, description: force reload even if data is already available. For server side models this should refetch the data from the server","mParameters":"type: object, description: the parameters used to create the new binding context","fnCallBack":"type: function, description: the function which should be called after the binding context has been created"}},"fireRequestSent":{"!description":"Fires event {@link #event:requestSent requestSent} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.Model","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"destroyBindingContext":{"!description":"Implement in inheriting classes.","!static":false,"!category":"function","!type":"fn(oContext: Object)","parameters":{"oContext":"type: object, description: to destroy"}},"isLegacySyntax":{"!description":"Returns whether legacy path syntax is used.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.core.util.serializer.delegate.XML_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.delegate.XML with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sDefaultXmlNamespace?: String, fnGetControlId?: fn(), fnGetEventHandlerName?: fn(), fnMemorizePackage?: fn())","prototype":"sap.ui.core.util.serializer.delegate.XML"},"sap.ui.model.analytics.odata4analytics.EntityType_obj":{"!type":"fn(oModel: Object, oSchema: Object, oEntityType: Object)","prototype":"sap.ui.model.analytics.odata4analytics.EntityType"},"sap.ui.model.DataState":{"!description":"Provides and updates the status data of a binding. Depending on the model's state and control's state changes, the data state is used to propagate changes to a control. The control can react to these changes by implementing the <code>refreshDataState<\/code> method for the control. Here, the data state object is passed as second parameter.\n\nUsing the {@link #getChanges} method, the control can determine the changed properties and their old and new values. <pre>\n    //sample implementation to handle message changes\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var aMessages = oDataState.getChanges().messages;\n       if (aMessages) {\n           for (var i = 0; i &lt; aMessages.length; i++) {\n               console.log(aMessages.message);\n           }\n       }\n    }\n\n    //sample implementation to handle laundering state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var bLaundering = oDataState.getChanges().laundering || false;\n       this.setBusy(bLaundering);\n    }\n\n    //sample implementation to handle dirty state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       if (oDataState.isDirty()) console.log(\"Control \" + this.getId() + \" is now dirty\");\n    }\n<\/pre>\n\nUsing the {@link #getProperty} method, the control can read the properties of the data state. The properties are <ul> <li><code>value<\/code> The value formatted by the formatter of the binding <li><code>originalValue<\/code> The original value of the model formatted by the formatter of the binding <li><code>invalidValue<\/code> The control value that was tried to be applied to the model but was rejected by a type validation <li><code>modelMessages<\/code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel<\/code> <li><code>controlMessages<\/code> The messages that were applied due to type validation errors <li><code>messages<\/code> All messages of the data state <li><code>dirty<\/code> true if the value was not yet confirmed by the server <\/ul>","setControlMessages":{"!description":"Sets an array of control state messages.","!static":false,"!category":"function","!type":"fn(aMessages: [sap.ui.core.Message]) -> sap.ui.model.DataState","parameters":{"aMessages":"type: sap.ui.core.Message[], description: The control messages"}},"setOriginalValue":{"!description":"Sets the formatted original value of the data.","!static":false,"!category":"function","!type":"fn(vOriginalValue: Boolean) -> sap.ui.model.DataState","parameters":{"vOriginalValue":"type: boolean, description: The original value"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.DataState.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getOriginalValue":{"!description":"Returns the formatted original value of the data. The original value is the last confirmed value.","!static":false,"!category":"function","!type":"fn() -> Object"},"getInvalidValue":{"!description":"Returns the dirty value of a binding that was rejected by a type validation so that it could not be applied to the model. If the value was not rejected it returns <code>undefined<\/code>. In this case the current model value can be accessed using the {@link #getValue} method.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.Object","!category":"class","getMessages":{"!description":"Returns the array of all state messages combining the model and control messages.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Message]"},"setLaundering":{"!description":"Sets the laundering state of the data state.","!static":false,"!category":"function","!type":"fn(bLaundering: Boolean) -> sap.ui.model.DataState","parameters":{"bLaundering":"type: boolean, description: Whether the state is laundering"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.DataState with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Returns the formatted value of the data state.","!static":false,"!category":"function","!type":"fn() -> Object"},"getModelMessages":{"!description":"Returns the array of state messages of the model or undefined.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Message]"},"isDirty":{"!description":"Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet confirmed by a server or the entered value did not yet pass the type validation.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!module":"sap/ui/model/DataState","!helpDescription":"Provides and updates the status data of a binding. Depending on the model's state and control's state changes, the data state is used to propagate changes to a control. The control can react to these changes by implementing the <code>refreshDataState<\/code> method for the control. Here, the data state object is passed as second parameter.\n\nUsing the {@link #getChanges} method, the control can determine the changed properties and their old and new values. <pre>\n    //sample implementation to handle message changes\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var aMessages = oDataState.getChanges().messages;\n       if (aMessages) {\n           for (var i = 0; i &lt; aMessages.length; i++) {\n               console.log(aMessages.message);\n           }\n       }\n    }\n\n    //sample implementation to handle laundering state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var bLaundering = oDataState.getChanges().laundering || false;\n       this.setBusy(bLaundering);\n    }\n\n    //sample implementation to handle dirty state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       if (oDataState.isDirty()) console.log(\"Control \" + this.getId() + \" is now dirty\");\n    }\n<\/pre>\n\nUsing the {@link #getProperty} method, the control can read the properties of the data state. The properties are <ul> <li><code>value<\/code> The value formatted by the formatter of the binding <li><code>originalValue<\/code> The original value of the model formatted by the formatter of the binding <li><code>invalidValue<\/code> The control value that was tried to be applied to the model but was rejected by a type validation <li><code>modelMessages<\/code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel<\/code> <li><code>controlMessages<\/code> The messages that were applied due to type validation errors <li><code>messages<\/code> All messages of the data state <li><code>dirty<\/code> true if the value was not yet confirmed by the server <\/ul>","getChanges":{"!description":"Returns the changes of the data state in a map that the control can use in the <code>refreshDataState<\/code> method. The changed property's name is the key in the map. Each element in the map contains an object with the properties <code>oldValue<\/code> with the old property value and <code>value<\/code> with the new value of the property. The map only contains the changed properties.","!static":false,"!category":"function","!type":"fn() -> Object"},"setModelMessages":{"!description":"Sets an array of model state messages.","!static":false,"!category":"function","!type":"fn(aMessages: [sap.ui.core.Message]) -> sap.ui.model.DataState","parameters":{"aMessages":"type: sap.ui.core.Message[], description: The model messages for this data state."}},"setValue":{"!description":"Sets the formatted value of the data state,","!static":false,"!category":"function","!type":"fn(vValue: Object) -> sap.ui.model.DataState","parameters":{"vValue":"type: any, description: the value"}},"getControlMessages":{"!description":"Returns the array of state messages of the control.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Message]"},"isLaundering":{"!description":"Returns whether the data state is in laundering. If data is sent to the server, the data state becomes laundering until the data was accepted or rejected.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setInvalidValue":{"!description":"Sets the dirty value that was rejected by the type validation.","!static":false,"!category":"function","!type":"fn(vInvalidValue: Object) -> sap.ui.model.DataState","parameters":{"vInvalidValue":"type: any, description: The value that was rejected by the type validation or <code>undefined<\/code> if the value was valid"}},"isControlDirty":{"!description":"Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if the entered value did not yet pass the type validation.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"changed":{"!description":"Returns whether the data state is changed, or resets the data state in case the parameter <code>bNewState<\/code> is false; reset data state means that the data state properties are replaced with the changed properties. As long as there was no call to this method with <code>bNewState<\/code> set to false, the data state is dirty, and the corresponding binding will fire data state change events.","!static":false,"!category":"function","!type":"fn(bNewState?: Boolean) -> Boolean","parameters":{"bNewState":"type: boolean, description: Whether the data state is to be reset"}}},"sap.ui.core.mvc.IControllerExtension":{"!description":"Marker interface for a ControllerExtension.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.core.util.serializer.delegate.Delegate":{"!description":"Abstract serializer delegate class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.delegate.Delegate with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.delegate.Delegate.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Abstract serializer delegate class. All delegates must extend from this class and implement the abstract methods.","!module":"sap/ui/core/util/serializer/delegate/Delegate","!helpDescription":"Abstract serializer delegate class.","!proto":"sap.ui.base.EventProvider","!category":"class"},"module:sap/ui/dom/jquery/getSelectedText":{"!description":"This module provides the {@link jQuery#getSelectedText} API.","module:sap/ui/dom/jquery/getSelectedText":"module:sap/ui/dom/jquery/getSelectedText","!module":"sap/ui/dom/jquery/getSelectedText","!helpDescription":"This module provides the {@link jQuery#getSelectedText} API.","!category":"namespace"},"sap.ui.test.OpaExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.OpaExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.OpaExtension"},"sap.ui.test.matchers.Properties":{"!description":"Checks if a control's properties have the provided values - all properties have to match their values.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    properties: {\n        propertyName: \"propertyValue\"\n    }\n}\n<\/code><\/pre>","!module":"sap/ui/test/matchers/Properties","!helpDescription":"Checks if a control's properties have the provided values - all properties have to match their values.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    properties: {\n        propertyName: \"propertyValue\"\n    }\n}\n<\/code><\/pre>","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.mvc.XMLView":{"!description":"A View defined using (P)XML and HTML markup.\n\n<strong>Note:<\/strong><br> Be aware that modifications of the content aggregation of this control are not supported due to technical reasons. This includes calls to all content modifying methods like <code>addContent><\/code> etc., but also the implicit removal of controls contained by the content aggregation. For example the destruction of a Control via the <code> destroy<\/code> method. All functions can be called but may not work properly or lead to unexpected side effects.\n\n<strong>Note:<\/strong><br> On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;<\/code> tag. If you want to specify content for another aggregation of a view like <code>dependents<\/code>, place it in a child control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.","extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.XMLView.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new mvc/XMLView.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View} can be used.","!module":"sap/ui/core/mvc/XMLView","!helpDescription":"A View defined using (P)XML and HTML markup.\n\n<strong>Note:<\/strong><br> Be aware that modifications of the content aggregation of this control are not supported due to technical reasons. This includes calls to all content modifying methods like <code>addContent><\/code> etc., but also the implicit removal of controls contained by the content aggregation. For example the destruction of a Control via the <code> destroy<\/code> method. All functions can be called but may not work properly or lead to unexpected side effects.\n\n<strong>Note:<\/strong><br> On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;<\/code> tag. If you want to specify content for another aggregation of a view like <code>dependents<\/code>, place it in a child control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.","!proto":"sap.ui.core.mvc.View","create":{"!description":"Instantiates an XMLView from the given configuration options.\n\nIf a <code>viewName<\/code> is given, it must be a dot-separated name of an XML view resource (without the mandatory suffix \".view.xml\"). The resource will be loaded asynchronously via the module system (preload caches might apply) and will be parsed as XML. Alternatively, an already loaded view <code>definition<\/code> can be provided, either as XML string or as an already parsed XML document. Exactly one of <code>viewName<\/code> or <code>definition<\/code> must be given, if none or both are given, an error will be reported.\n\nThe <code>controller<\/code> property is optional and can hold a controller instance. When given, it overrides the controller class defined in the view definition.\n\n<strong>Note<\/strong>: On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;<\/code> tag. If you want to specify content for another aggregation of a view like <code>dependents<\/code>, place it in a child control's <code>dependents<\/code> aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.\n\n<strong>Note<\/strong>: If you enable caching, you need to take care of the invalidation via keys. Automatic invalidation takes only place if the UI5 version or the component descriptor (manifest.json) change. This is still an experimental feature and may experience slight changes of the invalidation parameters or the cache key format.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<sap.ui.core.mvc.XMLView>","parameters":{"oOptions":"type: object, description: An object containing the view configuration options."}},"!category":"class","registerPreprocessor":{"!description":"Register a preprocessor for all views of a specific type.\n\nThe preprocessor can be registered for several stages of view initialization, for xml views these are either the plain \"xml\" or the already initialized \"controls\" , see {@link sap.ui.core.mvc.XMLView.PreprocessorType}. For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the view instance already, that one is used. When several preprocessors are registered for one hook, it has to be made sure, that they do not conflict when being processed serially.\n\nIt can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.\n\n<strong>Note<\/strong>: Preprocessors work only in async views and will be ignored when the view is instantiated in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the bSyncSupport flag to true.","!static":true,"!category":"function","!type":"fn(sType: String | sap.ui.core.mvc.XMLView.PreprocessorType, vPreprocessor: String | fn(), bSyncSupport: Boolean, bOnDemand?: Boolean, mSettings: Object)","parameters":{"mSettings":"type: object, description: optional configuration for preprocessor","sType":"type: string|sap.ui.core.mvc.XMLView.PreprocessorType, description: the type of content to be processed","bOnDemand":"type: boolean, description: ondemand preprocessor which enables developers to quickly activate the preprocessor for a view, by setting <code>preprocessors : { xml }<\/code>, for example.","bSyncSupport":"type: boolean, description: declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may break the view initialization and lead to unexpected results.","vPreprocessor":"type: string|function, description: module path of the preprocessor implementation or a preprocessor function"}}},"sap.ui.core.message.MessageProcessor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.MessageProcessor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.message.MessageProcessor"},"sap.ui.core.LayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.LayoutData"},"sap.ui.model.odata.v2.ODataListBinding":{"!description":"List binding implementation for OData format.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v2.ODataListBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.model.ListBinding","refresh":{"!description":"Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, use the parameter <code>bForceUpdate<\/code>.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean, sGroupId?: String)","parameters":{"bForceUpdate":"type: boolean, description: Update the bound control even if no data has been changed","sGroupId":"type: string, description: The group Id for the refresh"}},"!category":"class","sort":{"!description":"Sorts the list.","!static":false,"!category":"function","!type":"fn(aSorters: [sap.ui.model.Sorter | sap.ui.model.Sorter], bReturnSuccess?: Boolean) -> sap.ui.model.ListBinding","parameters":{"aSorters":"type: sap.ui.model.Sorter|sap.ui.model.Sorter[], description: A new sorter or an array of sorters which define the sort order","bReturnSuccess":"type: boolean, description: Whether the success indicator should be returned instead of <code>this<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Filters the list.\n\nWhen using <code>sap.ui.model.Filter<\/code> the filters are first grouped according to their binding path. All filters belonging to the same group are combined with OR and after that the results of all groups are combined with AND. Usually this means, all filters applied to a single table column are combined with OR, while filters on different table columns are combined with AND. Please note that a custom filter function is only supported with operation mode <code>sap.ui.model.odata.OperationMode.Client<\/code>.","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter | sap.ui.model.Filter], sFilterType?: sap.ui.model.FilterType, bReturnSuccess?: Boolean) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Single filter or array of filter objects","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted. If it is not given, type <code>Control<\/code> is assumed","bReturnSuccess":"type: boolean, description: Whether the success indicator should be returned instead of <code>this<\/code>"}},"getContexts":{"!description":"Return contexts for the list.","!static":false,"!category":"function","!type":"fn(iStartIndex?: Number, iLength?: Number, iThreshold?: Number) -> [sap.ui.model.Context]","parameters":{"iThreshold":"type: int, description: The threshold value","iStartIndex":"type: int, description: The start index of the requested contexts","iLength":"type: int, description: The requested amount of contexts"}},"!module":"sap/ui/model/odata/v2/ODataListBinding","getDownloadUrl":{"!description":"Get a download URL with the specified format considering the sort/filter/custom parameters.","!static":false,"!category":"function","!type":"fn(sFormat: String) -> String","parameters":{"sFormat":"type: string, description: Value for the $format Parameter"}},"!helpDescription":"List binding implementation for OData format.","getLength":{"!description":"Return the length of the list.\n\nIn case the final length is unknown (e.g. when searching on a large dataset), this will return an estimated length.","!static":false,"!category":"function","!type":"fn() -> Number"},"initialize":{"!description":"Initialize binding.\n\nFires a change if data is already available ($expand) or a refresh. If metadata is not yet available, do nothing, method will be called again when metadata is loaded.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v2.ODataListBinding"}},"sap.ui.core.CommandExecution_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.CommandExecution with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.CommandExecution"},"sap.ui.core.mvc.View.Preprocessor":{"!description":"Interface for Preprocessor implementations that can be hooked in the view life cycle.\n\nThere are two possibilities to use the preprocessor. It can be either passed to the view via the mSettings.preprocessors object where it is the executed only for this instance, or by the registerPreprocessor method of the view type. Currently this is available only for XMLViews (as of version 1.30).","!module":"sap/ui/core/mvc/View","!category":"static class"},"sap.ui.core.routing.Targets_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Targets with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oOptions: Object)","prototype":"sap.ui.core.routing.Targets"},"sap.ui.model.odata.type.SByte_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.SByte with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.SByte"},"sap.ui.model.odata.type.Time":{"!description":"This class represents the OData V2 primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Time<\/code><\/a>.\n\nIn {@link sap.ui.model.odata.v2.ODataModel ODataModel} this type is represented as an object with two properties: <ul> <li><code>__edmType<\/code> with the value \"Edm.Time\" <li><code>ms<\/code> with the number of milliseconds since midnight <\/ul>","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Time with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Time.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.Time<\/code>.","formatValue":{"!description":"Formats the given value to the given target type","!static":false,"!category":"function","!type":"fn(oValue: Object, sTargetType: String) -> String","parameters":{"oValue":"type: object, description: the value in model representation to be formatted.","sTargetType":"type: string, description: the target type; may be \"any\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information."}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Time","!helpDescription":"This class represents the OData V2 primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Time<\/code><\/a>.\n\nIn {@link sap.ui.model.odata.v2.ODataModel ODataModel} this type is represented as an object with two properties: <ul> <li><code>__edmType<\/code> with the value \"Edm.Time\" <li><code>ms<\/code> with the number of milliseconds since midnight <\/ul>","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(oValue: Object)","parameters":{"oValue":"type: object, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to a time object.","!static":false,"!category":"function","!type":"fn(sValue: String, sSourceType: String) -> Object","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>sValue<\/code>); must be \"string\", or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","sValue":"type: string, description: the value to be parsed, maps <code>\"\"<\/code> to <code>null<\/code>"}}},"sap.ui.test.matchers.AggregationLengthEquals_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationLengthEquals with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.AggregationLengthEquals"},"module:sap/ui/dom/jquery/zIndex":{"!description":"This module provides the {@link jQuery#zIndex} API.","module:sap/ui/dom/jquery/zIndex":"module:sap/ui/dom/jquery/zIndex","!module":"sap/ui/dom/jquery/zIndex","!helpDescription":"This module provides the {@link jQuery#zIndex} API.","!category":"namespace"},"sap.ui.model.odata.v2.ODataAnnotations":{"attachError":{"!description":"Attaches the given callback to the {@link #event:error error} event, which is fired whenever a source cannot be loaded, parsed or merged into the annotation data.\n\nThe following parameters will be set on the event object that is given to the callback function: <code>source<\/code> - A map containing the properties <code>type<\/code> - containing either \"url\" or \"xml\" - and <code>data<\/code> containing the data given as source, either a URL or an XML string depending on how the source was added. <code>error<\/code> - An Error object describing the problem that occurred\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.v2.ODataAnnotations<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachSuccess":{"!description":"Attaches the given callback to the {@link #event:success success} event, which is fired whenever a source has been successfully (loaded,) parsed and merged into the annotation data.\n\nThe following parameters are set on the event object that is given to the callback function: <code>source<\/code> - A map containing the properties <code>type<\/code> - containing either \"url\" or \"xml\" - and <code>data<\/code> containing the data given as source, either a URL or an XML string depending on how the source was added.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.v2.ODataAnnotations<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!proto":"sap.ui.base.EventProvider","!category":"class","detachAllFailed":{"!description":"Detaches the given callback from the <code>allFailed<\/code> event.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getAnnotationsData":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.37.0 only kept for compatibility with V1 API, use {@link #getData} instead.<br>Returns the parsed and merged annotation data object.","!static":false,"!category":"function","!type":"fn() -> Object"},"loaded":{"!description":"Returns a promise that resolves when the added annotation sources were successfully processed.","!static":false,"!category":"function","!type":"fn() -> Promise"},"detachLoaded":{"!description":"Detaches the given callback from the <code>loaded<\/code> event.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!constructorDescription":"Creates a new instance of the ODataAnnotations annotation loader.","detachError":{"!description":"Detaches the given callback from the <code>error<\/code> event.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"addSource":{"!description":"Adds one or several sources to the annotation loader. Sources will be loaded instantly but merged only after the previously added source has either been successfully merged or failed.","!static":false,"!category":"function","!type":"fn(vSource: [String | string[] | sap.ui.model.odata.v2.ODataAnnotations.Source | sap.ui.model.odata.v2.ODataAnnotations.Source]) -> Promise","parameters":{"vSource":"type: string|string[]|sap.ui.model.odata.v2.ODataAnnotations.Source|sap.ui.model.odata.v2.ODataAnnotations.Source[], description: One or several Annotation source or array of annotation sources; an annotation source is either a string containing a URL or an object of type {@link sap.ui.model.odata.v2.ODataAnnotations.Source}."}},"attachLoaded":{"!description":"Attaches the given callback to the {@link #event:loaded loaded} event.\n\nThis event is fired when all annotations from a group of sources was successfully (loaded,) parsed and merged. The parameter <code>result<\/code> will be set on the event argument and contains an array of all loaded sources as well as Errors in the order in which they had been added.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.v2.ODataAnnotations<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachFailed":{"!description":"Detaches the given callback from the <code>failed<\/code> event.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getData":{"!description":"Returns the parsed and merged annotation data object.","!static":false,"!category":"function","!type":"fn() -> Object"},"attachFailed":{"!description":"Attaches the given callback to the {@link #event:failed failed} event.\n\nThis event is fired when at least one annotation from a group of sources was not successfully (loaded,) parsed or merged. The parameter <code>result<\/code> will be set on the event argument and contains an array of Errors in the order in which the sources had been added.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.v2.ODataAnnotations<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!description":"Annotation loader for OData V2 services","setHeaders":{"!description":"Set custom headers which are provided in a key/value map. These headers are used for all requests. The \"Accept-Language\" header cannot be modified and is set using the core's language setting.\n\nTo remove these headers, simply set the <code>mHeaders<\/code> parameter to <code>{}<\/code>. Note that when calling this method again, all previous custom headers are removed, unless they are specified again in the <code>mCustomHeaders<\/code> parameter.","!static":false,"!category":"function","!type":"fn(mHeaders: Object.<string,string>)","parameters":{"mHeaders":"type: Object.<string,string>, description: the header name/value map."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v2.ODataAnnotations.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachSomeLoaded":{"!description":"Attaches the given callback to the <code>someLoaded<\/code> event.\n\nThis event exists for compatibility with the old annotation loader. It is fired when at least one annotation from a group of sources was successfully (loaded,) parsed and merged. The parameter <code>result<\/code> will be set on the event argument and contains an array of all loaded sources as well as Errors in the order in which they had been added.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.v2.ODataAnnotations<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getHeaders":{"!description":"Returns a map of custom headers that are sent with every request to an annotation URL.","!static":false,"!category":"function","!type":"fn() -> Object.<string,string>"},"detachSuccess":{"!description":"Detaches the given callback from the <code>success<\/code> event.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachAllFailed":{"!description":"Attaches the given callback to the <code>allFailed<\/code> event.\n\nThis event exists for compatibility with the old Annotation loader. It is fired when no annotation from a group of sources was successfully (loaded,) parsed and merged. The parameter <code>result<\/code> will be set on the event argument and contains an array of Errors in the order in which the sources had been added.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.v2.ODataAnnotations<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataAnnotations with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/model/odata/v2/ODataAnnotations","!helpDescription":"Annotation loader for OData V2 services","detachSomeLoaded":{"!description":"Detaches the given callback from the <code>someLoaded<\/code> event.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.core.URI":{"!description":"A string type that represents an RFC 3986 conformant URI.","!module":"sap/ui/core/library","!helpDescription":"A string type that represents an RFC 3986 conformant URI.","!category":"namespace"},"sap.ui.test.gherkin.dataTableUtils.normalization":{"!description":"A simple object containing a series of normalization functions that change a string according to a particular strategy. All strategies do the following normalization as a minimum:\n\n<ul> <li>Trim spaces off the string on both sides. For example: <code>\" hello \"<\/code> becomes <code>\"hello\"<\/code>.<\/li> <li>Assume that dashes and underscores are analogs for a space. For example: <code>\"sold-to party\"<\/code> and <code>\"sold to party\"<\/code> are equivalent, and would both convert to the camelCase <code>\"soldToParty\"<\/code>.<\/li> <li>Trim multiple spaces between words. For example: <code>\"hello____world\"<\/code> becomes <code>\"hello world\"<\/code>.<\/li> <li>Remove any characters that are not alphanumeric or whitespace. For example: <code>\"(hello)\"<\/code> becomes <code>\"hello\"<\/code>.<\/li> <\/ul>","titleCase":{"!description":"For example: \"first name\" -> \"First Name\"","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"!module":"sap/ui/test/gherkin/dataTableUtils","!helpDescription":"A simple object containing a series of normalization functions that change a string according to a particular strategy. All strategies do the following normalization as a minimum:\n\n<ul> <li>Trim spaces off the string on both sides. For example: <code>\" hello \"<\/code> becomes <code>\"hello\"<\/code>.<\/li> <li>Assume that dashes and underscores are analogs for a space. For example: <code>\"sold-to party\"<\/code> and <code>\"sold to party\"<\/code> are equivalent, and would both convert to the camelCase <code>\"soldToParty\"<\/code>.<\/li> <li>Trim multiple spaces between words. For example: <code>\"hello____world\"<\/code> becomes <code>\"hello world\"<\/code>.<\/li> <li>Remove any characters that are not alphanumeric or whitespace. For example: <code>\"(hello)\"<\/code> becomes <code>\"hello\"<\/code>.<\/li> <\/ul>","!category":"namespace","hyphenated":{"!description":"For example: \"First Name\" -> \"first-name\"","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"none":{"!description":"For example: \"First Name\" -> \"First Name\"","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"pascalCase":{"!description":"For example: \"first name\" -> \"FirstName\"","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"camelCase":{"!description":"For example: \"First Name\" -> \"firstName\"","!static":"true","!category":"function","!type":"fn(sString: String) -> String"}},"sap.ui.Device.resize":{"!description":"Common API for document window size change notifications across all platforms.","!module":"sap/ui/Device","!helpDescription":"Common API for document window size change notifications across all platforms.","width":{"!description":"The current width of the document's window in pixels.","!category":"enum","!type":"Number"},"detachHandler":{"!description":"Removes a previously attached event handler from the resize events.\n\nThe passed parameters must match those used for registration with {@link #.attachHandler} beforehand.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)"},"!category":"namespace","attachHandler":{"!description":"Registers the given event handler to resize change events of the document's window.\n\nThe event is fired whenever the document's window size changes.\n\nThe event handler is called with a single argument: a map <code>mParams<\/code> which provides the following information: <ul> <li><code>mParams.height<\/code>: The height of the document's window in pixels.<\/li> <li><code>mParams.width<\/code>: The width of the document's window in pixels.<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)"},"height":{"!description":"The current height of the document's window in pixels.","!category":"enum","!type":"Number"}},"sap.ui.core.hyphenation.Hyphenation":{"!description":"This class provides methods for evaluating the possibility of using browser-native hyphenation or initializing and using a third-party hyphenation module.\n\n<h3>Overview<\/h3> By using this API, a developer can check if browser-native hyphenation is supported for a particular language.\n\nWhen browser-native hyphenation is not supported or if otherwise required, the API can be used to hyphenate texts. A third-party library \"Hyphenopoly\" is used in that case.\n\nIt is used internally by controls that support the <code>wrappingType:{@link sap.m.WrappingType WrappingType.Hyphenated}<\/code> property.\n\nAs the class is singleton, an instance should be acquired from {@link sap.ui.core.hyphenation.Hyphenation.getInstance Hyphenation.getInstance}.\n\n<h3>Usage<\/h3> <h4>When to use:<\/h4> <ul> <li>To check if browser-native hyphenation is available for particular language.<\/li> <li>To hyphenate texts if browser-native hyphenation is not available.<\/li> <\/ul> <h4>When not to use:<\/h4> <ul> <li> If the use case is covered by controls that support the property <code>wrappingType:{@link sap.m.WrappingType WrappingType.Hyphenated}<\/code>. This functionality is supported by {@link sap.m.Title sap.m.Title}, {@link sap.m.Label sap.m.Label} and {@link sap.m.Text sap.m.Text}. <\/li> <li>If browser-native hyphenation is available<\/li> <\/ul>\n\n<h3>Example<\/h3> <pre>\nif (!Hyphenation.getInstance().canUseNativeHyphenation(\"en\")) {\n\tHyphenation.getInstance().initialize(\"en\").then(function() {\n\t\tconsole.log(Hyphenation.getInstance().hyphenate(\"An example text to hyphenate.\", \"en\"));\n\t});\n}\n<\/pre>\n\nFor more information, see {@link topic:6322164936f047de941ec522b95d7b70 Hyphenation for Text Controls}.\n\n<code>Caution:<\/code> Note that as the hyphenation feature uses third-party and browser-native tools, we are not responsible for any grammatical incorrectness or inconsistencies of the hyphenation. Also, the variety of supported languages is outside the scope of our control and may be subject to future changes.","getInitializedLanguages":{"!description":"What languages were initialized with {@link sap.ui.core.hyphenation.Hyphenation#initialize Hyphenation#initialize}","!static":false,"!category":"function","!type":"fn() -> Array"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.hyphenation.Hyphenation.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:error error} event of this <code>sap.ui.core.hyphenation.Hyphenation<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.hyphenation.Hyphenation<\/code> itself.\n\nFired if an error with initialization or hyphenation occurs.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.hyphenation.Hyphenation","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.hyphenation.Hyphenation<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!proto":"sap.ui.base.ManagedObject","!category":"class","canUseNativeHyphenation":{"!description":"Checks if native hyphenation works in the current browser for the given language.","!static":false,"!category":"function","!type":"fn(sLang?: String) -> Boolean | null","parameters":{"sLang":"type: string, description: For what language to check. The global application language is the default one"}},"canUseThirdPartyHyphenation":{"!description":"Checks if third-party hyphenation works for the given language.","!static":false,"!category":"function","!type":"fn(sLang?: String) -> Boolean | null","parameters":{"sLang":"type: string, description: For what language to check. The global application language is the default one."}},"hyphenate":{"!description":"Hyphenates the given text with the third-party library.\n\nAdds the soft hyphen symbol at the places where words can break.","!static":false,"!category":"function","!type":"fn(sText: String, sLang?: String) -> String","parameters":{"sLang":"type: string, description: The language of the text. The global application language is the default one","sText":"type: string, description: The text to hyphenate"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.hyphenation.Hyphenation with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Events\n<ul>\n<li>{@link #event:error error} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","detachError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:error error} event of this <code>sap.ui.core.hyphenation.Hyphenation<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.hyphenation.Hyphenation","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireError":{"!description":"Fires event {@link #event:error error} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.hyphenation.Hyphenation","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!module":"sap/ui/core/hyphenation/Hyphenation","!helpDescription":"This class provides methods for evaluating the possibility of using browser-native hyphenation or initializing and using a third-party hyphenation module.\n\n<h3>Overview<\/h3> By using this API, a developer can check if browser-native hyphenation is supported for a particular language.\n\nWhen browser-native hyphenation is not supported or if otherwise required, the API can be used to hyphenate texts. A third-party library \"Hyphenopoly\" is used in that case.\n\nIt is used internally by controls that support the <code>wrappingType:{@link sap.m.WrappingType WrappingType.Hyphenated}<\/code> property.\n\nAs the class is singleton, an instance should be acquired from {@link sap.ui.core.hyphenation.Hyphenation.getInstance Hyphenation.getInstance}.\n\n<h3>Usage<\/h3> <h4>When to use:<\/h4> <ul> <li>To check if browser-native hyphenation is available for particular language.<\/li> <li>To hyphenate texts if browser-native hyphenation is not available.<\/li> <\/ul> <h4>When not to use:<\/h4> <ul> <li> If the use case is covered by controls that support the property <code>wrappingType:{@link sap.m.WrappingType WrappingType.Hyphenated}<\/code>. This functionality is supported by {@link sap.m.Title sap.m.Title}, {@link sap.m.Label sap.m.Label} and {@link sap.m.Text sap.m.Text}. <\/li> <li>If browser-native hyphenation is available<\/li> <\/ul>\n\n<h3>Example<\/h3> <pre>\nif (!Hyphenation.getInstance().canUseNativeHyphenation(\"en\")) {\n\tHyphenation.getInstance().initialize(\"en\").then(function() {\n\t\tconsole.log(Hyphenation.getInstance().hyphenate(\"An example text to hyphenate.\", \"en\"));\n\t});\n}\n<\/pre>\n\nFor more information, see {@link topic:6322164936f047de941ec522b95d7b70 Hyphenation for Text Controls}.\n\n<code>Caution:<\/code> Note that as the hyphenation feature uses third-party and browser-native tools, we are not responsible for any grammatical incorrectness or inconsistencies of the hyphenation. Also, the variety of supported languages is outside the scope of our control and may be subject to future changes.","isLanguageSupported":{"!description":"Checks if <code>Hyphenation<\/code> API knows about the given language.\n\nIf it is a known language, the API can be used to check browser-native and third-party support.","!static":false,"!category":"function","!type":"fn(sLang?: String) -> Boolean","parameters":{"sLang":"type: string, description: For what language to check. The global application language is the default one."}},"getInstance":{"!description":"Returns the singleton instance of the Hyphenation API.","!static":true,"!category":"function","!type":"fn() -> sap.ui.core.hyphenation.Hyphenation"},"initialize":{"!description":"Initializes the third-party library for the given language.\n\nLoads required third-party resources and language-specific resources.","!static":false,"!category":"function","!type":"fn(sLang?: String) -> Promise","parameters":{"sLang":"type: string, description: The language for which the third-party library should be initialized. The global application language is the default one"}},"isLanguageInitialized":{"!description":"Checks if the given language was initialized with {@link sap.ui.core.hyphenation.Hyphenation#initialize Hyphenation#initialize}","!static":false,"!category":"function","!type":"fn(sLang: String) -> Boolean","parameters":{"sLang":"type: string, description: The language to check for"}}},"sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest_obj":{"!type":"fn(oParameter: sap.ui.model.analytics.odata4analytics.Parameter)","prototype":"sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest"},"sap.ui.test.matchers.AggregationFilled":{"!description":"Checks if an aggregation contains at least one entry.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    aggregationFilled: {\n        name: \"string\"\n    }\n}\n<\/code><\/pre>","extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationFilled with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nThe name of the aggregation that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.test.matchers.AggregationFilled","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.AggregationFilled.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","getName":{"!description":"Gets current value of property {@link #getName name}.\n\nThe name of the aggregation that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/test/matchers/AggregationFilled","!helpDescription":"Checks if an aggregation contains at least one entry.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    aggregationFilled: {\n        name: \"string\"\n    }\n}\n<\/code><\/pre>","!proto":"sap.ui.test.matchers.Matcher","!category":"class","isMatching":{"!description":"Checks if the control has a filled aggregation.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}}},"sap.ui.model.Context_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.Context with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String)","prototype":"sap.ui.model.Context"},"sap.ui.model.odata.ODataMetaModel":{"!description":"Implementation of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges V4 annotations from the existing {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.\n\nAlso, annotations from the \"http://www.sap.com/Protocols/SAPData\" namespace are lifted up from the <code>extensions<\/code> array and transformed from objects into simple properties with an \"sap:\" prefix for their name. Note that this happens in addition, thus the following example shows both representations. This way, such annotations can be addressed via a simple relative path instead of searching an array. <pre>\n\t\t{\n\t\t\t\"name\" : \"BusinessPartnerID\",\n\t\t\t\"extensions\" : [{\n\t\t\t\t\"name\" : \"label\",\n\t\t\t\t\"value\" : \"Bus. Part. ID\",\n\t\t\t\t\"namespace\" : \"http://www.sap.com/Protocols/SAPData\"\n\t\t\t}],\n\t\t\t\"sap:label\" : \"Bus. Part. ID\"\n\t\t}\n<\/pre>\n\nAs of 1.29.0, the corresponding vocabulary-based annotations for the following \"<a href=\"http://www.sap.com/Protocols/SAPData\">SAP Annotations for OData Version 2.0<\/a>\" are added, if they are not yet defined in the V4 annotations: <ul> <li><code>label<\/code>;<\/li> <li><code>schema-version<\/code> (since 1.53.0) on schemas;<\/li> <li><code>creatable<\/code>, <code>deletable<\/code>, <code>deletable-path<\/code>, <code>pageable<\/code>, <code>requires-filter<\/code>, <code>searchable<\/code>, <code>topable<\/code>, <code>updatable<\/code> and <code>updatable-path<\/code> on entity sets; <\/li> <li><code>creatable<\/code> (since 1.41.0), <code>creatable-path<\/code> (since 1.41.0) and <code>filterable<\/code> (since 1.39.0) on navigation properties;<\/li> <li><code>aggregation-role<\/code> (\"dimension\" and \"measure\", both since 1.45.0), <code>creatable<\/code>, <code>display-format<\/code> (\"UpperCase\" and \"NonNegative\"), <code>field-control<\/code>, <code>filterable<\/code>, <code>filter-restriction<\/code>, <code>heading<\/code>, <code>precision<\/code>, <code>quickinfo<\/code>, <code>required-in-filter<\/code>, <code>sortable<\/code>, <code>text<\/code>, <code>unit<\/code>, <code>updatable<\/code> and <code>visible<\/code> on properties;<\/li> <li><code>semantics<\/code>; the following values are supported: <ul> <li>\"bday\", \"city\", \"country\", \"email\" (including support for types, for example \"email;type=home,pref\"), \"familyname\", \"givenname\", \"honorific\", \"middlename\", \"name\", \"nickname\", \"note\", \"org\", \"org-unit\", \"org-role\", \"photo\", \"pobox\", \"region\", \"street\", \"suffix\", \"tel\" (including support for types, for example \"tel;type=cell,pref\"), \"title\" and \"zip\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Contact<\/code>); <\/li> <li>\"class\", \"dtend\", \"dtstart\", \"duration\", \"fbtype\", \"location\", \"status\", \"transp\" and \"wholeday\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Event<\/code>);<\/li> <li>\"body\", \"from\", \"received\", \"sender\" and \"subject\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Message<\/code>);<\/li> <li>\"completed\", \"due\", \"percent-complete\" and \"priority\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Task<\/code>);<\/li> <li>\"fiscalyear\", \"fiscalyearperiod\" (mapped to the corresponding V4 annotation <code>com.sap.vocabularies.Common.v1.IsFiscal(Year|YearPeriod)<\/code>);<\/li> <li>\"year\", \"yearmonth\", \"yearmonthday\", \"yearquarter\", \"yearweek\" (mapped to the corresponding V4 annotation <code>com.sap.vocabularies.Common.v1.IsCalendar(Year|YearMonth|Date|YearQuarter|YearWeek)<\/code>); <\/li> <li>\"url\" (mapped to V4 annotation <code>Org.OData.Core.V1.IsURL\"<\/code>).<\/li> <\/ul> <\/ul> For example: <pre>\n\t\t{\n\t\t\t\"name\" : \"BusinessPartnerID\",\n\t\t\t...\n\t\t\t\"sap:label\" : \"Bus. Part. ID\",\n\t\t\t\"com.sap.vocabularies.Common.v1.Label\" : {\n\t\t\t\t\"String\" : \"Bus. Part. ID\"\n\t\t\t}\n\t\t}\n<\/pre> <b>Note:<\/b> Annotation terms are not merged, but replaced as a whole (\"PUT\" semantics). That means, if you have, for example, an OData V2 annotation <code>sap:sortable=false<\/code> at a property <code>PropA<\/code>, the corresponding OData V4 annotation is added to each entity set to which this property belongs: <pre>\n\t\t\"Org.OData.Capabilities.V1.SortRestrictions\": {\n\t\t\t\"NonSortableProperties\" : [\n\t\t\t\t{\"PropertyPath\" : \"BusinessPartnerID\"}\n\t\t\t]\n\t\t}\n<\/pre> If the same term <code>\"Org.OData.Capabilities.V1.SortRestrictions\"<\/code> targeting one of these entity sets is also contained in an annotation file, the complete OData V4 annotation converted from the OData V2 annotation is replaced by the one contained in the annotation file for the specified target. Converted annotations never use a qualifier and are only overwritten by the same annotation term without a qualifier.\n\nThis model is read-only and thus only supports {@link sap.ui.model.BindingMode.OneTime OneTime} binding mode. No events ({@link sap.ui.model.Model#event:parseError parseError}, {@link sap.ui.model.Model#event:requestCompleted requestCompleted}, {@link sap.ui.model.Model#event:requestFailed requestFailed}, {@link sap.ui.model.Model#event:requestSent requestSent}) are fired!\n\nWithin the meta model, the objects are arranged in arrays. <code>/dataServices/schema<\/code>, for example, is an array of schemas where each schema has an <code>entityType<\/code> property with an array of entity types, and so on. So, <code>/dataServices/schema/0/entityType/16<\/code> can be the path to the entity type with name \"Order\" in the schema with namespace \"MySchema\". However, these paths are not stable: If an entity type with lower index is removed from the schema, the path to <code>Order<\/code> changes to <code>/dataServices/schema/0/entityType/15<\/code>.\n\nTo avoid problems with changing indexes, {@link sap.ui.model.Model#getObject getObject} and {@link sap.ui.model.Model#getProperty getProperty} support XPath-like queries for the indexes (since 1.29.1). Each index can be replaced by a query in square brackets. You can, for example, address the schema using the path <code>/dataServices/schema/[${namespace}==='MySchema']<\/code> or the entity using <code>/dataServices/schema/[${namespace}==='MySchema']/entityType/[sap.ui.core==='Order']<\/code>.\n\nThe syntax inside the square brackets is the same as in expression binding. The query is executed for each object in the array until the result is true (truthy) for the first time. This object is then chosen.\n\n<b>BEWARE:<\/b> Access to this OData meta model will fail before the promise returned by {@link #loaded loaded} has been resolved!","getMetaContext":{"!description":"Returns the OData meta model context corresponding to the given OData model path.","!static":false,"!category":"function","!type":"fn(sPath?: String) -> sap.ui.model.Context","parameters":{"sPath":"type: string, description: an absolute path pointing to an entity or property, e.g. \"/ProductSet(1)/ToSupplier/BusinessPartnerID\"; this equals the <a href=\"http://www.odata.org/documentation/odata-version-2-0/uri-conventions#ResourcePath\"> resource path<\/a> component of a URI according to OData V2 URI conventions"}},"getODataValueLists":{"!description":"Returns a <code>Promise<\/code> which is resolved with a map representing the <code>com.sap.vocabularies.Common.v1.ValueList<\/code> annotations of the given property or rejected with an error. The key in the map provided on successful resolution is the qualifier of the annotation or the empty string if no qualifier is defined. The value in the map is the JSON object for the annotation. The map is empty if the property has no <code>com.sap.vocabularies.Common.v1.ValueList<\/code> annotations.","!static":false,"!category":"function","!type":"fn(oPropertyContext: sap.ui.model.Context) -> Promise","parameters":{"oPropertyContext":"type: sap.ui.model.Context, description: a model context for a structural property of an entity type or a complex type, as returned by {@link #getMetaContext getMetaContext}"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataMetaModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getODataFunctionImport":{"!description":"Returns the OData function import with the given simple or qualified name from the default entity container or the respective entity container specified in the qualified name.","!static":false,"!category":"function","!type":"fn(sName: String, bAsPath?: Boolean) -> Object | String","parameters":{"bAsPath":"type: boolean, description: determines whether the function import is returned as a path or as an object","sName":"type: string, description: a simple or qualified name, e.g. \"Save\" or \"MyService.Entities/Save\""}},"getODataEntityType":{"!description":"Returns the OData entity type with the given qualified name, either as a path or as an object, as indicated.","!static":false,"!category":"function","!type":"fn(sQualifiedName: String, bAsPath?: Boolean) -> Object | String","parameters":{"bAsPath":"type: boolean, description: determines whether the entity type is returned as a path or as an object","sQualifiedName":"type: string, description: a qualified name, e.g. \"ACME.Product\""}},"!proto":"sap.ui.model.MetaModel","getODataComplexType":{"!description":"Returns the OData complex type with the given qualified name, either as a path or as an object, as indicated.","!static":false,"!category":"function","!type":"fn(sQualifiedName: String, bAsPath?: Boolean) -> Object | String","parameters":{"bAsPath":"type: boolean, description: determines whether the complex type is returned as a path or as an object","sQualifiedName":"type: string, description: a qualified name, e.g. \"ACME.Address\""}},"refresh":{"!description":"Refresh not supported by OData meta model!","!static":false,"!category":"function","!type":"fn()"},"setLegacySyntax":{"!description":"Legacy syntax not supported by OData meta model!","!static":false,"!category":"function","!type":"fn(bLegacySyntax: Boolean)","parameters":{"bLegacySyntax":"type: boolean, description: must not be true!"}},"!category":"class","getODataAssociationSetEnd":{"!description":"Returns the OData association <em>set<\/em> end corresponding to the given entity type's navigation property of given name.","!static":false,"!category":"function","!type":"fn(oEntityType: Object, sName: String) -> Object","parameters":{"sName":"type: string, description: the name of a navigation property within this entity type","oEntityType":"type: object, description: an entity type as returned by {@link #getODataEntityType getODataEntityType}"}},"getODataEntityContainer":{"!description":"Returns the OData default entity container. If there is only a single schema with a single entity container, the entity container does not need to be marked as default explicitly.","!static":false,"!category":"function","!type":"fn(bAsPath?: Boolean) -> Object | String","parameters":{"bAsPath":"type: boolean, description: determines whether the entity container is returned as a path or as an object"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataMetaModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"loaded":{"!description":"Returns a promise which is fulfilled once the meta model data is loaded and can be used.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!constructorDescription":"DO NOT CALL this private constructor for a new <code>ODataMetaModel<\/code>,\nbut rather use {@link sap.ui.model.odata.ODataModel#getMetaModel getMetaModel} instead!","!module":"sap/ui/model/odata/ODataMetaModel","!helpDescription":"Implementation of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges V4 annotations from the existing {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.\n\nAlso, annotations from the \"http://www.sap.com/Protocols/SAPData\" namespace are lifted up from the <code>extensions<\/code> array and transformed from objects into simple properties with an \"sap:\" prefix for their name. Note that this happens in addition, thus the following example shows both representations. This way, such annotations can be addressed via a simple relative path instead of searching an array. <pre>\n\t\t{\n\t\t\t\"name\" : \"BusinessPartnerID\",\n\t\t\t\"extensions\" : [{\n\t\t\t\t\"name\" : \"label\",\n\t\t\t\t\"value\" : \"Bus. Part. ID\",\n\t\t\t\t\"namespace\" : \"http://www.sap.com/Protocols/SAPData\"\n\t\t\t}],\n\t\t\t\"sap:label\" : \"Bus. Part. ID\"\n\t\t}\n<\/pre>\n\nAs of 1.29.0, the corresponding vocabulary-based annotations for the following \"<a href=\"http://www.sap.com/Protocols/SAPData\">SAP Annotations for OData Version 2.0<\/a>\" are added, if they are not yet defined in the V4 annotations: <ul> <li><code>label<\/code>;<\/li> <li><code>schema-version<\/code> (since 1.53.0) on schemas;<\/li> <li><code>creatable<\/code>, <code>deletable<\/code>, <code>deletable-path<\/code>, <code>pageable<\/code>, <code>requires-filter<\/code>, <code>searchable<\/code>, <code>topable<\/code>, <code>updatable<\/code> and <code>updatable-path<\/code> on entity sets; <\/li> <li><code>creatable<\/code> (since 1.41.0), <code>creatable-path<\/code> (since 1.41.0) and <code>filterable<\/code> (since 1.39.0) on navigation properties;<\/li> <li><code>aggregation-role<\/code> (\"dimension\" and \"measure\", both since 1.45.0), <code>creatable<\/code>, <code>display-format<\/code> (\"UpperCase\" and \"NonNegative\"), <code>field-control<\/code>, <code>filterable<\/code>, <code>filter-restriction<\/code>, <code>heading<\/code>, <code>precision<\/code>, <code>quickinfo<\/code>, <code>required-in-filter<\/code>, <code>sortable<\/code>, <code>text<\/code>, <code>unit<\/code>, <code>updatable<\/code> and <code>visible<\/code> on properties;<\/li> <li><code>semantics<\/code>; the following values are supported: <ul> <li>\"bday\", \"city\", \"country\", \"email\" (including support for types, for example \"email;type=home,pref\"), \"familyname\", \"givenname\", \"honorific\", \"middlename\", \"name\", \"nickname\", \"note\", \"org\", \"org-unit\", \"org-role\", \"photo\", \"pobox\", \"region\", \"street\", \"suffix\", \"tel\" (including support for types, for example \"tel;type=cell,pref\"), \"title\" and \"zip\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Contact<\/code>); <\/li> <li>\"class\", \"dtend\", \"dtstart\", \"duration\", \"fbtype\", \"location\", \"status\", \"transp\" and \"wholeday\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Event<\/code>);<\/li> <li>\"body\", \"from\", \"received\", \"sender\" and \"subject\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Message<\/code>);<\/li> <li>\"completed\", \"due\", \"percent-complete\" and \"priority\" (mapped to V4 annotation <code>com.sap.vocabularies.Communication.v1.Task<\/code>);<\/li> <li>\"fiscalyear\", \"fiscalyearperiod\" (mapped to the corresponding V4 annotation <code>com.sap.vocabularies.Common.v1.IsFiscal(Year|YearPeriod)<\/code>);<\/li> <li>\"year\", \"yearmonth\", \"yearmonthday\", \"yearquarter\", \"yearweek\" (mapped to the corresponding V4 annotation <code>com.sap.vocabularies.Common.v1.IsCalendar(Year|YearMonth|Date|YearQuarter|YearWeek)<\/code>); <\/li> <li>\"url\" (mapped to V4 annotation <code>Org.OData.Core.V1.IsURL\"<\/code>).<\/li> <\/ul> <\/ul> For example: <pre>\n\t\t{\n\t\t\t\"name\" : \"BusinessPartnerID\",\n\t\t\t...\n\t\t\t\"sap:label\" : \"Bus. Part. ID\",\n\t\t\t\"com.sap.vocabularies.Common.v1.Label\" : {\n\t\t\t\t\"String\" : \"Bus. Part. ID\"\n\t\t\t}\n\t\t}\n<\/pre> <b>Note:<\/b> Annotation terms are not merged, but replaced as a whole (\"PUT\" semantics). That means, if you have, for example, an OData V2 annotation <code>sap:sortable=false<\/code> at a property <code>PropA<\/code>, the corresponding OData V4 annotation is added to each entity set to which this property belongs: <pre>\n\t\t\"Org.OData.Capabilities.V1.SortRestrictions\": {\n\t\t\t\"NonSortableProperties\" : [\n\t\t\t\t{\"PropertyPath\" : \"BusinessPartnerID\"}\n\t\t\t]\n\t\t}\n<\/pre> If the same term <code>\"Org.OData.Capabilities.V1.SortRestrictions\"<\/code> targeting one of these entity sets is also contained in an annotation file, the complete OData V4 annotation converted from the OData V2 annotation is replaced by the one contained in the annotation file for the specified target. Converted annotations never use a qualifier and are only overwritten by the same annotation term without a qualifier.\n\nThis model is read-only and thus only supports {@link sap.ui.model.BindingMode.OneTime OneTime} binding mode. No events ({@link sap.ui.model.Model#event:parseError parseError}, {@link sap.ui.model.Model#event:requestCompleted requestCompleted}, {@link sap.ui.model.Model#event:requestFailed requestFailed}, {@link sap.ui.model.Model#event:requestSent requestSent}) are fired!\n\nWithin the meta model, the objects are arranged in arrays. <code>/dataServices/schema<\/code>, for example, is an array of schemas where each schema has an <code>entityType<\/code> property with an array of entity types, and so on. So, <code>/dataServices/schema/0/entityType/16<\/code> can be the path to the entity type with name \"Order\" in the schema with namespace \"MySchema\". However, these paths are not stable: If an entity type with lower index is removed from the schema, the path to <code>Order<\/code> changes to <code>/dataServices/schema/0/entityType/15<\/code>.\n\nTo avoid problems with changing indexes, {@link sap.ui.model.Model#getObject getObject} and {@link sap.ui.model.Model#getProperty getProperty} support XPath-like queries for the indexes (since 1.29.1). Each index can be replaced by a query in square brackets. You can, for example, address the schema using the path <code>/dataServices/schema/[${namespace}==='MySchema']<\/code> or the entity using <code>/dataServices/schema/[${namespace}==='MySchema']/entityType/[sap.ui.core==='Order']<\/code>.\n\nThe syntax inside the square brackets is the same as in expression binding. The query is executed for each object in the array until the result is true (truthy) for the first time. This object is then chosen.\n\n<b>BEWARE:<\/b> Access to this OData meta model will fail before the promise returned by {@link #loaded loaded} has been resolved!","getODataAssociationEnd":{"!description":"Returns the OData association end corresponding to the given entity type's navigation property of given name.","!static":false,"!category":"function","!type":"fn(oEntityType: Object, sName: String) -> Object","parameters":{"sName":"type: string, description: the name of a navigation property within this entity type","oEntityType":"type: object, description: an entity type as returned by {@link #getODataEntityType getODataEntityType}"}},"getODataProperty":{"!description":"Returns the given OData type's property (not navigation property!) of given name.\n\nIf an array is given instead of a single name, it is consumed (via <code>Array.prototype.shift<\/code>) piece by piece. Each element is interpreted as a property name of the current type, and the current type is replaced by that property's type. This is repeated until an element is encountered which cannot be resolved as a property name of the current type anymore; in this case, the last property found is returned and <code>vName<\/code> contains only the remaining names, with <code>vName[0]<\/code> being the one which was not found.\n\nExamples: <ul> <li> Get address property of business partner: <pre>\nvar oEntityType = oMetaModel.getODataEntityType(\"GWSAMPLE_BASIC.BusinessPartner\"),\n    oAddressProperty = oMetaModel.getODataProperty(oEntityType, \"Address\");\noAddressProperty.name === \"Address\";\noAddressProperty.type === \"GWSAMPLE_BASIC.CT_Address\";\n<\/pre> <\/li> <li> Get street property of address type: <pre>\nvar oComplexType = oMetaModel.getODataComplexType(\"GWSAMPLE_BASIC.CT_Address\"),\n    oStreetProperty = oMetaModel.getODataProperty(oComplexType, \"Street\");\noStreetProperty.name === \"Street\";\noStreetProperty.type === \"Edm.String\";\n<\/pre> <\/li> <li> Get address' street property directly from business partner: <pre>\nvar aParts = [\"Address\", \"Street\"];\noMetaModel.getODataProperty(oEntityType, aParts) === oStreetProperty;\naParts.length === 0;\n<\/pre> <\/li> <li> Trying to get address' foo property directly from business partner: <pre>\naParts = [\"Address\", \"foo\"];\noMetaModel.getODataProperty(oEntityType, aParts) === oAddressProperty;\naParts.length === 1;\naParts[0] === \"foo\";\n<\/pre> <\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(oType: Object, vName: [String | String], bAsPath?: Boolean) -> Object | String","parameters":{"bAsPath":"type: boolean, description: determines whether the property is returned as a path or as an object","vName":"type: string|string[], description: the name of a property within this type (e.g. \"Address\"), or an array of such names (e.g. <code>[\"Address\", \"Street\"]<\/code>) in order to drill-down into complex types; <b>BEWARE<\/b> that this array is modified by removing each part which is understood!","oType":"type: object, description: a complex type as returned by {@link #getODataComplexType getODataComplexType}, or an entity type as returned by {@link #getODataEntityType getODataEntityType}"}},"getODataEntitySet":{"!description":"Returns the OData entity set with the given simple name from the default entity container.","!static":false,"!category":"function","!type":"fn(sName: String, bAsPath?: Boolean) -> Object | String","parameters":{"bAsPath":"type: boolean, description: determines whether the entity set is returned as a path or as an object","sName":"type: string, description: a simple name, e.g. \"ProductSet\""}}},"sap.ui.core.delegate.ItemNavigation_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oDomRef: Element, aItemDomRefs: [Element], bNotInTabChain?: Boolean)","prototype":"sap.ui.core.delegate.ItemNavigation"},"sap.ui.model.Filter":{"!description":"Filter for the list binding.","extend":{"!description":"Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.Filter.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for Filter.\n\nYou either pass a single object literal with the filter parameters or use the individual constructor arguments.\nNo matter which variant is used, only certain combinations of parameters are supported\n(the following list uses the names from the object literal):\n<ul>\n<li>A <code>path<\/code>, <code>operator<\/code> and one or two values (<code>value1<\/code>, <code>value2<\/code>), depending on the operator<\/li>\n<li>A <code>path<\/code> and a custom filter function <code>test<\/code><\/li>\n<li>An array of other filters named <code>filters<\/code> and a Boolean flag <code>and<\/code> that specifies whether to combine\n    the filters with an AND (<code>true<\/code>) or an OR (<code>false<\/code>) operator.<\/li>\n<\/ul>\nAn error will be logged to the console if an invalid combination of parameters is provided.\nPlease note that a model implementation may not support a custom filter function, e.g. if the model does not perform client side filtering.\nIt also depends on the model implementation if the filtering is case sensitive or not. Client models filter case insensitive compared to the\nOData models which filter case sensitive by default.\nSee particular model documentation for details\nThe filter operators <code>Any<\/code> and <code>All<\/code> are only supported in V4 OData models.\nWhen creating a filter instance with these filter operators, the argument <code>variable<\/code> only accepts a string identifier and <code>condition<\/code> needs to be another filter instance.","!module":"sap/ui/model/Filter","!helpDescription":"Filter for the list binding.","!proto":"sap.ui.base.Object","!category":"class","defaultComparator":{"!description":"Compares two values\n\nThis is the default comparator function used for clientside filtering, if no custom comparator is given in the constructor. It does compare just by using equal/less than/greater than with automatic type casting, except for null values, which are neither less or greater, and string values where localeCompare is used.\n\nThe comparator method returns -1, 0, 1 for comparable values and NaN for non-comparable values.","!static":true,"!category":"function","!type":"fn(a: Object, b: Object) -> Number","parameters":{"a":"type: any, description: the first value to compare","b":"type: any, description: the second value to compare"}}},"sap.ui.test.OpaBuilder.Actions":{"!description":"A collection of predefined actions. See also {@link sap.ui.test.actions}.","!module":"sap/ui/test/OpaBuilder","conditional":{"!description":"Creates an action that is only performed if target control fulfills the conditions.","!static":"true","!category":"function","!type":"fn(vConditions: sap.ui.test.matchers.Matcher | fn() | Array | Object, vSuccessBuilderOrOptions: sap.ui.test.actions.Action | fn() | Array | sap.ui.test.OpaBuilder, vElseBuilderOptions?: sap.ui.test.actions.Action | fn() | Array | sap.ui.test.OpaBuilder) -> fn()"},"!helpDescription":"A collection of predefined actions. See also {@link sap.ui.test.actions}.","executor":{"!description":"Creates an action function that executes all given actions on a single or an array of controls. This method can be used as a helper for handling the different kinds of action definitions and inputs.","!static":"true","!category":"function","!type":"fn(vActions: sap.ui.test.actions.Action | fn() | Array) -> fn()"},"!category":"namespace","press":{"!description":"Creates a {@link sap.ui.test.actions.Press} action.","!static":"true","!category":"function","!type":"fn(sIdSuffix?: String) -> sap.ui.test.actions.Press"},"enterText":{"!description":"Creates a {@link sap.ui.test.actions.EnterText} action.","!static":"true","!category":"function","!type":"fn(sText: String, bClearTextFirst?: Boolean, bKeepFocus?: Boolean, sIdSuffix?: String) -> sap.ui.test.actions.EnterText"}},"sap.ui.core.LocaleData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.LocaleData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oLocale: sap.ui.core.Locale)","prototype":"sap.ui.core.LocaleData"},"sap.ui.Device.media":{"!description":"Event API for screen width changes.\n\nThis API is based on media queries but can also be used if media queries are not natively supported by the used browser. In this case, the behavior of media queries is simulated by this API.\n\nThere are several predefined {@link sap.ui.Device.media.RANGESETS range sets} available. Each of them defines a set of intervals for the screen width (from small to large). Whenever the screen width changes and the current screen width is in a different interval to the one before the change, the registered event handlers for the range set are called.\n\nIf needed, it is also possible to define a custom set of intervals.\n\nThe following example shows a typical use case: <pre>\nfunction sizeChanged(mParams) {\n    switch(mParams.name) {\n        case \"Phone\":\n            // Do what is needed for a little screen\n            break;\n        case \"Tablet\":\n            // Do what is needed for a medium sized screen\n            break;\n        case \"Desktop\":\n            // Do what is needed for a large screen\n    }\n}\n\n// Register an event handler to changes of the screen size\nsap.ui.Device.media.attachHandler(sizeChanged, null, sap.ui.Device.media.RANGESETS.SAP_STANDARD);\n// Do some initialization work based on the current size\nsizeChanged(sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD));\n<\/pre>","removeRangeSet":{"!description":"Removes a previously initialized range set and detaches all registered handlers.\n\nOnly custom range sets can be removed via this function. Initialized predefined range sets ({@link sap.ui.Device.media.RANGESETS}) cannot be removed.","!static":"true","!category":"function","!type":"fn(sName: String)"},"!module":"sap/ui/Device","!helpDescription":"Event API for screen width changes.\n\nThis API is based on media queries but can also be used if media queries are not natively supported by the used browser. In this case, the behavior of media queries is simulated by this API.\n\nThere are several predefined {@link sap.ui.Device.media.RANGESETS range sets} available. Each of them defines a set of intervals for the screen width (from small to large). Whenever the screen width changes and the current screen width is in a different interval to the one before the change, the registered event handlers for the range set are called.\n\nIf needed, it is also possible to define a custom set of intervals.\n\nThe following example shows a typical use case: <pre>\nfunction sizeChanged(mParams) {\n    switch(mParams.name) {\n        case \"Phone\":\n            // Do what is needed for a little screen\n            break;\n        case \"Tablet\":\n            // Do what is needed for a medium sized screen\n            break;\n        case \"Desktop\":\n            // Do what is needed for a large screen\n    }\n}\n\n// Register an event handler to changes of the screen size\nsap.ui.Device.media.attachHandler(sizeChanged, null, sap.ui.Device.media.RANGESETS.SAP_STANDARD);\n// Do some initialization work based on the current size\nsizeChanged(sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD));\n<\/pre>","RANGESETS":"sap.ui.Device.media.RANGESETS","detachHandler":{"!description":"Removes a previously attached event handler from the change events of the screen width.\n\nThe passed parameters must match those used for registration with {@link #.attachHandler} beforehand.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object, sName?: String)"},"hasRangeSet":{"!description":"Returns <code>true<\/code> if a range set with the given name is already initialized.","!static":"true","!category":"function","!type":"fn(sName: String) -> Boolean"},"!category":"namespace","getCurrentRange":{"!description":"Returns information about the current active range of the range set with the given name.\n\nIf the optional parameter <code>iWidth<\/code> is given, the active range will be determined for that width, otherwise it is determined for the current window size.","!static":"true","!category":"function","!type":"fn(sName: String, iWidth?: Number) -> Object"},"initRangeSet":{"!description":"Initializes a screen width media query range set.\n\nThis initialization step makes the range set ready to be used for one of the other functions in namespace <code>sap.ui.Device.media<\/code>. The most important {@link sap.ui.Device.media.RANGESETS predefined range sets} are initialized automatically.\n\nTo make a not yet initialized {@link sap.ui.Device.media.RANGESETS predefined range set} ready to be used, call this function with the name of the range set to be initialized: <pre>\nsap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS);\n<\/pre>\n\nAlternatively it is possible to define custom range sets as shown in the following example: <pre>\nsap.ui.Device.media.initRangeSet(\"MyRangeSet\", [200, 400], \"px\", [\"Small\", \"Medium\", \"Large\"]);\n<\/pre> This example defines the following named ranges: <ul> <li><code>\"Small\"<\/code>: For screens smaller than 200 pixels.<\/li> <li><code>\"Medium\"<\/code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.<\/li> <li><code>\"Large\"<\/code>: For screens greater than or equal to 400 pixels.<\/li> <\/ul> The range names are optional. If they are specified a CSS class (e.g. <code>sapUiMedia-MyRangeSet-Small<\/code>) is also added to the document root depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses<\/code>.","!static":"true","!category":"function","!type":"fn(sName: String, aRangeBorders?: [Number], sUnit?: String, aRangeNames?: [String], bSuppressClasses?: Boolean)"},"attachHandler":{"!description":"Registers the given event handler to change events of the screen width based on the range set with the specified name.\n\nThe event is fired whenever the screen width changes and the current screen width is in a different interval of the given range set than before the width change.\n\nThe event handler is called with a single argument: a map <code>mParams<\/code> which provides the following information about the entered interval: <ul> <li><code>mParams.from<\/code>: The start value (inclusive) of the entered interval as a number<\/li> <li><code>mParams.to<\/code>: The end value (exclusive) range of the entered interval as a number or undefined for the last interval (infinity)<\/li> <li><code>mParams.unit<\/code>: The unit used for the values above, e.g. <code>\"px\"<\/code><\/li> <li><code>mParams.name<\/code>: The name of the entered interval, if available<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object, sName?: String)"}},"sap.ui.core.History_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.History with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.History"},"sap.ui.model.odata.type.DateTimeBase":{"!description":"This is an abstract base class for the OData primitive types <code>Edm.DateTime<\/code> and <code>Edm.DateTimeOffset<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.DateTimeBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.DateTimeBase.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Base constructor for the primitive types <code>Edm.DateTime<\/code> and\n<code>Edm.DateTimeOffset<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(oValue: Date, sTargetType: String) -> Date | String","parameters":{"oValue":"type: Date, description: The value to be formatted, which is represented in the model as a <code>Date<\/code> instance (OData V2)","sTargetType":"type: string, description: The target type, may be \"any\", \"object\" (since 1.69.0), \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information."}},"!module":"sap/ui/model/odata/type/DateTimeBase","!helpDescription":"This is an abstract base class for the OData primitive types <code>Edm.DateTime<\/code> and <code>Edm.DateTimeOffset<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(oValue: Date)","parameters":{"oValue":"type: Date, description: The value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value to a <code>Date<\/code> instance (OData V2).","!static":false,"!category":"function","!type":"fn(vValue: String | Date, sSourceType: String) -> Date","parameters":{"sSourceType":"type: string, description: The source type (the expected type of <code>vValue<\/code>), must be \"object\" (since 1.69.0), \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|Date, description: The value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>"}}},"sap.ui.core.PopupInterface":{"!description":"Marker interface for controls that are not rendered \"embedded\" into other controls but need to be opened/closed.\n\nSuch controls are handled differently during rendering.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.model.analytics.odata4analytics.ParameterizationRequest":{"!description":"Creation of URIs for query parameterizations.","!constructorDescription":"Create a request object for interaction with a query parameterization.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Creation of URIs for query parameterizations.","!proto":"sap.ui.base.Object","!category":"class","getParameterization":{"!description":"Get the description of the parameterization on which this request operates on","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.Parameterization"},"getURIToParameterizationEntry":{"!description":"Get the URI to locate the parameterization entity for the values assigned to all parameters beforehand. Notice that a value must be supplied for every parameter including those marked as optional. For optional parameters, assign the special value that the service provider uses as an \"omitted\" value. For example, for services based on BW Easy Queries, this would be an empty string.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String)","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"getURIToParameterizationEntitySet":{"!description":"Get the URI to locate the entity set for the query parameterization.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String)","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"setParameterValue":{"!description":"Assign a value to a parameter","!static":false,"!category":"function","!type":"fn(sParameterName: String, sValue: String, sToValue: String)","parameters":{"sParameterName":"type: String, description: Name of the parameter. In case of a range value, provide the name of the lower boundary parameter.","sToValue":"type: String, description: Omit it or set it to null for single values. If set, it will be assigned to the upper boundary parameter","sValue":"type: String, description: Assigned value. Pass null to remove a value assignment."}}},"sap.ui.model.odata.ODataListBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.odata.ODataModel, sPath: String, oContext: sap.ui.model.Context, aSorters?: Array, aFilters?: Array, mParameters?: Object)","prototype":"sap.ui.model.odata.ODataListBinding"},"jQuery.sap.log.Logger_obj":{"!type":"fn(sDefaultComponent: String)","prototype":"jQuery.sap.log.Logger"},"jQuery.sap.util.UriParameters":{"!description":"Encapsulates all URI parameters of the current windows location (URL).\n\nUse {@link jQuery.sap.getUriParameters} to create an instance of jQuery.sap.util.UriParameters.","!module":"jquery.sap.script","!category":"static class"},"sap.ui.core.tmpl.Template_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.tmpl.Template"},"sap.ui.model.odata.type.Byte_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Byte with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Byte"},"sap.ui.model.odata.type.Guid_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Guid with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Guid"},"sap.ui.core.util.serializer.delegate.Delegate_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.delegate.Delegate with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.util.serializer.delegate.Delegate"},"sap.ui.core.Control_obj":{"extend":{"!description":"Defines a new subclass of Control with the name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> can contain the same information that {@link sap.ui.core.Element.extend} already accepts, plus the following <code>renderer<\/code> property:\n\nExample: <pre>\nControl.extend(\"sap.mylib.MyControl\", {\n  metadata : {\n    library : \"sap.mylib\",\n    properties : {\n      text : \"string\",\n      width : \"sap.ui.core.CSSSize\"\n    }\n  },\n  renderer: {\n    apiVersion: 2,\n    render: function(oRM, oControl) {\n      oRM.openStart(\"div\", oControl);\n      oRM.style(\"width\", oControl.getWidth());\n      oRM.openEnd();\n      oRM.text(oControl.getText());\n      oRM.close(\"div\");\n    }\n  }\n});\n<\/pre>\n\nThere are multiple ways how a renderer can be specified: <ul> <li>As a <b>plain object<\/b>: The object will be used to create a new renderer by using {@link sap.ui.core.Renderer.extend} to extend the renderer of the base class of this control. The new renderer will have the same global name as this control class with the additional suffix 'Renderer'.<br> <b>Note:<\/b> The <code>Renderer.extend<\/code> method expects a plain object (no prototype chain).<\/li> <li>As a <b>function<\/b>: The given function will be used as <code>render<\/code> function of a new renderer; the renderer will be created in the same way as described for the <i>plain object<\/i> case.<\/li> <li>As a <b>ready-made renderer<\/b>, e.g. imported from the corresponding renderer module. As renderers are simple objects (not instances of a specific class), some heuristic is used to distinguish renderers from the <i>plain object<\/i> case above: An object is assumed to be a ready-made renderer when it has a <code>render<\/code> function and either is already exposed under the expected global name or has an <code>extend<\/code> method.<\/li> <li>As a <b>fully qualified name<\/b>: The name will be looked up as a global property. If not defined, a module name will be derived from the global name (dots replaced by slashes), the module will be required and provides the renderer, either as AMD export or via the named global property.<\/li> <li><b>Omitting the <code>renderer<\/code> property<\/b> or setting it to <code>undefined<\/code>: The fully qualified name of the renderer will be derived from the fully qualified name of the control by adding the suffix \"Renderer\". The renderer then is retrieved in the same way as described for the <i>fully qualified name<\/i> case.<\/li> <li><b><code>null<\/code> or empty string<\/b>: The control will have no renderer, a call to <code>oControl.getMetadata().getRenderer()<\/code> will return <code>undefined<\/code>.<\/li> <\/ul>\n\nIf the resulting renderer is incomplete (has no <code>render<\/code> function) or if it cannot be found at all, rendering of the control will be skipped.\n\n<b>Note:<\/b> The <code>apiVersion: 2<\/code> flag is required to enable in-place rendering technology. Before setting this property, please ensure that the constraints documented in section \"Contract for Renderer.apiVersion 2\" of the {@link sap.ui.core.RenderManager RenderManager} API documentation are fulfilled.","!static":true,"!category":"function","!type":"fn(sClassName: String, oStaticInfo: Object) -> fn()","parameters":{"oStaticInfo":"type: object, description: static info to construct the metadata from","sClassName":"type: string, description: fully qualified name of the class that is described by this metadata object"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Control"},"sap.ui.core.tmpl.Template":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use an {@link sap.ui.core.mvc.XMLView XMLView} or {@link sap.ui.core.mvc.JSView JSView} instead.<br>Base Class for Template.","getInterface":{"!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.tmpl.Template.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setContent":{"!description":"Sets a new value for property {@link #getContent content}.\n\nThe Template definition as a String.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sContent: String) -> sap.ui.core.tmpl.Template","parameters":{"sContent":"type: string, description: New value for property <code>content<\/code>"}},"parsePath":{"!description":"parses the given path and extracts the model and path","!static":true,"!category":"function","!type":"fn(sPath: String) -> Object","parameters":{"sPath":"type: string, description: the path"}},"declareControl":{"!description":"Declares a new control based on this template and returns the created class / constructor function. The class is based on the information coming from the abstract functions <code>createMetadata<\/code> and <code>createRenderer<\/code>.","!static":false,"!category":"function","!type":"fn(sControl: String) -> fn()","parameters":{"sControl":"type: string, description: the fully qualified name of the control"}},"getContent":{"!description":"Gets current value of property {@link #getContent content}.\n\nThe Template definition as a String.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.ManagedObject","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"placeAt":{"!description":"Creates an anonymous TemplateControl for the Template and places the control into the specified DOM element.","!static":false,"!category":"function","!type":"fn(oRef: String | Element | sap.ui.core.Control, oContext?: Object, vPosition?: String | Number, bInline: Boolean) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oContext":"type: object, description: The context to use to evaluate the Template. It will be applied as value for the context property of the created control.","oRef":"type: string|Element|sap.ui.core.Control, description: the id or the DOM reference where to render the template","vPosition":"type: string|int, description: Describes the position where the control should be put into the container","bInline":"type: boolean, description: undefined"}},"!constructorDescription":"Creates and initializes a new template with the given <code>sId<\/code> and\nsettings.\n\nThe set of allowed entries in the <code>mSettings<\/code> object depends on\nthe concrete subclass and is described there.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getContent content} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/core/tmpl/Template","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use an {@link sap.ui.core.mvc.XMLView XMLView} or {@link sap.ui.core.mvc.JSView JSView} instead.<br>Base Class for Template.","byId":{"!description":"Returns the registered template for the given ID, if any.","!static":true,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.tmpl.Template","parameters":{"sId":"type: string, description: undefined"}},"createControl":{"!description":"Creates an anonymous TemplateControl for the Template.","!static":false,"!category":"function","!type":"fn(sId: String, oContext?: Object, oView: sap.ui.core.mvc.View) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oView":"type: sap.ui.core.mvc.View, description: undefined","oContext":"type: object, description: the context for the renderer/templating","sId":"type: string, description: the control ID"}}},"sap.ui.core.Configuration":{"getLegacyDateCalendarCustomizing":{"!description":"Returns the currently set customizing data for Islamic calendar support","!static":false,"!category":"function","!type":"fn() -> [Object]"},"setTimePattern":{"!description":"Defines the preferred format pattern for the given time format style.\n\nCalling this method with a null or undefined pattern removes a previously set pattern.\n\nIf a pattern is defined, it will be preferred over patterns derived from the current locale.\n\nSee class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.\n\nAfter changing the time pattern, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sStyle: String, sPattern: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sPattern":"type: string, description: the format pattern to be used in LDML syntax.","sStyle":"type: string, description: must be one of short, medium, long or full."}},"getLegacyTimeFormat":{"!description":"Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.base.Object","!category":"class","setCustomCurrencies":{"!description":"Sets custom currencies and replaces existing entries.\n\nThere is a special currency code named \"DEFAULT\" that is optional. In case it is set it will be used for all currencies not contained in the list, otherwise currency digits as defined by the CLDR will be used as a fallback.\n\nExample: To use CLDR, but override single currencies <code> { \"KWD\": {\"digits\": 3}, \"TND\" : {\"digits\": 3} } <\/code>\n\nTo replace the CLDR currency digits completely <code> { \"DEFAULT\": {\"digits\": 2}, \"ADP\": {\"digits\": 0}, ... \"XPF\": {\"digits\": 0} } <\/code>\n\nNote: To unset the custom currencies: call with <code>undefined<\/code>","!static":false,"!category":"function","!type":"fn(mCurrencies: Object) -> sap.ui.core.Configuration.FormatSettings","parameters":{"mCurrencies":"type: object, description: currency map which is set"}},"getLegacyNumberFormat":{"!description":"Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.","!static":false,"!category":"function","!type":"fn()"},"setLegacyTimeFormat":{"!description":"Allows to specify one of the legacy ABAP time formats.\n\nThis method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP formats and sets the day period texts to \"AM\"/\"PM\" or \"am\"/\"pm\" respectively. When called with a null or undefined format id, any previously applied format will be removed.\n\nAfter changing the legacy time format, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sFormatId: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sFormatId":"type: string, description: id of the ABAP time format (one of '0','1','2','3','4')"}},"setDatePattern":{"!description":"Defines the preferred format pattern for the given date format style.\n\nCalling this method with a null or undefined pattern removes a previously set pattern.\n\nIf a pattern is defined, it will be preferred over patterns derived from the current locale.\n\nSee class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.\n\nAfter changing the date pattern, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sStyle: String, sPattern: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sPattern":"type: string, description: the format pattern to be used in LDML syntax.","sStyle":"type: string, description: must be one of short, medium, long or full."}},"setLegacyDateCalendarCustomizing":{"!description":"Allows to specify the customizing data for Islamic calendar support","!static":false,"!category":"function","!type":"fn(aMappings: [Object]) -> sap.ui.core.Configuration.FormatSettings","parameters":{"aMappings":"type: object[], description: contains the customizing data for the support of Islamic calendar."}},"!constructorDescription":"Creates a new Configuration object.","setLegacyNumberFormat":{"!description":"Allows to specify one of the legacy ABAP number format.\n\nThis method will modify the 'group' and 'decimal' symbols. When called with a null or undefined format id, any previously applied format will be removed.\n\nAfter changing the legacy number format, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sFormatId: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sFormatId":"type: string, description: id of the ABAP number format set (one of ' ','X','Y')"}},"getLegacyDateFormat":{"!description":"Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.","!static":false,"!category":"function","!type":"fn()"},"getNumberSymbol":{"!description":"Returns the currently set number symbol of the given type or undefined if no symbol has been defined.","!static":false,"!category":"function","!type":"fn()"},"setTrailingCurrencyCode":{"!description":"Define whether the NumberFormatter shall always place the currency code after the numeric value, with the only exception of right-to-left locales, where the currency code shall be placed before the numeric value. Default configuration setting is <code>true<\/code>.\n\nWhen set to <code>false<\/code> the placement of the currency code is done dynamically, depending on the configured locale using data provided by the Unicode Common Locale Data Repository (CLDR).\n\nEach currency instance ({@link sap.ui.core.format.NumberFormat#getCurrencyInstance}) will be created with this setting unless overwritten on instance level.","!static":false,"!category":"function","!type":"fn(bTrailingCurrencyCode: Boolean) -> sap.ui.core.Configuration.FormatSettings","parameters":{"bTrailingCurrencyCode":"type: boolean, description: Whether currency codes shall always be placed after the numeric value"}},"setLegacyDateFormat":{"!description":"Allows to specify one of the legacy ABAP date formats.\n\nThis method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP format. When called with a null or undefined format id, any previously applied format will be removed.\n\nAfter changing the legacy date format, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sFormatId: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sFormatId":"type: string, description: id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')"}},"!description":"Collects and stores the configuration of the current environment.\n\nThe Configuration is initialized once when the {@link sap.ui.core.Core} is created. There are different ways to set the environment configuration (in ascending priority): <ol> <li>System defined defaults<\/li> <li>Server wide defaults, read from /sap-ui-config.json<\/li> <li>Properties of the global configuration object window[\"sap-ui-config\"]<\/li> <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag.<\/li> <li>Individual data-sap-ui-<i>xyz<\/i> attributes of the bootstrap tag<\/li> <li>Using URL parameters<\/li> <li>Setters in this Configuration object (only for some parameters)<\/li> <\/ol>\n\nThat is, attributes of the DOM reference override the system defaults, URL parameters override the DOM attributes (where empty URL parameters set the parameter back to its system default). Calling setters at runtime will override any previous settings calculated during object creation.\n\nThe naming convention for parameters is: <ul> <li>in the URL : sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <\/ul> where <i>PARAMETER-NAME<\/i> is the name of the parameter in lower case.\n\nValues of boolean parameters are case insensitive where \"true\" and \"x\" are interpreted as true.","addCustomCurrencies":{"!description":"Adds custom currencies to the existing entries. E.g. <code> { \"KWD\": {\"digits\": 3}, \"TND\" : {\"digits\": 3} } <\/code>","!static":false,"!category":"function","!type":"fn(mCurrencies: Object) -> sap.ui.core.Configuration.FormatSettings","parameters":{"mCurrencies":"type: object, description: adds to the currency map"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Configuration.FormatSettings.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getDatePattern":{"!description":"Returns the currently set date pattern or undefined if no pattern has been defined.","!static":false,"!category":"function","!type":"fn()"},"getCustomCurrencies":{"!description":"Retrieves the custom currencies. E.g. <code> { \"KWD\": {\"digits\": 3}, \"TND\" : {\"digits\": 3} } <\/code>","!static":false,"!category":"function","!type":"fn() -> Object"},"setFirstDayOfWeek":{"!description":"Defines the day used as the first day of the week.\n\nThe day is set as an integer value between 0 (Sunday) and 6 (Saturday). Calling this method with a null or undefined symbol removes a previously set value.\n\nIf a value is defined, it will be preferred over values derived from the current locale.\n\nUsually in the US the week starts on Sunday while in most European countries on Monday. There are special cases where you want to have the first day of week set independent of the user locale.\n\nAfter changing the first day of week, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(iValue: Number) -> sap.ui.core.Configuration.FormatSettings","parameters":{"iValue":"type: int, description: must be an integer value between 0 and 6"}},"setNumberSymbol":{"!description":"Defines the string to be used for the given number symbol.\n\nCalling this method with a null or undefined symbol removes a previously set symbol string. Note that an empty string is explicitly allowed.\n\nIf a symbol is defined, it will be preferred over symbols derived from the current locale.\n\nSee class {@link sap.ui.core.format.NumberFormat} for details about the symbols.\n\nAfter changing the number symbol, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sStyle: String, sSymbol: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sSymbol":"type: string, description: will be used to represent the given symbol type","sStyle":"type: string, description: must be one of decimal, group, plusSign, minusSign."}},"getTimePattern":{"!description":"Returns the currently set time pattern or undefined if no pattern has been defined.","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/core/Configuration","!helpDescription":"Collects and stores the configuration of the current environment.\n\nThe Configuration is initialized once when the {@link sap.ui.core.Core} is created. There are different ways to set the environment configuration (in ascending priority): <ol> <li>System defined defaults<\/li> <li>Server wide defaults, read from /sap-ui-config.json<\/li> <li>Properties of the global configuration object window[\"sap-ui-config\"]<\/li> <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag.<\/li> <li>Individual data-sap-ui-<i>xyz<\/i> attributes of the bootstrap tag<\/li> <li>Using URL parameters<\/li> <li>Setters in this Configuration object (only for some parameters)<\/li> <\/ol>\n\nThat is, attributes of the DOM reference override the system defaults, URL parameters override the DOM attributes (where empty URL parameters set the parameter back to its system default). Calling setters at runtime will override any previous settings calculated during object creation.\n\nThe naming convention for parameters is: <ul> <li>in the URL : sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <\/ul> where <i>PARAMETER-NAME<\/i> is the name of the parameter in lower case.\n\nValues of boolean parameters are case insensitive where \"true\" and \"x\" are interpreted as true.","getFormatLocale":{"!description":"Returns the locale to be used for formatting.\n\nIf no such locale has been defined, this method falls back to the language, see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.\n\nIf any user preferences for date, time or number formatting have been set, and if no format locale has been specified, then a special private use subtag is added to the locale, indicating to the framework that these user preferences should be applied.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Locale"},"getTrailingCurrencyCode":{"!description":"Returns current trailingCurrencyCode configuration for new NumberFormatter instances","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.core.util.File":{"!description":"Utility class to handle files.","!module":"sap/ui/core/util/File","!helpDescription":"Utility class to handle files.","save":{"!description":"<p>Triggers a download / save action of the given file.<\/p>\n\n<p>There are limitations for this feature in some browsers:<p>\n\n<p><b>macOS Safari < 10.1 / iOS Safari<\/b><br> A new window or tab is opened. In macOS, the user has to save the file manually (by using key combination \"CMD + S\", choosing the page source format, and specifying a file name). In iOS, the content can be opened in another app (Mail, Notes, ...) or can be copied to the clipboard. If a pop-up blocker prevents this action, an error will be thrown which can be used to notify the user that the pop-up blocker needs to be disabled.<\/p>\n\n<p><b>Android Browser<\/b><br> Not supported<\/p>\n\n<p><b>Windows Phone 10 Edge<\/b><br> Not supported<\/p>","!static":"true","!category":"function","!type":"fn(sData: String, sFileName: String, sFileExtension: String, sMimeType: String, sCharset: String, bByteOrderMark?: Boolean)"},"!category":"namespace"},"sap.ui.core.util.serializer.delegate.XML":{"!description":"XML serializer delegate class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.delegate.XML with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.delegate.XML.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"XML serializer delegate class. Called by the serializer instance.","!module":"sap/ui/core/util/serializer/delegate/XML","!helpDescription":"XML serializer delegate class.","!proto":"sap.ui.core.util.serializer.delegate.Delegate","!category":"class"},"sap.ui.core.routing.RouterHashChanger":{"!description":"Class for manipulating and receiving changes of the relevant hash segment which belongs to a router. This Class doesn't change the browser hash directly, but informs its parent RouterHashChanger and finally changes the browser hash through the {@link sap.ui.core.routing.HashChanger}","extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.RouterHashChanger with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.routing.HashChangerBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.RouterHashChanger.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/core/routing/RouterHashChanger","getHash":{"!description":"Gets the current hash","!static":false,"!category":"function","!type":"fn() -> String"},"!helpDescription":"Class for manipulating and receiving changes of the relevant hash segment which belongs to a router. This Class doesn't change the browser hash directly, but informs its parent RouterHashChanger and finally changes the browser hash through the {@link sap.ui.core.routing.HashChanger}","fireHashChanged":{"!description":"Save the given hash and potentially fires a \"hashChanged\" event; may be extended to modify the hash before firing the event.","!static":false,"!category":"function","!type":"fn(sHash: String, oSubHashMap: Object, bUpdateHashOnly: Boolean)","parameters":{"oSubHashMap":"type: object, description: the prefixes and hashes for the child RouterHashChangers","bUpdateHashOnly":"type: boolean, description: if this parameter is set to true, the given sHash is saved in the instance but no \"hashChanged\" event is fired.","sHash":"type: string, description: the new hash of the browser"}},"resetHash":{"!description":"Reset the hash\n\nThis is needed for allowing to fire the hashChanged event with the previous hash again after displaying a Target without involving a Router.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.RouterHashChanger"},"!proto":"sap.ui.core.routing.HashChangerBase","!category":"class","setHash":{"!description":"Sets the hash to a certain value. When using this function, a browser history entry is written. If you do not want to have an entry in the browser history, please use the {@link #replaceHash} function.","!static":false,"!category":"function","!type":"fn(sHash: String, pNestedHashChange?: Promise, bSuppressActiveHashCollect?: Boolean) -> Promise | undefined","parameters":{"pNestedHashChange":"type: Promise, description: When this parameter is given, this RouterHashChanger switchs to collect mode and all hash changes from its children will be collected. When this promise resolves, this RouterHashChanger fires a \"hashSet\" event with its own hash and the hashes which are collected from the child RouterHashChanger(s).","sHash":"type: string, description: New hash","bSuppressActiveHashCollect":"type: boolean, description: Whether this RouterHashChanger shouldn't collect the prefixes from its active child RouterHashChanger(s) and forward them as delete prefixes within the next \"hashSet\" event"}},"replaceHash":{"!description":"Replaces the hash with a certain value. When using the replace function, no browser history entry is written. If you want to have an entry in the browser history, please use the {@link #setHash} function.","!static":false,"!category":"function","!type":"fn(sHash: String, pNestedHashChange?: Promise, bSuppressActiveHashCollect?: Boolean) -> Promise | undefined","parameters":{"pNestedHashChange":"type: Promise, description: When this parameter is given, this RouterHashChanger switchs to collect mode and all hash changes from its children will be collected. When this promise resolves, this RouterHashChanger fires a \"hashReplaced\" event with its own hash and the hashes which are collected from the child RouterHashChanger(s).","sHash":"type: string, description: New hash","bSuppressActiveHashCollect":"type: boolean, description: Whether this RouterHashChanger shouldn't collect the prefixes from its active child RouterHashChanger(s) and forward them as delete prefixes within the next \"hashReplaced\" event"}}},"sap.ui.model.odata.type.DateTime":{"!description":"This class represents the OData V2 primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.DateTime<\/code><\/a>.\n\nIf you want to display a date and a time, prefer {@link sap.ui.model.odata.type.DateTimeOffset}, specifically designed for this purpose.\n\nUse <code>DateTime<\/code> with the SAP-specific annotation <code>display-format=Date<\/code> (resp. the constraint <code>displayFormat: \"Date\"<\/code>) to display only a date.\n\nIn {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a <code>Date<\/code>. With the constraint <code>displayFormat: \"Date\"<\/code>, the time zone is UTC and the time part is ignored, otherwise it is a date/time value in local time.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.DateTime with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.DateTime.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.DateTime<\/code>.","getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/DateTime","!helpDescription":"This class represents the OData V2 primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.DateTime<\/code><\/a>.\n\nIf you want to display a date and a time, prefer {@link sap.ui.model.odata.type.DateTimeOffset}, specifically designed for this purpose.\n\nUse <code>DateTime<\/code> with the SAP-specific annotation <code>display-format=Date<\/code> (resp. the constraint <code>displayFormat: \"Date\"<\/code>) to display only a date.\n\nIn {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a <code>Date<\/code>. With the constraint <code>displayFormat: \"Date\"<\/code>, the time zone is UTC and the time part is ignored, otherwise it is a date/time value in local time.","!proto":"sap.ui.model.odata.type.DateTimeBase","!category":"class"},"sap.ui.model.json.JSONTreeBinding":{"!description":"Tree binding implementation for JSON format.\n\nThe bound data can contain JSON objects and arrays. Both will be used to build the tree structure. You can optionally define a set of arrays to be used for the tree structure in the parameter <code>arrayNames<\/code>. If this parameter is set, all other objects and arrays will be ignored.","!constructorDescription":"Creates a new JSONListBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.json.JSONModel#bindTree JSONModel#bindTree} on the corresponding model instance instead.","!module":"sap/ui/model/json/JSONTreeBinding","!helpDescription":"Tree binding implementation for JSON format.\n\nThe bound data can contain JSON objects and arrays. Both will be used to build the tree structure. You can optionally define a set of arrays to be used for the tree structure in the parameter <code>arrayNames<\/code>. If this parameter is set, all other objects and arrays will be ignored.","!proto":"sap.ui.model.ClientTreeBinding","!category":"class"},"module:sap/ui/events/PseudoEvents.events":{"sapright":{"!description":"Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapnext":{"!description":"Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapexpandmodifiers":{"!description":"Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"saptabnext":{"!description":"Pseudo event for keyboard tab (TAB + no modifier)","!category":"enum","!type":"Object"},"sapnextmodifiers":{"!description":"Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapincrease":{"!description":"Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"saphome":{"!description":"Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapdownmodifiers":{"!description":"Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapshow":{"!description":"Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)","!category":"enum","!type":"Object"},"sapexpand":{"!description":"Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapleftmodifiers":{"!description":"Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapselect":{"!description":"Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapdeletemodifiers":{"!description":"Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapbackspace":{"!description":"Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"!description":"Enumeration of all so called \"pseudo events\", a useful classification of standard browser events as implied by SAP product standards.\n\nWhenever a browser event is recognized as one or more pseudo events, then this classification is attached to the original {@link jQuery.Event} object and thereby delivered to any jQuery-style listeners registered for that browser event.\n\nPure JavaScript listeners can evaluate the classification information using the {@link module:sap/ui/events/jquery/EventExtension#isPseudoType} method.\n\nInstead of using the procedure as described above, the SAPUI5 controls and elements should simply implement an <code>on<i>pseudo-event<\/i>(oEvent)<\/code> method. It will be invoked only when that specific pseudo event has been recognized. This simplifies event dispatching even further.","sappageup":{"!description":"Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapcollapsemodifiers":{"!description":"Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"saphomemodifiers":{"!description":"Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapleft":{"!description":"Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapincreasemodifiers":{"!description":"Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapplus":{"!description":"Pseudo event for pressing the '+' (plus) sign.","!category":"enum","!type":"Object"},"saprightmodifiers":{"!description":"Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapskipback":{"!description":"Pseudo event for pseudo skip back (F6 + shift modifier)","!category":"enum","!type":"Object"},"sapdecrease":{"!description":"Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"!module":"sap/ui/events/PseudoEvents","sapcollapseall":{"!description":"Pseudo event for pseudo collapse event (keyboard numpad *)","!category":"enum","!type":"Object"},"sapdelete":{"!description":"Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapescape":{"!description":"Pseudo event for keyboard escape","!category":"enum","!type":"Object"},"sapdown":{"!description":"Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapupmodifiers":{"!description":"Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"!category":"static class","sapendmodifiers":{"!description":"Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapprevious":{"!description":"Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"saptabprevious":{"!description":"Pseudo event for keyboard tab (TAB + shift modifier)","!category":"enum","!type":"Object"},"sappagedown":{"!description":"Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapselectmodifiers":{"!description":"Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sappageupmodifiers":{"!description":"Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapbottom":{"!description":"Pseudo event for pseudo bottom event","!category":"enum","!type":"Object"},"sapcollapse":{"!description":"Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sappreviousmodifiers":{"!description":"Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapskipforward":{"!description":"Pseudo event for pseudo skip forward (F6 + no modifier)","!category":"enum","!type":"Object"},"sapdelayeddoubleclick":{"!description":"Pseudo event indicating delayed double click (e.g. for inline edit)","!category":"enum","!type":"Object"},"saphide":{"!description":"Pseudo event for pseudo 'hide' event (Alt + up-Arrow)","!category":"enum","!type":"Object"},"sapspacemodifiers":{"!description":"Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapspace":{"!description":"Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapend":{"!description":"Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapenter":{"!description":"Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapbackspacemodifiers":{"!description":"Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapentermodifiers":{"!description":"Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"saptop":{"!description":"Pseudo event for pseudo top event","!category":"enum","!type":"Object"},"sapdecreasemodifiers":{"!description":"Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapminus":{"!description":"Pseudo event for pressing the '-' (minus) sign.","!category":"enum","!type":"Object"},"sappagedownmodifiers":{"!description":"Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"},"sapup":{"!description":"Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"Object"}},"sap.ui.model.odata.ODataListBinding":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 please use {@link sap.ui.model.odata.v2.ODataListBinding} instead.<br>List binding implementation for OData format.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataListBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.model.ListBinding","refresh":{"!description":"Refreshes the binding, checks whether the model data has been changed and fires a change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, use the parameter <code>bForceUpdate<\/code>.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: Update the bound control even if no data has been changed"}},"!category":"class","sort":{"!description":"Sorts the list.","!static":false,"!category":"function","!type":"fn(aSorters: sap.ui.model.Sorter | Array) -> sap.ui.model.ListBinding","parameters":{"aSorters":"type: sap.ui.model.Sorter|Array, description: the Sorter or an array of sorter objects object which define the sort order"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Filters the list.\n\nWhen using sap.ui.model.Filter the filters are first grouped according to their binding path. All filters belonging to a group are combined with OR and after that the results of all groups are combined with AND. Usually this means, all filters applied to a single table column are combined with OR, while filters on different table columns are combined with AND. Please note that a custom filter function is not supported.","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter[] | sap.ui.model.odata.Filter], sFilterType: sap.ui.model.FilterType) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter[]|sap.ui.model.odata.Filter[], description: Array of filter objects","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted, if it is not given, the standard behaviour applies"}},"getContexts":{"!description":"Return contexts for the list","!static":false,"!category":"function","!type":"fn(iStartIndex?: Number, iLength?: Number, iThreshold?: Number) -> [sap.ui.model.Context]","parameters":{"iThreshold":"type: int, description: undefined","iStartIndex":"type: int, description: the start index of the requested contexts","iLength":"type: int, description: the requested amount of contexts"}},"!module":"sap/ui/model/odata/ODataListBinding","getDownloadUrl":{"!description":"Get a download URL with the specified format considering the sort/filter/custom parameters.","!static":false,"!category":"function","!type":"fn(sFormat: String) -> String","parameters":{"sFormat":"type: string, description: Value for the $format Parameter"}},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 please use {@link sap.ui.model.odata.v2.ODataListBinding} instead.<br>List binding implementation for OData format.","initialize":{"!description":"Initialize binding. Fires a change if data is already available ($expand) or a refresh. If metadata is not yet available, do nothing, method will be called again when metadata is loaded.","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.core.dnd":{"DragDropInfo":"sap.ui.core.dnd.DragDropInfo_obj","!description":"Contains classes and helpers related to drag & drop functionality.","targetAggregation":{"!description":"The aggregation name in the drop target control which is the target of this drag-and-drop action. If undefined, the entire control is the target. This can be handy if the target control does not have any aggregations or if the drop position within the target does not matter.","!category":"enum","!type":"String"},"IDragInfo":"sap.ui.core.dnd.IDragInfo","DragSession":"sap.ui.core.dnd.DragSession","DragInfo":"sap.ui.core.dnd.DragInfo_obj","dropPosition":{"!description":"Defines the position for the drop action, visualized by a rectangle.","!category":"enum","!type":"sap.ui.core.dnd.DropPosition"},"!category":"namespace","sourceAggregation":{"!description":"The name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.","!category":"enum","!type":"String"},"bIgnoreMetadataCheck":{"!description":"This private flag determines whether or not to check dnd metadata settings.","!category":"enum","!type":"String"},"enabled":{"!description":"Indicates whether this configuration is active or not.","!category":"enum","!type":"Boolean"},"DropInfo":"sap.ui.core.dnd.DropInfo_obj","dropEffect":{"!description":"Defines the visual drop effect.\n\nIn Internet Explorer, default visual drop effect is <code>Copy<\/code> and this property has no effect.","!category":"enum","!type":"sap.ui.core.dnd.DropEffect"},"groupName":{"!description":"Defines the name of the group to which this object belongs. If <code>groupName<\/code> is specified, then this object will only interacts with other drag-and-drop objects within the same group.","!category":"enum","!type":"String"},"!module":"sap/ui/core/dnd/DragAndDrop","!helpDescription":"Contains classes and helpers related to drag & drop functionality.","IDropInfo":"sap.ui.core.dnd.IDropInfo","DragDropBase":"sap.ui.core.dnd.DragDropBase_obj","dropLayout":{"!description":"Defines the layout of the droppable controls if <code>dropPosition<\/code> is set to <code>Between<\/code> or <code>OnOrBetween<\/code>.","!category":"enum","!type":"sap.ui.core.dnd.DropLayout"}},"sap.ui.model.message":{"!description":"Message DataBinding","MessageModel":"sap.ui.model.message.MessageModel_obj","!module":"sap/ui/model/message/MessageModel","!helpDescription":"Message DataBinding","!category":"namespace"},"sap.ui.model.analytics.odata4analytics.Dimension":{"!description":"Representation of a property annotated with sap:aggregation-role=\"dimension\".","hasMasterData":{"!description":"Get indicator whether or not master data is available for this dimension","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMasterDataEntitySet":{"!description":"Get master data entity set for this dimension","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntitySet"},"getName":{"!description":"Get the name of the dimension","!static":false,"!category":"function","!type":"fn() -> String"},"getAllAttributeNames":{"!description":"Get the names of all attributes included in this dimension","!static":false,"!category":"function","!type":"fn() -> [String]"},"!proto":"sap.ui.base.Object","!category":"class","getSuperOrdinateDimension":{"!description":"Get super-ordinate dimension","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Create a representation of a dimension provided by an analytic query. Do not create your own instances.","getAllAttributes":{"!description":"Get all attributes of this dimension","!static":false,"!category":"function","!type":"fn() -> Object"},"!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of a property annotated with sap:aggregation-role=\"dimension\".","findAttributeByName":{"!description":"Find attribute by name","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.Dimension","parameters":{"sName":"type: string, description: Attribute name"}},"getKeyProperty":{"!description":"Get the key property","!static":false,"!category":"function","!type":"fn() -> Object"},"getTextProperty":{"!description":"Get text property related to this dimension","!static":false,"!category":"function","!type":"fn() -> Object"},"getContainingQueryResult":{"!description":"Get query result containing this dimension","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.QueryResult"},"getHierarchy":{"!description":"Get associated hierarchy","!static":false,"!category":"function","!type":"fn() -> Object"},"getLabelText":{"!description":"Get label","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.routing.RouterHashChanger_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.RouterHashChanger with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.routing.HashChangerBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.routing.RouterHashChanger"},"sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel_obj":{"!type":"fn(oModel: Object)","prototype":"sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel"},"sap.ui.core.AccessibleRole":{"AlertDialog":{"!description":"A separate window with an alert or error information.","!category":"enum","!type":"String"},"RadioGroup":{"!description":"A group of radio controls.","!category":"enum","!type":"String"},"TreeItem":{"!description":"A tree node","!category":"enum","!type":"String"},"Document":{"!description":"Content that contains related information, such as a book.","!category":"enum","!type":"String"},"MenuItemRadio":{"!description":"A menu item which is part of a group of menuitemradio roles.","!category":"enum","!type":"String"},"Button":{"!description":"Allows user-triggered actions.","!category":"enum","!type":"String"},"ContentInfo":{"!description":"Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.","!category":"enum","!type":"String"},"Checkbox":{"!description":"A control that has three possible values: true, false, mixed.","!category":"enum","!type":"String"},"Dialog":{"!description":"A small window that is designed to interrupt the current application processing in order to inform the user and to get some response.","!category":"enum","!type":"String"},"Search":{"!description":"A search section of a web document. In many cases, this is a form used to submit search requests about the site, or a more general Internet wide search service.","!category":"enum","!type":"String"},"Tree":{"!description":"A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.","!category":"enum","!type":"String"},"List":{"!description":"A container for non-interactive list items which are the children of the list.","!category":"enum","!type":"String"},"Tabpanel":{"!description":"A container for the resources associated with a tab.","!category":"enum","!type":"String"},"Toolbar":{"!description":"A collection of commonly used functions represented in compact visual form.","!category":"enum","!type":"String"},"!description":"Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property. For more information, goto \"Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)\" at the www.w3.org homepage.","Status":{"!description":"A container for processing advisory information.","!category":"enum","!type":"String"},"Img":{"!description":"A container for a collection of elements that form an image.","!category":"enum","!type":"String"},"Log":{"!description":"An area where new information is added, or old information disappears. Information types are chat logs, messaging, or error logs, for example. The log contains a sequence: New information is always added to the end of the log.","!category":"enum","!type":"String"},"Tooltip":{"!description":"A popup that displays a description for an element when the user passes over or rests on that element. Supplement to the normal tooltip processing of the user agent.","!category":"enum","!type":"String"},"Definition":{"!description":"The content of the associated element represents a definition. If there is a definition element within the content, this one represents the term being defined.","!category":"enum","!type":"String"},"GridCell":{"!description":"A table cell in a grid where the cells can be active, editable, and selectable. Cells may have functional relationships to controls, for example.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Note":{"!description":"The content is parenthetic or ancillary to the main content of the resource.","!category":"enum","!type":"String"},"SeeAlso":{"!description":"Indicates that the element contains content that is related to the main content of the page.","!category":"enum","!type":"String"},"Region":{"!description":"A large section on the web page.","!category":"enum","!type":"String"},"Option":{"!description":"A selectable item in a list represented by a select.","!category":"enum","!type":"String"},"Tablist":{"!description":"A list of tabs which are references to tab panels.","!category":"enum","!type":"String"},"Row":{"!description":"A row of table cells.","!category":"enum","!type":"String"},"Application":{"!description":"A software unit executing a set of tasks for the user.","!category":"enum","!type":"String"},"Link":{"!description":"An interactive reference to a resource.","!category":"enum","!type":"String"},"Group":{"!description":"A section of user interface objects.","!category":"enum","!type":"String"},"Heading":{"!description":"A heading for a section of the page.","!category":"enum","!type":"String"},"Description":{"!description":"Descriptive content for a page element.","!category":"enum","!type":"String"},"Marquee":{"!description":"Is used to scroll text across the page.","!category":"enum","!type":"String"},"Slider":{"!description":"A user input where the user selects an input in a given range. This form of range expects an analogous keyboard interface.","!category":"enum","!type":"String"},"Combobox":{"!description":"Allows selecting an item from a list, or to enter data directly in the input field.","!category":"enum","!type":"String"},"Grid":{"!description":"Contains cells of tabular data arranged in rows and columns, for example in a table.","!category":"enum","!type":"String"},"!category":"static class","RowHeader":{"!description":"A table cell containing header information for a row.","!category":"enum","!type":"String"},"TreeGrid":{"!description":"A grid whose rows are expandable and collapsable in the same manner as the ones of trees.","!category":"enum","!type":"String"},"Menu":{"!description":"Offers a list of choices to the user.","!category":"enum","!type":"String"},"Listbox":{"!description":"A widget that allows the user to select one or more items from a list. The items within the list are static and can contain images.","!category":"enum","!type":"String"},"ProgressBar":{"!description":"Shows the execution progress in applications providing functions that take a long time.","!category":"enum","!type":"String"},"Directory":{"!description":"A list of references to members of a single group.","!category":"enum","!type":"String"},"Secondary":{"!description":"A unique section of the document. In the case of a portal, this may include time display, weather forecast, or stock price.","!category":"enum","!type":"String"},"Navigation":{"!description":"A collection of links suitable for use when navigating the document or related documents.","!category":"enum","!type":"String"},"SpinButton":{"!description":"Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and the other ones can be displayed by scrolling using the arrow up and arrow down key.","!category":"enum","!type":"String"},"Banner":{"!description":"Usually defined as the advertisement at the top of a web page. The banner content typically contains the site or company logo, or other key advertisements.","!category":"enum","!type":"String"},"Textbox":{"!description":"Inputs that allow free-form text as their value.","!category":"enum","!type":"String"},"Menubar":{"!description":"A container for menu items where each item may activate a submenu.","!category":"enum","!type":"String"},"MenuItem":{"!description":"A child in a menu.","!category":"enum","!type":"String"},"Radio":{"!description":"An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.","!category":"enum","!type":"String"},"Presentation":{"!description":"An element whose role is presentational does not need to be mapped to the accessibility API.","!category":"enum","!type":"String"},"MenuItemCheckbox":{"!description":"A checkable menu item (tri-state).","!category":"enum","!type":"String"},"ColumnHeader":{"!description":"A table cell containing header information for a column.","!category":"enum","!type":"String"},"Tab":{"!description":"A header for a tab panel.","!category":"enum","!type":"String"},"Timer":{"!description":"A numerical counter which indicates an amount of elapsed time from a start point, or of the time remaining until a certain end point.","!category":"enum","!type":"String"},"Alert":{"!description":"A message with an alert or error information.","!category":"enum","!type":"String"},"ListItem":{"!description":"A single item in a list.","!category":"enum","!type":"String"},"Main":{"!description":"Defines the main content of a document.","!category":"enum","!type":"String"},"Separator":{"!description":"A line or bar that separates sections of content.","!category":"enum","!type":"String"}},"sap.ui.model.analytics.odata4analytics.RecursiveHierarchy_obj":{"!type":"fn(oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oNodeIDProperty: Object, oParentNodeIDProperty: Object, oNodeLevelProperty: Object, oNodeValueProperty: Object, oNodeExternalKeyProperty: Object)","prototype":"sap.ui.model.analytics.odata4analytics.RecursiveHierarchy"},"jQuery.device.is":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use the respective functions of {@link sap.ui.Device} instead<br>Holds information about the current device and its state","standalone":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use window.navigator.standalone instead<br>Whether the application runs in standalone mode without browser UI (launched from the iOS home screen)","!category":"enum","!type":"Boolean"},"!category":"namespace","portrait":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.orientation.portrait} instead<br>Whether the device is in portrait orientation","!category":"enum","!type":"Boolean"},"android_phone":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.0 use {@link sap.ui.Device.system.phone} &amp;&amp; {@link sap.ui.Device.os.android} instead<br>Whether the application runs on an Android phone - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.phone on Android) https://developers.google.com/chrome/mobile/docs/user-agent Some device vendors however do not follow this rule","!category":"enum","!type":"Boolean"},"iphone":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 shouldn't do device specific coding; if still needed, use {@link sap.ui.Device.os.ios} &amp;&amp; {@link sap.ui.Device.system.phone}<br>Whether the application runs on an iPhone","!category":"enum","!type":"Boolean"},"android_tablet":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.0 use {@link sap.ui.Device.system.tablet} &amp;&amp; {@link sap.ui.Device.os.android} instead<br>Whether the application runs on an Android tablet - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.tablet on Android) https://developers.google.com/chrome/mobile/docs/user-agent Some device vendors however do not follow this rule","!category":"enum","!type":"Boolean"},"tablet":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.0 use {@link sap.ui.Device.system.tablet} instead<br>Whether the running device is a tablet. If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-test-mobile), this property will also be set according to the simulated platform. This property will be false when runs in desktop browser.","!category":"enum","!type":"Boolean"},"desktop":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.0 use {@link sap.ui.Device.system.desktop} instead<br>Whether the running device is a desktop browser. If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-test-mobile), this property will be false.","!category":"enum","!type":"Boolean"},"!module":"jquery.sap.mobile","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use the respective functions of {@link sap.ui.Device} instead<br>Holds information about the current device and its state","phone":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.17.0 use {@link sap.ui.Device.system.phone} instead<br>Whether the running device is a phone. If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-test-mobile), this property will also be set according to the simulated platform. This property will be false when runs in desktop browser.","!category":"enum","!type":"Boolean"},"ipad":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 shouldn't do device specific coding; if still needed, use {@link sap.ui.Device.os.ios} &amp;&amp; {@link sap.ui.Device.system.tablet}<br>Whether the application runs on an iPad","!category":"enum","!type":"Boolean"},"landscape":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.orientation.landscape} instead<br>Whether the device is in \"landscape\" orientation (also \"true\" when the device does not know about the orientation)","!category":"enum","!type":"Boolean"}},"module:sap/ui/dom/jquery/control":{"!description":"This module provides the {@link jQuery#control} API.","!module":"sap/ui/dom/jquery/control","!helpDescription":"This module provides the {@link jQuery#control} API.","module:sap/ui/dom/jquery/control":"module:sap/ui/dom/jquery/control","!category":"namespace"},"sap.ui.core.util.serializer.ViewSerializer":{"!description":"ViewSerializer class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.ViewSerializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.ViewSerializer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"View serializer class. Iterates over all controls and serializes all found views by calling the corresponding view type serializer.","!module":"sap/ui/core/util/serializer/ViewSerializer","!helpDescription":"ViewSerializer class.","!proto":"sap.ui.base.EventProvider","!category":"class"},"sap.ui.base.Poolable":{"!description":"Contract for objects that can be pooled by an <code>ObjectPool<\/code>.\n\nPoolable objects must provide a no-arg constructor which is used by the pool to construct new, unused objects.\n\nTo be more convenient to use, poolable objects should implement their constructor in a way that it either can be called with no arguments (used by the pool) or with the same signature as their {@link #init} method (to be used by applications).","!module":"sap/ui/base/ObjectPool","!category":"static class"},"sap.ui.core.Configuration_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.Configuration"},"sap.ui.model.type.Unit_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Unit with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object, aDynamicFormatOptionNames?: Array)","prototype":"sap.ui.model.type.Unit"},"sap.ui.core.routing.Route_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Route with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oRouter: sap.ui.core.routing.Router, oConfig: Object, oParent?: sap.ui.core.routing.Route)","prototype":"sap.ui.core.routing.Route"},"sap.ui.model.odata.type.Int32":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Int32<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int32 with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Int32.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Int32<\/code>.","getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Int32","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Int32<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","getRange":{"!description":"Returns the type's supported range as object with properties <code>minimum<\/code> and <code>maximum<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.model.odata.type.Int","!category":"class"},"sap.ui.model.ClientListBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object)","prototype":"sap.ui.model.ClientListBinding"},"sap.ui.model.odata.type.Single_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Single with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Single"},"sap.ui.model.base.ManagedObjectModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.base.ManagedObjectModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oObject: sap.ui.base.ManagedObject, oData: Object)","prototype":"sap.ui.model.base.ManagedObjectModel"},"sap.ui.core.support.usage.EventBroadcaster_obj":{"!type":"fn()","prototype":"sap.ui.core.support.usage.EventBroadcaster"},"sap.ui.model.odata.type.Decimal":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Decimal<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>. It never uses exponential format (\"1e-5\").","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Decimal with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Decimal.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Decimal<\/code>.","formatValue":{"!description":"Formats the given value to the given target type. When formatting to \"string\" the type's constraint <code>scale<\/code> is taken into account.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> Number | String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","sValue":"type: string, description: the value to be formatted, which is represented as a string in the model"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Decimal","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Decimal<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>. It never uses exponential format (\"1e-5\").","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to a decimal in <code>string<\/code> representation.","!static":false,"!category":"function","!type":"fn(vValue: String | Number, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); may be \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|number, description: the value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>"}}},"sap.ui.Device.support":{"!description":"Contains information about detected capabilities of the used browser or Device.","orientation":{"!description":"If this flag is set to <code>true<\/code>, the used browser natively supports the <code>orientationchange<\/code> event.\n\n<b>Note:<\/b> The {@link sap.ui.Device.orientation orientation event} of the device API can also be used when there is no native support.","!category":"enum","!type":"Boolean"},"pointer":{"!description":"If this flag is set to <code>true<\/code>, the used browser supports pointer events.","!category":"enum","!type":"Boolean"},"!module":"sap/ui/Device","matchmedia":{"!description":"If this flag is set to <code>true<\/code>, the used browser natively supports media queries via JavaScript.\n\n<b>Note:<\/b> The {@link sap.ui.Device.media media queries API} of the device API can also be used when there is no native support.","!category":"enum","!type":"Boolean"},"!helpDescription":"Contains information about detected capabilities of the used browser or Device.","matchmedialistener":{"!description":"If this flag is set to <code>true<\/code>, the used browser natively supports events of media queries via JavaScript.\n\n<b>Note:<\/b> The {@link sap.ui.Device.media media queries API} of the device API can also be used when there is no native support.","!category":"enum","!type":"Boolean"},"retina":{"!description":"If this flag is set to <code>true<\/code>, the device has a display with a high resolution.","!category":"enum","!type":"Boolean"},"websocket":{"!description":"If this flag is set to <code>true<\/code>, the used browser supports web sockets.","!category":"enum","!type":"Boolean"},"touch":{"!description":"If this flag is set to <code>true<\/code>, the used browser supports touch events.\n\n<b>Note:<\/b> This flag indicates whether the used browser supports touch events or not. This does not necessarily mean that the used device has a touchable screen.","!category":"enum","!type":"Boolean"},"!category":"namespace"},"sap.ui.core.Component_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Component with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Component"},"sap.ui.core.ValueStateSupport":{"!description":"Helper functionality for value state support.","getAdditionalText":{"!description":"Returns a generic success, warning or error message if the given Element has a property \"valueState\" with one of these three states or the given ValueState represents one of these states.","!static":"true","!category":"function","!type":"fn(vValue: sap.ui.core.Element | sap.ui.core.ValueState) -> String"},"!module":"sap/ui/core/ValueStateSupport","formatValueState":{"!description":"Returns a ValueState object based on the given integer value\n\n0 : ValueState.None 1 : ValueState.Warning 2 : ValueState.Success 3 : ValueState.Error 4 : ValueState.Information","!static":"true","!category":"function","!type":"fn(iState: Number) -> sap.ui.core.ValueState"},"!helpDescription":"Helper functionality for value state support.","!category":"namespace","enrichTooltip":{"!description":"Appends a generic success, warning or error message to the given tooltip text if the given Element has a property \"valueState\" with one of these three states.","!static":"true","!category":"function","!type":"fn(oElement: sap.ui.core.Element, sTooltipText: String) -> String"}},"sap.ui.model.odata.ODataMessageParser_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataMessageParser with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageParser.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.odata.ODataMessageParser"},"sap.ui.core.util.reflection.JsControlTreeModifier":{"!description":"Static utility class to access ManagedObjects in a harmonized way with XMLNodes.","!module":"sap/ui/core/util/reflection/JsControlTreeModifier","!helpDescription":"Static utility class to access ManagedObjects in a harmonized way with XMLNodes.","!category":"namespace"},"sap.ui.core.ws.ReadyState":{"!description":"Defines the different ready states for a WebSocket connection.","!module":"sap/ui/core/ws/ReadyState","CLOSED":{"!description":"The connection has been closed or could not be opened.","!category":"enum","!type":"Number"},"CLOSING":{"!description":"The connection is going through the closing handshake.","!category":"enum","!type":"Number"},"CONNECTING":{"!description":"The connection has not yet been established.","!category":"enum","!type":"Number"},"!category":"static class","OPEN":{"!description":"The WebSocket connection is established and communication is possible.","!category":"enum","!type":"Number"}},"sap.ui.model.odata.v4.Context":{"hasPendingChanges":{"!description":"Returns whether there are pending changes for bindings dependent on this context, or for unresolved bindings which were dependent on this context at the time the pending change was created. This includes the context itself being transient (see {@link #isTransient}).","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getIndex":{"!description":"Returns the context's index within the binding's collection. The return value changes when a new entity is added via {@link sap.ui.model.odata.v4.ODataListBinding#create} without <code>bAtEnd<\/code>, and when a context representing a created entity is deleted again.","!static":false,"!category":"function","!type":"fn() -> Number"},"!proto":"sap.ui.model.Context","!category":"class","delete":{"!description":"Deletes the OData entity this context points to.\n\nThe context must not be used anymore after successful deletion.","!static":false,"!category":"function","!type":"fn(sGroupId?: String) -> Promise","parameters":{"sGroupId":"type: string, description: The group ID to be used for the DELETE request; if not specified, the update group ID for the context's binding is used, see {@link sap.ui.model.odata.v4.ODataModel#bindContext} and {@link sap.ui.model.odata.v4.ODataModel#bindList}; the resulting group ID must not have {@link sap.ui.model.odata.v4.SubmitMode.API}."}},"!constructorDescription":"Do <strong>NOT<\/strong> call this private constructor. In the OData V4 model you cannot\ncreate contexts at will: retrieve them from a binding or a view element instead.","getBinding":{"!description":"Returns the binding this context belongs to.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding"},"requestProperty":{"!description":"Returns a promise on the property value for the given path relative to this context. The path is expected to point to a structural property with primitive type.","!static":false,"!category":"function","!type":"fn(sPath?: String, bExternalFormat?: Boolean) -> Promise","parameters":{"sPath":"type: string, description: A relative path within the JSON structure","bExternalFormat":"type: boolean, description: If <code>true<\/code>, the value is returned in external format using a UI5 type for the given property path that formats corresponding to the property's EDM type and constraints."}},"requestSideEffects":{"!description":"Loads side effects for this context using the given \"14.5.11 Expression edm:NavigationPropertyPath\" or \"14.5.13 Expression edm:PropertyPath\" objects. Use this method to explicitly load side effects in case implicit loading is switched off via the binding-specific parameter <code>$$patchWithoutSideEffects<\/code>. The method can be called on <ul> <li> the bound context of a context binding, <li> the return value context of an operation binding, <li> a context of a list binding representing a single entity, <li> the header context of a list binding; side effects are loaded for the whole binding in this case. <\/ul> Key predicates must be available in this context's path. Avoid navigation properties as part of a binding's $select system query option as they may trigger pointless requests. There must be only context bindings between this context and its first ancestor binding which uses own data service requests.\n\nIf the first ancestor binding has an empty path, it is a context binding. In this case, we look for the farthest ancestor binding with the following characteristics: It uses own data service requests, it can be reached via a sequence of only empty paths, and it is actually being used. This way, side effects are loaded also for siblings of that first ancestor binding which show the same data, but useless requests are avoided.\n\nBy default, the request uses the update group ID for this context's binding; this way, it can easily be part of the same batch request as the corresponding update. <b>Caution:<\/b> If a dependent binding uses a different update group ID, it may lose its pending changes. The same will happen if a different group ID is provided, and the side effects affect properties for which there are pending changes.\n\nAll failed updates or creates for the group ID are repeated within the same batch request. If the group ID has submit mode {@link sap.ui.model.odata.v4.SubmitMode.Auto} and there are currently running updates or creates this method first waits for them to be processed.\n\nThe events 'dataRequested' and 'dataReceived' are not fired. Whatever should happen in the event handler attached to... <ul> <li>'dataRequested', can instead be done before calling {@link #requestSideEffects}.<\/li> <li>'dataReceived', can instead be done once the <code>oPromise<\/code> returned by {@link #requestSideEffects} fulfills or rejects (using <code>oPromise.then(function () {...}, function () {...})<\/code>).<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(aPathExpressions: [Object], sGroupId?: String) -> Promise","parameters":{"sGroupId":"type: string, description: The group ID to be used (since 1.69.0); if not specified, the update group ID for the context's binding is used, see \"$$updateGroupId\" at {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}. If a different group ID is specified, make sure that {@link #requestSideEffects} is called after the corresponding updates have been successfully processed by the server and that there are no pending changes for the affected properties.","aPathExpressions":"type: object[], description: The \"14.5.11 Expression edm:NavigationPropertyPath\" or \"14.5.13 Expression edm:PropertyPath\" objects describing which properties need to be loaded because they may have changed due to side effects of a previous update, for example <code>[{$PropertyPath : \"TEAM_ID\"}, {$NavigationPropertyPath : \"EMPLOYEE_2_MANAGER\"}, {$PropertyPath : \"EMPLOYEE_2_TEAM/Team_Id\"}]<\/code>. An empty navigation property path means that the whole entity may have changed, including its navigation properties. Since 1.75, a property path may end with a \"*\" segment to indicate that all structural properties may have changed, but no navigation properties (unless listed explicitly), for example <code>[{$PropertyPath : \"*\"}, {$NavigationPropertyPath : \"EMPLOYEE_2_MANAGER\"}]<\/code> or <code>[{$PropertyPath : \"EMPLOYEE_2_MANAGER/*\"}]<\/code>."}},"!description":"Implementation of an OData V4 model's context.\n\nThe context is a pointer to model data as returned by a query from a {@link sap.ui.model.odata.v4.ODataContextBinding} or a {@link sap.ui.model.odata.v4.ODataListBinding}. Contexts are always and only created by such bindings. A context for a context binding points to the complete query result. A context for a list binding points to one specific entry in the binding's collection. A property binding does not have a context, you can access its value via {@link sap.ui.model.odata.v4.ODataPropertyBinding#getValue}.\n\nApplications can access model data only via a context, either synchronously with the risk that the values are not available yet ({@link #getProperty} and {@link #getObject}) or asynchronously ({@link #requestProperty} and {@link #requestObject}).\n\nContext instances are immutable except for their indexes.","getCanonicalPath":{"!description":"Returns the \"canonical path\" of the entity for this context. According to \"4.3.1 Canonical URL\" of the specification \"OData Version 4.0 Part 2: URL Conventions\", this is the \"name of the entity set associated with the entity followed by the key predicate identifying the entity within the collection\". Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element binding. Note: For a transient context (see {@link #isTransient}) a wrong path is returned unless all key properties are available within the initial data.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v4.Context.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getObject":{"!description":"Returns the value for the given path relative to this context. The function allows access to the complete data the context points to (if <code>sPath<\/code> is \"\") or any part thereof. The data is a JSON structure as described in <a href=\"http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html\"> \"OData JSON Format Version 4.0\"<\/a>. Note that the function clones the result. Modify values via {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}.\n\nReturns <code>undefined<\/code> if the data is not (yet) available; no request is triggered. Use {@link #requestObject} for asynchronous access.","!static":false,"!category":"function","!type":"fn(sPath?: String) -> Object","parameters":{"sPath":"type: string, description: A relative path within the JSON structure"}},"getProperty":{"!description":"Returns the property value for the given path relative to this context. The path is expected to point to a structural property with primitive type. Returns <code>undefined<\/code> if the data is not (yet) available; no request is triggered. Use {@link #requestProperty} for asynchronous access.","!static":false,"!category":"function","!type":"fn(sPath: String, bExternalFormat?: Boolean) -> Object","parameters":{"sPath":"type: string, description: A relative path within the JSON structure","bExternalFormat":"type: boolean, description: If <code>true<\/code>, the value is returned in external format using a UI5 type for the given property path that formats corresponding to the property's EDM type and constraints. If the type is not yet available, <code>undefined<\/code> is returned."}},"requestCanonicalPath":{"!description":"Returns a promise for the \"canonical path\" of the entity for this context. According to \"4.3.1 Canonical URL\" of the specification \"OData Version 4.0 Part 2: URL Conventions\", this is the \"name of the entity set associated with the entity followed by the key predicate identifying the entity within the collection\". Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element binding. Note: For a transient context (see {@link #isTransient}) a wrong path is returned unless all key properties are available within the initial data.","!static":false,"!category":"function","!type":"fn() -> Promise"},"created":{"!description":"Returns a promise that is resolved without data when the entity represented by this context has been created in the backend and all selected properties of this entity are available. Expanded navigation properties are only available if the context's binding is refreshable. {@link sap.ui.model.odata.v4.ODataBinding#refresh} describes which bindings are refreshable.\n\nAs long as the promise is not yet resolved or rejected, the entity represented by this context is transient.\n\nOnce the promise is resolved, {@link #getPath} returns a path including the key predicate of the new entity. This requires that all key properties are available.","!static":false,"!category":"function","!type":"fn() -> Promise"},"destroy":{"!description":"Destroys this context, that is, it removes this context from all dependent bindings and drops references to binding and model, so that the context cannot be used anymore; it keeps path and index for debugging purposes.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes the single entity represented by this context.","!static":false,"!category":"function","!type":"fn(sGroupId?: String, bAllowRemoval?: Boolean)","parameters":{"sGroupId":"type: string, description: The group ID to be used for the refresh; if not specified, the group ID for the context's binding is used, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}.","bAllowRemoval":"type: boolean, description: If the context belongs to a list binding, the parameter allows the list binding to remove the context from the list binding's collection because the entity does not match the binding's filter anymore, see {@link sap.ui.model.odata.v4.ODataListBinding#filter}; a removed context is destroyed, see {@link #destroy}. If the context belongs to a context binding, the parameter must not be used. Supported since 1.55.0"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.Context with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/model/odata/v4/Context","!helpDescription":"Implementation of an OData V4 model's context.\n\nThe context is a pointer to model data as returned by a query from a {@link sap.ui.model.odata.v4.ODataContextBinding} or a {@link sap.ui.model.odata.v4.ODataListBinding}. Contexts are always and only created by such bindings. A context for a context binding points to the complete query result. A context for a list binding points to one specific entry in the binding's collection. A property binding does not have a context, you can access its value via {@link sap.ui.model.odata.v4.ODataPropertyBinding#getValue}.\n\nApplications can access model data only via a context, either synchronously with the risk that the values are not available yet ({@link #getProperty} and {@link #getObject}) or asynchronously ({@link #requestProperty} and {@link #requestObject}).\n\nContext instances are immutable except for their indexes.","setProperty":{"!description":"Sets a new value for the property identified by the given path. The path is relative to this context and is expected to point to a structural property with primitive type.","!static":false,"!category":"function","!type":"fn(sPath: String, vValue: Object, sGroupId?: String) -> Promise","parameters":{"sPath":"type: string, description: A relative path within the JSON structure","sGroupId":"type: string, description: The group ID to be used for the PATCH request; if not specified, the update group ID for the context's binding is used, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}. Since 1.74, you can use <code>null<\/code> to prevent the PATCH request.","vValue":"type: any, description: The new value which must be primitive"}},"toString":{"!description":"Returns a string representation of this object including the binding path.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"},"isTransient":{"!description":"For a context created using {@link sap.ui.model.odata.v4.ODataListBinding#create}, the method returns <code>true<\/code> if the context is transient, meaning that the promise returned by {@link #created} is not yet resolved or rejected, and returns <code>false<\/code> if the context is not transient. The result of this function can also be accessed via instance annotation \"@$ui5.context.isTransient\" at the entity.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"requestObject":{"!description":"Returns a promise on the value for the given path relative to this context. The function allows access to the complete data the context points to (if <code>sPath<\/code> is \"\") or any part thereof. The data is a JSON structure as described in <a href=\"http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html\"> \"OData JSON Format Version 4.0\"<\/a>. Note that the function clones the result. Modify values via {@link sap.ui.model.odata.v4.Context#setProperty}.\n\nIf you want {@link #requestObject} to read fresh data, call {@link #refresh} first.","!static":false,"!category":"function","!type":"fn(sPath?: String) -> Promise","parameters":{"sPath":"type: string, description: A relative path within the JSON structure"}}},"sap.ui.model.ClientTreeBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientTreeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext?: sap.ui.model.Context, aApplicationFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object, aSorters?: [sap.ui.model.Sorter])","prototype":"sap.ui.model.ClientTreeBinding"},"sap.ui.model.ValidateException":{"!description":"Instances of this exception are thrown when constraints of a type are violated.","!constructorDescription":"Creates a new ValidateException.","!module":"sap/ui/model/ValidateException","!helpDescription":"Instances of this exception are thrown when constraints of a type are violated.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.theming":{"Parameters":"sap.ui.core.theming.Parameters","!module":"sap/ui/core/theming/Parameters","!category":"namespace"},"sap.ui.core.routing.Route":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 use targets.parent. one or multiple route configs taking all of these parameters again. If a subroute is hit, it will fire the routeMatched event for all its parents. The routePatternMatched event will only be fired for the subroute not the parents. The routing will also display all the targets of the subroutes and its parents.<br>undefined","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.Route.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.EventProvider","match":{"!description":"Returns whether the given hash can be matched by the Route","!static":false,"!category":"function","!type":"fn(sHash: String) -> Boolean","parameters":{"sHash":"type: string, description: which will be tested by the Route"}},"destroy":{"!description":"Destroys a route","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Route"},"!category":"class","attachPatternMatched":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:patternMatched patternMatched} event of this <code>sap.ui.core.routing.Route<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Route<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Route","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>Route<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachMatched":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:matched matched} event of this <code>sap.ui.core.routing.Route<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Route","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Route with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getURL":{"!description":"Returns the URL for the route and replaces the placeholders with the values in oParameters","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> String","parameters":{"oParameters":"type: object, description: Parameters for the route"}},"!constructorDescription":"Instantiates an SAPUI5 Route","!module":"sap/ui/core/routing/Route","detachPatternMatched":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:patternMatched patternMatched} event of this <code>sap.ui.core.routing.Route<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Route","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 use targets.parent. one or multiple route configs taking all of these parameters again. If a subroute is hit, it will fire the routeMatched event for all its parents. The routePatternMatched event will only be fired for the subroute not the parents. The routing will also display all the targets of the subroutes and its parents.<br>undefined","attachBeforeMatched":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeMatched beforeMatched} event of this <code>sap.ui.core.routing.Route<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Route<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Route","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>Route<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachBeforeMatched":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeMatched beforeMatched} event of this <code>sap.ui.core.routing.Route<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Route","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getPatternArguments":{"!description":"Returns the arguments of the route which matches the given hash","!static":false,"!category":"function","!type":"fn(sHash: String) -> Object","parameters":{"sHash":"type: string, description: The hash"}},"fireBeforeMatched":{"!description":"Fires event {@link #event:beforeMatched beforeMatched} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Router","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"getPattern":{"!description":"Returns the pattern of the route. If there are multiple patterns, the first pattern is returned","!static":false,"!category":"function","!type":"fn() -> String"},"attachMatched":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:matched matched} event of this <code>sap.ui.core.routing.Route<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Route<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Route","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.routing.Route<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.test.gherkin.opa5TestHarness":{"!description":"Dynamically generates and executes Opa5 tests based on a Gherkin feature file and step definitions.\n\nLogs activity to Opa5, and some debug information to the console with the prefix \"[GHERKIN]\"","!module":"sap/ui/test/gherkin/opa5TestHarness","test":{"!description":"Dynamically generates Opa5 tests\n\nIf a test step is missing and args.generateMissingSteps is true then the Gherkin step will be converted into Opa Page Object code and executed. The text will be converted to camelCase and have any non-alphanumeric character removed. Here are two pertinent examples:\n\n(1) The simple step \"Given I start my app\" will be converted into the call \"Given.iStartMyApp();\"\n\n(2) The step \"Then on page 1: I should see the page 1 text\" will become the call \"Then.onPage1.iShouldSeeThePage1Text();\"\n\nChaining function calls, such as \"Then.iStartMyApp().and.iCloseMyApp()\" is not possible at this time.","!static":"true","!category":"function","!type":"fn(args: Object)"},"!helpDescription":"Dynamically generates and executes Opa5 tests based on a Gherkin feature file and step definitions.\n\nLogs activity to Opa5, and some debug information to the console with the prefix \"[GHERKIN]\"","!category":"namespace"},"sap.ui.model.TreeBindingCompatibilityAdapter_obj":{"!type":"fn()","prototype":"sap.ui.model.TreeBindingCompatibilityAdapter"},"jQuery.sap.interaction":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction} instead<br>undefined","setActive":{"!description":"Enables the interaction tracking.","!static":"true","!category":"function","!type":"fn(bActive: Boolean)"},"!module":"jquery.sap.trace","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction} instead<br>undefined","!category":"namespace"},"sap.ui.core.tmpl.DOMElement_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.tmpl.DOMElement"},"sap.ui.test.matchers.I18NText":{"!description":"The I18NText matcher checks if a control property has the same value as a text from an I18N file.\n\nThe matcher automatically: <ul> <li> retrieves the text from the assigned 'i18n' model (name can be changed) <\/li> <li> checks that the I18N key does actually exist in the file <\/li> <li> checks if asynchronously loaded I18N have actually been loaded <\/li> <\/ul>\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    i18NText: {\n        propertyName: \"string\",\n        key: \"string\",\n        parameters: \"any\",\n        modelName: \"string\"\n    }\n}\n<\/code><\/pre>","getKey":{"!description":"Gets current value of property {@link #getKey key}.\n\nThe key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.I18NText.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.test.matchers.Matcher","!category":"class","getModelName":{"!description":"Gets current value of property {@link #getModelName modelName}.\n\nThe name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.\n\nDefault value is <code>i18n<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"isMatching":{"!description":"Checks if the control has a property that matches the I18N text","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}},"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.I18NText with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setParameters":{"!description":"Sets a new value for property {@link #getParameters parameters}.\n\nThe parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.test.matchers.I18NText","parameters":{"oParameters":"type: any, description: New value for property <code>parameters<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getPropertyName propertyName} : string<\/li>\n<li>{@link #getKey key} : string<\/li>\n<li>{@link #getParameters parameters} : any<\/li>\n<li>{@link #getModelName modelName} : string (default: i18n)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","setPropertyName":{"!description":"Sets a new value for property {@link #getPropertyName propertyName}.\n\nThe name of the control property to match the I18N text with.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.test.matchers.I18NText","parameters":{"sPropertyName":"type: string, description: New value for property <code>propertyName<\/code>"}},"!module":"sap/ui/test/matchers/I18NText","setModelName":{"!description":"Sets a new value for property {@link #getModelName modelName}.\n\nThe name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>i18n<\/code>.","!static":false,"!category":"function","!type":"fn(sModelName: String) -> sap.ui.test.matchers.I18NText","parameters":{"sModelName":"type: string, description: New value for property <code>modelName<\/code>"}},"!helpDescription":"The I18NText matcher checks if a control property has the same value as a text from an I18N file.\n\nThe matcher automatically: <ul> <li> retrieves the text from the assigned 'i18n' model (name can be changed) <\/li> <li> checks that the I18N key does actually exist in the file <\/li> <li> checks if asynchronously loaded I18N have actually been loaded <\/li> <\/ul>\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    i18NText: {\n        propertyName: \"string\",\n        key: \"string\",\n        parameters: \"any\",\n        modelName: \"string\"\n    }\n}\n<\/code><\/pre>","getParameters":{"!description":"Gets current value of property {@link #getParameters parameters}.\n\nThe parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.","!static":false,"!category":"function","!type":"fn() -> Object"},"getPropertyName":{"!description":"Gets current value of property {@link #getPropertyName propertyName}.\n\nThe name of the control property to match the I18N text with.","!static":false,"!category":"function","!type":"fn() -> String"},"setKey":{"!description":"Sets a new value for property {@link #getKey key}.\n\nThe key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sKey: String) -> sap.ui.test.matchers.I18NText","parameters":{"sKey":"type: string, description: New value for property <code>key<\/code>"}}},"sap.ui.core.EnabledPropagator":{"!description":"Helper Class for enhancement of a Control with propagation of enabled property.","!constructorDescription":"<b>This constructor should be applied to the prototype of a control.<\/b>\n\nExample:\n<code>\nsap.ui.core.EnabledPropagator.call(<i>Some-Control<\/i>.prototype, <i>Default-value, ...<\/i>);\n<\/code>\ne.g.\n<code>\nsap.ui.core.EnabledPropagator.call(sap.ui.commons.Button.prototype);\n<\/code>","!module":"sap/ui/core/EnabledPropagator","!helpDescription":"Helper Class for enhancement of a Control with propagation of enabled property.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.test.actions":{"keepFocus":{"!description":"keepFocus : Boolean","!category":"enum","!type":"Boolean"},"idSuffix":{"!description":"Use this only if the target property or the default of the action does not work for your control. The id suffix of the DOM Element the press action will be executed on. For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element. But some controls have multiple DOM elements that could be target of your Action. Then you should set this property. For a detailed documentation of the suffix see {@link sap.ui.core.Element#$}","!category":"enum","!type":"String"},"Action":"sap.ui.test.actions.Action_obj","before":{"!description":"specify a position for the drop event, relative to the position of the control's representative DOM element. This makes sense only for the case when dropping right on top of the DOM element makes no sense, and instead, the drop should happen right before or after the element. e.g. sap.m.IconTabBar. Default position is \"center\", meaning the drop will be directly on the element. Set `before` to true, to drop the source immediately before the target element.","!category":"enum","!type":"Boolean"},"clearTextFirst":{"!description":"If it is set to <code>false<\/code>, the current text of the control will be preserved. By default, the current text of the control will be cleared. When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied. This will trigger a <code>liveChange<\/code> event on the input with an empty value.","!category":"enum","!type":"Boolean"},"EnterText":"sap.ui.test.actions.EnterText_obj","!category":"namespace","Drop":"sap.ui.test.actions.Drop_obj","pressEnterKey":{"!description":"pressEnterKey : Boolean","!category":"enum","!type":"Boolean"},"Drag":"sap.ui.test.actions.Drag_obj","aggregationName":{"!description":"name of the droppable aggregation, whose root to use as drop target. This makes sense only for some controls, where this root DOM element is droppable.","!category":"enum","!type":"String"},"after":{"!description":"Set `after` to true, to drop the source immediately before the target element.","!category":"enum","!type":"Boolean"},"text":{"!description":"The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.","!category":"enum","!type":"String"},"Press":"sap.ui.test.actions.Press_obj"},"sap.ui.core.mvc.HTMLView":{"!description":"A view defined/constructed by declarative HTML.","extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.HTMLView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.HTMLView.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new mvc/HTMLView.","!module":"sap/ui/core/mvc/HTMLView","!helpDescription":"A view defined/constructed by declarative HTML.","!proto":"sap.ui.core.mvc.View","create":{"!description":"Creates an instance of a declarative HTML view.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<sap.ui.core.mvc.HTMLView>","parameters":{"oOptions":"type: object, description: An object containing the view configuration options."}},"!category":"class"},"sap.ui.model.CompositeDataState":{"!description":"Provides and update the status data of a binding. Depending on the models state and controls state changes, the data state is used to propagated changes to a control. The control can react on these changes by implementing the <code>refreshDataState<\/code> method for the control. Here the data state object is passed as a parameter.\n\nUsing the {@link #getChanges getChanges} method the control can determine the changed properties and their old and new value. <pre>\n    //sample implementation to handle message changes\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var aMessages = oDataState.getChanges().messages;\n       if (aMessages) {\n           for (var i = 0; i &lt; aMessages.length; i++) {\n               console.log(aMessages.message);\n           }\n       }\n    }\n\n    //sample implementation to handle laundering state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var bLaundering = oDataState.getChanges().laundering || false;\n       this.setBusy(bLaundering);\n    }\n\n    //sample implementation to handle dirty state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       if (oDataState.isDirty()) console.log(\"Control \" + this.getId() + \" is now dirty\");\n    }\n<\/pre>\n\nUsing the {@link #getProperty getProperty} method the control can read the properties of the data state. The properties are <ul> <li><code>value<\/code> The value formatted by the formatter of the binding <li><code>originalValue<\/code> The original value of the model formatted by the formatter of the binding <li><code>invalidValue<\/code> The control value that was tried to be applied to the model but was rejected by a type validation <li><code>modelMessages<\/code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel<\/code> <li><code>controlMessages<\/code> The messages that were applied due to type validation errors <li><code>messages<\/code> All messages of the data state <li><code>dirty<\/code> true if the value was not yet confirmed by the server <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.CompositeDataState.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getInvalidValue":{"!description":"Returns the dirty value of a binding that was rejected by a type validation. This value was of an incorrect type and could not be applied to the model. If the value was not rejected it will return null. In this case the current model value can be accessed using the <code>getValue<\/code> method.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.model.DataState","getInternalProperty":{"!description":"Returns an array of values for the given property in the inner datastates.","!static":false,"!category":"function","!type":"fn(sProperty: String) -> [Object]","parameters":{"sProperty":"type: string, description: The property name"}},"!category":"class","getMessages":{"!description":"Returns the array of all state messages combining the model and control messages.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Message]"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.CompositeDataState with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.DataState.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getModelMessages":{"!description":"Returns the array of state messages of the model or undefined.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Message]"},"isDirty":{"!description":"Returns whether the data state is dirty. A data state is dirty if the value was changed but is not yet confirmed by a server or the entered value did not yet pass the type validation.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!module":"sap/ui/model/CompositeDataState","!helpDescription":"Provides and update the status data of a binding. Depending on the models state and controls state changes, the data state is used to propagated changes to a control. The control can react on these changes by implementing the <code>refreshDataState<\/code> method for the control. Here the data state object is passed as a parameter.\n\nUsing the {@link #getChanges getChanges} method the control can determine the changed properties and their old and new value. <pre>\n    //sample implementation to handle message changes\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var aMessages = oDataState.getChanges().messages;\n       if (aMessages) {\n           for (var i = 0; i &lt; aMessages.length; i++) {\n               console.log(aMessages.message);\n           }\n       }\n    }\n\n    //sample implementation to handle laundering state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       var bLaundering = oDataState.getChanges().laundering || false;\n       this.setBusy(bLaundering);\n    }\n\n    //sample implementation to handle dirty state\n    myControl.prototype.refreshDataState = function(oDataState) {\n       if (oDataState.isDirty()) console.log(\"Control \" + this.getId() + \" is now dirty\");\n    }\n<\/pre>\n\nUsing the {@link #getProperty getProperty} method the control can read the properties of the data state. The properties are <ul> <li><code>value<\/code> The value formatted by the formatter of the binding <li><code>originalValue<\/code> The original value of the model formatted by the formatter of the binding <li><code>invalidValue<\/code> The control value that was tried to be applied to the model but was rejected by a type validation <li><code>modelMessages<\/code> The messages that were applied to the binding by the <code>sap.ui.model.MessageModel<\/code> <li><code>controlMessages<\/code> The messages that were applied due to type validation errors <li><code>messages<\/code> All messages of the data state <li><code>dirty<\/code> true if the value was not yet confirmed by the server <\/ul>","getChanges":{"!description":"Returns the changes of the data state in a map that the control can use in the <code>refreshDataState<\/code> method. The changed property's name is the key in the map. Each element in the map contains an object of below structure. <pre>\n   {\n       oldValue : The old value of the property,\n       value    : The new value of the property\n   }\n<\/pre> The map only contains the changed properties.","!static":false,"!category":"function","!type":"fn() -> Object.<string,{oldValue:any,value:any}>"},"getControlMessages":{"!description":"Returns the array of state messages of the control.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Message]"},"isLaundering":{"!description":"Returns whether the data state is in laundering. If data is send to the server the data state becomes laundering until the data was accepted or rejected.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isControlDirty":{"!description":"Returns whether the data state is dirty in the UI control. A data state is dirty in the UI control if the entered value did not yet pass the type validation.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"changed":{"!description":"Returns or sets whether the data state is changed. As long as changed was not set to false the data state is dirty and the corresponding binding will fire data state change events.","!static":false,"!category":"function","!type":"fn(bNewState?: Boolean) -> Boolean","parameters":{"bNewState":"type: boolean, description: the optional new state"}}},"sap.ui.test.actions.Press":{"!description":"The <code>Press<\/code> action is used to simulate a press interaction with a control. Most controls are supported, for example buttons, links, list items, tables, filters, and form controls.\n\nThe <code>Press<\/code> action targets a special DOM element representing the control. This DOM element can be customized.\n\nFor most most controls (even custom ones), the DOM focus reference is an appropriate choice. You can choose a different DOM element by specifying its ID suffix. You can do this by directly passing the ID suffix to the Press constructor, or by defining a control adapter.\n\nThere are some basic controls for which OPA5 has defined <code>Press<\/code> control adapters. For more information, see {@link sap.ui.test.actions.Press.controlAdapters}.","extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Press with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.actions.Press.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/test/actions/Press","!helpDescription":"The <code>Press<\/code> action is used to simulate a press interaction with a control. Most controls are supported, for example buttons, links, list items, tables, filters, and form controls.\n\nThe <code>Press<\/code> action targets a special DOM element representing the control. This DOM element can be customized.\n\nFor most most controls (even custom ones), the DOM focus reference is an appropriate choice. You can choose a different DOM element by specifying its ID suffix. You can do this by directly passing the ID suffix to the Press constructor, or by defining a control adapter.\n\nThere are some basic controls for which OPA5 has defined <code>Press<\/code> control adapters. For more information, see {@link sap.ui.test.actions.Press.controlAdapters}.","!proto":"sap.ui.test.actions.Action","!category":"class","executeOn":{"!description":"Sets focus on given control and triggers a 'tap' event on it (which is internally translated into a 'press' event). Logs an error if control is not visible (i.e. has no dom representation)","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control)","parameters":{"oControl":"type: sap.ui.core.Control, description: the control on which the 'press' event is triggered"}}},"sap.ui.model.odata.ODataMetadata_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sMetadataURI: String, mParams?: Object)","prototype":"sap.ui.model.odata.ODataMetadata"},"sap.ui.core.Item":{"!description":"A control base type.","getKey":{"!description":"Gets current value of property {@link #getKey key}.\n\nCan be used as input for subsequent actions.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Item.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text to be displayed for the item.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Element","setTextDirection":{"!description":"Sets a new value for property {@link #getTextDirection textDirection}.\n\nOptions are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Inherit<\/code>.","!static":false,"!category":"function","!type":"fn(sTextDirection: sap.ui.core.TextDirection) -> sap.ui.core.Item","parameters":{"sTextDirection":"type: sap.ui.core.TextDirection, description: New value for property <code>textDirection<\/code>"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.Item with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setEnabled":{"!description":"Sets a new value for property {@link #getEnabled enabled}.\n\nEnabled items can be selected.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEnabled: Boolean) -> sap.ui.core.Item","parameters":{"bEnabled":"type: boolean, description: New value for property <code>enabled<\/code>"}},"!constructorDescription":"Constructor for a new Item.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string (default: )<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: Inherit)<\/li>\n<li>{@link #getKey key} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/Item","!helpDescription":"A control base type.","getEnabled":{"!description":"Gets current value of property {@link #getEnabled enabled}.\n\nEnabled items can be selected.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getTextDirection":{"!description":"Gets current value of property {@link #getTextDirection textDirection}.\n\nOptions are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.\n\nDefault value is <code>Inherit<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.TextDirection"},"setKey":{"!description":"Sets a new value for property {@link #getKey key}.\n\nCan be used as input for subsequent actions.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sKey: String) -> sap.ui.core.Item","parameters":{"sKey":"type: string, description: New value for property <code>key<\/code>"}},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text to be displayed for the item.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.Item","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.core.search.OpenSearchProvider_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.search.OpenSearchProvider"},"sap.ui.core.util.ExportRow":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Internally used in {@link sap.ui.core.util.Export Export}.","removeAllCells":{"!description":"Removes all the controls from the aggregation {@link #getCells cells}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.util.ExportCell]"},"addCell":{"!description":"Adds some cell to the aggregation {@link #getCells cells}.","!static":false,"!category":"function","!type":"fn(oCell: sap.ui.core.util.ExportCell) -> sap.ui.core.util.ExportRow","parameters":{"oCell":"type: sap.ui.core.util.ExportCell, description: The cell to add; if empty, nothing is inserted"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.ExportRow.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"destroyCells":{"!description":"Destroys all the cells in the aggregation {@link #getCells cells}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.ExportRow"},"!proto":"sap.ui.base.ManagedObject","!category":"class","indexOfCell":{"!description":"Checks for the provided <code>sap.ui.core.util.ExportCell<\/code> in the aggregation {@link #getCells cells}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oCell: sap.ui.core.util.ExportCell) -> Number","parameters":{"oCell":"type: sap.ui.core.util.ExportCell, description: The cell whose index is looked for"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportRow with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new ExportRow.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getCells cells} : sap.ui.core.util.ExportCell[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/core/util/ExportRow","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Internally used in {@link sap.ui.core.util.Export Export}.","insertCell":{"!description":"Inserts a cell into the aggregation {@link #getCells cells}.","!static":false,"!category":"function","!type":"fn(oCell: sap.ui.core.util.ExportCell, iIndex: Number) -> sap.ui.core.util.ExportRow","parameters":{"iIndex":"type: int, description: The <code>0<\/code>-based index the cell should be inserted at; for a negative value of <code>iIndex<\/code>, the cell is inserted at position 0; for a value greater than the current size of the aggregation, the cell is inserted at the last position","oCell":"type: sap.ui.core.util.ExportCell, description: The cell to insert; if empty, nothing is inserted"}},"removeCell":{"!description":"Removes a cell from the aggregation {@link #getCells cells}.","!static":false,"!category":"function","!type":"fn(vCell: Number | String | sap.ui.core.util.ExportCell) -> sap.ui.core.util.ExportCell","parameters":{"vCell":"type: int|string|sap.ui.core.util.ExportCell, description: The cell to remove or its index or id"}},"getCells":{"!description":"Gets content of aggregation {@link #getCells cells}.\n\nCells for the Export.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.util.ExportCell]"}},"sap.ui.core.format.NumberFormat.RoundingMode":{"!description":"Specifies a rounding behavior for numerical operations capable of discarding precision. Each rounding mode in this object indicates how the least significant returned digits of rounded result is to be calculated.","HALF_FLOOR":{"!description":"Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards negative infinity.","!category":"enum","!type":"String"},"FLOOR":{"!description":"Rounding mode to round towards negative infinity","!category":"enum","!type":"String"},"HALF_CEILING":{"!description":"Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards positive infinity.","!category":"enum","!type":"String"},"!module":"sap/ui/core/format/NumberFormat","CEILING":{"!description":"Rounding mode to round towards positive infinity","!category":"enum","!type":"String"},"TOWARDS_ZERO":{"!description":"Rounding mode to round towards zero","!category":"enum","!type":"String"},"!category":"static class","HALF_AWAY_FROM_ZERO":{"!description":"Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round away from zero.","!category":"enum","!type":"String"},"AWAY_FROM_ZERO":{"!description":"Rounding mode to round away from zero","!category":"enum","!type":"String"},"HALF_TOWARDS_ZERO":{"!description":"Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards zero.","!category":"enum","!type":"String"}},"sap.ui.core.message.MessageParser_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.MessageParser with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.message.MessageParser"},"sap.ui.model.ClientPropertyBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientPropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.ClientPropertyBinding"},"sap.ui.core.VariantLayoutData_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.VariantLayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.VariantLayoutData"},"sap.ui.core.routing.Views":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Views with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.Views.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Instantiates a view repository that creates and caches views. If it is destroyed, all the Views it created are destroyed.\nUsually you do not have to create instances of this class, it is used by the {@link sap.ui.core.routing.Router}.\nIf you are using {@link sap.ui.core.routing.Targets} without using a {@link sap.ui.core.UIComponent} you have to create an instance of this class.\nThey will create an instance on their own, or if they are used with a {@link sap.ui.core.UIComponent} they will share the same instance of Views.","!module":"sap/ui/core/routing/Views","setView":{"!description":"Adds or overwrites a view in the cache of the Views instance. The viewName serves as a key for caching.\n\nIf the second parameter is set to null or undefined, the previous cache view under the same name isn't managed by the Views instance. The lifecycle (for example the destroy of the view) of the view instance should be maintained by additional code.","!static":false,"!category":"function","!type":"fn(sViewName: String, oView: sap.ui.core.mvc.View | null | undefined) -> sap.ui.core.routing.Views","parameters":{"oView":"type: sap.ui.core.mvc.View|null|undefined, description: the view instance","sViewName":"type: string, description: Name of the view, may differ from the actual viewName of the oView parameter provided, since you can retrieve this view per {@link #.getView}."}},"fireCreated":{"!description":"Fires event {@link #event:created created} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Views","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"!proto":"sap.ui.base.EventProvider","!category":"class","getView":{"!description":"Returns a cached view, for a given name. If it does not exist yet, it will create the view with the provided options. If you provide a viewId, it will be prefixed with the viewId of the component.","!static":false,"!category":"function","!type":"fn(oOptions: Object) -> Promise","parameters":{"oOptions":"type: object, description: see {@link sap.ui.view} for the documentation. The viewId you pass into the options will be prefixed with the id of the component you pass into the constructor. So you can retrieve the view later by calling the {@link sap.ui.core.UIComponent#byId} function of the UIComponent."}}},"sap.ui.model.odata.v4.ODataModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mParameters: Object)","prototype":"sap.ui.model.odata.v4.ODataModel"},"jQuery.sap.log.LogLevel":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1.2 To streamline the Logging API a bit, the separation between Level and LogLevel has been given up. Use the (enriched) enumeration {@link jQuery.sap.log.Level} instead.<br>Enumeration of levels that can be used in a call to {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent).","!module":"jquery.sap.global","!category":"static class"},"sap.ui.model.type.DateInterval_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.DateInterval with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.DateInterval"},"sap.ui.core.mvc.JSView_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.mvc.JSView"},"sap.ui.core.UIArea_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.UIArea with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.UIArea"},"sap.ui.test.matchers.Properties_obj":{"!type":"fn(oProperties: Object)","prototype":"sap.ui.test.matchers.Properties"},"sap.ui.model.odata.type.Int16":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Int16<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int16 with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Int16.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Int16<\/code>.","getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Int16","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Int16<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","getRange":{"!description":"Returns the type's supported range as object with properties <code>minimum<\/code> and <code>maximum<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.model.odata.type.Int","!category":"class"},"sap.ui.core.routing.History":{"!constructorDescription":"Used to determine the {@link sap.ui.core.routing.HistoryDirection} of the current or a future navigation,\ndone with a {@link sap.ui.core.routing.Router} or {@link sap.ui.core.routing.HashChanger}.\n\n<strong>ATTENTION:<\/strong> this class will not be accurate if someone does hash-replacement without the named classes above.\nIf you are manipulating the hash directly, this class is not supported anymore.","!module":"sap/ui/core/routing/History","getDirection":{"!description":"Determines what the navigation direction for a newly given hash would be It will say Unknown if there is a history foo - bar (current history) - foo If you now ask for the direction of the hash \"foo\" you get Unknown because it might be backwards or forwards. For hash replacements, the history stack will be replaced at this position for the history.","!static":false,"!category":"function","!type":"fn(sNewHash?: String) -> sap.ui.core.routing.HistoryDirection","parameters":{"sNewHash":"type: string, description: optional, if this parameter is not passed the last hashChange is taken."}},"!proto":"sap.ui.base.Object","getHistoryStateOffset":{"!description":"Returns the length difference between the history state stored in browser's pushState and the state maintained in this class.\n\nThe function returns <code>undefined<\/code> when <ul> <li>The current state in browser's history pushState isn't initialized, for example, between a new hash is set or replaced and the \"hashChange\" event is processed by this class<\/li> <li>History pushState isn't fully supported, for example, Internet Explorer.<\/li> <li>History pushState is already used before UI5 History is initialized, and UI5 can't maintain the hash history by using the browser pushState<\/li> <\/ul>\n\nOnce the \"hashChange\" event is processed by this class, this method always returns 0. However, before a \"hashChange\" event reaches this class, it returns the offset between the new hash and the previous one within the history state.","!static":false,"!category":"function","!type":"fn() -> Number | undefined"},"!category":"class","getInstance":{"!static":true,"!category":"function","!type":"fn() -> sap.ui.core.routing.History"},"getPreviousHash":{"!description":"gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned","!static":false,"!category":"function","!type":"fn() -> String"}},"jQuery.sap.util":{"UriParameters":"jQuery.sap.util.UriParameters","!category":"namespace","ResourceBundle":"jQuery.sap.util.ResourceBundle","Properties":"jQuery.sap.util.Properties"},"sap.ui.model.xml.XMLModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.xml.XMLModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oData: Object)","prototype":"sap.ui.model.xml.XMLModel"},"sap.ui.core.BusyIndicatorUtils":{"!module":"sap/ui/core/BusyIndicatorUtils","!category":"namespace"},"sap.ui.core.CustomData_obj":{"extend":{"!description":"Creates a new subclass of <code>CustomData<\/code> with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.CustomData"},"sap.ui.core.Element_obj":{"extend":{"!description":"Defines a new subclass of Element with the name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> can contain the same information that {@link sap.ui.base.ManagedObject.extend} already accepts, plus the following <code>dnd<\/code> property to configure drag-and-drop behavior in the metadata object literal:\n\nExample: <pre>\nElement.extend('sap.mylib.MyElement', {\n  metadata : {\n    library : 'sap.mylib',\n    properties : {\n      value : 'string',\n      width : 'sap.ui.core.CSSSize'\n    },\n    dnd : { draggable: true, droppable: false },\n    aggregations : {\n      items : { type: 'sap.ui.core.Control', multiple : true, dnd : {draggable: false, dropppable: true, layout: \"Horizontal\" } },\n      header : {type : \"sap.ui.core.Control\", multiple : false, dnd : true },\n    }\n  }\n});\n<\/pre>\n\n<h3><code>dnd<\/code> key as a metadata property<\/h3>\n\n<b>dnd<\/b>: <i>object|boolean<\/i><br> Defines draggable and droppable configuration of the element. The following keys can be provided via <code>dnd<\/code> object literal to configure drag-and-drop behavior of the element: <ul> <li><code>[draggable=false]: <i>boolean<\/i><\/code> Defines whether the element is draggable or not. The default value is <code>false<\/code>.<\/li> <li><code>[droppable=false]: <i>boolean<\/i><\/code> Defines whether the element is droppable (it allows being dropped on by a draggable element) or not. The default value is <code>false<\/code>.<\/li> <\/ul> If <code>dnd<\/code> property is of type Boolean, then the <code>draggable<\/code> and <code>droppable<\/code> configuration are set to this Boolean value.\n\n<h3><code>dnd<\/code> key as an aggregation metadata property<\/h3>\n\n<b>dnd<\/b>: <i>object|boolean<\/i><br> In addition to draggable and droppable configuration, the layout of the aggregation can be defined as a hint at the drop position indicator. <ul> <li><code>[layout=\"Vertical\"]: <\/code> The arrangement of the items in this aggregation. This setting is recommended for the aggregation with multiplicity 0..n (<code>multiple: true<\/code>). Possible values are <code>Vertical<\/code> (e.g. rows in a table) and <code>Horizontal<\/code> (e.g. columns in a table). It is recommended to use <code>Horizontal<\/code> layout if the arrangement is multidimensional.<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn(sClassName: String, oStaticInfo: Object) -> fn()","parameters":{"oStaticInfo":"type: object, description: static info to construct the metadata from","sClassName":"type: string, description: fully qualified name of the class that is described by this metadata object"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Element"},"sap.ui.test.gherkin.dataTableUtils":{"!description":"Provides utility functions for formatting 2D arrays of strings (such as the raw data loaded from a Gherkin feature file) into a more useful format such as an array of objects or a single object. Also handles normalization of the raw strings.","!module":"sap/ui/test/gherkin/dataTableUtils","normalization":"sap.ui.test.gherkin.dataTableUtils.normalization","!helpDescription":"Provides utility functions for formatting 2D arrays of strings (such as the raw data loaded from a Gherkin feature file) into a more useful format such as an array of objects or a single object. Also handles normalization of the raw strings.","toTable":{"!description":"Takes the inputed 2D array \"aData\" and returns an equivalent array of objects. The data is expected to have a header row, with each subsequent row being an entity, and each column being a property of that entity. E.g. <pre>\n  [\n    [\"Their Name\",  \"Their Age\"],\n    [\"Alice\",       \"16\"],\n    [\"Bob\",         \"22\"]\n  ]\n<\/pre>\n\nThe data's column headers become the returned objects' property names. The property names get normalized according to the strategy defined by the parameter \"vNorm\". E.g. using hyphenation strategy this is returned: <pre>\n  [\n    {their-name: \"Alice\", their-age: \"16\"},\n    {their-name: \"Bob\", their-age: \"22\"}\n  ]\n<\/pre>","!static":"true","!category":"function","!type":"fn(aData: [String], vNorm?: String | fn()) -> [Object]"},"!category":"namespace","toObject":{"!description":"Takes the inputed 2D array \"aData\" and returns an equivalent object. Each row of data is expected to be a property-value pair. To create nested objects, add extra columns to the data. E.g. <pre>\n [\n   [\"Name\", \"Alice\"],\n   [\"Mass\", \"135 lbs\"],\n   [\"Telephone Number\", \"Home\", \"123-456-7890\"],\n   [\"Telephone Number\", \"Work\", \"123-456-0987\"]\n ]\n<\/pre> For each data row, the right-most element becomes a property value, and everything else is a property name. The property names get normalized according to the strategy defined by the parameter \"vNorm\". E.g. using camelCase strategy <pre>\n  {\n    name: \"Alice\",\n    mass: \"135 lbs\",\n    telephoneNumber: {\n      home: \"123-456-7890\",\n      work: \"123-456-0987\"\n    }\n  }\n<\/pre>","!static":"true","!category":"function","!type":"fn(aData: [String], vNorm?: String | fn()) -> Object"}},"sap.ui.model.type.FileSize_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.FileSize with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.FileSize"},"module:sap/ui/dom/jquery/Selectors":{"!description":"This module provides the following jQuery selectors: <ul> <li>:focusable/li> <li>:sapFocusable<\/li> <li>:sapTabbable<\/li> <\/ul>","!module":"sap/ui/dom/jquery/Selectors","!helpDescription":"This module provides the following jQuery selectors: <ul> <li>:focusable/li> <li>:sapFocusable<\/li> <li>:sapTabbable<\/li> <\/ul>","!category":"namespace","module:sap/ui/dom/jquery/Selectors":"module:sap/ui/dom/jquery/Selectors"},"sap.ui.core.message.MessageParser":{"!description":"This is an abstract base class for MessageParser objects.","extend":{"!description":"Creates a new subclass of class sap.ui.core.message.MessageParser with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getProcessor":{"!description":"Returns the registered processor on which the events for message handling can be fired","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.message.MessageProcessor"},"setProcessor":{"!description":"This method is used by the model to register itself as MessageProcessor for this parser","!static":false,"!category":"function","!type":"fn(oProcessor: sap.ui.core.message.MessageProcessor) -> sap.ui.core.message.MessageParser","parameters":{"oProcessor":"type: sap.ui.core.message.MessageProcessor, description: The MessageProcessor that can be used to fire events"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.message.MessageParser.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Abstract MessageParser class to be inherited in back-end specific implementations.","!module":"sap/ui/core/message/MessageParser","!helpDescription":"This is an abstract base class for MessageParser objects.","!proto":"sap.ui.base.Object","!category":"class","parse":{"!description":"Abstract parse method must be implemented in the inheriting class.","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.model.type.DateTime":{"!description":"This class represents datetime simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.DateTime.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a DateTime type.","!module":"sap/ui/model/type/DateTime","!helpDescription":"This class represents datetime simple types.","!proto":"sap.ui.model.type.Date","!category":"class"},"sap.ui.core.dnd.DropLayout":{"!description":"Configuration options for the layout of the droppable controls.","Vertical":{"!description":"Droppable controls are arranged vertically.","!category":"enum","!type":"String"},"Horizontal":{"!description":"Droppable controls are arranged horizontally.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","!category":"static class","Default":{"!description":"Default {@link sap.ui.core.Element.extend layout} definition of the aggregations.","!category":"enum","!type":"String"}},"sap.ui.model.odata.Filter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.Filter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sPath: String, aValues: [Object], bAND?: Boolean)","prototype":"sap.ui.model.odata.Filter"},"sap.ui.test.gherkin.StepDefinitions_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.gherkin.StepDefinitions with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.gherkin.StepDefinitions"},"sap.ui.core.util.serializer.ViewSerializer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.ViewSerializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oRootControl: sap.ui.core.Control | sap.ui.core.UIArea, oWindow?: Object, sDefaultXmlNamespace?: String)","prototype":"sap.ui.core.util.serializer.ViewSerializer"},"sap.ui.model.TreeBindingCompatibilityAdapter":{"!constructorDescription":"Adapter for TreeBindings to add the ListBinding functionality and use the\ntree structure in list based controls.\n\nThis module is only for experimental and internal use!","!module":"sap/ui/model/TreeBindingCompatibilityAdapter","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.type.Currency":{"!description":"This class represents the composite type <code>Currency<\/code>, which consists of the parts \"amount\" (of type <code>number<\/code> or <code>string<\/code>) and \"currency\" (of type <code>string<\/code>). In case the amount is a <code>string<\/code>, it must be the JavaScript representation of the corresponding number. If the <code>source<\/code> format option is given, the composite type has only one part of type <code>string<\/code>, holding both amount and currency in the source format.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Currency with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Currency.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a <code>Currency<\/code> type.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(vValue: [Object], sTargetType: String) -> String","parameters":{"sTargetType":"type: string, description: The target type; must be \"string\", or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}","vValue":"type: any[]|string, description: The array containing amount and currency code in case the <code>source<\/code> format option is not given; otherwise, a string representation of the value which is parsed using the source format"}},"!module":"sap/ui/model/type/Currency","!helpDescription":"This class represents the composite type <code>Currency<\/code>, which consists of the parts \"amount\" (of type <code>number<\/code> or <code>string<\/code>) and \"currency\" (of type <code>string<\/code>). In case the amount is a <code>string<\/code>, it must be the JavaScript representation of the corresponding number. If the <code>source<\/code> format option is given, the composite type has only one part of type <code>string<\/code>, holding both amount and currency in the source format.","!proto":"sap.ui.model.CompositeType","!category":"class","parseValue":{"!description":"Parses a string value.","!static":false,"!category":"function","!type":"fn(sValue: String, sSourceType: String, aCurrentValues: Array) -> [Object]","parameters":{"aCurrentValues":"type: array, description: The current values of all binding parts","sSourceType":"type: string, description: The source type (the expected type of <code>sValue<\/code>); must be \"string\", or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}.","sValue":"type: string, description: The value to be parsed"}}},"sap.ui.core.mvc.View":{"attachAfterInit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:afterInit afterInit} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View<\/code> itself.\n\nFired when the View has parsed the UI description and instantiated the contained controls (/control tree).","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachBeforeRendering":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setViewName":{"!description":"Sets a new value for property {@link #getViewName viewName}.\n\nName of the View\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sViewName: String) -> sap.ui.core.mvc.View","parameters":{"sViewName":"type: string, description: New value for property <code>viewName<\/code>"}},"runPreprocessor":{"!description":"Executes preprocessors for a type of source","!static":false,"!category":"function","!type":"fn(sType: String, vSource: Object | String | Element, bSync?: Boolean) -> Promise | Object | String | Element","parameters":{"sType":"type: string, description: the type of preprocessor, e.g. \"raw\", \"xml\" or \"controls\"","bSync":"type: boolean, description: describes the view execution, true if sync","vSource":"type: object|string|Element, description: the view source as a JSON object, a raw text, an XML document element or a Promise resolving with those"}},"setDisplayBlock":{"!description":"Sets a new value for property {@link #getDisplayBlock displayBlock}.\n\nWhether the CSS display should be set to \"block\". Set this to \"true\" if the default display \"inline-block\" causes a vertical scrollbar with Views that are set to 100% height. Do not set this to \"true\" if you want to display other content in the same HTML parent on either side of the View (setting to \"true\" may push that other content to the next/previous line).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bDisplayBlock: Boolean) -> sap.ui.core.mvc.View","parameters":{"bDisplayBlock":"type: boolean, description: New value for property <code>displayBlock<\/code>"}},"loaded":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 Use {@link sap.ui.core.mvc.View.create View.create} instead<br>Returns a Promise representing the state of the view initialization.\n\nFor views that are loading asynchronously (by setting async=true) this Promise is created by view initialization. Synchronously loading views get wrapped in an immediately resolving Promise.","!static":false,"!category":"function","!type":"fn() -> Promise"},"hasPreprocessor":{"!description":"Checks if any preprocessors are active for the specified type","!static":false,"!category":"function","!type":"fn(sType: String) -> Boolean","parameters":{"sType":"type: string, description: Type of the preprocessor, e.g. \"raw\", \"xml\" or \"controls\""}},"fireBeforeRendering":{"!description":"Fires event {@link #event:beforeRendering beforeRendering} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.mvc.View","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"create":{"!description":"Creates a view of the given type, name and with the given ID.\n\nIf the option <code>viewName<\/code> is given, the corresponding view module is loaded if needed.\n\nSee also the API references for the specific view factories: <ul> <li>{@link sap.ui.core.mvc.XMLView.create}<\/li> <li>{@link sap.ui.core.mvc.JSView.create}<\/li> <li>{@link sap.ui.core.mvc.JSONView.create}<\/li> <li>{@link sap.ui.core.mvc.HTMLView.create}<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<sap.ui.core.mvc.View>","parameters":{"oOptions":"type: object, description: Options for the view instantiation. Can contain any settings that are documented for the {@link sap.ui.core.mvc.View}; specialized view types could bring in additional settings."}},"registerPreprocessor":{"!description":"Register a preprocessor for all views of a specific type.\n\nThe preprocessor can be registered for several stages of view initialization, which are dependent on the view type, e.g. \"raw\", \"xml\" or already initialized \"controls\". If there is a preprocessor passed to or activated at the view instance already, that one is used. When several preprocessors are registered for one hook, it has to be made sure that they do not conflict when being processed serially.\n\nIt can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.\n\n<strong>Note<\/strong>: Preprocessors only work in async views and will be ignored when the view is instantiated in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the <code>bSyncSupport<\/code> flag to <code>true<\/code>.","!static":true,"!category":"function","!type":"fn(sType: String, vPreprocessor: String | fn(), sViewType: String, bSyncSupport: Boolean, bOnDemand?: Boolean, mSettings: Object)","parameters":{"mSettings":"type: object, description: optional configuration for preprocessor","sType":"type: string, description: the type of content to be processed","bOnDemand":"type: boolean, description: on-demand preprocessor which enables developers to quickly activate the preprocessor for a view, by setting <code>preprocessors : { xml }<\/code>, for example. This should be false except for very special cases. There can only be one on-demand preprocessor per content type.","bSyncSupport":"type: boolean, description: declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may break the view initialization and lead to unexpected results.","vPreprocessor":"type: string|function, description: module path of the preprocessor implementation or a preprocessor function","sViewType":"type: string, description: type of the calling view, e.g. <code>XML<\/code>"}},"destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.mvc.View"},"!description":"A base class for Views.\n\nIntroduces the relationship to a Controller, some basic visual appearance settings like width and height, and provides lifecycle events.\n\nViews form an ID scope for the elements and controls in their content. They can prefix the IDs of elements either automatically (e.g. XMLView) or programmatically (using {@link #createId}). With method {@link #byId}, elements or controls can be found with their view-local ID. Also see {@link topic:91f28be26f4d1014b6dd926db0e91070 \"Support for Unique IDs\"} in the documentation.","attachAfterRendering":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View<\/code> itself.\n\nFired when the View has been (re-)rendered and its HTML is present in the DOM.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.View.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachBeforeRendering":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View<\/code> itself.\n\nFired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getController":{"!description":"Returns the view's Controller instance or null for a controller-less View.","!static":false,"!category":"function","!type":"fn() -> Object"},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThe height\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.core.mvc.View","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/core/mvc/View","!helpDescription":"A base class for Views.\n\nIntroduces the relationship to a Controller, some basic visual appearance settings like width and height, and provides lifecycle events.\n\nViews form an ID scope for the elements and controls in their content. They can prefix the IDs of elements either automatically (e.g. XMLView) or programmatically (using {@link #createId}). With method {@link #byId}, elements or controls can be found with their view-local ID. Also see {@link topic:91f28be26f4d1014b6dd926db0e91070 \"Support for Unique IDs\"} in the documentation.","createId":{"!description":"Convert the given view local element ID to a globally unique ID by prefixing it with the view ID.","!static":false,"!category":"function","!type":"fn(sId: String) -> String","parameters":{"sId":"type: string, description: View local ID of the element"}},"fireBeforeExit":{"!description":"Fires event {@link #event:beforeExit beforeExit} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.mvc.View","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.core.mvc.View","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"}},"fireAfterRendering":{"!description":"Fires event {@link #event:afterRendering afterRendering} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.mvc.View","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachBeforeExit":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeExit beforeExit} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.mvc.View<\/code> itself.\n\nFired when the view has received the request to destroy itself, but before it has destroyed anything.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nChild Controls of the view","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.core.Control","getLocalId":{"!description":"Returns the local ID of an element by removing the view ID prefix or <code>null<\/code> if the ID does not contain a prefix.","!static":false,"!category":"function","!type":"fn(sId: String) -> String","parameters":{"sId":"type: string, description: Prefixed ID"}},"!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThe width\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"detachBeforeExit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeExit beforeExit} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThe height","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new View.\n\nApplications should not call the constructor directly, but use one of the view factories instead,\ne.g. {@link #.create View.create}.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getViewName viewName} : string<\/li>\n<li>{@link #getDisplayBlock displayBlock} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:afterInit afterInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeExit beforeExit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getPreprocessorInfo":{"!description":"Returns the info object which is also passed to the preprocessors","!static":false,"!category":"function","!type":"fn(bSync: Boolean) -> Object","parameters":{"bSync":"type: boolean, description: Describes the view execution, true if sync"}},"getViewName":{"!description":"Gets current value of property {@link #getViewName viewName}.\n\nName of the View","!static":false,"!category":"function","!type":"fn() -> String"},"getControllerName":{"!description":"An (optional) method to be implemented by Views. When no controller instance is given at View instantiation time AND this method exists and returns the (package and class) name of a controller, the View tries to load and instantiate the controller and to connect it to itself.","!static":false,"!category":"function","!type":"fn() -> String"},"detachAfterInit":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:afterInit afterInit} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"process":{"!description":"Processing method that must be implemented by a Preprocessor.","!static":true,"!category":"function","!type":"fn(vSource: Object, oViewInfo: Object, mSettings: Object) -> Object | Promise","parameters":{"mSettings":"type: object, description: settings object containing the settings provided with the preprocessor","vSource":"type: object, description: the source to be processed","oViewInfo":"type: object, description: identification information about the calling instance"}},"fireAfterInit":{"!description":"Fires event {@link #event:afterInit afterInit} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.mvc.View","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.core.mvc.View","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThe width\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.core.mvc.View","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"getCacheKey":{"!description":"Cache key provider method that can be implemented by a preprocessor.\n\nThis method should be used to invalidate a cache on the currently preprocessed view. Therefore, a Promise needs to be passed which resolves with the according cache key increment.\n\n<strong>Note:<\/strong> Caching is only available for XMLViews! Some parts of the feature are still experimental, For further information see {@link sap.ui.xmlview}","!static":true,"!category":"function","!type":"fn(oViewInfo: Object) -> String | Promise","parameters":{"oViewInfo":"type: object, description: identification information about the calling instance"}},"clone":{"!description":"Creates a clone of this view.\n\nOverrides the clone method to avoid conflicts between generic cloning of the content aggregation and content creation as defined by the UI5 Model View Controller lifecycle.\n\nFor more details see the {@link topic:a575619e25c2487f904bae71764e2350 View Cloning} section in the documentation.","!static":false,"!category":"function","!type":"fn(sIdSuffix?: String, aLocalIds?: [String]) -> sap.ui.core.mvc.View","parameters":{"sIdSuffix":"type: string, description: Suffix to be appended to the cloned element IDs","aLocalIds":"type: string[], description: Array of local IDs within the cloned hierarchy (internally used)"}},"byId":{"!description":"Returns an element by its ID in the context of this view.\n\nThis method expects a view-local ID of an element (the same as e.g. defined in the *.view.xml of an XMLView). For a search with a global ID (the value returned by <code>oElement.getId()<\/code>) you should rather use {@link sap.ui.core.Core#byId sap.ui.getCore().byId()}.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: View local ID of the element"}},"detachAfterRendering":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.mvc.View<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.mvc.View","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getDisplayBlock":{"!description":"Gets current value of property {@link #getDisplayBlock displayBlock}.\n\nWhether the CSS display should be set to \"block\". Set this to \"true\" if the default display \"inline-block\" causes a vertical scrollbar with Views that are set to 100% height. Do not set this to \"true\" if you want to display other content in the same HTML parent on either side of the View (setting to \"true\" may push that other content to the next/previous line).\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getViewData":{"!description":"Returns user specific data object","!static":false,"!category":"function","!type":"fn() -> Object"}},"sap.ui.test.actions.Drop_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Drop with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.actions.Drop"},"sap.ui.core.OpenState":{"!description":"Defines the different possible states of an element that can be open or closed and does not only toggle between these states, but also spends some time in between (e.g. because of an animation).","!module":"sap/ui/core/library","CLOSED":{"!description":"Closed and currently not changing states.","!category":"enum","!type":"String"},"CLOSING":{"!description":"Still open, but in the process of going to the CLOSED state.","!category":"enum","!type":"String"},"OPENING":{"!description":"Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN.","!category":"enum","!type":"String"},"!category":"static class","OPEN":{"!description":"Open and currently not changing states.","!category":"enum","!type":"String"}},"sap.ui.model.odata.type.Int_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Int"},"sap.ui.core.dnd.DropInfo_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DropInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.dnd.DragDropBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.dnd.DropInfo"},"sap.ui.test.matchers.LabelFor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.LabelFor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.LabelFor"},"module:sap/ui/events/PseudoEvents":{"addEvent":{"!description":"Array containing all basic event types of the available pseudo events.","!category":"function","!type":"fn()"},"module:sap/ui/events/PseudoEvents":"module:sap/ui/events/PseudoEvents","!module":"sap/ui/events/PseudoEvents","getBasicTypes":{"!description":"Function for initialization of an Array containing all basic event types of the available pseudo events.","!category":"function","!type":"fn()"},"!category":"namespace","events":"module:sap/ui/events/PseudoEvents.events","order":{"!description":"Ordered array of the {@link module:sap/ui/events/PseudoEvents.events}.\n\nOrder is significant as some check methods rely on the fact that they are tested before other methods. The array is processed during event analysis (when classifying browser events as pseudo events).","!category":"enum","!type":"String"}},"sap.ui.model.SelectionModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.SelectionModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(iSelectionMode: Number)","prototype":"sap.ui.model.SelectionModel"},"sap.ui.model.analytics.BatchResponseCollector_obj":{"!type":"fn(mParams?: Object)","prototype":"sap.ui.model.analytics.BatchResponseCollector"},"sap.ui.model.odata.type.Currency_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Currency with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Currency.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Currency"},"sap.ui.core.util.ExportColumn_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportColumn with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.util.ExportColumn"},"sap.ui.model.json.JSONPropertyBinding_obj":{"!type":"fn(oModel: sap.ui.model.json.JSONModel, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.json.JSONPropertyBinding"},"sap.ui.model.base":{"ManagedObjectModel":"sap.ui.model.base.ManagedObjectModel_obj","!category":"namespace"},"jQuery.sap.measure":{"filterMeasurements":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.filterMeasurements} instead<br>Gets all performance measurements where a provided filter function returns a truthy value. If neither a filter function nor a category is provided an empty array is returned. To filter for certain properties of measurements a fnFilter can be implemented like this <code> function(oMeasurement) { return oMeasurement.duration > 50; }<\/code>","!static":"true","!category":"function","!type":"fn(fnFilter?: fn(), bCompleted?: Boolean | undefined, aCategories?: [String]) -> Object"},"average":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.average} instead<br>Starts an average performance measure. The duration of this measure is an avarage of durations measured for each call. Optionally a category or list of categories can be passed to allow filtering of measurements.","!static":"true","!category":"function","!type":"fn(sId: String, sInfo: String, aCategories?: [String | String]) -> Object"},"clearRequestTimings":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native function <code>performance.clearResourceTimings()<\/code> where available<br>Clears all request timings safely.","!static":"true","!category":"function","!type":"fn()"},"!category":"namespace","filterInteractionMeasurements":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction.filter} instead<br>Gets all interaction measurements for which a provided filter function returns a truthy value. To filter for certain categories of measurements a fnFilter can be implemented like this <code> function(InteractionMeasurement) { return InteractionMeasurement.duration > 0 }<\/code>","!static":"true","!category":"function","!type":"fn(fnFilter: fn()) -> [Object]"},"unregisterMethod":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.unregisterMethod} instead<br>Unregisters an average measurement for a given objects method","!static":"true","!category":"function","!type":"fn(sId: String, oObject: Object, sMethod: String) -> Boolean"},"setRequestBufferSize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native function <code>performance.setResourceTimingBufferSize(iSize)<\/code> where available<br>Sets the request buffer size for the measurement safely.","!static":"true","!category":"function","!type":"fn(iSize: Number)"},"remove":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.remove} instead<br>Removes a performance measure","!static":"true","!category":"function","!type":"fn(sId: String)"},"getMeasurement":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.getMeasurement} instead<br>Gets a performance measure","!static":"true","!category":"function","!type":"fn(sId: String) -> Object"},"getAllInteractionMeasurements":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction.getAll} instead<br>Gets all interaction measurements","!static":"true","!category":"function","!type":"fn(bFinalize: Boolean) -> [Object]"},"getAllMeasurements":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.getAllMeasurements} instead<br>Gets all performance measurements","!static":"true","!category":"function","!type":"fn(bCompleted?: Boolean) -> [Object]"},"unregisterAllMethods":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.unregisterAllMethods} instead<br>Unregisters all average measurements","!static":"true","!category":"function","!type":"fn()"},"end":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.end} instead<br>Ends a performance measure","!static":"true","!category":"function","!type":"fn(sId: String) -> Object"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement} or {@link module:sap/ui/performance/trace/Interaction} instead<br>Namespace for the jQuery performance measurement plug-in provided by SAP SE.","add":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.add} instead<br>Adds a performance measurement with all data This is useful to add external measurements (e.g. from a backend) to the common measurement UI","!static":"true","!category":"function","!type":"fn(sId: String, sInfo: String, iStart: Number, iEnd: Number, iTime: Number, iDuration: Number, aCategories?: [String | String]) -> Object"},"registerMethod":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.registerMethod} instead<br>Registers an average measurement for a given objects method","!static":"true","!category":"function","!type":"fn(sId: String, oObject: Object, sMethod: String, aCategories?: [String]) -> Boolean"},"resume":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.resume} instead<br>Resumes a performance measure","!static":"true","!category":"function","!type":"fn(sId: String) -> Object"},"clear":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.clear} instead<br>Clears all performance measurements","!static":"true","!category":"function","!type":"fn()"},"start":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.start} instead<br>Starts a performance measure. Optionally a category or list of categories can be passed to allow filtering of measurements.","!static":"true","!category":"function","!type":"fn(sId: String, sInfo: String, aCategories?: [String | String]) -> Object"},"pause":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.pause} instead<br>Pauses a performance measure","!static":"true","!category":"function","!type":"fn(sId: String) -> Object"},"endInteraction":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction.end} instead<br>End an interaction measurements","!static":"true","!category":"function","!type":"fn(bForce: Boolean)"},"setActive":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.setActive} instead<br>Activates or deactivates the performance measure functionality Optionally a category or list of categories can be passed to restrict measurements to certain categories like \"javascript\", \"require\", \"xmlhttprequest\", \"render\"","!static":"true","!category":"function","!type":"fn(bOn: Boolean, aCategories: [String | String]) -> Boolean"},"!module":"jquery.sap.global","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement} or {@link module:sap/ui/performance/trace/Interaction} instead<br>Namespace for the jQuery performance measurement plug-in provided by SAP SE.","getRequestTimings":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native function <code>performance.getEntriesByType(\"resource\")<\/code> instead<br>Gets the current request timings array for type 'resource' safely","!static":"true","!category":"function","!type":"fn() -> [Object]"},"startInteraction":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction.start} instead<br>Start an interaction measurements","!static":"true","!category":"function","!type":"fn(sType: String, oSrcElement: Object)"},"getActive":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/Measurement.getActive} instead<br>Gets the current state of the performance measurement functionality","!static":"true","!category":"function","!type":"fn() -> Boolean"},"clearInteractionMeasurements":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/performance/trace/Interaction.clear} instead<br>Clears all interaction measurements","!static":"true","!category":"function","!type":"fn()"}},"sap.ui.model.odata.type.Unit":{"!description":"This class represents the <code>Unit<\/code> composite type with the parts measure, unit, and unit customizing. The measure part is formatted according to the customizing for the unit. Use the result of the promise returned by {@link sap.ui.model.odata.v4.ODataMetaModel#requestUnitsOfMeasure} as unit customizing part. If no unit customizing is available, UI5's default formatting applies. The type may only be used for measure and unit parts from a {@link sap.ui.model.odata.v4.ODataModel}.","getInterface":{"!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Unit.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.model.type.Unit","validateValue":{"!description":"Does nothing as the type does not support constraints.","!static":false,"!category":"function","!type":"fn(vValue: String)","parameters":{"vValue":"type: string, description: The value to be validated"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Unit with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Unit.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a <code>Unit<\/code> composite type.","formatValue":{"!description":"Formats the given values of the parts of the <code>Unit<\/code> composite type to the given target type.","!static":false,"!category":"function","!type":"fn(aValues: [Object], sTargetType: String) -> String","parameters":{"sTargetType":"type: string, description: The target type; must be \"string\" or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","aValues":"type: any[], description: Array of part values to be formatted; contains in the following order: measure, unit, unit customizing. The first call to this method where all parts are set determines the unit customizing; subsequent calls use this customizing, so that the corresponding part may be omitted. Changes to the unit customizing part after this first method call are not considered: The unit customizing for this <code>Unit<\/code> instance remains unchanged."}},"!module":"sap/ui/model/odata/type/Unit","!helpDescription":"This class represents the <code>Unit<\/code> composite type with the parts measure, unit, and unit customizing. The measure part is formatted according to the customizing for the unit. Use the result of the promise returned by {@link sap.ui.model.odata.v4.ODataMetaModel#requestUnitsOfMeasure} as unit customizing part. If no unit customizing is available, UI5's default formatting applies. The type may only be used for measure and unit parts from a {@link sap.ui.model.odata.v4.ODataModel}.","parseValue":{"!description":"Parses the given string value to an array containing measure and unit.","!static":false,"!category":"function","!type":"fn(vValue: String, sSourceType: String, aCurrentValues: [Object]) -> [Object]","parameters":{"aCurrentValues":"type: any[], description: The current values of all binding parts","sSourceType":"type: string, description: The source type (the expected type of <code>vValue<\/code>); must be \"string\", or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string, description: The value to be parsed"}}},"sap.ui.base.Object_obj":{"extend":{"!description":"Creates a subclass of class sap.ui.base.Object with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain three kinds of information: <ul> <li><code>metadata:<\/code> an (optional) object literal with metadata about the class. The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata} and might contain the following information <ul> <li><code>interfaces:<\/code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)<\/li> <li><code>publicMethods:<\/code> {string[]} (optional) list of methods that should be part of the public facade of the class<\/li> <li><code>abstract:<\/code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)<\/li> <li><code>final:<\/code> {boolean} (optional) flag that marks the class as final (defaults to false)<\/li> <\/ul> Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}). <\/li>\n\n<li><code>constructor:<\/code> a function that serves as a constructor function for the new class. If no constructor function is given, the framework creates a default implementation that delegates all its arguments to the constructor function of the base class. <\/li>\n\n<li><i>any-other-name:<\/i> any other property in the <code>oClassInfo<\/code> is copied into the prototype object of the newly created class. Callers can thereby add methods or properties to all instances of the class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't make sense to use primitive values here other than to declare public constants.\n\nIf such a property has a function as its value, and if the property name does not start with an underscore or with the prefix \"on\", the property name will be automatically added to the list of public methods of the class (see property <code>publicMethods<\/code> in the <code>metadata<\/code> section). If a method's name matches that pattern, but is not meant to be public, it shouldn't be included in the class info object, but be assigned to the prototype instead. <\/li>\n\n<\/ul>\n\nThe prototype object of the newly created class uses the same prototype as instances of the base class (prototype chaining).\n\nA metadata object is always created, even if there is no <code>metadata<\/code> entry in the <code>oClassInfo<\/code> object. A getter for the metadata is always attached to the prototype and to the class (constructor function) itself.\n\nLast but not least, with the third argument <code>FNMetaImpl<\/code> the constructor of a metadata class can be specified. Instances of that class will be used to represent metadata for the newly created class and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: structured object with information about the class","FNMetaImpl":"type: function, description: constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.","sClassName":"type: string, description: name of the class to be created"}},"!type":"fn()","prototype":"sap.ui.base.Object"},"sap.ui.core.EventBus_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.EventBus with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.EventBus"},"sap.ui.core.util.serializer.delegate.HTML_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.delegate.HTML with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(fnGetControlId?: fn(), fnGetEventHandlerName?: fn())","prototype":"sap.ui.core.util.serializer.delegate.HTML"},"sap.ui.core.InvisibleText":{"!description":"An InvisibleText is used to bring hidden texts to the UI for screen reader support. The hidden text can e.g. be referenced in the ariaLabelledBy or ariaDescribedBy associations of other controls.\n\nThe inherited properties busy, busyIndicatorDelay and visible and the aggregation tooltip is not supported by this control.","setVisible":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27 property <code>visible<\/code> is not supported by control.<br>undefined","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.InvisibleText"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.InvisibleText.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text of the InvisibleText.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"toStatic":{"!description":"Adds <code>this<\/code> control into the static, hidden area UI area container.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.InvisibleText"},"!proto":"sap.ui.core.Control","!category":"class","setTooltip":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27 tooltip is not supported by control.<br>undefined","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.InvisibleText"},"setBusyIndicatorDelay":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27 local BusyIndicator is not supported by control.<br>undefined","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.InvisibleText"},"setBusyIndicatorSize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.54 local BusyIndicator is not supported by control.<br>undefined","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.InvisibleText"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.InvisibleText with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getStaticId":{"!description":"Returns the ID of a shared <code>InvisibleText<\/code> instance whose <code>text<\/code> property is retrieved from the given library resource bundle and text key.\n\nCalls with the same library and text key will return the same instance. The instance will be rendered statically.\n\nWhen accessibility has been switched off by configuration or when the text key is empty or falsy, no ID will be returned.","!static":true,"!category":"function","!type":"fn(sLibrary: String, sTextKey?: String) -> sap.ui.core.ID","parameters":{"sTextKey":"type: string, description: Key of the text to retrieve from the resource bundle","sLibrary":"type: string, description: Name of the library to load the resource bundle for"}},"!constructorDescription":"Constructor for a new InvisibleText.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string (default: )<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setBusy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27 local BusyIndicator is not supported by control.<br>undefined","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.InvisibleText"},"!module":"sap/ui/core/InvisibleText","!helpDescription":"An InvisibleText is used to bring hidden texts to the UI for screen reader support. The hidden text can e.g. be referenced in the ariaLabelledBy or ariaDescribedBy associations of other controls.\n\nThe inherited properties busy, busyIndicatorDelay and visible and the aggregation tooltip is not supported by this control.","setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text of the InvisibleText.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.InvisibleText","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.core.mvc.XMLView.PreprocessorType":{"!description":"Specifies the available preprocessor types for XMLViews","!module":"sap/ui/core/mvc/XMLView","XML":{"!description":"This preprocessor receives the plain xml source of the view and should also return a valid xml ready for view creation","!category":"enum","!type":"String"},"!category":"static class","VIEWXML":{"!description":"This preprocessor receives a valid xml source for View creation without any template tags but with control declarations. These include their full IDs by which they can also be queried during runtime.","!category":"enum","!type":"String"},"CONTROLS":{"!description":"This preprocessor receives the control tree produced through the view source","!category":"enum","!type":"String"}},"sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel":{"!description":"Handle to an already instantiated SAPUI5 OData model.","!constructorDescription":"Create a reference to an OData model already loaded elsewhere with the help\nof SAPUI5.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Handle to an already instantiated SAPUI5 OData model.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.odata.v2.ODataContextBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.odata.v2.ODataContextBinding"},"sap.ui.core.support":{"RuleEngineOpaExtension":"sap.ui.core.support.RuleEngineOpaExtension_obj","usage":"sap.ui.core.support.usage","!category":"namespace","RuleEngineOpaAssertions":"sap.ui.core.support.RuleEngineOpaAssertions","Plugin":"sap.ui.core.support.Plugin_obj"},"sap.ui.core.mvc.Controller":{"!description":"A generic controller implementation for the UI5 Model-View-Controller concept.\n\nCan either be used as a generic controller which is enriched on the fly with methods and properties (see {@link sap.ui.controller}) or as a base class for typed controllers.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.Controller.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"onBeforeRendering":{"!description":"This method is called every time the View is rendered, before the Renderer is called and the HTML is placed in the DOM-Tree. It can be used to perform clean-up-tasks before re-rendering. (Even though this method is declared as \"abstract\", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)","!static":false,"!category":"function","!type":"fn()"},"onExit":{"!description":"This method is called upon desctuction of the View. The controller should perform its internal destruction in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering hooks. (Even though this method is declared as \"abstract\", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.base.EventProvider","!category":"class","registerExtensionProvider":{"!description":"Registers a callback module, which provides code enhancements for the lifecycle and event handler functions of a specific controller. The code enhancements are returned either in sync or async mode.\n\nThe extension provider module provides the <code>getControllerExtensions<\/code> function which returns either directly an array of objects or a Promise that returns an array of objects when it resolves. These objects are object literals defining the methods and properties of the controller in a similar way as {@link sap.ui.controller}.\n\n<b>Example for a callback module definition (sync):<\/b> <pre>\nsap.ui.define(\"my/custom/sync/ExtensionProvider\", ['jquery.sap.global'], function(jQuery) {\n  var ExtensionProvider = function() {};\n  ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {\n    if (!bAsync && sControllerName == \"my.own.Controller\") {\n      // IMPORTANT: only return extensions for a specific controller\n      return [{\n        onInit: function() {\n          // Do something here...\n        },\n        onAfterRendering: function() {\n          // Do something here...\n        },\n        onButtonClick: function(oEvent) {\n          // Handle the button click event\n        }\n      }\n    }];\n  };\n  return ExtensionProvider;\n}, true);\n<\/pre>\n\n<b>Example for a callback module definition (async):<\/b> <pre>\nsap.ui.define(\"my/custom/async/ExtensionProvider\", ['jquery.sap.global'], function(jQuery) {\n  var ExtensionProvider = function() {};\n  ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {\n    if (bAsync && sControllerName == \"my.own.Controller\") {\n      // IMPORTANT:\n      // only return a Promise for a specific controller since it\n      // requires the View/Controller and its parents to run in async\n      // mode!\n      return new Promise(function(fnResolve, fnReject) {\n        fnResolve([{\n          onInit: function() {\n            // Do something here...\n          },\n          onAfterRendering: function() {\n            // Do something here...\n          },\n          onButtonClick: function(oEvent) {\n            // Handle the button click event\n          }\n        }]);\n      }\n    };\n  };\n  return ExtensionProvider;\n}, true);\n<\/pre>\n\nThe lifecycle functions <code>onInit<\/code>, <code>onExit<\/code>, <code>onBeforeRendering<\/code> and <code>onAfterRendering<\/code> are added before or after the lifecycle functions of the original controller. The event handler functions, such as <code>onButtonClick<\/code>, are replacing the original controller's function.\n\nWhen using an async extension provider you need to ensure that the view is loaded in async mode.\n\nIn both cases, return <code>undefined<\/code> if no controller extension shall be applied.","!static":true,"!category":"function","!type":"fn(sExtensionProvider: String)","parameters":{"sExtensionProvider":"type: string, description: the module name of the extension provider\n\nSee {@link sap.ui.controller} for an overview of the available functions for controllers."}},"getOwnerComponent":{"!description":"Gets the component of the controller's view\n\nIf there is no Component connected to the view or the view is not connected to the controller, undefined is returned.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Component"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Instantiates a (MVC-style) controller. Consumers should call the constructor only in the\ntyped controller scenario. In the generic controller use case, they should use\n{@link sap.ui.controller} instead.","!module":"sap/ui/core/mvc/Controller","!helpDescription":"A generic controller implementation for the UI5 Model-View-Controller concept.\n\nCan either be used as a generic controller which is enriched on the fly with methods and properties (see {@link sap.ui.controller}) or as a base class for typed controllers.","onInit":{"!description":"This method is called upon initialization of the View. The controller can perform its internal setup in this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering hooks. (Even though this method is declared as \"abstract\", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)\n\n<b>Note:<\/b> In component-based apps <code>this.getOwnerComponent().getModel()<\/code> should be used inside <code>onInit()<\/code> to get a model assigned to the component instead of using <code>this.getView().getModel()<\/code>. The latter call might return <code>undefined<\/code> because the view might not have been attached to a parent yet (i.e. the component), and thus the view can't inherit a model from that parent. You could also attach to the <code>modelContextChange<\/code> event. The event is fired when either the context or the model changes for the control.","!static":false,"!category":"function","!type":"fn()"},"createId":{"!description":"Converts a view local ID to a globally unique one by prepending the view ID.\n\nIf no view is connected, undefined is returned.","!static":false,"!category":"function","!type":"fn(sId: String) -> String","parameters":{"sId":"type: string, description: View-local ID"}},"create":{"!description":"Creates an instance of controller class.","!static":true,"!category":"function","!type":"fn(mOptions: Object) -> Promise","parameters":{"mOptions":"type: object, description: A map containing the controller configuration options."}},"byId":{"!description":"Returns an Element of the connected view with the given local ID.\n\nViews automatically prepend their own ID as a prefix to created Elements to make the IDs unique even in the case of multiple view instances. This method helps to find an element by its local ID only.\n\nIf no view is connected or if the view doesn't contain an element with the given local ID, undefined is returned.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: View-local ID"}},"getView":{"!description":"Returns the view associated with this controller or undefined.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.mvc.View"},"onAfterRendering":{"!description":"This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can be used to apply additional changes to the DOM after the Renderer has finished. (Even though this method is declared as \"abstract\", it does not need to be defined in controllers, if the method does not exist, it will simply not be called.)","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.core.Component":{"getManifest":{"!description":"Returns the manifest defined in the metadata of the component. If not specified, the return value is null.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.ManagedObject","!category":"class","getOwnerIdFor":{"!description":"Returns the ID of the object in whose \"context\" the given ManagedObject has been created.\n\nFor objects that are not ManagedObjects or for which the owner is unknown, <code>undefined<\/code> will be returned as owner ID.\n\n<strong>Note<\/strong>: Ownership for objects is only checked by the framework at the time when they are created. It is not checked or updated afterwards. And it can only be detected while the {@link sap.ui.core.Component#runAsOwner Component.runAsOwner} function is executing. Without further action, this is only the case while the content of a UIComponent is {@link sap.ui.core.UIComponent#createContent constructed} or when a {@link sap.ui.core.routing.Router Router} creates a new View and its content.\n\n<strong>Note<\/strong>: This method does not guarantee that the returned owner ID belongs to a Component. Currently, it always does. But future versions of UI5 might introduce a more fine grained ownership concept, e.g. taking Views into account. Callers that want to deal only with components as owners, should use the following method: {@link sap.ui.core.Component.getOwnerComponentFor Component.getOwnerComponentFor}. It guarantees that the returned object (if any) will be a Component.\n\n<strong>Further note<\/strong> that only the ID of the owner is recorded. In rare cases, when the lifecycle of a ManagedObject is not bound to the lifecycle of its owner, (e.g. by the means of aggregations), then the owner might have been destroyed already whereas the ManagedObject is still alive. So even the existence of an owner ID is not a guarantee for the existence of the corresponding owner.","!static":true,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject) -> String","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: Object to retrieve the owner ID for"}},"getEventBus":{"!description":"Returns the event bus of this component.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.EventBus"},"!constructorDescription":"Creates and initializes a new Component with the given <code>sId<\/code> and\nsettings.\n\nThe set of allowed entries in the <code>mSettings<\/code> object depends on\nthe concrete subclass and is described there. See {@link sap.ui.core.Component}\nfor a general description of this argument.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject} can be used.","load":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":true,"!category":"function","!type":"fn(mOptions: Object) -> Promise.<function()>","parameters":{"mOptions":"type: object, description: Configuration options"}},"get":{"!description":"Returns an existing component instance, identified by its ID.","!static":true,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Component","parameters":{"sId":"type: string, description: ID of the component."}},"onWindowBeforeUnload":{"!description":"The window before unload hook. Override this method in your Component class implementation, to handle cleanup before the real unload or to prompt a question to the user, if the component should be exited.","!static":false,"!category":"function","!type":"fn() -> String"},"create":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":true,"!category":"function","!type":"fn(mOptions: Object) -> Promise.<sap.ui.core.Component>","parameters":{"mOptions":"type: object, description: Configuration options"}},"onWindowError":{"!description":"The window error hook. Override this method in your Component class implementation to listen to unhandled errors.","!static":false,"!category":"function","!type":"fn(sMessage: String, sFile: String, iLine: Number)","parameters":{"iLine":"type: int, description: Line number of the error","sFile":"type: string, description: File where the error occurred","sMessage":"type: string, description: The error message."}},"getManifestEntry":{"!description":"Returns the configuration of a manifest section or the value for a specific path. If no section or key is specified, the return value is null.\n\nExample: <code> { \"sap.ui5\": { \"dependencies\": { \"libs\": { \"sap.m\": {} }, \"components\": { \"my.component.a\": {} } } }); <\/code>\n\nThe configuration above can be accessed in the following ways: <ul> <li><b>By section/namespace<\/b>: <code>oComponent.getManifestEntry(\"sap.ui5\")<\/code><\/li> <li><b>By path<\/b>: <code>oComponent.getManifestEntry(\"/sap.ui5/dependencies/libs\")<\/code><\/li> <\/ul>\n\nBy section/namespace returns the configuration for the specified manifest section and by path allows to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with a slash (/).","!static":false,"!category":"function","!type":"fn(sKey: String) -> Object | null","parameters":{"sKey":"type: string, description: Either the manifest section name (namespace) or a concrete path"}},"createComponent":{"!description":"Creates a nested component that is declared in the <code>sap.ui5/componentUsages<\/code> section of the descriptor (manifest.json). The following snippet shows the declaration: <pre>\n{\n  [...]\n  \"sap.ui5\": {\n    \"componentUsages\": {\n      \"myUsage\": {\n        \"name\": \"my.useful.Component\"\n      }\n    }\n  }\n  [...]\n}\n<\/pre> The syntax of the configuration object of the component usage matches the configuration object of the {#link sap.ui.component} factory function.\n\nThis is an example of how the <code>createComponent<\/code> function can be used for asynchronous scenarios: <pre>\noComponent.createComponent(\"myUsage\").then(function(oComponent) {\n  oComponent.doSomething();\n}).catch(function(oError) {\n  Log.error(oError);\n});\n<\/pre>\n\nThe following example shows how <code>createComponent<\/code> can be used to create a nested component by providing specific properties like <code>id<\/code>, <code>async<\/code>, <code>settings<\/code>, or <code>componentData<\/code>: <pre>\nvar oComponent = oComponent.createComponent({\n  usage: \"myUsage\",\n  id: \"myId\",\n  settings: { ... },\n  componentData: { ... }\n});\n<\/pre> The allowed list of properties are defined in the parameter documentation of this function.\n\nThe properties can also be defined in the descriptor. These properties can be overwritten by the local properties of that function.","!static":false,"!category":"function","!type":"fn(vUsage: String | Object) -> sap.ui.core.Component | Promise","parameters":{"vUsage":"type: string|object, description: ID of the component usage or the configuration object that creates the component"}},"getComponentData":{"!description":"Returns user specific data object","!static":false,"!category":"function","!type":"fn() -> Object"},"!description":"Base Class for Component.","getInterface":{"!static":false,"!category":"function","!type":"fn()"},"init":{"!description":"Initializes the Component instance after creation.\n\nApplications must not call this hook method directly, it is called by the framework while the constructor of a Component is executed.\n\nSubclasses of Component should override this hook to implement any necessary initialization.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns the metadata for the Component class.","!static":true,"!category":"function","!type":"fn() -> sap.ui.core.ComponentMetadata"},"runAsOwner":{"!description":"Calls the function <code>fn<\/code> once and marks all ManagedObjects created during that call as \"owned\" by this Component.\n\nNested calls of this method are supported (e.g. inside a newly created, nested component). The currently active owner Component will be remembered before executing <code>fn<\/code> and restored afterwards.","!static":false,"!category":"function","!type":"fn(fn: fn()) -> Object","parameters":{"fn":"type: function, description: Function to execute"}},"onWindowUnload":{"!description":"The window unload hook. Override this method in your Component class implementation, to handle cleanup of the component once the window will be unloaded (e.g. closed).","!static":false,"!category":"function","!type":"fn()"},"getService":{"!description":"Returns a service interface for the {@link sap.ui.core.service.Service Service} declared in the descriptor for components (manifest.json). The declaration needs to be done in the <code>sap.ui5/services<\/code> section as follows: <pre>\n{\n  [...]\n  \"sap.ui5\": {\n    \"services\": {\n      \"myLocalServiceAlias\": {\n        \"factoryName\": \"my.ServiceFactory\",\n        [\"optional\": true]\n      }\n    }\n  }\n  [...]\n}\n<\/pre> The service declaration is used to define a mapping between the local alias for the service that can be used in the Component and the name of the service factory which will be used to create a service instance.\n\nThe <code>getService<\/code> function will look up the service factory and will create a new instance by using the service factory function {@link sap.ui.core.service.ServiceFactory#createInstance createInstance} The optional property defines that the service is not mandatory and the usage will not depend on the availability of this service. When requesting an optional service the <code>getService<\/code> function will reject but there will be no error logged in the console.\n\nWhen creating a new instance of the service the Component context will be passed as <code>oServiceContext<\/code> as follows: <pre>\n{\n  \"scopeObject\": this,     // the Component instance\n  \"scopeType\": \"component\" // the stereotype of the scopeObject\n}\n<\/pre>\n\nThe service will be created only once per Component and reused in future calls to the <code>getService<\/code> function. <p> This function will return a <code>Promise<\/code> which provides the service interface when resolved. If the <code>factoryName<\/code> could not be found in the {@link sap.ui.core.service.ServiceFactoryRegistry Service Factory Registry} or the service declaration in the descriptor for components (manifest.json) is missing the Promise will reject.\n\nThis is an example of how the <code>getService<\/code> function can be used: <pre>\noComponent.getService(\"myLocalServiceAlias\").then(function(oService) {\n  oService.doSomething();\n}).catch(function(oError) {\n  Log.error(oError);\n});\n<\/pre>","!static":false,"!category":"function","!type":"fn(sLocalServiceAlias: String) -> Promise","parameters":{"sLocalServiceAlias":"type: string, description: Local service alias as defined in the manifest.json"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Component with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"_enhanceWithUsageConfig":{"!description":"Enhances the given config object with the manifest configuration of the given usage. The given object is not modified, but the final object will be returned.","!static":false,"!category":"function","!type":"fn(sUsageId: *, mConfig: *) -> Object","parameters":{"sUsageId":"type: *, description: ID of the component usage","mConfig":"type: *, description: Configuration object for a component"}},"exit":{"!description":"Cleans up the Component instance before destruction.\n\nApplications must not call this hook method directly, it is called by the framework when the element is {@link #destroy destroyed}.\n\nSubclasses of Component should override this hook to implement any necessary cleanup.","!static":false,"!category":"function","!type":"fn()"},"!module":"sap/ui/core/Component","getManifestObject":{"!description":"Returns the manifest object.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Manifest"},"!helpDescription":"Base Class for Component.","onConfigChange":{"!description":"The hook which gets called when the static configuration of the component has been changed by some configuration extension.","!static":false,"!category":"function","!type":"fn(sConfigKey: String)","parameters":{"sConfigKey":"type: string, description: Error message."}},"getOwnerComponentFor":{"!description":"Returns the Component instance in whose \"context\" the given ManagedObject has been created or <code>undefined<\/code>.\n\nThis is a convenience wrapper around {@link sap.ui.core.Component.getOwnerIdFor Component.getOwnerIdFor}. If the owner ID cannot be determined for reasons documented on <code>getOwnerForId<\/code> or when the Component for the determined ID no longer exists, <code>undefined<\/code> will be returned.","!static":true,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject) -> sap.ui.core.Component","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: Object to retrieve the owner Component for"}},"_createComponent":{"!description":"Internal API to create a component with Component.create (async) or sap.ui.component (sync). In case a <code>oOwnerComponent<\/code> is given, it will be created within the context of it.","!static":true,"!category":"function","!type":"fn(mConfig: Object, oOwnerComponent?: sap.ui.core.Component) -> sap.ui.core.Component | Promise","parameters":{"mConfig":"type: object, description: Configuration object that creates the component","oOwnerComponent":"type: sap.ui.core.Component, description: Owner component"}}},"sap.ui.core.service":{"ServiceFactoryRegistry":{"!description":"The service factory registry.","!module":"sap/ui/core/service/ServiceFactoryRegistry","!category":"enum","!type":"String"},"ServiceFactory":"sap.ui.core.service.ServiceFactory_obj","Service":"sap.ui.core.service.Service_obj","!category":"namespace"},"sap.ui.model.odata.v4.ODataPropertyBinding":{"!description":"Property binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested' and 'DataStateChange'. For unsupported events, an error is thrown.","resume":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"suspend":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"hasPendingChanges":{"!description":"Returns <code>true<\/code> if this binding or its dependent bindings have pending changes, meaning updates that have not yet been successfully sent to the server.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v4.ODataPropertyBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"requestValue":{"!description":"Requests the value of the property binding.","!static":false,"!category":"function","!type":"fn() -> Promise"},"requestValueListType":{"!description":"Determines which type of value list exists for this property.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!proto":"sap.ui.model.PropertyBinding","isInitial":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"destroy":{"!description":"Destroys the object. The object must not be used anymore after this function was called.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and notifies the control that new data is available.\n\nRefresh is supported for bindings which are not relative to a {@link sap.ui.model.odata.v4.Context}.\n\nNote: When calling {@link #refresh} multiple times, the result of the request triggered by the last call determines the binding's data; it is <b>independent<\/b> of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given group ID.\n\nIf there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #refresh}.","!static":false,"!category":"function","!type":"fn(sGroupId?: String)","parameters":{"sGroupId":"type: string, description: The group ID to be used for refresh; if not specified, the binding's group ID is used. For suspended bindings, only the binding's group ID is supported because {@link #resume} uses the binding's group ID.\n\nValid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}."}},"!category":"class","setType":{"!description":"Sets the optional type and internal type for this binding; used for formatting and parsing. Fires a change event if the type has changed.","!static":false,"!category":"function","!type":"fn(oType: sap.ui.model.Type, sInternalType: String)","parameters":{"sInternalType":"type: string, description: The internal type of the element property which owns this binding, for example \"any\", \"boolean\", \"float\", \"int\", \"string\"; see {@link sap.ui.model.odata.type} for more information","oType":"type: sap.ui.model.Type, description: The type for this binding"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataPropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Returns the current value.","!static":false,"!category":"function","!type":"fn() -> Object"},"getRootBinding":{"!description":"Returns the root binding of this binding's hierarchy, see binding {@link topic:54e0ddf695af4a6c978472cecb01c64d Initialization and Read Requests}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding | sap.ui.model.odata.v4.ODataPropertyBinding"},"!constructorDescription":"Do <strong>NOT<\/strong> call this private constructor, but rather use\n{@link sap.ui.model.odata.v4.ODataModel#bindProperty} instead!","!module":"sap/ui/model/odata/v4/ODataPropertyBinding","resetChanges":{"!description":"Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also invalid user input.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!helpDescription":"Property binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested' and 'DataStateChange'. For unsupported events, an error is thrown.","requestValueListInfo":{"!description":"Requests information to retrieve a value list for this property.","!static":false,"!category":"function","!type":"fn(bAutoExpandSelect?: Boolean) -> Promise","parameters":{"bAutoExpandSelect":"type: boolean, description: The value of the parameter <code>autoExpandSelect<\/code> for value list models created by this method. If the value list model is this binding's model, this flag has no effect. Supported since 1.68.0"}},"setValue":{"!description":"Sets the new current value and updates the cache. If the value cannot be accepted or cannot be updated on the server, an error is logged to the console and added to the message manager as a technical message.","!static":false,"!category":"function","!type":"fn(vValue: Object, sGroupId?: String)","parameters":{"sGroupId":"type: string, description: The group ID to be used for this update call; if not specified, the update group ID for this binding (or its relevant parent binding) is used, see {@link sap.ui.model.odata.v4.ODataPropertyBinding#constructor}. Valid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}.","vValue":"type: any, description: The new value which must be primitive"}},"getValueListType":{"!description":"Determines which type of value list exists for this property.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.ValueListType"}},"sap.ui.model.odata.type.DateTime_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.DateTime with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.DateTime"},"sap.ui.core.Label":{"!description":"Marker interface for controls which are suitable for use as label.","!module":"sap/ui/core/library","!category":"static class"},"jQuery.Event":{"!description":"Check the jQuery.Event class documentation available under \"http://www.jquery.com\" and \"http://api.jquery.com/category/events/event-object/\" for details.","isPseudoType":{"!description":"Checks whether this instance of {@link jQuery.Event} is of the given <code>sType<\/code> pseudo type.","!static":false,"!category":"function","!type":"fn(sType: String) -> Boolean","parameters":{"sType":"type: string, description: The name of the pseudo type this event should be checked for."}},"getOffsetY":{"!description":"Returns OffsetY of Event. In jQuery there is a bug. in IE the value is in offsetY, in FF in layerY.","!static":false,"!category":"function","!type":"fn() -> Number"},"!constructorDescription":"Constructor for a jQuery.Event object.\n\nSee \"http://www.jquery.com\" and \"http://api.jquery.com/category/events/event-object/\".","!module":"sap/ui/events/jquery/EventExtension","!helpDescription":"Check the jQuery.Event class documentation available under \"http://www.jquery.com\" and \"http://api.jquery.com/category/events/event-object/\" for details.","!proto":"Object","getPseudoTypes":{"!description":"Returns an array of names (as strings) identifying {@link module:sap/ui/events/PseudoEvents} that are fulfilled by this very Event instance.","!static":false,"!category":"function","!type":"fn() -> [String]"},"!category":"class","getOffsetX":{"!description":"Returns OffsetX of Event. In jQuery there is a bug. In IE the value is in offsetX, in FF in layerX","!static":false,"!category":"function","!type":"fn() -> Number"}},"sap.ui.core.mvc.XMLView_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.mvc.XMLView"},"sap.ui.core.IShrinkable":{"!description":"Interface for the controls which are suitable to shrink.\n\nThis means the control should still look fine when it gets smaller than its normal size, e.g. Text controls which can show ellipsis in case of shrink.\n\nNote: This marker interface can be implemented by controls to give a hint to the container. The control itself does not need to implement anything. A parent control that respects this interface will apply the \"flex-shrink\" as a CSS property which determines how much the item will shrink relative to the rest of the items in the container when negative free space is distributed.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.model.json.JSONListBinding_obj":{"!type":"fn(oModel: sap.ui.model.json.JSONModel, sPath: String, oContext: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object)","prototype":"sap.ui.model.json.JSONListBinding"},"sap.ui.model.ClientListBinding":{"!description":"List binding implementation for client models.","extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Applies a new set of filters to the list represented by this binding.\n\nSee {@link sap.ui.model.ListBinding#filter ListBinding#filter} for a more detailed description of list filtering.\n\nWhen no <code>sFilterType<\/code> is given, any previously configured application filters are cleared and the given filters are used as control filters","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter], sFilterType?: sap.ui.model.FilterType) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter[], description: Array of filter objects","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted; if no type is given, then any previously configured application filters are cleared and the given filters are used as control filters"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ClientListBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates a new ClientListBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.Model#bindList Model#bindList} on the corresponding model implementation instead.","!module":"sap/ui/model/ClientListBinding","!helpDescription":"List binding implementation for client models.","!proto":"sap.ui.model.ListBinding","!category":"class"},"sap.ui.model.odata.type.Int32_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int32 with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Int32"},"module:sap/ui/dom/jquery/scrollLeftRTL":{"!description":"This module provides the {@link jQuery#scrollLeftRTL} API.","!module":"sap/ui/dom/jquery/scrollLeftRTL","module:sap/ui/dom/jquery/scrollLeftRTL":"module:sap/ui/dom/jquery/scrollLeftRTL","!helpDescription":"This module provides the {@link jQuery#scrollLeftRTL} API.","!category":"namespace"},"module:sap/ui/events/jquery/EventExtension":{"!description":"Provides the jQuery.Event extensions.","!module":"sap/ui/events/jquery/EventExtension","module:sap/ui/events/jquery/EventExtension":"module:sap/ui/events/jquery/EventExtension","!helpDescription":"Provides the jQuery.Event extensions.","!category":"namespace"},"sap.ui.test.matchers.Descendant":{"!description":"Checks if a control has a given descendant.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    descendant: \"object\" // where \"object\" is a declarative matcher for the descendant\n}\n<\/code><\/pre>","!module":"sap/ui/test/matchers/Descendant","!helpDescription":"Checks if a control has a given descendant.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    descendant: \"object\" // where \"object\" is a declarative matcher for the descendant\n}\n<\/code><\/pre>","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.routing.Views_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Views with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oOptions?: Object)","prototype":"sap.ui.core.routing.Views"},"sap.ui.model.Type_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.Type with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.Type"},"sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest":{"!description":"Creation of URIs for fetching a query dimension value set.","setRequestOptions":{"!description":"Set further options to be applied for the OData request","!static":false,"!category":"function","!type":"fn(bIncludeCount: Boolean)","parameters":{"bIncludeCount":"type: Boolean, description: Indicates whether or not the result shall include a count for the returned entities. Default is not to include it. Pass null to keep current setting."}},"setResultPageBoundaries":{"!description":"Specify that only a page of the query result shall be returned. A page is described by its boundaries, that are row numbers for the first and last rows in the query result to be returned.","!static":false,"!category":"function","!type":"fn(start: Number, end: Number)","parameters":{"start":"type: Number, description: The first row of the query result to be returned. Numbering starts at 1. Passing null is equivalent to start with the first row.","end":"type: Number, description: The last row of the query result to be returned. Passing null is equivalent to get all rows up to the end of the query result."}},"getFilterExpression":{"!description":"Get the filter expression for this request.\n\nExpressions are represented by separate objects. If none exists so far, a new expression object gets created.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.FilterExpression"},"!proto":"sap.ui.base.Object","getResultPageBoundaries":{"!description":"Returns the current page boundaries as object with properties <code>start<\/code> and <code>end<\/code>. If the end of the page is unbounded, <code>end<\/code> is null.","!static":false,"!category":"function","!type":"fn() -> Object"},"getURIToDimensionMemberEntries":{"!description":"Get the unescaped URI to fetch the dimension members, optionally augmented by text and attributes.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String) -> String","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"!category":"class","setFilterExpression":{"!description":"Set the filter expression for this request.\n\nExpressions are represented by separate objects. Calling this method replaces the filter object maintained by this request.","!static":false,"!category":"function","!type":"fn(oFilter: sap.ui.model.analytics.odata4analytics.FilterExpression)","parameters":{"oFilter":"type: sap.ui.model.analytics.odata4analytics.FilterExpression, description: The filter object to be associated with this request."}},"setSortExpression":{"!description":"Set the sort expression for this request.\n\nExpressions are represented by separate objects. Calling this method replaces the sort object maintained by this request.","!static":false,"!category":"function","!type":"fn(oSorter: sap.ui.model.analytics.odata4analytics.SortExpression)","parameters":{"oSorter":"type: sap.ui.model.analytics.odata4analytics.SortExpression, description: The sort object to be associated with this request."}},"setParameterizationRequest":{"!description":"Set the parameterization request required for retrieving dimension members directly from the query result, if it is parameterized.","!static":false,"!category":"function","!type":"fn(oParameterizationRequest: undefined)","parameters":{"oParameterizationRequest":"type: undefined, description: Request object for interactions with the parameterization of this query result"}},"!constructorDescription":"Create a request object for interaction with a dimension value help. Such a\nvalue help is served by either the query result entity set, in which case the\nreturned dimension members are limited to those also used in the query result\ndata. Or, the value help is populated by a master data entity set, if made\navailable by the service. In this case, the result will include all valid\nmembers for that dimension.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Creation of URIs for fetching a query dimension value set.","getURIQueryOptionValue":{"!description":"Get the value of a query option for the OData request URI corresponding to this request.","!static":false,"!category":"function","!type":"fn(sQueryOptionName: String) -> String","parameters":{"sQueryOptionName":"type: String, description: Identifies the query option: $select, $filter,... or any custom query option"}},"getURIToDimensionMemberEntitySet":{"!description":"Get the URI to locate the entity set for the dimension memebers.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String) -> String","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"getSortExpression":{"!description":"Get the sort expression for this request.\n\nExpressions are represented by separate objects. If none exists so far, a new expression object gets created.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.SortExpression"}},"sap.ui.model.type.Float_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.Float"},"jQuery.sap.history":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.19.1 Please use {@link sap.ui.core.routing.Route} instead.<br>Enables the back and forward buttons in browser to navigate back or forth through the browser history stack.<br/><br/>\n\nIt also supports adding virtual history which used only to mark some intermediate state in order to navigate back to the previous state. And this state will be skipped from the browser history stack immediately after a new history state is added to the history stack after this state <br/><br/>\n\nBy providing the hash saved from the return value of calling jQuery.sap.history.addHistory, jQuery.sap.history.backToHash will navigate back directly to the history state with the same hash. <br/><br/>\n\nPlease use {@link jQuery.sap.history#back}() to go one step back in the history stack instead of using window.history.back(), because it handles the empty history stack situation and will call the defaultHandler for this case. <br/><br/>\n\nExample for the usage of history handling: <pre>\n\t//Initialization\n\tjQuery.sap.history({\n\t\troutes: [], //please refer to the jQuery.sap.history function comment for the format.\n\t\tdefaultHandler: function(){\n\t\t\t//code here\n\t\t}\n\t});\n\n\t//add history\n\tvar hash = jQuery.sap.history.addHistory(\"IDENTIFIER\", jsonData);\n\n\t//add virtual history\n\tjQuery.sap.history.addVirtualHistory();\n\n\t//back to hash\n\tjQuery.sap.history.backToHash(hash);\n\n\t//back one step along the history stack\n\tjQuery.sap.history.back();\n<\/pre>","setDefaultHandler":{"!description":"Set the default handler which will be called when there's an empty hash in the url.","!static":false,"!category":"function","!type":"fn(fn: fn())","parameters":{"fn":"type: function, description: The function that will be set as the default handler"}},"!proto":"Object","backThroughPath":{"!description":"This function will navigate back to the recent history state which has the sPath identifier. It is usually used to navigate back along one specific route and jump over the intermediate history state if there are any.","!static":false,"!category":"function","!type":"fn(sPath: String)","parameters":{"sPath":"type: string, description: The route identifier to which the history navigates back."}},"back":{"!description":"This function navigates back through the history stack. The number of steps is set by the parameter iSteps. It also handles the situation when it's called while there's nothing in the history stack. Normally this happens when the application is restored from the bookmark. If there's nothing in the history stack, the default handler will be called with NavType jQuery.sap.history.NavType.Back.","!static":false,"!category":"function","!type":"fn(iSteps?: Number)","parameters":{"iSteps":"type: int, description: how many steps you want to go back, by default the value is 1."}},"!category":"class","addHistory":{"!description":"This function adds a history record. It will not trigger the related handler of the routes, the changes have to be done by the developer. Normally, a history record should be added when changes are done already.","!static":false,"!category":"function","!type":"fn(sIdf: String, oStateData: Object, bBookmarkable: Boolean, bVirtual?: Boolean) -> String","parameters":{"oStateData":"type: object, description: The object passed to the corresponding handler when the identifier is matched with the url hash","bBookmarkable":"type: boolean, description: Default value is set to true. If this is set to false, the default handler will be called when this identifier and data are matched","sIdf":"type: string, description: The identifier defined in the routes which will be matched in order to call the corresponding handler","bVirtual":"type: boolean, description: This states if the history is a virtual history that should be skipped when going forward or backward in the history stack."}},"!constructorDescription":"jQuery.sap.history is deprecated. Please use {@link sap.ui.core.routing.Route} instead.\n\nInitialize the history handling and set the routes and default handler.\nThis should be only called once with the mSettings set in the right format. If the mSettings is not an object,\nyou have another chance to call this function again to initialize the history handling. But once the mSettings\nis set with an object, you can only call the addRoute and setDefaultHandler to set the data.","!module":"jquery.sap.history","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.19.1 Please use {@link sap.ui.core.routing.Route} instead.<br>Enables the back and forward buttons in browser to navigate back or forth through the browser history stack.<br/><br/>\n\nIt also supports adding virtual history which used only to mark some intermediate state in order to navigate back to the previous state. And this state will be skipped from the browser history stack immediately after a new history state is added to the history stack after this state <br/><br/>\n\nBy providing the hash saved from the return value of calling jQuery.sap.history.addHistory, jQuery.sap.history.backToHash will navigate back directly to the history state with the same hash. <br/><br/>\n\nPlease use {@link jQuery.sap.history#back}() to go one step back in the history stack instead of using window.history.back(), because it handles the empty history stack situation and will call the defaultHandler for this case. <br/><br/>\n\nExample for the usage of history handling: <pre>\n\t//Initialization\n\tjQuery.sap.history({\n\t\troutes: [], //please refer to the jQuery.sap.history function comment for the format.\n\t\tdefaultHandler: function(){\n\t\t\t//code here\n\t\t}\n\t});\n\n\t//add history\n\tvar hash = jQuery.sap.history.addHistory(\"IDENTIFIER\", jsonData);\n\n\t//add virtual history\n\tjQuery.sap.history.addVirtualHistory();\n\n\t//back to hash\n\tjQuery.sap.history.backToHash(hash);\n\n\t//back one step along the history stack\n\tjQuery.sap.history.back();\n<\/pre>","addRoute":{"!description":"Adds a route to the history handling.","!static":false,"!category":"function","!type":"fn(sIdf: String, fn: fn(), oThis?: Object) -> Object","parameters":{"fn":"type: function, description: The function that will be called when the identifier is matched with the hash.","sIdf":"type: string, description: The identifier that is matched with the hash in the url in order to call the corresponding handler.","oThis":"type: object, description: If oThis is provided, the fn function's this keyword will be bound to this object."}},"addVirtualHistory":{"!description":"This function adds a virtual history record based on the current hash. A virtual record is only for marking the current state of the application, and when the back button clicked it will return to the previous state. It is used when the marked state shouldn't be seen by the user when user click the back or forward button of the browser. For example, when showing a context menu a virtual history record should be added and this record will be skipped when user navigates back and it will return directly to the previous history record. If you avoid adding the virtual history record, it will return to one history record before the one your virtual record is based on. That's why virtual record is necessary.","!static":false,"!category":"function","!type":"fn()"},"backToHash":{"!description":"This function calculate the number of back steps to the specific sHash passed as parameter, and then go back to the history state with this hash.","!static":false,"!category":"function","!type":"fn(sHash: String)","parameters":{"sHash":"type: string, description: The hash string needs to be navigated. This is normally returned when you call the addhistory method."}}},"sap.ui.model.ListBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object)","prototype":"sap.ui.model.ListBinding"},"sap.ui.core.format.ListFormat_obj":{"!type":"fn()","prototype":"sap.ui.core.format.ListFormat"},"sap.ui.core.hyphenation.Hyphenation_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.hyphenation.Hyphenation with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.hyphenation.Hyphenation"},"sap.ui.core.ws.WebSocket":{"fireClose":{"!description":"Fires event {@link #event:close close} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"fireMessage":{"!description":"Fires event {@link #event:message message} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"fireOpen":{"!description":"Fires event {@link #event:open open} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"attachError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:error error} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ws.WebSocket<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>WebSocket<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachOpen":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:open open} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ws.WebSocket<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>WebSocket<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!proto":"sap.ui.base.EventProvider","!category":"class","!constructorDescription":"Creates a new WebSocket connection.","detachError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:error error} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to call, when the event occurs"}},"attachClose":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:close close} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ws.WebSocket<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>WebSocket<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getReadyState":{"!description":"Getter for WebSocket readyState.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ws.ReadyState"},"close":{"!description":"Closes the connection.","!static":false,"!category":"function","!type":"fn(iCode?: Number, sReason?: String) -> sap.ui.core.ws.WebSocket","parameters":{"sReason":"type: string, description: Closing reason as a string","iCode":"type: int, description: Status code that explains why the connection is closed. Must either be 1000, or between 3000 and 4999 (default 1000)"}},"!description":"Basic WebSocket class.","getInterface":{"!static":false,"!category":"function","!type":"fn()"},"detachClose":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:close close} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to call, when the event occurs"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.ws.WebSocket.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getProtocol":{"!description":"Getter for the protocol selected by the server once the connection is open.","!static":false,"!category":"function","!type":"fn() -> String"},"attachMessage":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:message message} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ws.WebSocket<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>WebSocket<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"fireError":{"!description":"Fires event {@link #event:error error} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"!module":"sap/ui/core/ws/WebSocket","!helpDescription":"Basic WebSocket class.","detachMessage":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:message message} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to call, when the event occurs"}},"send":{"!description":"Sends a message.\n\nIf the connection is not yet opened, the message will be queued and sent when the connection is established.","!static":false,"!category":"function","!type":"fn(sMessage: String) -> sap.ui.core.ws.WebSocket","parameters":{"sMessage":"type: string, description: Message to send"}},"detachOpen":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:open open} event of this <code>sap.ui.core.ws.WebSocket<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ws.WebSocket","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to call, when the event occurs"}}},"sap.ui.core.util.ExportCell_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportCell with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.util.ExportCell"},"sap.ui.model.odata.type.Int64":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Int64<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int64 with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Int64.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Int64<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> Number | String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","sValue":"type: string, description: the value to be formatted, which is represented as a string in the model"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Int64","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Int64<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to an Int64 in <code>string<\/code> representation.","!static":false,"!category":"function","!type":"fn(vValue: String | Number, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); may be \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|number, description: the value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>"}}},"sap.ui.model.type.Float":{"!description":"This class represents float simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Float.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Float type.","!module":"sap/ui/model/type/Float","!helpDescription":"This class represents float simple types.","!proto":"sap.ui.model.SimpleType","!category":"class"},"sap.ui.core.SeparatorItem":{"!description":"An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item, sap.ui.core.Element, sap.ui.base.EventProvider, and sap.ui.base.Object.","extend":{"!description":"Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.SeparatorItem.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new SeparatorItem.","!module":"sap/ui/core/SeparatorItem","!helpDescription":"An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item, sap.ui.core.Element, sap.ui.base.EventProvider, and sap.ui.base.Object.","!proto":"sap.ui.core.Item","!category":"class"},"sap.ui.model.analytics.odata4analytics.Model":{"!description":"Representation of an OData model with analytical annotations defined by OData4SAP.","!constructorDescription":"Create a representation of the analytical semantics of OData service metadata","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of an OData model with analytical annotations defined by OData4SAP.","!proto":"sap.ui.base.Object","!category":"class"},"jQuery.sap.log.Logger":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/Log.getLogger} instead<br>A Logger class","isLoggable":{"!description":"Checks whether logging is enabled for the given log level, depending on the currently effective log level for the given component.\n\nIf no component is given, the default component of this logger will be taken into account.","!static":false,"!category":"function","!type":"fn(iLevel?: Number, sComponent?: String) -> Boolean","parameters":{"iLevel":"type: int, description: The log level in question","sComponent":"type: string, description: Name of the component to check the log level for"}},"debug":{"!description":"Creates a new debug-level entry in the log with the given message, details and calling component.","!static":false,"!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger","parameters":{"fnSupportInfo":"type: function, description: Callback that returns an additional support object to be logged in support mode. This function is only called if support info mode is turned on with <code>logSupportInfo(true)<\/code>. To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple immutable JSON object with mostly static and stable content.","sComponent":"type: string, description: Name of the component that produced the log entry","sDetails":"type: string, description: Details about the message, might be omitted","sMessage":"type: string, description: Message text to display"}},"!proto":"Object","!category":"class","error":{"!description":"Creates a new error-level entry in the log with the given message, details and calling component.","!static":false,"!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger","parameters":{"fnSupportInfo":"type: function, description: Callback that returns an additional support object to be logged in support mode. This function is only called if support info mode is turned on with <code>logSupportInfo(true)<\/code>. To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple immutable JSON object with mostly static and stable content.","sComponent":"type: string, description: Name of the component that produced the log entry","sDetails":"type: string, description: Details about the message, might be omitted","sMessage":"type: string, description: Message text to display"}},"fatal":{"!description":"Creates a new fatal-level entry in the log with the given message, details and calling component.","!static":false,"!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger","parameters":{"fnSupportInfo":"type: function, description: Callback that returns an additional support object to be logged in support mode. This function is only called if support info mode is turned on with <code>logSupportInfo(true)<\/code>. To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple immutable JSON object with mostly static and stable content.","sComponent":"type: string, description: Name of the component that produced the log entry","sDetails":"type: string, description: Details about the message, might be omitted","sMessage":"type: string, description: Message text to display"}},"setLevel":{"!description":"Defines the maximum <code>jQuery.sap.log.Level<\/code> of log entries that will be recorded. Log entries with a higher (less important) log level will be omitted from the log. When a component name is given, the log level will be configured for that component only, otherwise the log level for the default component of this logger is set. For the global logger, the global default level is set.\n\n<b>Note<\/b>: Setting a global default log level has no impact on already defined component log levels. They always override the global default log level.","!static":false,"!category":"function","!type":"fn(iLogLevel: jQuery.sap.log.Level, sComponent?: String) -> jQuery.sap.log.Logger","parameters":{"sComponent":"type: string, description: The log component to set the log level for","iLogLevel":"type: jQuery.sap.log.Level, description: The new log level"}},"getLevel":{"!description":"Returns the log level currently effective for the given component. If no component is given or when no level has been configured for a given component, the log level for the default component of this logger is returned.","!static":false,"!category":"function","!type":"fn(sComponent?: String) -> Number","parameters":{"sComponent":"type: string, description: Name of the component to retrieve the log level for"}},"trace":{"!description":"Creates a new trace-level entry in the log with the given message, details and calling component.","!static":false,"!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger","parameters":{"fnSupportInfo":"type: function, description: Callback that returns an additional support object to be logged in support mode. This function is only called if support info mode is turned on with <code>logSupportInfo(true)<\/code>. To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple immutable JSON object with mostly static and stable content.","sComponent":"type: string, description: Name of the component that produced the log entry","sDetails":"type: string, description: Details about the message, might be omitted","sMessage":"type: string, description: Message text to display"}},"!constructorDescription":"Creates a new Logger instance which will use the given component string\nfor all logged messages without a specific component.","!module":"jquery.sap.global","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/Log.getLogger} instead<br>A Logger class","warning":{"!description":"Creates a new warning-level entry in the log with the given message, details and calling component.","!static":false,"!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger","parameters":{"fnSupportInfo":"type: function, description: Callback that returns an additional support object to be logged in support mode. This function is only called if support info mode is turned on with <code>logSupportInfo(true)<\/code>. To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple immutable JSON object with mostly static and stable content.","sComponent":"type: string, description: Name of the component that produced the log entry","sDetails":"type: string, description: Details about the message, might be omitted","sMessage":"type: string, description: Message text to display"}},"info":{"!description":"Creates a new info-level entry in the log with the given message, details and calling component.","!static":false,"!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger","parameters":{"fnSupportInfo":"type: function, description: Callback that returns an additional support object to be logged in support mode. This function is only called if support info mode is turned on with <code>logSupportInfo(true)<\/code>. To avoid negative effects regarding execution times and memory consumption, the returned object should be a simple immutable JSON object with mostly static and stable content.","sComponent":"type: string, description: Name of the component that produced the log entry","sDetails":"type: string, description: Details about the message, might be omitted","sMessage":"type: string, description: Message text to display"}}},"sap.ui.core.Component.registry":{"!description":"Registry of all <code>Component<\/code>s that currently exist.","all":{"!description":"Return an object with all instances of <code>sap.ui.core.Component<\/code>, keyed by their ID.\n\nEach call creates a new snapshot object. Depending on the size of the UI, this operation therefore might be expensive. Consider to use the <code>forEach<\/code> or <code>filter<\/code> method instead of executing similar operations on the returned object.\n\n<b>Note<\/b>: The returned object is created by a call to <code>Object.create(null)<\/code>, and therefore lacks all methods of <code>Object.prototype<\/code>, e.g. <code>toString<\/code> etc.","!static":"true","!category":"function","!type":"fn() -> Object.<sap.ui.core.ID,sap.ui.core.Component>"},"filter":{"!description":"Returns an array with components for which the given <code>callback<\/code> returns a value that coerces to <code>true<\/code>.\n\nThe expected signature of the callback is <pre>\n   function callback(oComponent, sID)\n<\/pre> where <code>oComponent<\/code> is the currently visited component instance and <code>sID<\/code> is the ID of that instance.\n\nIf components are created or destroyed within the <code>callback<\/code>, then the behavior is not specified. Newly added objects might or might not be visited. When a component is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.\n\nIf a <code>thisArg<\/code> is given, it will be provided as <code>this<\/code> context when calling <code>callback<\/code>. The <code>this<\/code> value that the implementation of <code>callback<\/code> sees, depends on the usual resolution mechanism. E.g. when <code>callback<\/code> was bound to some context object, that object wins over the given <code>thisArg<\/code>.\n\nThis function returns an array with all components matching the given predicate. The order of the components in the array is not specified and might change between calls (over time and across different versions of UI5).","!static":"true","!category":"function","!type":"fn(callback: fn(), thisArg?: Object) -> [sap.ui.core.Component]"},"!module":"sap/ui/core/Component","size":{"!description":"Number of existing components.","!category":"enum","!type":"Number"},"!helpDescription":"Registry of all <code>Component<\/code>s that currently exist.","forEach":{"!description":"Calls the given <code>callback<\/code> for each existing component.\n\nThe expected signature of the callback is <pre>\n   function callback(oComponent, sID)\n<\/pre> where <code>oComponent<\/code> is the currently visited component instance and <code>sID<\/code> is the ID of that instance.\n\nThe order in which the callback is called for components is not specified and might change between calls (over time and across different versions of UI5).\n\nIf components are created or destroyed within the <code>callback<\/code>, then the behavior is not specified. Newly added objects might or might not be visited. When a component is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.\n\nIf a <code>thisArg<\/code> is given, it will be provided as <code>this<\/code> context when calling <code>callback<\/code>. The <code>this<\/code> value that the implementation of <code>callback<\/code> sees, depends on the usual resolution mechanism. E.g. when <code>callback<\/code> was bound to some context object, that object wins over the given <code>thisArg<\/code>.","!static":"true","!category":"function","!type":"fn(callback: fn(), thisArg?: Object)"},"get":{"!description":"Retrieves a Component by its ID.\n\nWhen the ID is <code>null<\/code> or <code>undefined<\/code> or when there's no Component with the given ID, then <code>undefined<\/code> is returned.","!static":"true","!category":"function","!type":"fn(sId: String, id: sap.ui.core.ID) -> sap.ui.core.Component"},"!category":"namespace"},"sap.ui.model.Sorter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sPath: String, bDescending?: Boolean, vGroup?: Boolean | fn(), fnComparator?: fn())","prototype":"sap.ui.model.Sorter"},"sap.ui.test.matchers.PropertyStrictEquals_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.PropertyStrictEquals with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.PropertyStrictEquals"},"sap.ui.model.ListBinding":{"!description":"ListBinding is a specific binding for lists in the model, which can be used to populate Tables or ItemLists.","diffData":{"!description":"Calculates delta of specified old data array and new data array.\n\nFor more information, see {@link module:sap/base/util/array/diff}.","!static":false,"!category":"function","!type":"fn(aOld: Array, aNew: Array) -> Array.<{type:string,index:int}>","parameters":{"aNew":"type: Array, description: New data array","aOld":"type: Array, description: Old data array"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ListBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getCurrentContexts":{"!description":"Returns an array of currently used binding contexts of the bound control.\n\nThis method does not trigger any data requests from the backend or delta calculation, but just returns the context array as last requested by the control. This can be used by the application to get access to the data currently displayed by a list control.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.model.Context]"},"enableExtendedChangeDetection":{"!description":"Enable extended change detection. When extended change detection is enabled, the list binding provides detailed information about changes, for example which entries have been removed or inserted. This can be utilized by a control for fine-grained update of its elements. Please see {@link sap.ui.model.ListBinding.prototype.getContexts} for more information.\n\nFor models that do not have a unique key on each entry by default, a key property or function can be set which is used to identify entries.","!static":false,"!category":"function","!type":"fn(bDetectUpdates: Boolean, vKey: fn() | String)","parameters":{"bDetectUpdates":"type: boolean, description: Whether changes within the same entity should cause a delete and insert command","vKey":"type: function|string, description: The path of the property containing the key or a function getting the context as only parameter to calculate a key to identify an entry"}},"isLengthFinal":{"!description":"Returns whether the length which can be retrieved using getLength() is a known, final length, or a preliminary or estimated length which may change if further data is requested.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.model.Binding","attachSort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11 use the <code>change<\/code> event. It now contains a parameter <code>(reason : \"sort\")<\/code> when a sorter event is fired.<br>Attaches event handler <code>fnFunction<\/code> to the {@link #event:sort sort} event of this <code>sap.ui.model.ListBinding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.ListBinding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ListBinding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!category":"class","getDistinctValues":{"!description":"Returns list of distinct values for the given relative binding path.","!static":false,"!category":"function","!type":"fn(sPath: String) -> Array","parameters":{"sPath":"type: string, description: Relative binding path"}},"sort":{"!description":"Sorts the list according to the sorter object.\n\nInstead of a single sorter also an array of sorters can be passed to the sort method. In this case they are processed in the sequence in which they are contained in the array.\n\n<h4>Grouping<\/h4> Sorting and grouping are closely related, in case a list should be grouped, it must be sorted by the property to group with. Grouping is enabled by setting the <code>group<\/code> property on the sorter object. If it is enabled, you can get the current group of an item using {@link sap.ui.model.ListBinding.prototype.getGroup}. In case multiple sorters are provided, grouping can only be done on the first sorter, nested grouping is not supported.","!static":false,"!category":"function","!type":"fn(aSorters: sap.ui.model.Sorter | Array) -> sap.ui.model.ListBinding","parameters":{"aSorters":"type: sap.ui.model.Sorter|Array, description: the Sorter object or an array of sorters which defines the sort order"}},"attachFilter":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11 use the <code>change<\/code> event. It now contains a parameter <code>(reason : \"filter\")<\/code> when a filter event is fired.<br>Attaches event handler <code>fnFunction<\/code> to the {@link #event:filter filter} event of this <code>sap.ui.model.ListBinding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.ListBinding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>ListBinding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Applies a new set of filters to the list represented by this binding.\n\nDepending on the nature of the model (client or server), the operation might be executed locally or on a server and it might execute asynchronously.\n\n<h4>Application and Control Filters<\/h4> Each list binding maintains two separate lists of filters, one for filters defined by the control that owns the binding and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.\n\nBy using the second parameter <code>sFilterType<\/code> of method <code>filter<\/code>, the caller can control which set of filters is modified. If no type is given, then the behavior depends on the model implementation and should be documented in the API reference for that model.\n\n<h4>Auto-Grouping of Filters<\/h4> Filters are first grouped according to their binding path. All filters belonging to the same group are ORed and after that the results of all groups are ANDed. Usually this means, all filters applied to a single table column are ORed, while filters on different table columns are ANDed. Please either use the automatic grouping of filters (where applicable) or use explicit AND/OR filters, a mixture of both is not supported.","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter], sFilterType?: sap.ui.model.FilterType) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter[], description: Array of filter objects","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted; if no type is given, the behavior depends on the model implementation"}},"!constructorDescription":"Constructor for ListBinding.","getContexts":{"!description":"Returns an array of binding contexts for the bound target list.\n\n<h4>Extended Change Detection<\/h4> If extended change detection is enabled using {@link sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection}, the context array may carry an additional property named <code>diff<\/code>, which contains an array of actual changes on the context array compared to the last call of <code>getContexts()<\/code>. In case no <code>diff<\/code> property is available on the context array, the list is completely different and needs to be recreated. In case the <code>diff<\/code> property contains an empty array, there have been no changes on the list.\n\nSample diff array: <code>[{index: 1, type: \"delete\"}, {index: 4, type: \"insert}]<\/code>\n\n<strong>Note:<\/strong>The public usage of this method is deprecated, as calls from outside of controls will lead to unexpected side effects. To avoid these side effect, use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts} instead.","!static":false,"!category":"function","!type":"fn(iStartIndex?: Number, iLength?: Number) -> [sap.ui.model.Context]","parameters":{"iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index."}},"!module":"sap/ui/model/ListBinding","detachSort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11 use the <code>change<\/code> event.<br>Detaches event handler <code>fnFunction<\/code> from the {@link #event:sort sort} event of this <code>sap.ui.model.ListBinding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!helpDescription":"ListBinding is a specific binding for lists in the model, which can be used to populate Tables or ItemLists.","detachFilter":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11 use the <code>change<\/code> event.<br>Detaches event handler <code>fnFunction<\/code> from the {@link #event:filter filter} event of this <code>sap.ui.model.ListBinding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getFilterInfo":{"!description":"Return the filter information as an AST. The default implementation checks for this.oCombinedFilter, models not using this member may override the method. Consumers must not rely on the origin information to be available, future filter implementations will not provide this information.","!static":false,"!category":"function","!type":"fn(bIncludeOrigin: Boolean) -> Object","parameters":{"bIncludeOrigin":"type: boolean, description: include information about the filter objects the tree has been created from"}},"getGroup":{"!description":"Gets the group for the given context. Must only be called if <code>isGrouped()<\/code> returns that grouping is enabled for this binding. The grouping will be performed using the first sorter (in case multiple sorters are defined).","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> Object","parameters":{"oContext":"type: sap.ui.model.Context, description: The binding context"}},"getLength":{"!description":"Returns the number of entries in the list.\n\nThis might be an estimated or preliminary length, in case the full length is not known yet, see method {@link #isLengthFinal}.","!static":false,"!category":"function","!type":"fn() -> Number"},"isGrouped":{"!description":"Indicates whether grouping is enabled for the binding. Grouping is enabled for a list binding, if at least one sorter exists on the binding and the first sorter is a grouping sorter.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.model.analytics.odata4analytics.SortOrder":{"!description":"Sort order of a property.","Descending":{"!description":"Sort Order: descending.","!category":"enum","!type":"String"},"!module":"sap/ui/model/analytics/odata4analytics","!category":"static class","Ascending":{"!description":"Sort Order: ascending.","!category":"enum","!type":"String"}},"module:sap/ui/core/date/UniversalDateUtils":{"!description":"Provides helpers to execute common calculations on <code>UniversalDate<\/code> instances.","getMonthStartDate":{"!description":"Returns the first day of the month of the given date.\n\nIf no date is given, today is used, represented in the session's default calendar. If a date is given, the returned date will use the same calendar. The time portion of the returned date will be set to the beginning of the day (0:00:00:000).","!category":"function","!type":"fn(oUniversalDate?: sap.ui.core.date.UniversalDate) -> sap.ui.core.date.UniversalDate"},"ranges":{"!description":"Helpers to create well-known ranges.","!category":"enum","!type":"String"},"module:sap/ui/core/date/UniversalDateUtils":"module:sap/ui/core/date/UniversalDateUtils","getQuarterStartDate":{"!description":"Returns the first day of the quarter of the year of the given date.\n\nIf no date is given, today is used, represented in the session's default calendar. If a date is given, the returned date will use the same calendar. The time portion of the returned date will be set to the beginning of the day (0:00:00:000).","!category":"function","!type":"fn(oUniversalDate?: sap.ui.core.date.UniversalDate) -> sap.ui.core.date.UniversalDate"},"!category":"namespace","resetStartTime":{"!description":"Returns a copy of the given date with the time portion set to 00:00:00.000.\n\nIf no date is given, today will be used, represented in the session's default calendar.","!category":"function","!type":"fn(oUniversalDate?: sap.ui.core.date.UniversalDate) -> sap.ui.core.date.UniversalDate"},"getWeekStartDate":{"!description":"Returns the first day of the week of the given date.\n\nThe interpretation of 'first day of the week' depends on the given locale or, if none is given, on the current {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale UI5 format locale}.\n\nIf no date is given, today is used, represented in the session's default calendar. If a date is given, the returned date will use the same calendar. The time portion of the returned date will be set to the beginning of the day (0:00:00:000).","!category":"function","!type":"fn(oUniversalDate?: sap.ui.core.date.UniversalDate, sLocale?: String) -> sap.ui.core.date.UniversalDate"},"resetEndTime":{"!description":"Returns a copy of the given date with the time portion set to 23:59:59:999\n\nIf no date is given, today will be used, represented in the session's default calendar.","!category":"function","!type":"fn(oUniversalDate?: sap.ui.core.date.UniversalDate) -> sap.ui.core.date.UniversalDate"},"!module":"sap/ui/core/date/UniversalDateUtils","!helpDescription":"Provides helpers to execute common calculations on <code>UniversalDate<\/code> instances.","getRange":{"!description":"Calculates a date range based on a given base date, duration and unit.\n\nIf no or a null base date is given, today (<code>UniversalDateUtils.createNewUniversalDate()<\/code>) will be used as base date, represented in the current session's default calendar type.\n\nIf the duration is 0, the base date will be used and is part of the returned range. 0 WEEK means this week. If the duration is positive, the base date will be used as start date of the range. 1 WEEK means next week. If the duration is negative, the base date will be used as end date. This method expects only integer values for <code>iDuration<\/code>, any fractional part will be ignored (truncated).\n\nThe unit can be one of <code>\"DAY\"<\/code>, <code>\"WEEK\"<\/code>, <code>\"MONTH\"<\/code>, <code>\"QUARTER\"<\/code> or <code>\"YEAR\"<\/code>.\n\nThe first value in the returned array will be the first day within the calculated range (start date) with the time portion set to the beginning of the day. The second value in the array will be the last day within the range (the inclusive end date) with the time portion set to the end of the day.\n\nThe returned dates will use the same calendar as the given base date. If no base date was given, they will use the session's default calendar type.","!category":"function","!type":"fn(iDuration: Number, sUnit: String, oBaseDate?: sap.ui.core.date.UniversalDate, bBaseOnUnit?: Boolean) -> [sap.ui.core.date.UniversalDate]"},"getYearStartDate":{"!description":"Returns the year's start date based on a given universal date.\n\nIf no date is given, today is used, represented in the session's default calendar. If a date is given, the returned date will use the same calendar. The time portion of the returned date will be set to the beginning of the day (0:00:00:000).","!category":"function","!type":"fn(oUniversalDate?: sap.ui.core.date.UniversalDate) -> sap.ui.core.date.UniversalDate"}},"sap.ui.model.analytics.odata4analytics.FilterExpression_obj":{"!type":"fn(oModel: Object, oSchema: Object, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType)","prototype":"sap.ui.model.analytics.odata4analytics.FilterExpression"},"sap.ui.core.service.ServiceFactory_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.service.ServiceFactory with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(vService?: fn() | Object)","prototype":"sap.ui.core.service.ServiceFactory"},"sap.ui.test.matchers.AggregationFilled_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationFilled with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.AggregationFilled"},"sap.ui.core.message.ControlMessageProcessor":{"!description":"The ControlMessageProcessor implementation. This MessageProcessor is able to handle Messages with the following target syntax: 'ControlID/PropertyName'. Creating an instance of this class using the \"new\" keyword always results in the same instance (Singleton).","extend":{"!description":"Creates a new subclass of class sap.ui.core.message.ControlMessageProcessor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.message.ControlMessageProcessor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new ControlMessageProcessor","!module":"sap/ui/core/message/ControlMessageProcessor","!helpDescription":"The ControlMessageProcessor implementation. This MessageProcessor is able to handle Messages with the following target syntax: 'ControlID/PropertyName'. Creating an instance of this class using the \"new\" keyword always results in the same instance (Singleton).","checkMessages":{"!description":"Check Messages and update controls with messages","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.core.message.MessageProcessor","setMessages":{"!description":"Set Messages to check","!static":false,"!category":"function","!type":"fn(vMessages: Object.<string,array>)","parameters":{"vMessages":"type: Object.<string,array>, description: map of messages: {'target': [array of messages],...}"}},"!category":"class"},"sap.ui.model.CompositeBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.CompositeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.CompositeBinding"},"sap.ui.base.Metadata_obj":{"!type":"fn(sClassName: String, oClassInfo: Object)","prototype":"sap.ui.base.Metadata"},"sap.ui.test.Opa5_obj":{"!type":"fn()","prototype":"sap.ui.test.Opa5"},"sap.ui.model.type.Time_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.Time"},"sap.ui.Device.os":{"!description":"Contains information about the operating system of the Device.","OS":"sap.ui.Device.os.OS","windows_phone":{"!description":"If this flag is set to <code>true<\/code>, a Windows Phone operating system is used.","!category":"enum","!type":"Boolean"},"android":{"!description":"If this flag is set to <code>true<\/code>, an Android operating system is used.","!category":"enum","!type":"Boolean"},"!category":"namespace","macintosh":{"!description":"If this flag is set to <code>true<\/code>, a Mac operating system is used.\n\n<b>Note:<\/b> An iPad using Safari browser, which is requesting desktop sites, is also recognized as Macintosh.","!category":"enum","!type":"Boolean"},"ios":{"!description":"If this flag is set to <code>true<\/code>, an iOS operating system is used.","!category":"enum","!type":"Boolean"},"windows":{"!description":"If this flag is set to <code>true<\/code>, a Windows operating system is used.","!category":"enum","!type":"Boolean"},"version":{"!description":"The version of the operating system as <code>float<\/code>.\n\nMight be <code>-1<\/code> if no version can be determined.","!category":"enum","!type":"Number"},"versionStr":{"!description":"The version of the operating system as <code>string<\/code>.\n\nMight be empty if no version can be determined.","!category":"enum","!type":"String"},"!module":"sap/ui/Device","!helpDescription":"Contains information about the operating system of the Device.","blackberry":{"!description":"If this flag is set to <code>true<\/code>, a Blackberry operating system is used.","!category":"enum","!type":"Boolean"},"linux":{"!description":"If this flag is set to <code>true<\/code>, a Linux operating system is used.","!category":"enum","!type":"Boolean"},"name":{"!description":"The name of the operating system.","!category":"enum","!type":"String"}},"sap.ui.core.routing.HistoryDirection":{"!description":"Enumaration for different HistoryDirections.","Backwards":{"!description":"The page has already been navigated to and it was the precessor of the previous page","!category":"enum","!type":"String"},"NewEntry":{"!description":"A new Entry is added to the history","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Unknown":{"!description":"A Navigation took place, but it could be any of the other three states","!category":"enum","!type":"String"},"Forwards":{"!description":"The page has already been navigated to and it was the successor of the previous page","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.model.odata.type.Boolean":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Boolean<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>boolean<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Boolean with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Boolean.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.Boolean<\/code>.","formatValue":{"!description":"Formats the given boolean value to the given target type.","!static":false,"!category":"function","!type":"fn(bValue: Boolean, sTargetType: String) -> Boolean | String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"boolean\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. If the target type (or its primitive type) is \"string\", the result is \"Yes\" or \"No\" in the current {@link sap.ui.core.Configuration#getLanguage language}. See {@link sap.ui.model.odata.type} for more information.","bValue":"type: boolean, description: the value to be formatted"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Boolean","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Boolean<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>boolean<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the given constraints.","!static":false,"!category":"function","!type":"fn(bValue: Boolean)","parameters":{"bValue":"type: boolean, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value from the given type to a boolean.","!static":false,"!category":"function","!type":"fn(vValue: Boolean | String, sSourceType: String) -> Boolean","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); may be \"boolean\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: boolean|string, description: the value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>"}}},"sap.ui.base.ManagedObjectObserver_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.base.ManagedObjectObserver with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(fnCallback: fn())","prototype":"sap.ui.base.ManagedObjectObserver"},"sap.ui.core.CalendarType":{"!description":"The types of <code>Calendar<\/code>.","!module":"sap/ui/core/CalendarType","Buddhist":{"!description":"The Thai buddhist calendar","!category":"enum","!type":"String"},"Persian":{"!description":"The Persian Jalali calendar","!category":"enum","!type":"String"},"!category":"static class","Islamic":{"!description":"The Islamic calendar","!category":"enum","!type":"String"},"Gregorian":{"!description":"The Gregorian calendar","!category":"enum","!type":"String"},"Japanese":{"!description":"The Japanese emperor calendar","!category":"enum","!type":"String"}},"sap.ui.app.MockServer":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 The mock server code has been moved to sap.ui.core.util - see {@link sap.ui.core.util.MockServer}<br>Class to mock a server.","!constructorDescription":"Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without\nchanging the application code. This class can also be used for qunit tests.","!module":"sap/ui/app/MockServer","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 The mock server code has been moved to sap.ui.core.util - see {@link sap.ui.core.util.MockServer}<br>Class to mock a server.","!proto":"sap.ui.base.ManagedObject","!category":"class"},"sap.ui.core.util.reflection.BaseTreeModifier":{"bySelector":{"!description":"Function determining the control targeted by the change. The function distinguishes between local IDs generated starting with 1.40 and the global IDs generated in previous versions.","!static":"true","!category":"function","!type":"fn(oSelector: Object, oAppComponent: sap.ui.core.UIComponent, oView: Element) -> sap.ui.base.ManagedObject | Element"},"setPropertyBindingOrProperty":{"!description":"Calls {@link sap.ui.core.util.reflection.BaseTreeModifier#setPropertyBinding} if the passed value is a binding info object or binding string, otherwise calls {@link sap.ui.core.util.reflection.BaseTreeModifier#setProperty}.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String, vBindingOrValue: Object)"},"validateType":{"!description":"Validates if the control has the correct type for the aggregation.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, mAggregationMetadata: Object, vParent: sap.ui.base.ManagedObject | Element, sFragment: String, iIndex: Number) -> Boolean"},"getAllAggregations":{"!description":"See {@link sap.ui.base.ManagedObjectMetadata#getAllAggregations} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> Object.<string,object>"},"setPropertyBinding":{"!description":"Similar as {@link #bindProperty}, but allows to specify binding like in control constructor.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String, vPropertyBinding: Object)"},"!category":"namespace","getId":{"!description":"See {@link sap.ui.base.ManagedObject#getId} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> String"},"instantiateFragment":{"!description":"Loads a fragment and turns the result into an array of nodes; also prefixes all the controls with a given namespace; throws an error if there is at least one control in the fragment without a stable ID or has a duplicate ID in the given view.","!static":"true","!category":"function","!type":"fn(sFragment: String, sNamespace: String, oView: sap.ui.core.mvc.View) -> [Element[] | sap.ui.core.Element]"},"attachEvent":{"!description":"Attaches event on the specified <code>ManagedObject<\/code>.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sEventName: String, sFunctionPath: String, vData: Object)"},"getAggregation":{"!description":"See {@link sap.ui.base.ManagedObject#getAggregation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sName: String) -> [sap.ui.base.ManagedObject[] | Element]"},"removeAllAggregation":{"!description":"Removes all objects from the aggregation of the given control. See {@link sap.ui.base.ManagedObject#removeAllAggregation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sAggregationName: String)"},"getAssociation":{"!description":"See {@link sap.ui.base.ManagedObject#getAssociation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sName: String) -> [String | String]"},"getControlType":{"!description":"See {@link sap.ui.base.Metadata#getName} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> String"},"bindAggregation":{"!description":"See {@link sap.ui.base.ManagedObject#bindAggregation} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sAggregationName: String, vBindingInfos: Object)"},"createControl":{"!description":"Creates the control in the corresponding representation.","!static":"true","!category":"function","!type":"fn(sClassName: String, oAppComponent?: sap.ui.core.UIComponent, oView?: Element, oSelector?: Object, mSettings: Object, bAsync: Boolean) -> Element | Promise"},"!description":"Abstract static utility class to access <code>ManagedObjects<\/code> and <code>XMLNodes<\/code> that represent <code>ManagedObjects<\/code> in a harmonized way.\n\nThe class mirrors the <code>ManagedObject<\/code> API so that code that needs to work with <code>ManagedObjects<\/code> in several representations can be written in a harmonized way. The slight differences are handled by specifying a super set of parameters that might not be needed in all use cases. For example <code>sap.ui.fl<\/code> uses this class and its subtypes for change handlers that can be applied on <code>XMLViews<\/code> and normal <code>ManagedObject<\/code> instances.","setVisible":{"!description":"See {@link sap.ui.core.Control#setVisible} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, bVisible: Boolean)"},"updateAggregation":{"!description":"See {@link sap.ui.base.ManagedObject#updateAggregation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sAggregationName: String)"},"unbindProperty":{"!description":"See {@link sap.ui.base.ManagedObject#unbindProperty} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String)"},"getParent":{"!description":"See {@link sap.ui.base.ManagedObject#getParent} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> sap.ui.base.ManagedObject | Element"},"hasLocalIdSuffix":{"!description":"Checks if a control ID has a prefix matching the application component. If this prefix exists, the suffix after the component ID is called the local ID.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.core.Control | String, oAppComponent: sap.ui.core.UIComponent) -> Boolean"},"getProperty":{"!description":"See {@link sap.ui.base.ManagedObject#getProperty} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String) -> Object"},"getVisible":{"!description":"See {@link sap.ui.core.Control#getVisible} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> Boolean"},"unbindAggregation":{"!description":"See {@link sap.ui.base.ManagedObject#unbindAggregation} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sAggregationName: String)"},"getStashed":{"!description":"See {@link sap.ui.core.StashedControlSupport#getVisible} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> Boolean"},"getPropertyBindingOrProperty":{"!description":"Checks if there is a property binding and returns it if available, otherwise returns the value of the property.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String) -> Object"},"destroy":{"!description":"Cleans up the resources associated with this object and all its aggregated children. See {@link sap.ui.base.ManagedObject#destroy} method.\n\nAfter an object has been destroyed, it can no longer be used! Applications should call this method if they don't need the object any longer.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, bSuppressInvalidate?: Boolean)"},"getBindingTemplate":{"!description":"Gets the binding template from an aggregation. See {@link sap.ui.base.ManagedObject#getBindingInfo} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sAggregationName: String)"},"getPropertyBinding":{"!description":"See {@link sap.ui.base.ManagedObject#getBindingInfo} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String) -> *"},"removeAggregation":{"!description":"Removes the object from the aggregation of the given control. See {@link sap.ui.base.ManagedObject#removeAggregation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sAggregationName: String, oObject: sap.ui.base.ManagedObject | Element)"},"applySettings":{"!description":"See {@link sap.ui.base.ManagedObject#applySettings} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, mSettings: Object) -> Element"},"getChangeHandlerModulePath":{"!description":"Returns the module path of an instance specific change handler.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element) -> String"},"isPropertyInitial":{"!description":"See {@link sap.ui.base.ManagedObject#isPropertyInitial} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String) -> Boolean"},"checkControlId":{"!description":"Checks if the control ID is generated or maintained by the application.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.core.Control | String, oAppComponent: sap.ui.core.Component) -> Boolean"},"detachEvent":{"!description":"Detaches event from the specified ManagedObject.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sEventName: String, sFunctionPath: String)"},"getControlIdBySelector":{"!description":"Function determining the control ID from the selector. The function distinguishes between local IDs generated starting with 1.40 and the global IDs generated in previous versions.","!static":"true","!category":"function","!type":"fn(oSelector: Object, oAppComponent: sap.ui.core.UIComponent) -> String"},"bindProperty":{"!description":"See {@link sap.ui.base.ManagedObject#bindProperty} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String, vBindingInfos: Object)"},"!module":"sap/ui/core/util/reflection/BaseTreeModifier","!helpDescription":"Abstract static utility class to access <code>ManagedObjects<\/code> and <code>XMLNodes<\/code> that represent <code>ManagedObjects<\/code> in a harmonized way.\n\nThe class mirrors the <code>ManagedObject<\/code> API so that code that needs to work with <code>ManagedObjects<\/code> in several representations can be written in a harmonized way. The slight differences are handled by specifying a super set of parameters that might not be needed in all use cases. For example <code>sap.ui.fl<\/code> uses this class and its subtypes for change handlers that can be applied on <code>XMLViews<\/code> and normal <code>ManagedObject<\/code> instances.","findIndexInParentAggregation":{"!description":"Finds the index of the control in its parent aggregation.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element) -> Number"},"getSelector":{"!description":"Function for determining the selector that is used later to apply a change for a given control. The function distinguishes between local IDs generated starting with 1.40 and the global IDs generated in previous versions.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element | String, oAppComponent: sap.ui.core.Component, mAdditionalSelectorInformation?: Object) -> Object"},"getParentAggregationName":{"!description":"Removes all objects from the aggregation of the given control.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, vParent?: sap.ui.base.ManagedObject | Element) -> String"},"setProperty":{"!description":"See {@link sap.ui.base.ManagedObject#setProperty} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, sPropertyName: String, vPropertyValue: *)"},"setStashed":{"!description":"See {@link sap.ui.core.StashedControlSupport#setVisible} method.","!static":"true","!category":"function","!type":"fn(vControl: sap.ui.base.ManagedObject | Element, bVisible: Boolean)"},"setAssociation":{"!description":"See {@link sap.ui.base.ManagedObject#setAssociation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sName: String, sId: String | sap.ui.base.ManagedObject | Element)"},"insertAggregation":{"!description":"See {@link sap.ui.base.ManagedObject#insertAggregation} method.","!static":"true","!category":"function","!type":"fn(vParent: sap.ui.base.ManagedObject | Element, sAggregationName: String, oObject: sap.ui.base.ManagedObject | Element, iIndex: Number, oView?: Element)"}},"sap.ui.core.util.MockServer":{"destroyAll":{"!description":"Stops and calls destroy on all registered servers. Use this method for cleaning up.","!static":true,"!category":"function","!type":"fn()"},"attachBefore":{"!description":"Attaches an event handler to be called before the built-in request processing of the mock server","!static":false,"!category":"function","!type":"fn(event: String, fnCallback: fn(), sEntitySet: String)","parameters":{"sEntitySet":"type: string, description: (optional) the name of the entity set","event":"type: string, description: type according to HTTP Method","fnCallback":"type: function, description: the name of the function that will be called at this exit. The callback function exposes an event with parameters, depending on the type of the request. oEvent.getParameters() lists the parameters as per the request. Examples are: oXhr : the request object; sUrlParams : the URL parameters of the request; sKeys : key properties of the requested entry; sNavProp/sNavName : name of navigation"}},"!proto":"sap.ui.base.ManagedObject","!category":"class","getEntitySetData":{"!description":"Returns the data model of the given EntitySet name.","!static":false,"!category":"function","!type":"fn(sEntitySetName: String) -> Array","parameters":{"sEntitySetName":"type: string, description: EntitySet name"}},"setRecordRequests":{"!description":"Setter for property <code>recordRequests<\/code>. Defines whether or not the requests performed should be recorded (stored).\n\nDefault value is <code>true<\/code>","!static":false,"!category":"function","!type":"fn(recordRequests: Boolean)","parameters":{"recordRequests":"type: boolean, description: new value for property <code>recordRequests<\/code>"}},"stopAll":{"!description":"Stops all registered servers.","!static":true,"!category":"function","!type":"fn()"},"!constructorDescription":"Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without\nchanging the application code. This class can also be used for qunit tests.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getRootUri rootUri} : string<\/li>\n<li>{@link #getRecordRequests recordRequests} : boolean (default: true)<\/li>\n<li>{@link #getRequests requests} : object[] (default: [])<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","getRequests":{"!description":"Getter for property <code>requests<\/code>.\n\nDefault value is <code>[]<\/code>","!static":false,"!category":"function","!type":"fn() -> [Object]"},"simulate":{"!description":"Simulates an existing OData service by sepcifying the metadata URL and the base URL for the mockdata. The server configures the request handlers depending on the service metadata. The mockdata needs to be stored individually for each entity type in a separate JSON file. The name of the JSON file needs to match the name of the entity type. If no base url for the mockdata is specified then the mockdata are generated from the metadata","!static":false,"!category":"function","!type":"fn(sMetadataString: String, vMockdataSettings?: String | Object)","parameters":{"sMetadataString":"type: string, description: Either the URL to the service metadata document or the metadata document as xml string itself (starting with \"<?xml\")","vMockdataSettings":"type: string|object, description: (optional) base url which contains the path to the mockdata, or an object which contains the following properties: sMockdataBaseUrl, bGenerateMissingMockData, aEntitySetsNames. See below for descriptions of these parameters. Ommit this parameter to produce random mock data based on the service metadata."}},"attachAfter":{"!description":"Attaches an event handler to be called after the built-in request processing of the mock server","!static":false,"!category":"function","!type":"fn(event: String, fnCallback: fn(), sEntitySet: String)","parameters":{"sEntitySet":"type: string, description: (optional) the name of the entity set","event":"type: string, description: type according to HTTP Method","fnCallback":"type: function, description: the name of the function that will be called at this exit The callback function exposes an event with parameters, depending on the type of the request. oEvent.getParameters() lists the parameters as per the request. Examples are: oXhr : the request object; oFilteredData : the mock data entries that are about to be returned in the response; oEntry : the mock data entry that is about to be returned in the response;"}},"!description":"Class to mock http requests made to a remote server.","detachAfter":{"!description":"Removes a previously attached event handler","!static":false,"!category":"function","!type":"fn(event: String, fnCallback: fn(), sEntitySet: String)","parameters":{"sEntitySet":"type: string, description: (optional) the name of the entity set","event":"type: string, description: type according to HTTP Method","fnCallback":"type: function, description: the name of the function that will be called at this exit"}},"detachBefore":{"!description":"Removes a previously attached event handler","!static":false,"!category":"function","!type":"fn(event: String, fnCallback: fn(), sEntitySet: String)","parameters":{"sEntitySet":"type: string, description: (optional) the name of the entity set","event":"type: string, description: type according to HTTP Method","fnCallback":"type: function, description: the name of the function that will be called at this exit"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.MockServer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"startAll":{"!description":"Starts all registered servers.","!static":true,"!category":"function","!type":"fn()"},"setRequests":{"!description":"Setter for property <code>requests<\/code>.\n\nDefault value is is <code>[]<\/code>\n\nEach array entry should consist of an object with the following properties / values:\n\n<ul> <li><b>method <string>: \"GET\"|\"POST\"|\"DELETE|\"PUT\"<\/b> <br> (any HTTP verb) <\/li> <li><b>path <string>: \"/path/to/resource\"<\/b> <br> The path is converted to a regular expression, so it can contain normal regular expression syntax. All regular expression groups are forwarded as arguments to the <code>response<\/code> function. In addition to this, parameters can be written in this notation: <code>:param<\/code>. These placeholder will be replaced by regular expression groups. <\/li> <li><b>response <function>: function(xhr, param1, param2, ...) { }<\/b> <br> The xhr object can be used to respond on the request. Supported methods are: <br> <code>xhr.respond(iStatusCode, mHeaders, sBody)<\/code> <br> <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)<\/code>. By default a JSON header is set for response header <br> <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)<\/code>. By default an XML header is set for response header <br> <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)<\/code>. By default the mime type of the file is set for response header <\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(requests: [Object])","parameters":{"requests":"type: object[], description: new value for property <code>requests<\/code>"}},"getRecordRequests":{"!description":"Getter for property <code>recordRequests<\/code>. Returns whether or not the requests performed should be recorded (stored).\n\nDefault value is <code>true<\/code>","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setEntitySetData":{"!description":"Sets the data of the given EntitySet name with the given array.","!static":false,"!category":"function","!type":"fn(sEntitySetName: String, aData: Array)","parameters":{"sEntitySetName":"type: string, description: EntitySet name","aData":"type: array, description: undefined"}},"start":{"!description":"Starts the server.","!static":false,"!category":"function","!type":"fn()"},"destroy":{"!description":"Cleans up the resources associated with this object and all its aggregated children.\n\nAfter an object has been destroyed, it can no longer be used!\n\nApplications should call this method if they don't need the object any longer.","!static":false,"!category":"function","!type":"fn(bSuppressInvalidate?: Boolean)","parameters":{"bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed"}},"setRootUri":{"!description":"Setter for property <code>rootUri<\/code>. All request path URI are prefixed with this root URI if set.\n\nDefault value is empty/<code>undefined<\/code>","!static":false,"!category":"function","!type":"fn(rootUri: String)","parameters":{"rootUri":"type: string, description: new value for property <code>rootUri<\/code>"}},"isStarted":{"!description":"Returns whether the server is started or not.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.MockServer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/core/util/MockServer","stop":{"!description":"Stops the server.","!static":false,"!category":"function","!type":"fn()"},"!helpDescription":"Class to mock http requests made to a remote server.","getRootUri":{"!description":"Getter for property <code>rootUri<\/code>. Has to be relative and requires a trailing '/'. It also needs to match the URI set in OData/JSON models or simple XHR calls in order for the mock server to intercept them.\n\nDefault value is empty/<code>undefined<\/code>. Must end with a a trailing slash (\"/\").","!static":false,"!category":"function","!type":"fn() -> String"},"respond":{"!description":"Respond to a request, when the servers are configured not to automatically respond.","!static":true,"!category":"function","!type":"fn()"},"config":{"!description":"Global configuration of all mock servers.","!static":true,"!category":"function","!type":"fn(mConfig: Object)","parameters":{"mConfig":"type: object, description: the configuration object."}}},"sap.ui.model.type":{"TimeInterval":"sap.ui.model.type.TimeInterval_obj","DateTimeInterval":"sap.ui.model.type.DateTimeInterval_obj","Time":"sap.ui.model.type.Time_obj","!category":"namespace","DateInterval":"sap.ui.model.type.DateInterval_obj","String":"sap.ui.model.type.String_obj","Unit":"sap.ui.model.type.Unit_obj","Date":"sap.ui.model.type.Date_obj","DateTime":"sap.ui.model.type.DateTime_obj","Integer":"sap.ui.model.type.Integer_obj","Float":"sap.ui.model.type.Float_obj","Currency":"sap.ui.model.type.Currency_obj","Boolean":"sap.ui.model.type.Boolean_obj","FileSize":"sap.ui.model.type.FileSize_obj"},"sap.ui.core.delegate":{"!module":"sap/ui/core/delegate/ScrollEnablement","ScrollEnablement":"sap.ui.core.delegate.ScrollEnablement_obj","!category":"namespace","ItemNavigation":"sap.ui.core.delegate.ItemNavigation_obj"},"sap.ui.model.odata.ODataAnnotations_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(aAnnotationURI: [String | String], oMetadata: sap.ui.model.odata.ODataMetadata, mParams: Object)","prototype":"sap.ui.model.odata.ODataAnnotations"},"sap.ui.test.RecordReplay.InteractionType":{"!description":"Interaction types.\n\nValues correspond to OPA5 built-in actions {@link sap.ui.test.actions}.","!module":"sap/ui/test/RecordReplay","EnterText":{"!category":"enum","!type":"String"},"!category":"static class","Press":{"!category":"enum","!type":"String"}},"sap.ui.base.Event":{"!description":"An Event object consisting of an ID, a source and a map of parameters. Implements {@link sap.ui.base.Poolable} and therefore an event object in the event handler will be reset by {@link sap.ui.base.ObjectPool} after the event handler is done.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.base.Event.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.Object","!category":"class","getId":{"!description":"Returns the id of the event.","!static":false,"!category":"function","!type":"fn() -> String"},"cancelBubble":{"!description":"Cancel bubbling of the event.\n\n<b>Note:<\/b> This function only has an effect if the bubbling of the event is supported by the event source.","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.base.Event with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Creates an event with the given <code>sId<\/code>, linked to the provided <code>oSource<\/code> and enriched with the <code>mParameters<\/code>.","!module":"sap/ui/base/Event","!helpDescription":"An Event object consisting of an ID, a source and a map of parameters. Implements {@link sap.ui.base.Poolable} and therefore an event object in the event handler will be reset by {@link sap.ui.base.ObjectPool} after the event handler is done.","getSource":{"!description":"Returns the event provider on which the event was fired.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.EventProvider"},"getParameters":{"!description":"Returns an object with all parameter values of the event.","!static":false,"!category":"function","!type":"fn() -> Object"},"preventDefault":{"!description":"Prevent the default action of this event.\n\n<b>Note:<\/b> This function only has an effect if preventing the default action of the event is supported by the event source.","!static":false,"!category":"function","!type":"fn()"},"getParameter":{"!description":"Returns the value of the parameter with the given name.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: Name of the parameter to return"}}},"sap.ui.model.analytics.odata4analytics":{"QueryResultRequest":"sap.ui.model.analytics.odata4analytics.QueryResultRequest_obj","ParameterizationRequest":"sap.ui.model.analytics.odata4analytics.ParameterizationRequest_obj","!category":"namespace","Parameterization":"sap.ui.model.analytics.odata4analytics.Parameterization_obj","EntitySet":"sap.ui.model.analytics.odata4analytics.EntitySet_obj","QueryResult":"sap.ui.model.analytics.odata4analytics.QueryResult_obj","DimensionMemberSetRequest":"sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest_obj","RecursiveHierarchy":"sap.ui.model.analytics.odata4analytics.RecursiveHierarchy_obj","Measure":"sap.ui.model.analytics.odata4analytics.Measure_obj","ReferenceByURI":"sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI_obj","ParameterValueSetRequest":"sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest_obj","FilterExpression":"sap.ui.model.analytics.odata4analytics.FilterExpression_obj","!description":"<strong style=\"color: red;\">Experimental! <\/strong>","SortOrder":"sap.ui.model.analytics.odata4analytics.SortOrder","Dimension":"sap.ui.model.analytics.odata4analytics.Dimension_obj","includeDimensionTextAttributes":{"!description":"Specify which components of the dimension shall be included in the value set.","!static":"true","!category":"function","!type":"fn(bIncludeText: Boolean, bIncludeAttributes: Boolean)"},"EntityType":"sap.ui.model.analytics.odata4analytics.EntityType_obj","ReferenceWithWorkaround":"sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround_obj","SortExpression":"sap.ui.model.analytics.odata4analytics.SortExpression_obj","!module":"sap/ui/model/analytics/odata4analytics","ReferenceByModel":"sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel_obj","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","Model":"sap.ui.model.analytics.odata4analytics.Model_obj","DimensionAttribute":"sap.ui.model.analytics.odata4analytics.DimensionAttribute_obj","Parameter":"sap.ui.model.analytics.odata4analytics.Parameter_obj"},"sap.ui.model.TreeBindingAdapter_obj":{"!type":"fn()","prototype":"sap.ui.model.TreeBindingAdapter"},"sap.ui.model.odata.type.Stream_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Stream with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Stream"},"sap.ui.test.Opa":{"!description":"One Page Acceptance testing.","iWaitForPromise":{"!description":"Schedule a promise on the OPA queue.The promise will be executed in order with all waitFors - any subsequent waitFor will be executed after the promise is done. The promise is not directly chained, but instead its result is awaited in a new waitFor statement. This means that any \"thenable\" should be acceptable.","!static":false,"!category":"function","!type":"fn(oPromise: jQuery.promise | Promise) -> jQuery.promise","parameters":{"oPromise":"type: jQuery.promise|Promise, description: promise to schedule on the OPA queue"}},"!proto":"sap.ui.base.Object","!category":"class","stopQueue":{"!description":"Clears the queue and stops running tests so that new tests can be run. This means all waitFor statements registered by {@link sap.ui.test.Opa#waitFor} will not be invoked anymore and the promise returned by {@link sap.ui.test.Opa.emptyQueue} will be rejected When it is called inside of a check in {@link sap.ui.test.Opa#waitFor} the success function of this waitFor will not be called.","!static":true,"!category":"function","!type":"fn()"},"resetConfig":{"!description":"Reset Opa.config to its default values. All of the global values can be overwritten in an individual waitFor call.\n\nThe default values are: <ul> <li>arrangements: A new Opa instance<\/li> <li>actions: A new Opa instance<\/li> <li>assertions: A new Opa instance<\/li> <li>timeout : 15 seconds, 0 for infinite timeout<\/li> <li>pollingInterval: 400 milliseconds<\/li> <li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.<\/li> <li> executionDelay: 0 or 50 (depending on the browser). The value is a number representing milliseconds. The executionDelay will slow down the execution of every single waitFor statement to be delayed by the number of milliseconds. This does not effect the polling interval it just adds an initial pause. Use this parameter to slow down OPA when you want to watch your test during development or checking the UI of your app. It is not recommended to use this parameter in any automated test executions. <\/li> <li>asyncPolling: false<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn()"},"!constructorDescription":"This class will help you write acceptance tests in one page or single page applications.\nYou can wait for certain conditions to be met.","!module":"sap/ui/test/Opa","!helpDescription":"One Page Acceptance testing.","extendConfig":{"!description":"Extends and overwrites default values of the {@link sap.ui.test.Opa sap.ui.test.Opa.config} field. Sample usage: <pre>\n    <code>\n        var oOpa = new Opa();\n\n        // this statement will time out after 15 seconds and poll every 400ms\n        // those two values come from the defaults of sap.ui.test.Opa.config\n        oOpa.waitFor({\n        });\n\n        // All wait for statements added after this will take other defaults\n        Opa.extendConfig({\n            timeout: 10,\n            pollingInterval: 100\n        });\n\n        // this statement will time out after 10 seconds and poll every 100 ms\n        oOpa.waitFor({\n        });\n\n        // this statement will time out after 20 seconds and poll every 100 ms\n        oOpa.waitFor({\n            timeout: 20;\n        });\n    <\/code>\n<\/pre>","!static":true,"!category":"function","!type":"fn(options: Object)","parameters":{"options":"type: object, description: The values to be added to the existing config"}},"emptyQueue":{"!description":"Waits until all waitFor calls are done.","!static":true,"!category":"function","!type":"fn() -> jQuery.promise"},"getContext":{"!description":"Gives access to a singleton object you can save values in. Same as {@link sap.ui.test.Opa#getContext}","!static":true,"!category":"function","!type":"fn() -> Object"},"waitFor":{"!description":"Queues up a waitFor command for Opa. The Queue will not be emptied until {@link sap.ui.test.Opa.emptyQueue} is called. If you are using {@link sap.ui.test.opaQunit}, emptyQueue will be called by the wrapped tests.\n\nIf you are using Opa5, waitFor takes additional parameters. They can be found here: {@link sap.ui.test.Opa5#waitFor}. Waits for a check condition to return true, in which case a success function will be called. If the timeout is reached before the check returns true, an error function will be called.","!static":false,"!category":"function","!type":"fn(options: Object) -> Object","parameters":{"options":"type: object, description: These contain check, success and error functions"}}},"sap.ui.core.format.FileSizeFormat_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.format.FileSizeFormat"},"sap.ui.model.type.Time":{"!description":"This class represents time simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Time.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Time type.","!module":"sap/ui/model/type/Time","!helpDescription":"This class represents time simple types.","!proto":"sap.ui.model.type.Date","!category":"class"},"module:sap/ui/util/ActivityDetection":{"!description":"Provides functionality for activity detection.","module:sap/ui/util/ActivityDetection":"module:sap/ui/util/ActivityDetection","!module":"sap/ui/util/ActivityDetection","!helpDescription":"Provides functionality for activity detection.","refresh":{"!description":"Reports an activity.","!category":"enum","!type":"String"},"!category":"namespace","isActive":{"!description":"Checks whether recently an activity was detected.","!category":"function","!type":"fn() -> Boolean"}},"sap.ui.core.message.MessageManager_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.MessageManager with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.message.MessageManager"},"sap.ui.core.LocaleData":{"getCustomCurrencyCodes":{"!description":"Returns a map of custom currency codes, defined via global configuration.","!static":false,"!category":"function","!type":"fn() -> Object"},"getCurrencySymbol":{"!description":"Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code is returned.","!static":false,"!category":"function","!type":"fn(sCurrency: String) -> String","parameters":{"sCurrency":"type: string, description: ISO 4217 currency code"}},"getIntervalPattern":{"!description":"Returns the interval format with the given Id (see CLDR documentation for valid Ids) or the fallback format if no interval format with that Id is known.\n\nThe empty Id (\"\") might be used to retrieve the interval format fallback.","!static":false,"!category":"function","!type":"fn(sId: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sId":"type: string, description: Id of the interval format, e.g. \"d-d\""}},"getLanguages":{"!description":"Get locale specific language names.","!static":false,"!category":"function","!type":"fn() -> Object"},"getResolvedUnitFormat":{"!description":"Retrieves the unit format pattern for a specific unit name considering the unit mappings.","!static":false,"!category":"function","!type":"fn(sUnit: String) -> Object","parameters":{"sUnit":"type: string, description: unit name, e.g. \"duration-hour\" or \"my\""}},"getMonths":{"!description":"Get month names in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the month names"}},"getRelativePattern":{"!description":"Returns the relative format pattern with given scale (year, month, week, ...) and difference value.","!static":false,"!category":"function","!type":"fn(sScale: String, iDiff: Number, bFuture?: Boolean, sStyle?: String) -> String","parameters":{"iDiff":"type: int, description: the difference in the given scale unit","bFuture":"type: boolean, description: whether a future or past pattern should be used","sScale":"type: string, description: the scale the relative pattern is needed for","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getCustomIntervalPattern":{"!description":"Get interval pattern for a given skeleton format.\n\nThe format string does contain pattern symbols (e.g. \"yMMMd\" or \"Hms\") and will be converted into the pattern in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)\n\nSee http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems","!static":false,"!category":"function","!type":"fn(sSkeleton: String, vGreatestDiff: Object | String, sCalendarType?: sap.ui.core.CalendarType) -> [String | String]","parameters":{"vGreatestDiff":"type: object|string, description: is either a string which represents the symbol matching the greatest difference in the two dates to format or an object which contains key-value pairs. The value is always true. The key is one of the date field symbol groups whose value are different between the two dates. The key can only be set with 'Year', 'Quarter', 'Month', 'Week', 'Day', 'DayPeriod', 'Hour', 'Minute', or 'Second'.","sSkeleton":"type: string, description: the wanted skeleton format for the datetime pattern","sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale."}},"getDayPeriodsStandAlone":{"!description":"Get standalone day periods in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the day period names"}},"getOrientation":{"!description":"Get orientation (left-to-right or right-to-left).","!static":false,"!category":"function","!type":"fn() -> String"},"getNumberSymbol":{"!description":"Get number symbol \"decimal\", \"group\", \"plusSign\", \"minusSign\", \"percentSign\".","!static":false,"!category":"function","!type":"fn(sType: String) -> String","parameters":{"sType":"type: string, description: the required type of symbol"}},"getCurrencyCodeBySymbol":{"!description":"Returns the currency code which is corresponded with the given currency symbol.","!static":false,"!category":"function","!type":"fn(sCurrencySymbol: String) -> String","parameters":{"sCurrencySymbol":"type: string, description: The currency symbol which needs to be converted to currency code"}},"getRelativePatterns":{"!description":"Returns relative time patterns for the given scales as an array of objects containing scale, value and pattern.\n\nThe array may contain the following values: \"year\", \"month\", \"week\", \"day\", \"hour\", \"minute\" and \"second\". If no scales are given, patterns for all available scales will be returned.\n\nThe return array will contain objects looking like: <pre>\n{\n    scale: \"minute\",\n    sign: 1,\n    pattern: \"in {0} minutes\"\n}\n<\/pre>","!static":false,"!category":"function","!type":"fn(aScales: [String], sStyle?: String) -> [Object]","parameters":{"aScales":"type: string[], description: The scales for which the available patterns should be returned","sStyle":"type: string, description: @since 1.32.10, 1.34.4 The style of the scale patterns. The valid values are \"wide\", \"short\" and \"narrow\"."}},"getDayPeriods":{"!description":"Get day periods in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the day period names"}},"!description":"Provides access to locale-specific data, such as, date formats, number formats, and currencies.","getQuartersStandAlone":{"!description":"Get stand alone quarter names in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the quarter names"}},"getRelativeYear":{"!description":"Returns the relative year resource pattern (like \"This year\", \"Last year\", \"{0} year ago\") based on the given difference of years (0 means this year, 1 means next year, -1 means last year, ...).","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String","parameters":{"iDiff":"type: int, description: the difference in years","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.LocaleData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getCustomDateTimePattern":{"!description":"Get custom datetime pattern for a given skeleton format.\n\nThe format string does contain pattern symbols (e.g. \"yMMMd\" or \"Hms\") and will be converted into the pattern in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D), Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)\n\nSee http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems","!static":false,"!category":"function","!type":"fn(sSkeleton: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sSkeleton":"type: string, description: the wanted skeleton format for the datetime pattern","sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale."}},"getCalendarWeek":{"!description":"Returns the defined pattern for representing the calendar week number.","!static":false,"!category":"function","!type":"fn(sStyle: String, iWeekNumber: Number) -> String","parameters":{"iWeekNumber":"type: int, description: the week number","sStyle":"type: string, description: the style of the pattern. It can only be either \"wide\" or \"narrow\"."}},"getDatePattern":{"!description":"Get date pattern in format \"short\", \"medium\", \"long\" or \"full\".","!static":false,"!category":"function","!type":"fn(sStyle: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sStyle":"type: string, description: the required style for the date pattern"}},"getPreferredCalendarType":{"!description":"Returns the preferred calendar type for the current locale which exists in {@link sap.ui.core.CalendarType}","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CalendarType"},"getRelativeSecond":{"!description":"Returns the relative resource pattern with unit 'second' (like now, \"in {0} seconds\", \"{0} seconds ago\" under locale 'en') based on the given difference value (0 means now, positive value means in the future and negative value means in the past).","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String","parameters":{"iDiff":"type: int, description: the difference in seconds","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getEraDates":{"!description":"Returns the map of era IDs to era dates.","!static":false,"!category":"function","!type":"fn(sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.LocaleData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getDays":{"!description":"Get day names in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the day names"}},"!module":"sap/ui/core/LocaleData","getWeekendStart":{"!description":"Returns the first day of a weekend for the given locale.\n\nDays are encoded in the same way as for {@link #getFirstDayOfWeek}.\n\nAll week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the \"likelySubtag\" information of the CLDR is taken into account to guess the \"most likely\" territory for the locale.","!static":false,"!category":"function","!type":"fn() -> Number"},"!helpDescription":"Provides access to locale-specific data, such as, date formats, number formats, and currencies.","getDisplayName":{"!description":"Returns the display name for a time unit (second, minute, hour, day, week, month, year).","!static":false,"!category":"function","!type":"fn(sType: String, sStyle?: String)","parameters":{"sType":"type: string, description: Type (second, minute, hour, day, week, month, year)","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\" returns {string} display name"}},"getCombinedDateTimePattern":{"!description":"Get combined datetime pattern with given date and and time style.","!static":false,"!category":"function","!type":"fn(sDateStyle: String, sTimeStyle: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sDateStyle":"type: string, description: the required style for the date part","sTimeStyle":"type: string, description: the required style for the time part","sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale."}},"getCurrencyDigits":{"!description":"Returns the number of digits of the specified currency.","!static":false,"!category":"function","!type":"fn(sCurrency: String) -> Number","parameters":{"sCurrency":"type: string, description: ISO 4217 currency code"}},"getLenientNumberSymbols":{"!description":"Get lenient number symbols for \"plusSign\" or \"minusSign\".","!static":false,"!category":"function","!type":"fn(sType: String) -> String","parameters":{"sType":"type: string, description: the required type of symbol"}},"_get":{"!static":false,"!category":"function","!type":"fn()"},"getRelativeMonth":{"!description":"Returns the relative month resource pattern (like \"This month\", \"Last month\", \"{0} months ago\") based on the given difference of months (0 means this month, 1 means next month, -1 means last month, ...).","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String","parameters":{"iDiff":"type: int, description: the difference in months","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getUnitFormat":{"!description":"Retrieves the unit format pattern for a specific unit name.\n\nNote: Does not take unit mapping into consideration.","!static":false,"!category":"function","!type":"fn(sUnit: String) -> Object","parameters":{"sUnit":"type: string, description: unit name, e.g. \"duration-hour\""}},"getDaysStandAlone":{"!description":"Get stand alone day names in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the day names"}},"getMinimalDaysInFirstWeek":{"!description":"Returns the required minimal number of days for the first week of a year.\n\nThis is the minimal number of days of the week which must be contained in the new year for the week to become the first week of the year. Depending on the country, this is just a single day (in the US) or at least 4 days (in most of Europe).\n\nAll week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the \"likelySubtag\" information of the CLDR is taken into account to guess the \"most likely\" territory for the locale.","!static":false,"!category":"function","!type":"fn() -> Number"},"getCombinedIntervalPattern":{"!description":"Get combined interval pattern using a given pattern and the fallback interval pattern.\n\nIf a skeleton based pattern is not available or not wanted, this method can be used to create an interval pattern based on a given pattern, using the fallback interval pattern.","!static":false,"!category":"function","!type":"fn(sPattern: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sPattern":"type: string, description: the single date pattern to use within the interval pattern","sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale."}},"getCurrencyPattern":{"!description":"Get currency format pattern.\n\nCLDR format pattern:","!static":false,"!category":"function","!type":"fn(sContext: String) -> String","parameters":{"sContext":"type: string, description: the context of the currency pattern (standard or accounting)"}},"getDecimalPattern":{"!description":"Get decimal format pattern.","!static":false,"!category":"function","!type":"fn() -> String"},"getQuarters":{"!description":"Get quarter names in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the quarter names"}},"!proto":"sap.ui.base.Object","getMonthsStandAlone":{"!description":"Get stand alone month names in width \"narrow\", \"abbreviated\" or \"wide\".","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sWidth":"type: string, description: the required width for the month names"}},"!category":"class","getUnitFromMapping":{"!description":"Looks up the unit from defined unit mapping. E.g. for defined unit mapping <code> { \"my\": \"my-custom-unit\", \"cm\": \"length-centimeter\" } <\/code>\n\nCall: <code>getUnitFromMapping(\"my\")<\/code> would result in <code>\"my-custom-unit\"<\/code>","!static":false,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Creates an instance of LocaleData for the given locale.","getPercentPattern":{"!description":"Get percent format pattern.","!static":false,"!category":"function","!type":"fn() -> String"},"getUnitDisplayName":{"!description":"Retrieves the localized display name of a unit by sUnit, e.g. \"duration-hour\".","!static":false,"!category":"function","!type":"fn(sUnit: String) -> String","parameters":{"sUnit":"type: string, description: the unit key, e.g. \"duration-hour\""}},"getCurrencySymbols":{"!description":"Returns the currency symbols available for this locale. Currency symbols get accumulated by custom currency symbols.","!static":false,"!category":"function","!type":"fn() -> Object"},"getUnitFormats":{"!description":"Retrieves all unit format patterns merged.\n\nNote: Does not take unit mapping into consideration.","!static":false,"!category":"function","!type":"fn() -> Object"},"getCurrencyFormat":{"!description":"Returns the short currency formats (like 1K USD, 1M USD....).","!static":false,"!category":"function","!type":"fn(sStyle: String, sNumber: String, sPlural: String) -> String","parameters":{"sNumber":"type: string, description: 1000, 10000 ...","sStyle":"type: string, description: short","sPlural":"type: string, description: one or other (if not exists other is used)"}},"getTerritories":{"!description":"Get locale specific territory names.","!static":false,"!category":"function","!type":"fn() -> Object"},"getWeekendEnd":{"!description":"Returns the last day of a weekend for the given locale.\n\nDays are encoded in the same way as for {@link #getFirstDayOfWeek}.\n\nAll week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the \"likelySubtag\" information of the CLDR is taken into account to guess the \"most likely\" territory for the locale.","!static":false,"!category":"function","!type":"fn() -> Number"},"getDecimalFormat":{"!description":"Returns the short decimal formats (like 1K, 1M....).","!static":false,"!category":"function","!type":"fn(sStyle: String, sNumber: String, sPlural: String) -> String","parameters":{"sNumber":"type: string, description: 1000, 10000 ...","sStyle":"type: string, description: short or long","sPlural":"type: string, description: one or other (if not exists other is used)"}},"getPluralCategories":{"!description":"Returns an array of all plural categories available in this language.","!static":false,"!category":"function","!type":"fn() -> Array"},"getPluralCategory":{"!description":"Returns the plural category (zero, one, two, few, many or other) for the given number value. The number should be passed as a string with dot as decimal separator and the number of decimal/fraction digits as used in the final output. This is needed in order to preserve trailing zeros which are relevant to determine the right plural category.","!static":false,"!category":"function","!type":"fn(sNumber: String | Number) -> String","parameters":{"sNumber":"type: string|number, description: The number to find the plural category for"}},"getEras":{"!description":"Returns array of eras.","!static":false,"!category":"function","!type":"fn(sWidth: String, sCalendarType?: sap.ui.core.CalendarType) -> Array","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar","sWidth":"type: string, description: the style of the era name. It can be 'wide', 'abbreviated' or 'narrow'"}},"getRelativeWeek":{"!description":"Returns the relative week resource pattern (like \"This week\", \"Last week\", \"{0} weeks ago\") based on the given difference of weeks (0 means this week, 1 means next week, -1 means last week, ...).","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String","parameters":{"iDiff":"type: int, description: the difference in weeks","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getTimePattern":{"!description":"Get time pattern in style \"short\", \"medium\", \"long\" or \"full\".","!static":false,"!category":"function","!type":"fn(sStyle: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sStyle":"type: string, description: the required style for the date pattern"}},"getRelativeHour":{"!description":"Returns the relative resource pattern with unit 'hour' (like \"in {0} hour(s)\", \"{0} hour(s) ago\" under locale 'en') based on the given difference value (positive value means in the future and negative value means in the past).\n\nThere's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeMinute or getRelativeSecond function to format the difference using unit 'minute' or 'second'.","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String | null","parameters":{"iDiff":"type: int, description: the difference in hours","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getScripts":{"!description":"Get locale specific script names.","!static":false,"!category":"function","!type":"fn() -> Object"},"getDateTimePattern":{"!description":"Get datetime pattern in style \"short\", \"medium\", \"long\" or \"full\".","!static":false,"!category":"function","!type":"fn(sStyle: String, sCalendarType?: sap.ui.core.CalendarType) -> String","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.","sStyle":"type: string, description: the required style for the datetime pattern"}},"getFirstDayOfWeek":{"!description":"Returns the day that usually is regarded as the first day of a week in the current locale.\n\nDays are encoded as integer where Sunday=0, Monday=1 etc.\n\nAll week data information in the CLDR is provided for territories (countries). If the locale of this LocaleData doesn't contain country information (e.g. if it contains only a language), then the \"likelySubtag\" information of the CLDR is taken into account to guess the \"most likely\" territory for the locale.","!static":false,"!category":"function","!type":"fn() -> Number"},"getRelativeMinute":{"!description":"Returns the relative resource pattern with unit 'minute' (like \"in {0} minute(s)\", \"{0} minute(s) ago\" under locale 'en') based on the given difference value (positive value means in the future and negative value means in the past).\n\nThere's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeSecond function to format the difference using unit 'second'.","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String | null","parameters":{"iDiff":"type: int, description: the difference in minutes","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}},"getMiscPattern":{"!description":"Get miscellaneous pattern.","!static":false,"!category":"function","!type":"fn(sName: String) -> String","parameters":{"sName":"type: string, description: the name of the misc pattern, can be \"approximately\", \"atLeast\", \"atMost\" or \"range\""}},"getPreferredHourSymbol":{"!description":"Returns the preferred hour pattern symbol (h for 12, H for 24 hours) for the current locale.","!static":false,"!category":"function","!type":"fn() -> String"},"getRelativeDay":{"!description":"Returns the relative day resource pattern (like \"Today\", \"Yesterday\", \"{0} days ago\") based on the given difference of days (0 means today, 1 means tommorrow, -1 means yesterday, ...).","!static":false,"!category":"function","!type":"fn(iDiff: Number, sStyle?: String) -> String","parameters":{"iDiff":"type: int, description: the difference in days","sStyle":"type: string, description: @since 1.32.10, 1.34.4 the style of the pattern. The valid values are \"wide\", \"short\" and \"narrow\""}}},"sap.ui.base.Interface_obj":{"!type":"fn(oObject: sap.ui.base.Object, aMethods: [String])","prototype":"sap.ui.base.Interface"},"sap.ui.core.MessageType":{"!description":"Defines the different message types.","Warning":{"!description":"Message is a warning","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Error":{"!description":"Message is an error","!category":"enum","!type":"String"},"!category":"static class","Information":{"!description":"Message should be just an information","!category":"enum","!type":"String"},"None":{"!description":"Message has no specific level","!category":"enum","!type":"String"},"Success":{"!description":"Message is a success message","!category":"enum","!type":"String"}},"sap.ui.model.resource.ResourceModel":{"!description":"Model implementation for resource bundles.\n\nThis model allows to bind control properties against translatable texts. Its data is taken from a {@link module:sap/base/i18n/ResourceBundle} and it only supports property bindings.\n\nIn contrast to most other models, binding paths for a <code>ResourceModel<\/code> must not start with a slash; they are absolute by default, and there's no further structure. Each key in the underlying resource bundle is a valid binding path.\n\nIn extensibility scenarios, the texts of the resource bundle can be {@link #enhance enhanced} with additional resource bundles. These additional bundles can define new texts for existing keys, texts for new keys, or both. When texts for existing keys are replaced, the latest enhancement wins.\n\nThis model supports the binding modes <code>OneWay<\/code> and <code>OneTime<\/code>, but not <code>TwoWay<\/code>. When the recommended asynchronous loading of the bundle is used, binding mode <code>OneTime<\/code> can't be used.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.resource.ResourceModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getProperty":{"!description":"Returns the value for the property with the given path.","!static":false,"!category":"function","!type":"fn(sPath: String) -> String","parameters":{"sPath":"type: string, description: The path to the property"}},"!proto":"sap.ui.model.Model","!category":"class","loadResourceBundle":{"!description":"Returns the resource bundle or a promise resolving with the resource bundle.","!static":true,"!category":"function","!type":"fn(oData: Object, bAsync: Object) -> module:sap/base/i18n/ResourceBundle | Promise.<module:sap/base/i18n/ResourceBundle>","parameters":{"oData":"type: object, description: Parameters used to load the resource bundle; see constructor of the {@link sap.ui.model.resource.ResourceModel}","bAsync":"type: object, description: Whether the resource bundle should be loaded asynchronously"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"bindProperty":{"!description":"Gets a property binding for the given path in the resource model. Only <code>sPath<\/code> from {@link sap.ui.model.Model#bindProperty} is supported; other parameters are ignored.","!static":false,"!category":"function","!type":"fn(sPath: String) -> sap.ui.model.PropertyBinding","parameters":{"sPath":"type: string, description: The path pointing to the property that should be bound; in contrast to most other models, the binding path for a <code>ResourceModel<\/code> must not start with a slash, it is absolute by default and there's no further structure. Each key in the underlying resource bundle is a valid binding path."}},"!constructorDescription":"Constructor for a new ResourceModel.","!module":"sap/ui/model/resource/ResourceModel","!helpDescription":"Model implementation for resource bundles.\n\nThis model allows to bind control properties against translatable texts. Its data is taken from a {@link module:sap/base/i18n/ResourceBundle} and it only supports property bindings.\n\nIn contrast to most other models, binding paths for a <code>ResourceModel<\/code> must not start with a slash; they are absolute by default, and there's no further structure. Each key in the underlying resource bundle is a valid binding path.\n\nIn extensibility scenarios, the texts of the resource bundle can be {@link #enhance enhanced} with additional resource bundles. These additional bundles can define new texts for existing keys, texts for new keys, or both. When texts for existing keys are replaced, the latest enhancement wins.\n\nThis model supports the binding modes <code>OneWay<\/code> and <code>OneTime<\/code>, but not <code>TwoWay<\/code>. When the recommended asynchronous loading of the bundle is used, binding mode <code>OneTime<\/code> can't be used.","getResourceBundle":{"!description":"Gets the resource bundle of this model.","!static":false,"!category":"function","!type":"fn() -> module:sap/base/i18n/ResourceBundle | Promise.<module:sap/base/i18n/ResourceBundle>"},"enhance":{"!description":"Enhances the resource model with a custom resource bundle.\n\nThe custom bundle can define new texts for keys existing in the main bundle, texts for new keys, or both. A resource model can be enhanced with multiple resource bundles by calling this method multiple times. Each call appends to the list of enhancements, but no bundle can be removed from the list.\n\nWhen looking up a text for a key, the enhancements are processed in reverse order. Texts from the last added resource bundle are preferred over texts from previously added bundles or texts from the main bundle.","!static":false,"!category":"function","!type":"fn(oData: module:sap/base/i18n/ResourceBundle | Object) -> Promise","parameters":{"oData":"type: module:sap/base/i18n/ResourceBundle|object, description: Either an already loaded bundle instance, or a configuration object with parameters to load a new resource bundle. When a configuration object is given, at least one of <code>bundleUrl<\/code> or <code>bundleName<\/code> must be set; if both are set, <code>bundleName<\/code> wins"}}},"sap.ui.core.util.ExportType_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.util.ExportType"},"sap.ui.model.FormatException_obj":{"!type":"fn(message: String)","prototype":"sap.ui.model.FormatException"},"sap.ui.model.analytics.odata4analytics.DimensionAttribute":{"!description":"Representation of a dimension attribute.","!constructorDescription":"Create a representation of a dimension attribute provided by an analytic\nquery. Do not create your own instances.","getName":{"!description":"Get the name of the dimension attribute","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of a dimension attribute.","!proto":"sap.ui.base.Object","getDimension":{"!description":"Get dimension","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.Dimension"},"getKeyProperty":{"!description":"Get the key property","!static":false,"!category":"function","!type":"fn() -> Object"},"!category":"class","getTextProperty":{"!description":"Get text property related to this dimension attribute","!static":false,"!category":"function","!type":"fn() -> Object"},"getLabelText":{"!description":"Get label","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.tmpl.DOMAttribute_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.tmpl.DOMAttribute"},"sap.ui.core.routing.Targets":{"!description":"Provides a convenient way for placing views into the correct containers of your application.\n\nThe main benefit of <code>Targets<\/code> is lazy loading: you do not have to create the views until you really need them. If you are using the mobile library, please use {@link sap.m.routing.Targets} instead of this class.","fireDisplay":{"!description":"Fires event {@link #event:created created} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Targets","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.Targets.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"addTarget":{"!description":"Creates a target by using the given name and options.\n\nIf there's already a target with the same name, the existing target is not overwritten and an error log will be written to the console.","!static":false,"!category":"function","!type":"fn(sName: String, oTargetOptions: Object) -> sap.ui.core.routing.Targets","parameters":{"sName":"type: string, description: Name of a target","oTargetOptions":"type: object, description: Options of a target. The option names are the same as the ones in \"oOptions.targets.anyName\" of {@link #constructor}."}},"detachDisplay":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:display display} event of this <code>sap.ui.core.routing.Targets<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Targets","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"display":{"!description":"Creates a view and puts it in an aggregation of the specified control.","!static":false,"!category":"function","!type":"fn(vTargets: [String | String], oData?: Object, sTitleTarget?: String) -> sap.ui.core.routing.Targets | Promise","parameters":{"oData":"type: object, description: an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.","sTitleTarget":"type: string, description: the name of the target from which the title option is taken for firing the {@link sap.ui.core.routing.Targets#event:titleChanged titleChanged} event","vTargets":"type: string|string[], description: Key of the target as specified in the {@link #constructor}. To display multiple targets you may also pass an array of keys."}},"!proto":"sap.ui.base.EventProvider","destroy":{"!description":"Destroys the targets instance and all created targets. Does not destroy the views instance passed to the constructor. It has to be destroyed separately.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Targets"},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Targets with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachTitleChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:titleChanged titleChanged} event of this <code>sap.ui.core.routing.Targets<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Targets<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Targets","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.routing.Targets<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getTarget":{"!description":"Returns a target by its name (if you pass myTarget: { view: \"myView\" }) in the config myTarget is the name.","!static":false,"!category":"function","!type":"fn(vName: [String | String]) -> [sap.ui.core.routing.Target | undefined | sap.ui.core.routing.Target]","parameters":{"vName":"type: string|string[], description: the name of a single target or the name of multiple targets"}},"!constructorDescription":"Constructor for a new Targets class.","!module":"sap/ui/core/routing/Targets","!helpDescription":"Provides a convenient way for placing views into the correct containers of your application.\n\nThe main benefit of <code>Targets<\/code> is lazy loading: you do not have to create the views until you really need them. If you are using the mobile library, please use {@link sap.m.routing.Targets} instead of this class.","attachDisplay":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:display display} event of this <code>sap.ui.core.routing.Targets<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Targets<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Targets","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.routing.Targets<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getViews":{"!description":"Returns the views instance passed to the constructor","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Views"},"detachTitleChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:titleChanged titleChanged} event of this <code>sap.ui.core.routing.Targets<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Targets","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.core.Element.registry":{"!description":"Registry of all <code>sap.ui.core.Element<\/code>s that currently exist.","all":{"!description":"Return an object with all instances of <code>sap.ui.core.Element<\/code>, keyed by their ID.\n\nEach call creates a new snapshot object. Depending on the size of the UI, this operation therefore might be expensive. Consider to use the <code>forEach<\/code> or <code>filter<\/code> method instead of executing similar operations on the returned object.\n\n<b>Note<\/b>: The returned object is created by a call to <code>Object.create(null)<\/code>, and therefore lacks all methods of <code>Object.prototype<\/code>, e.g. <code>toString<\/code> etc.","!static":"true","!category":"function","!type":"fn() -> Object.<sap.ui.core.ID,sap.ui.core.Element>"},"filter":{"!description":"Returns an array with elements for which the given <code>callback<\/code> returns a value that coerces to <code>true<\/code>.\n\nThe expected signature of the callback is <pre>\n   function callback(oElement, sID)\n<\/pre> where <code>oElement<\/code> is the currently visited element instance and <code>sID<\/code> is the ID of that instance.\n\nIf elements are created or destroyed within the <code>callback<\/code>, then the behavior is not specified. Newly added objects might or might not be visited. When an element is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.\n\nIf a <code>thisArg<\/code> is given, it will be provided as <code>this<\/code> context when calling <code>callback<\/code>. The <code>this<\/code> value that the implementation of <code>callback<\/code> sees, depends on the usual resolution mechanism. E.g. when <code>callback<\/code> was bound to some context object, that object wins over the given <code>thisArg<\/code>.\n\nThis function returns an array with all elements matching the given predicate. The order of the elements in the array is not specified and might change between calls (over time and across different versions of UI5).","!static":"true","!category":"function","!type":"fn(callback: fn(), thisArg?: Object) -> [sap.ui.core.Element]"},"!module":"sap/ui/core/Element","size":{"!description":"Number of existing elements.","!category":"enum","!type":"Number"},"!helpDescription":"Registry of all <code>sap.ui.core.Element<\/code>s that currently exist.","forEach":{"!description":"Calls the given <code>callback<\/code> for each element.\n\nThe expected signature of the callback is <pre>\n   function callback(oElement, sID)\n<\/pre> where <code>oElement<\/code> is the currently visited element instance and <code>sID<\/code> is the ID of that instance.\n\nThe order in which the callback is called for elements is not specified and might change between calls (over time and across different versions of UI5).\n\nIf elements are created or destroyed within the <code>callback<\/code>, then the behavior is not specified. Newly added objects might or might not be visited. When an element is destroyed during the filtering and was not visited yet, it might or might not be visited. As the behavior for such concurrent modifications is not specified, it may change in newer releases.\n\nIf a <code>thisArg<\/code> is given, it will be provided as <code>this<\/code> context when calling <code>callback<\/code>. The <code>this<\/code> value that the implementation of <code>callback<\/code> sees, depends on the usual resolution mechanism. E.g. when <code>callback<\/code> was bound to some context object, that object wins over the given <code>thisArg<\/code>.","!static":"true","!category":"function","!type":"fn(callback: fn(), thisArg?: Object)"},"get":{"!description":"Retrieves an Element by its ID.\n\nWhen the ID is <code>null<\/code> or <code>undefined<\/code> or when there's no element with the given ID, then <code>undefined<\/code> is returned.","!static":"true","!category":"function","!type":"fn(id: sap.ui.core.ID) -> sap.ui.core.Element"},"!category":"namespace"},"sap.ui.model.ClientPropertyBinding":{"!description":"Property binding implementation for client models.","extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientPropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ClientPropertyBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates a new ClientPropertyBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.Model#bindProperty Model#bindProperty} on the corresponding model implementation instead.","!module":"sap/ui/model/ClientPropertyBinding","!helpDescription":"Property binding implementation for client models.","!proto":"sap.ui.model.PropertyBinding","!category":"class"},"sap.ui.core.message.Message":{"getMessageProcessor":{"!description":"Returns the message processor","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.message.MessageProcessor"},"getPersistent":{"!description":"Returns the if Message is persistent","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setTechnical":{"!description":"Set message as technical message","!static":false,"!category":"function","!type":"fn(bTechnical: Boolean)","parameters":{"bTechnical":"type: boolean, description: Set Message as technical message lifecycle controlled by Application"}},"getControlId":{"!description":"Returns the control ID if set.\n\nNOTE: The control ID is only set for Controls based on <code>sap.m.InputBase<\/code> The Control must be bound to a Model so the Message could be propagated to this Control. The propagation happens only if the Control is created and visible on the screen. Is this the case the control ID is set. The ID is not set in all other cases and cannot be set manually.\n\nIf a Message is propagated to multiple Controls bound to the same target the last Control wins.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.Object","!category":"class","getDescriptionUrl":{"!description":"Returns the message description URL which should be used to download the description content","!static":false,"!category":"function","!type":"fn() -> String"},"getId":{"!description":"Returns the Message Id","!static":false,"!category":"function","!type":"fn() -> String"},"setDescription":{"!description":"Set message description","!static":false,"!category":"function","!type":"fn(sDescription: String)","parameters":{"sDescription":"type: string, description: The Message description"}},"getDescription":{"!description":"Returns the message description","!static":false,"!category":"function","!type":"fn() -> String"},"getTarget":{"!description":"Returns the message target","!static":false,"!category":"function","!type":"fn() -> String"},"getTechnicalDetails":{"!description":"Returns the technical details of the message","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Constructor for a new Message.","setTarget":{"!description":"Set message target: The syntax is MessageProcessor dependent. See the documentation of the respective MessageProcessor.","!static":false,"!category":"function","!type":"fn(sTarget: String)","parameters":{"sTarget":"type: string, description: The Message target"}},"getDate":{"!description":"Set the date of the message","!static":false,"!category":"function","!type":"fn() -> Number"},"getCode":{"!description":"Returns the message code","!static":false,"!category":"function","!type":"fn() -> String"},"getAdditionalText":{"!description":"Returns the messages additional text.","!static":false,"!category":"function","!type":"fn() -> String"},"getTechnical":{"!description":"Returns the if Message set as technical message","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.message.Message.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setTechnicalDetails":{"!description":"Set the technical details for the message","!static":false,"!category":"function","!type":"fn(oTechnicalDetails: Object)","parameters":{"oTechnicalDetails":"type: object, description: The technical details of the message"}},"setCode":{"!description":"Set message code","!static":false,"!category":"function","!type":"fn(sCode: String)","parameters":{"sCode":"type: string, description: The Message code"}},"getMessage":{"!description":"Returns message text","!static":false,"!category":"function","!type":"fn() -> String"},"setPersistent":{"!description":"Set message persistent","!static":false,"!category":"function","!type":"fn(bPersistent: Boolean)","parameters":{"bPersistent":"type: boolean, description: Set Message persistent: If persisten is set true the message lifecycle controlled by Application"}},"setDescriptionUrl":{"!description":"Set message description URL which should be used to download the description content","!static":false,"!category":"function","!type":"fn(sDescriptionUrl: String)","parameters":{"sDescriptionUrl":"type: string, description: The URL pointing to the description long text"}},"setMessage":{"!description":"Set message text","!static":false,"!category":"function","!type":"fn(sMessage: String)","parameters":{"sMessage":"type: string, description: The Message as text"}},"setType":{"!description":"Set message type","!static":false,"!category":"function","!type":"fn(sType: sap.ui.core.MessageType)","parameters":{"sType":"type: sap.ui.core.MessageType, description: The Message type"}},"getControlIds":{"!description":"Returns an array of control IDs.\n\nNOTE: The control ID is only set for Controls based on <code>sap.m.InputBase<\/code>. The Control must be bound to a Model so the Message could be propagated to this Control. The propagation happens only if the Control is created and visible on the screen. The ID is not set in all other cases and cannot be set manually.","!static":false,"!category":"function","!type":"fn() -> Array"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.Message with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setMessageProcessor":{"!description":"Set message processor","!static":false,"!category":"function","!type":"fn(oMessageProcessor: sap.ui.core.message.MessageProcessor)","parameters":{"oMessageProcessor":"type: sap.ui.core.message.MessageProcessor, description: The Message processor"}},"!module":"sap/ui/core/message/Message","getType":{"!description":"Returns the message type","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.MessageType"},"setAdditionalText":{"!description":"Sets the additionaltext for the message or merge different additionaltext strings","!static":false,"!category":"function","!type":"fn(sAdditionalText: String)","parameters":{"sAdditionalText":"type: string, description: The additionaltext."}},"setDate":{"!description":"Set the date of the message, this will automatically be set on message creation","!static":false,"!category":"function","!type":"fn(iDate: Number)","parameters":{"iDate":"type: int, description: The message date in number of milliseconds elapsed since 1 January 1970 00:00:00 UTC. As returned by Date.now()."}}},"sap.ui.model.odata.CountMode":{"!description":"Different modes for retrieving the count of collections.","!module":"sap/ui/model/odata/CountMode","InlineRepeat":{"!description":"Count is retrieved by adding <code>$inlinecount=allpages<\/code> to every data request.","!category":"enum","!type":"String"},"Request":{"!description":"Count is retrieved by sending a separate <code>$count<\/code> request before requesting data.\n\nIt depends on the concrete model implementation whether and how the <code>$count<\/code> request and the data request are synchronized.","!category":"enum","!type":"String"},"!category":"static class","Inline":{"!description":"Count is retrieved by adding <code>$inlinecount=allpages<\/code> to data requests as long as no count has been determined yet.","!category":"enum","!type":"String"},"None":{"!description":"Count is not requested from the server.","!category":"enum","!type":"String"},"Both":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.43 this shouldn't be used any longer, decide for one of the other modes.<br>Count is retrieved by a separate request upfront and inline with each data request.\n\nThe only purpose of this mode is to reflect the behavior of the {@link sap.ui.model.odata.ODataModel ODataModel (v1)} before the introduction of the <code>CountMode<\/code>. For compatibility reasons, it is the default for the <code>ODataModel<\/code> (v1) and shouldn't be used otherwise.","!category":"enum","!type":"String"}},"sap.ui.core.theming.Parameters":{"!description":"A helper used for (read-only) access to CSS parameters at runtime.","!module":"sap/ui/core/theming/Parameters","!helpDescription":"A helper used for (read-only) access to CSS parameters at runtime.","get":{"!description":"Returns the current value for one or more theming parameters, depending on the given arguments. <ul> <li>If no parameter is given a key-value map containing all parameters is returned<\/li> <li>If a <code>string<\/code> is given as first parameter the value is returned as a <code>string<\/code><\/li> <li>If an <code>array<\/code> is given as first parameter a key-value map containing all parameters from the <code>array<\/code> is returned<\/li> <\/ul> <p>The returned key-value maps are a copy so changing values in the map does not have any effect<\/p>","!static":"true","!category":"function","!type":"fn(vName: [String | String], oElement?: sap.ui.core.Element) -> String | Object | undefined"},"reset":{"!description":"Resets the CSS parameters which finally will reload the parameters the next time they are queried via the method <code>get<\/code>.","!static":"true","!category":"function","!type":"fn()"},"!category":"namespace","_getScopes":{"!description":"Returns the scopes from current theming parameters.","!static":"true","!category":"function","!type":"fn(bAvoidLoading?: Boolean) -> Array"},"getActiveScopesFor":{"!description":"Returns the active scope(s) for a given control by looking up the hierarchy.\n\nThe lookup navigates the DOM hierarchy if it's available. Otherwise if controls aren't rendered yet, it navigates the control hierarchy. By navigating the control hierarchy, inner-html elements with the respective scope classes can't get recognized as the Custom Style Class API does only for root elements.","!static":"true","!category":"function","!type":"fn(oElement: Object) -> [string[]]"}},"sap.ui.model.odata.MessageScope":{"!description":"Different scopes for retrieving messages from a service consumed via a {@link sap.ui.model.odata.v2.ODataModel}.","!module":"sap/ui/model/odata/MessageScope","!category":"static class","RequestedObjects":{"!description":"Retrieve messages only for the requested or changed entities.","!category":"enum","!type":"String"},"BusinessObject":{"!description":"Retrieve messages for the requested or changed entities and for all their child entities that belong to the same business object. The service needs to set the OData V2 annotation \"message-scope-supported\" at the <code>EntityContainer<\/code> to <code>true<\/code>. If the service does set this OData V2 annotation, the OData model falls back to <code>sap.ui.model.odata.MessageScope.RequestedObjects<\/code>.","!category":"enum","!type":"String"}},"sap.ui.model.type.TimeInterval":{"!description":"This class represents the Time interval composite type.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.TimeInterval with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.DateInterval.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.TimeInterval.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Time interval type.","!module":"sap/ui/model/type/TimeInterval","!helpDescription":"This class represents the Time interval composite type.","!proto":"sap.ui.model.type.DateInterval","!category":"class"},"module:sap/ui/dom/jquery/Selection":{"!description":"This module provides the following API: <ul> <li>{@link jQuery#disableSelection}<\/li> <li>{@link jQuery#enableSelection}<\/li> <\/ul>","!module":"sap/ui/dom/jquery/Selection","module:sap/ui/dom/jquery/Selection":"module:sap/ui/dom/jquery/Selection","!helpDescription":"This module provides the following API: <ul> <li>{@link jQuery#disableSelection}<\/li> <li>{@link jQuery#enableSelection}<\/li> <\/ul>","!category":"namespace"},"sap.ui.model.analytics.odata4analytics.FilterExpression":{"!description":"Representation of a $filter expression for an OData entity type.","!proto":"sap.ui.base.Object","clear":{"!description":"Clear expression from any conditions that may have been set previously","!static":false,"!category":"function","!type":"fn()"},"getEntityType":{"!description":"Get description for this entity type","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntityType"},"!category":"class","addCondition":{"!description":"Add a condition to the filter expression.\n\nMultiple conditions on the same property are combined with a logical OR first, and in a second step conditions for different properties are combined with a logical AND.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, sOperator: sap.ui.model.FilterOperator, oValue: Object, oValue2: Object) -> sap.ui.model.analytics.odata4analytics.FilterExpression","parameters":{"oValue":"type: object, description: value to be used for this condition","sOperator":"type: sap.ui.model.FilterOperator, description: operator used for the condition","sPropertyName":"type: string, description: The name of the property bound in the condition","oValue2":"type: object, description: (optional) as second value to be used for this condition"}},"removeConditions":{"!description":"Remove all conditions for some property from the filter expression.\n\nAll previously set conditions for some property are removed from the filter expression.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.model.analytics.odata4analytics.FilterExpression","parameters":{"sPropertyName":"type: string, description: The name of the property bound in the condition"}},"checkValidity":{"!description":"Check if request is compliant with basic filter constraints expressed in metadata:\n\n(a) all properties required in the filter expression have been referenced (b) the single-value filter restrictions have been obeyed","!static":false,"!category":"function","!type":"fn() -> Boolean"},"addSetCondition":{"!description":"Add a set condition to the filter expression.\n\nA set condition tests if the value of a property is included in a set of given values. It is a convenience method for this particular use case eliminating the need for multiple API calls.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, aValues: Array) -> sap.ui.model.analytics.odata4analytics.FilterExpression","parameters":{"aValues":"type: array, description: values defining the set","sPropertyName":"type: string, description: The name of the property bound in the condition"}},"!constructorDescription":"Create a representation of a filter expression for a given entity type. It can be rendered as value for the $filter system\nquery option.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of a $filter expression for an OData entity type.","getURIFilterOptionValue":{"!description":"Get the value for the OData system query option $filter corresponding to this expression.","!static":false,"!category":"function","!type":"fn() -> String"},"getExpressionAsUI5FilterArray":{"!description":"Get an array of SAPUI5 Filter objects corresponding to this expression.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.model.Filter]"},"addUI5FilterConditions":{"!description":"Add an array of UI5 filter conditions to the filter expression.\n\nThe UI5 filter condition is combined with the other given conditions using a logical AND. This method is particularly useful for passing forward already created UI5 filter arrays.","!static":false,"!category":"function","!type":"fn(aUI5Filter: [sap.ui.model.Filter]) -> sap.ui.model.analytics.odata4analytics.FilterExpression","parameters":{"aUI5Filter":"type: sap.ui.model.Filter[], description: Array of UI5 filter objects"}}},"sap.ui.model.FilterOperator":{"!description":"Operators for the Filter.","All":{"!description":"Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems. <code>All<\/code> returns a list of those items for which <b>all<\/b> dependent subitems match the filter criteria of the nested filter. For example, a list of customers can be filtered by filter criteria that are applied to the list of orders the customer placed in the past. The filter returns a list of those customers that <b>always<\/b> ordered a specific product.\n\nThis filter operator is only supported in OData V4 models.","!category":"enum","!type":"String"},"NotContains":{"!description":"FilterOperator not contains","!category":"enum","!type":"String"},"NotStartsWith":{"!description":"FilterOperator not starts with","!category":"enum","!type":"String"},"LT":{"!description":"FilterOperator less than","!category":"enum","!type":"String"},"!category":"static class","EQ":{"!description":"FilterOperator equals","!category":"enum","!type":"String"},"Any":{"!description":"Used to filter a list based on filter criteria that are defined in a nested filter for dependent subitems. <code>Any<\/code> returns a list of those items for which <b>at least one<\/b> dependent subitem matches the filter criteria of the nested filter. For example, a list of customers can be filtered by filter criteria that are applied to the list of orders the customer placed in the past. The filter returns a list of those customers that <b>at least once<\/b> ordered a specific product.\n\nThis filter operator is only supported in OData V4 models.","!category":"enum","!type":"String"},"GT":{"!description":"FilterOperator greater than","!category":"enum","!type":"String"},"StartsWith":{"!description":"FilterOperator starts with","!category":"enum","!type":"String"},"BT":{"!description":"FilterOperator between\n\nUsed to filter all entries between the given boundaries. The filter result contains the boundaries, but no entries before or further. The order of the entries in the filter results is based on their occurrence in the input list.\n\n<b>Note, when used on strings:<\/b> The String comparison is based on lexicographical ordering. Characters are ranked in their alphabetical order. Words with the same preceding substring are ordered based on their length e.g. \"Chris\" comes before \"Christian\".\n\nThe filtering includes the right boundary, but no strings further in the lexicographical ordering. e.g. between \"A\" and \"C\" includes the string \"C\", but not \"Chris\".","!category":"enum","!type":"String"},"!module":"sap/ui/model/FilterOperator","NB":{"!description":"FilterOperator \"Not Between\"\n\nUsed to filter all entries, which are not between the given boundaries. The filter result does not contains the boundaries, but only entries outside of the boundaries. The order of the entries in the filter results is based on their occurrence in the input list.\n\n<b>Note, when used on strings:<\/b> The String comparison is based on lexicographical ordering. Characters are ranked in their alphabetical order. Words with the same preceding substring are ordered based on their length e.g. \"Chris\" comes before \"Christian\".","!category":"enum","!type":"String"},"NE":{"!description":"FilterOperator not equals","!category":"enum","!type":"String"},"Contains":{"!description":"FilterOperator contains","!category":"enum","!type":"String"},"NotEndsWith":{"!description":"FilterOperator not ends with","!category":"enum","!type":"String"},"LE":{"!description":"FilterOperator less or equals","!category":"enum","!type":"String"},"EndsWith":{"!description":"FilterOperator ends with","!category":"enum","!type":"String"},"GE":{"!description":"FilterOperator greater or equals","!category":"enum","!type":"String"}},"sap.ui.model.ClientModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oData?: String)","prototype":"sap.ui.model.ClientModel"},"sap.ui.model.type.String_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.String"},"sap.ui.core.dnd.DragInfo":{"!description":"Provides the configuration for drag operations.\n\n<b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.dnd.DragInfo.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachDragEnd":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragEnd dragEnd} event of this <code>sap.ui.core.dnd.DragInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragInfo<\/code> itself.\n\nThis event is fired when a drag operation is being ended.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireDragStart":{"!description":"Fires event {@link #event:dragStart dragStart} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!proto":"sap.ui.core.dnd.DragDropBase","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DragInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.dnd.DragDropBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getSourceAggregation":{"!description":"Gets current value of property {@link #getSourceAggregation sourceAggregation}.\n\nThe name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.","!static":false,"!category":"function","!type":"fn() -> String"},"setSourceAggregation":{"!description":"Sets a new value for property {@link #getSourceAggregation sourceAggregation}.\n\nThe name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSourceAggregation: String) -> sap.ui.core.dnd.DragInfo","parameters":{"sSourceAggregation":"type: string, description: New value for property <code>sourceAggregation<\/code>"}},"!constructorDescription":"Constructor for a new DragInfo.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSourceAggregation sourceAggregation} : string<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:dragStart dragStart} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:dragEnd dragEnd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.dnd.DragDropBase#constructor sap.ui.core.dnd.DragDropBase}\ncan be used as well.","!module":"sap/ui/core/dnd/DragInfo","fireDragEnd":{"!description":"Fires event {@link #event:dragEnd dragEnd} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.dnd.DragInfo","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!helpDescription":"Provides the configuration for drag operations.\n\n<b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","detachDragEnd":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragEnd dragEnd} event of this <code>sap.ui.core.dnd.DragInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachDragStart":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragStart dragStart} event of this <code>sap.ui.core.dnd.DragInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragInfo<\/code> itself.\n\nThis event is fired when the user starts dragging an element.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachDragStart":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragStart dragStart} event of this <code>sap.ui.core.dnd.DragInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.model.odata.type.Byte":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Byte<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Byte with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Byte.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Byte<\/code>.","getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Byte","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Byte<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","getRange":{"!description":"Returns the type's supported range as object with properties <code>minimum<\/code> and <code>maximum<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.model.odata.type.Int","!category":"class"},"sap.ui.core.EventBus":{"!description":"Provides eventing capabilities for applications like firing events and attaching or detaching event handlers for events which are notified when events are fired.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.EventBus.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"subscribe":{"!description":"Attaches an event handler to the event with the given identifier on the given event channel.","!static":false,"!category":"function","!type":"fn(sChannelId?: String, sEventId: String, fnFunction: fn(), oListener?: Object) -> sap.ui.core.EventBus","parameters":{"oListener":"type: object, description: The object that wants to be notified when the event occurs (<code>this<\/code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.","sEventId":"type: string, description: The identifier of the event to listen for","fnFunction":"type: function, description: The handler function to call when the event occurs. This function will be called in the context of the <code>oListener<\/code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present). Handlers must not change the content of this map.","sChannelId":"type: string, description: The channel of the event to subscribe to. If not given, the default channel is used. The channel <code>\"sap.ui\"<\/code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there."}},"!proto":"sap.ui.base.Object","destroy":{"!description":"Cleans up the internal structures and removes all event handlers.\n\nThe object must not be used anymore after destroy was called.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.EventBus with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Creates an instance of EventBus.","!module":"sap/ui/core/EventBus","!helpDescription":"Provides eventing capabilities for applications like firing events and attaching or detaching event handlers for events which are notified when events are fired.","unsubscribe":{"!description":"Removes a previously subscribed event handler from the event with the given identifier on the given event channel.\n\nThe passed parameters must match those used for registration with {@link #subscribe } beforehand!","!static":false,"!category":"function","!type":"fn(sChannelId?: String, sEventId: String, fnFunction: fn(), oListener?: Object) -> sap.ui.core.EventBus","parameters":{"oListener":"type: object, description: The object that wanted to be notified when the event occurred","sEventId":"type: string, description: The identifier of the event to unsubscribe from","fnFunction":"type: function, description: The handler function to unsubscribe from the event","sChannelId":"type: string, description: The channel of the event to unsubscribe from. If not given, the default channel is used."}},"publish":{"!description":"Fires an event using the specified settings and notifies all attached event handlers.","!static":false,"!category":"function","!type":"fn(sChannelId?: String, sEventId: String, oData?: Object)","parameters":{"sEventId":"type: string, description: The identifier of the event to fire","oData":"type: object, description: The parameters which should be carried by the event","sChannelId":"type: string, description: The channel of the event to fire. If not given, the default channel is used. The channel <code>\"sap.ui\"<\/code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there."}},"subscribeOnce":{"!description":"Attaches an event handler, called one time only, to the event with the given identifier on the given event channel.\n\nWhen the event occurs, the handler function is called and the handler registration is automatically removed afterwards.","!static":false,"!category":"function","!type":"fn(sChannelId?: String, sEventId: String, fnFunction: fn(), oListener?: Object) -> sap.ui.core.EventBus","parameters":{"oListener":"type: object, description: The object that wants to be notified when the event occurs (<code>this<\/code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.","sEventId":"type: string, description: The identifier of the event to listen for","fnFunction":"type: function, description: The handler function to call when the event occurs. This function will be called in the context of the <code>oListener<\/code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present). Handlers must not change the content of this map.","sChannelId":"type: string, description: The channel of the event to subscribe to. If not given, the default channel is used. The channel <code>\"sap.ui\"<\/code> is reserved by the UI5 framework. An application might listen to events on this channel but is not allowed to publish its own events there."}}},"sap.ui.core.ListItem_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.ListItem"},"sap.ui.core.format.DateFormat":{"!description":"The DateFormat is a static class for formatting and parsing single date and time values or date and time intervals according to a set of format options.\n\nSupported format options are pattern based on Unicode LDML Date Format notation. Please note that only a subset of the LDML date symbols is supported. If no pattern is specified a default pattern according to the locale settings is used.","getDateTimeInstance":{"!description":"Get a datetime instance of the DateFormat, which can be used for formatting.","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.DateFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to ask for locale specific texts/settings","oFormatOptions":"type: object, description: Object which defines the format options"}},"!constructorDescription":"Constructor for DateFormat - must not be used: To get a DateFormat instance, please use getDateInstance, getDateTimeInstance or getTimeInstance.","!module":"sap/ui/core/format/DateFormat","!helpDescription":"The DateFormat is a static class for formatting and parsing single date and time values or date and time intervals according to a set of format options.\n\nSupported format options are pattern based on Unicode LDML Date Format notation. Please note that only a subset of the LDML date symbols is supported. If no pattern is specified a default pattern according to the locale settings is used.","!proto":"sap.ui.base.Object","format":{"!description":"Format a date according to the given format options.","!static":false,"!category":"function","!type":"fn(vJSDate: [Date | Date], bUTC: Boolean) -> String","parameters":{"vJSDate":"type: Date|Date[], description: the value to format","bUTC":"type: boolean, description: whether to use UTC"}},"!category":"class","parse":{"!description":"Parse a string which is formatted according to the given format options.","!static":false,"!category":"function","!type":"fn(sValue: String, bUTC: Boolean, bStrict: Boolean) -> [Date | Date]","parameters":{"bStrict":"type: boolean, description: to use strict value check","sValue":"type: string, description: the string containing a formatted date/time value","bUTC":"type: boolean, description: whether to use UTC, if no timezone is contained"}},"getTimeInstance":{"!description":"Get a time instance of the DateFormat, which can be used for formatting.","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.DateFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to ask for locale specific texts/settings","oFormatOptions":"type: object, description: Object which defines the format options"}},"getDateInstance":{"!description":"Get a date instance of the DateFormat, which can be used for formatting.","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.DateFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to ask for locale specific texts/settings","oFormatOptions":"type: object, description: Object which defines the format options"}}},"sap.ui.core.HorizontalAlign":{"!description":"Configuration options for horizontal alignments of controls.","Center":{"!description":"Centered alignment of text","!category":"enum","!type":"String"},"Left":{"!description":"Hard option for left alignment","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Begin":{"!description":"Locale-specific positioning at the beginning of the line","!category":"enum","!type":"String"},"Right":{"!description":"Hard option for right alignment","!category":"enum","!type":"String"},"!category":"static class","End":{"!description":"Locale-specific positioning at the end of the line","!category":"enum","!type":"String"}},"sap.ui.model.ClientContextBinding":{"!description":"The ContextBinding is a specific binding for setting a context for the model.","extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ClientContextBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates a new ClientContextBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.Model#bindContext Model#bindContext} on the corresponding model implementation instead.","!module":"sap/ui/model/ClientContextBinding","!helpDescription":"The ContextBinding is a specific binding for setting a context for the model.","!proto":"sap.ui.model.ContextBinding","!category":"class"},"sap.ui.core.Message_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Message with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Message"},"sap.ui.model.base.ManagedObjectModel":{"!description":"The ManagedObjectModel class can be used for data binding of properties and aggregations for managed objects.\n\nProvides model access to a given {@link sap.ui.base.ManagedObject}. Such access allows to bind to properties and aggregations of this object.","extend":{"!description":"Creates a new subclass of class sap.ui.model.base.ManagedObjectModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.json.JSONModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.base.ManagedObjectModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"The ManagedObjectModel class allows you to bind to properties and aggregations of managed objects.","!module":"sap/ui/model/base/ManagedObjectModel","!helpDescription":"The ManagedObjectModel class can be used for data binding of properties and aggregations for managed objects.\n\nProvides model access to a given {@link sap.ui.base.ManagedObject}. Such access allows to bind to properties and aggregations of this object.","setData":{"!description":"Inserts the user-defined custom data into the model.","!static":false,"!category":"function","!type":"fn(oData: Object, bMerge?: Boolean)","parameters":{"bMerge":"type: boolean, description: If set to <code>true<\/code>, the data is merged instead of replaced","oData":"type: object, description: The data as JSON object to be set on the model"}},"!proto":"sap.ui.model.json.JSONModel","!category":"class","checkUpdate":{"!description":"Private method iterating the registered bindings of this model instance and initiating their check for update","!static":false,"!category":"function","!type":"fn(bForceUpdate: Boolean, bAsync: Boolean, fnFilter: fn())","parameters":{"fnFilter":"type: function, description: an optional test function to filter the binding","bForceUpdate":"type: boolean, description: undefined","bAsync":"type: boolean, description: undefined"}}},"sap.ui.model.odata.ODataPropertyBinding":{"!description":"Property binding implementation for OData format","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Returns the current value of the bound target","!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataPropertyBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/model/odata/ODataPropertyBinding","!helpDescription":"Property binding implementation for OData format","!proto":"sap.ui.model.PropertyBinding","!category":"class","initialize":{"!description":"Initialize the binding. The message should be called when creating a binding. If metadata is not yet available, do nothing, method will be called again when metadata is loaded.","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.core.message.MessageProcessor":{"!description":"This is an abstract base class for MessageProcessor objects.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.message.MessageProcessor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.EventProvider","destroy":{"!description":"Destroys the MessageProcessor Instance","!static":false,"!category":"function","!type":"fn()"},"setMessages":{"!description":"Implement in inheriting classes","!static":false,"!category":"function","!type":"fn(vMessages: Object.<string,array>)","parameters":{"vMessages":"type: Object.<string,array>, description: map of messages: {'target': [array of messages],...}"}},"!category":"class","getId":{"!description":"Returns the ID of the MessageProcessor instance","!static":false,"!category":"function","!type":"fn() -> String"},"fireMessageChange":{"!description":"Fires event {@link #event:messageChange messageChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.message.MessageProcessor","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.MessageProcessor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new MessageProcessor","!module":"sap/ui/core/message/MessageProcessor","!helpDescription":"This is an abstract base class for MessageProcessor objects.","checkMessages":{"!description":"Implement in inheriting classes","!static":false,"!category":"function","!type":"fn()"},"detachMessageChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:messageChange messageChange} event of this <code>sap.ui.core.message.MessageProcessor<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.message.MessageProcessor","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachMessageChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:messageChange messageChange} event of this <code>sap.ui.core.message.MessageProcessor<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.message.MessageProcessor<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.message.MessageProcessor","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>MessageProcessor<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.test.PageObjectFactory":{"!description":"Page Object Factory.","!module":"sap/ui/test/PageObjectFactory","!helpDescription":"Page Object Factory.","!proto":"sap.ui.base.Object","create":{"!description":"Creates a set of page objects, each consisting of actions and assertions, and adds them to the Opa configuration.\n\nUse page objects to structure your actions and assertions based on parts of the screen. This helps to avoid name clashes and to structure your tests.","!static":true,"!category":"function","!type":"fn(mPageDefinitions: Object.<string,sap.ui.test.PageObjectDefinition>, Opa5: sap.ui.test.Opa5) -> Object.<string,Object>","parameters":{"Opa5":"type: sap.ui.test.Opa5, description: Opa5 class, provided as parameter to avoid a circular dependency","mPageDefinitions":"type: Object.<string,sap.ui.test.PageObjectDefinition>, description: Definitions of 1 or more page objects"}},"!category":"class"},"jQuery.sap.log":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/Log} instead<br>A Logging API for JavaScript.\n\nProvides methods to manage a client-side log and to create entries in it. Each of the logging methods {@link jQuery.sap.log.debug}, {@link jQuery.sap.log.info}, {@link jQuery.sap.log.warning}, {@link jQuery.sap.log.error} and {@link jQuery.sap.log.fatal} creates and records a log entry, containing a timestamp, a log level, a message with details and a component info. The log level will be one of {@link jQuery.sap.log.Level} and equals the name of the concrete logging method.\n\nBy using the {@link jQuery.sap.log.setLevel} method, consumers can determine the least important log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric values represent less important levels). The initially set level depends on the mode that UI5 is running in. When the optimized sources are executed, the default level will be {@link jQuery.sap.log.Level.ERROR}. For normal (debug sources), the default level is {@link jQuery.sap.log.Level.DEBUG}.\n\nAll logging methods allow to specify a <b>component<\/b>. These components are simple strings and don't have a special meaning to the UI5 framework. However they can be used to semantically group log entries that belong to the same software component (or feature). There are two APIs that help to manage logging for such a component. With <code>{@link jQuery.sap.log.getLogger}(sComponent)<\/code>, one can retrieve a logger that automatically adds the given <code>sComponent<\/code> as component parameter to each log entry, if no other component is specified. Typically, JavaScript code will retrieve such a logger once during startup and reuse it for the rest of its lifecycle. Second, the {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent) method allows to set the log level for a specific component only. This allows a more fine granular control about the created logging entries. {@link jQuery.sap.log.Logger#getLevel} allows to retrieve the currently effective log level for a given component.\n\n{@link jQuery.sap.log.getLogEntries} returns an array of the currently collected log entries.\n\nFurthermore, a listener can be registered to the log. It will be notified whenever a new entry is added to the log. The listener can be used for displaying log entries in a separate page area, or for sending it to some external target (server).","isLoggable":{"!description":"Checks whether logging is enabled for the given log level, depending on the currently effective log level for the given component.\n\nIf no component is given, the default component of this logger will be taken into account.","!static":"true","!category":"function","!type":"fn(iLevel?: Number, sComponent?: String) -> Boolean"},"debug":{"!description":"Creates a new debug-level entry in the log with the given message, details and calling component.","!static":"true","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger"},"getLog":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1.2 To avoid confusion with getLogger, this method has been renamed to {@link jQuery.sap.log.getLogEntries}.<br>Retrieves the currently recorded log entries.","!static":"true","!category":"function","!type":"fn()"},"getLogger":{"!description":"Returns a {@link jQuery.sap.log.Logger} for the given component.\n\nThe method might or might not return the same logger object across multiple calls. While loggers are assumed to be light weight objects, consumers should try to avoid redundant calls and instead keep references to already retrieved loggers.\n\nThe optional second parameter <code>iDefaultLogLevel<\/code> allows to specify a default log level for the component. It is only applied when no log level has been defined so far for that component (ignoring inherited log levels). If this method is called multiple times for the same component but with different log levels, only the first call one might be taken into account.","!static":"true","!category":"function","!type":"fn(sComponent: String, iDefaultLogLevel?: Number) -> jQuery.sap.log.Logger"},"!category":"namespace","Logger":"jQuery.sap.log.Logger_obj","error":{"!description":"Creates a new error-level entry in the log with the given message, details and calling component.","!static":"true","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger"},"addLogListener":{"!description":"Allows to add a new LogListener that will be notified for new log entries.\n\nThe given object must provide method <code>onLogEntry<\/code> and can also be informed about <code>onDetachFromLog<\/code> and <code>onAttachToLog<\/code>","!static":"true","!category":"function","!type":"fn(oListener: Object) -> jQuery.sap.log"},"LogLevel":"jQuery.sap.log.LogLevel","fatal":{"!description":"Creates a new fatal-level entry in the log with the given message, details and calling component.","!static":"true","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger"},"setLevel":{"!description":"Defines the maximum <code>jQuery.sap.log.Level<\/code> of log entries that will be recorded. Log entries with a higher (less important) log level will be omitted from the log. When a component name is given, the log level will be configured for that component only, otherwise the log level for the default component of this logger is set. For the global logger, the global default level is set.\n\n<b>Note<\/b>: Setting a global default log level has no impact on already defined component log levels. They always override the global default log level.","!static":"true","!category":"function","!type":"fn(iLogLevel: jQuery.sap.log.Level, sComponent?: String) -> jQuery.sap.log.Logger"},"getLevel":{"!description":"Returns the log level currently effective for the given component. If no component is given or when no level has been configured for a given component, the log level for the default component of this logger is returned.","!static":"true","!category":"function","!type":"fn(sComponent?: String) -> Number"},"trace":{"!description":"Creates a new trace-level entry in the log with the given message, details and calling component.","!static":"true","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger"},"!module":"jquery.sap.global","removeLogListener":{"!description":"Allows to remove a registered LogListener.","!static":"true","!category":"function","!type":"fn(oListener: Object) -> jQuery.sap.log"},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/Log} instead<br>A Logging API for JavaScript.\n\nProvides methods to manage a client-side log and to create entries in it. Each of the logging methods {@link jQuery.sap.log.debug}, {@link jQuery.sap.log.info}, {@link jQuery.sap.log.warning}, {@link jQuery.sap.log.error} and {@link jQuery.sap.log.fatal} creates and records a log entry, containing a timestamp, a log level, a message with details and a component info. The log level will be one of {@link jQuery.sap.log.Level} and equals the name of the concrete logging method.\n\nBy using the {@link jQuery.sap.log.setLevel} method, consumers can determine the least important log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric values represent less important levels). The initially set level depends on the mode that UI5 is running in. When the optimized sources are executed, the default level will be {@link jQuery.sap.log.Level.ERROR}. For normal (debug sources), the default level is {@link jQuery.sap.log.Level.DEBUG}.\n\nAll logging methods allow to specify a <b>component<\/b>. These components are simple strings and don't have a special meaning to the UI5 framework. However they can be used to semantically group log entries that belong to the same software component (or feature). There are two APIs that help to manage logging for such a component. With <code>{@link jQuery.sap.log.getLogger}(sComponent)<\/code>, one can retrieve a logger that automatically adds the given <code>sComponent<\/code> as component parameter to each log entry, if no other component is specified. Typically, JavaScript code will retrieve such a logger once during startup and reuse it for the rest of its lifecycle. Second, the {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent) method allows to set the log level for a specific component only. This allows a more fine granular control about the created logging entries. {@link jQuery.sap.log.Logger#getLevel} allows to retrieve the currently effective log level for a given component.\n\n{@link jQuery.sap.log.getLogEntries} returns an array of the currently collected log entries.\n\nFurthermore, a listener can be registered to the log. It will be notified whenever a new entry is added to the log. The listener can be used for displaying log entries in a separate page area, or for sending it to some external target (server).","warning":{"!description":"Creates a new warning-level entry in the log with the given message, details and calling component.","!static":"true","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger"},"Level":"jQuery.sap.log.Level","getLogEntries":{"!description":"Returns the logged entries recorded so far as an array.\n\nLog entries are plain JavaScript objects with the following properties <ul> <li>timestamp {number} point in time when the entry was created<\/li> <li>level {int} LogLevel level of the entry<\/li> <li>message {string} message text of the entry<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn() -> [Object]"},"info":{"!description":"Creates a new info-level entry in the log with the given message, details and calling component.","!static":"true","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn()) -> jQuery.sap.log.Logger"}},"module:sap/ui/core/support/Hotkeys":{"!description":"Provides hotkey functionality for the TechnicalInfo and Support Dialog.","!module":"sap/ui/core/support/Hotkeys","!helpDescription":"Provides hotkey functionality for the TechnicalInfo and Support Dialog.","module:sap/ui/core/support/Hotkeys":"module:sap/ui/core/support/Hotkeys","!category":"namespace"},"sap.ui.core.util.ExportTypeCSV":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>CSV export type. Can be used for {@link sap.ui.core.util.Export Export}.\n\nPlease note that there could be an issue with the separator char depending on the user's system language in some programs such as Microsoft Excel. To prevent those issues use the data-import functionality which enables the possibility to explicitly set the separator char that should be used. This way the content will be displayed correctly.\n\nPotential formulas (cell data starts with one of = + - @) will be escaped by prepending a single quote. As the export functionality is intended to be used with actual (user) data there is no reason to allow formulas.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportTypeCSV with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.util.ExportType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setSeparatorChar":{"!description":"Setter for property <code>separatorChar<\/code>.\n\nValue needs to be exactly one character or empty for default. Default value is ','.","!static":false,"!category":"function","!type":"fn(sSeparatorChar: String) -> sap.ui.core.util.ExportTypeCSV","parameters":{"sSeparatorChar":"type: string, description: new value for property <code>separatorChar<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.ExportTypeCSV.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new ExportTypeCSV.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSeparatorChar separatorChar} : string (default: ,)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.util.ExportType#constructor sap.ui.core.util.ExportType}\ncan be used as well.","!module":"sap/ui/core/util/ExportTypeCSV","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>CSV export type. Can be used for {@link sap.ui.core.util.Export Export}.\n\nPlease note that there could be an issue with the separator char depending on the user's system language in some programs such as Microsoft Excel. To prevent those issues use the data-import functionality which enables the possibility to explicitly set the separator char that should be used. This way the content will be displayed correctly.\n\nPotential formulas (cell data starts with one of = + - @) will be escaped by prepending a single quote. As the export functionality is intended to be used with actual (user) data there is no reason to allow formulas.","getSeparatorChar":{"!description":"Gets current value of property {@link #getSeparatorChar separatorChar}.\n\nSeparator char.\n\nValue needs to be exactly one character or empty for default.\n\nDefault value is <code>,<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.util.ExportType","!category":"class","generate":{"!description":"Generates the file content.","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.model.odata.ODataMessageParser":{"!description":"OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataMessageParser with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageParser.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setHeaderField":{"!description":"Sets the header field name that should be used for parsing the JSON messages","!static":false,"!category":"function","!type":"fn(sFieldName: String) -> sap.ui.model.odata.ODataMessageParser","parameters":{"sFieldName":"type: string, description: The name of the header field that should be used as source of the message object"}},"getHeaderField":{"!description":"Returns the name of the header field that is used to parse the server messages","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataMessageParser.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.","!module":"sap/ui/model/odata/ODataMessageParser","!helpDescription":"OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.","!proto":"sap.ui.core.message.MessageParser","!category":"class","parse":{"!description":"Parses the given response for messages, calculates the delta and fires the messageChange-event on the MessageProcessor if messages are found.","!static":false,"!category":"function","!type":"fn(oResponse: Object, oRequest: Object, mGetEntities: Object.<string,any>, mChangeEntities: Object.<string,any>)","parameters":{"mGetEntities":"type: Object.<string,any>, description: A map containing the entities requested from the back-end as keys","oRequest":"type: object, description: The original request that lead to this response","mChangeEntities":"type: Object.<string,any>, description: A map containing the entities changed on the back-end as keys","oResponse":"type: object, description: The response from the server containing body and headers"}}},"sap.ui.core.ws":{"SapPcpWebSocket":"sap.ui.core.ws.SapPcpWebSocket_obj","SUPPORTED_PROTOCOLS":"sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS","ReadyState":"sap.ui.core.ws.ReadyState","!category":"namespace","WebSocket":"sap.ui.core.ws.WebSocket_obj"},"sap.ui.model.odata.ODataMetadata":{"!description":"Implementation to access OData metadata","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataMetadata.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"isFailed":{"!description":"Checks whether metadata loading has already failed.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getServiceMetadata":{"!description":"Return the metadata object.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.EventProvider","refresh":{"!description":"Refreshes the metadata creating a new request to the server.\n\nReturns a new promise which can be resolved or rejected depending on the metadata loading state.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!category":"class","isLoaded":{"!description":"Checks whether metadata is available.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getUseBatch":{"!description":"Get the use-batch extension value if any","!static":false,"!category":"function","!type":"fn() -> Boolean"},"loaded":{"!description":"Returns a promise for the loaded state of the metadata.","!static":false,"!category":"function","!type":"fn() -> Promise"},"fireLoaded":{"!description":"Fires event {@link #event:loaded loaded} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataMetadata","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"detachLoaded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:loaded loaded} event of this <code>sap.ui.model.odata.ODataMetadata<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataMetadata","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!constructorDescription":"Constructor for a new ODataMetadata.","!module":"sap/ui/model/odata/ODataMetadata","!helpDescription":"Implementation to access OData metadata","attachLoaded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:loaded loaded} event of this <code>sap.ui.model.odata.ODataMetadata<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.ODataMetadata<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataMetadata","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataMetadata<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireFailed":{"!description":"Fires event {@link #event:failed failed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataMetadata","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"detachFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:failed failed} event of this <code>sap.ui.model.odata.ODataMetadata<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataMetadata","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:failed failed} event of this <code>sap.ui.model.odata.ODataMetadata<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.odata.ODataMetadata<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataMetadata","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataMetadata<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.core.mvc.TemplateView_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.TemplateView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.mvc.TemplateView"},"jQuery.sap.Version_obj":{"!type":"fn(vMajor: [Number | String | Object], iMinor: Number, iPatch: Number, sSuffix: String)","prototype":"jQuery.sap.Version"},"sap.ui.core.tmpl.TemplateControl":{"bindList":{"!description":"Creates a pseudo binding for an aggregation to get notified once the property changes to invalidate the control and trigger a re-rendering.","!static":false,"!category":"function","!type":"fn(sPath: String) -> Object","parameters":{"sPath":"type: string, description: the binding path"}},"createDOMElement":{"!description":"compiles (creates and registers) a new DOM element","!static":false,"!category":"function","!type":"fn(mSettings: Object, sParentPath?: String, bDoNotAdd?: Boolean) -> sap.ui.core.Control","parameters":{"mSettings":"type: object, description: the settings for the new DOM element","sParentPath":"type: string, description: the parent path for the DOM element","bDoNotAdd":"type: boolean, description: if true, then the control will not be added to the _controls aggregation"}},"detachBeforeRendering":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.tmpl.TemplateControl<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.core.Control","!category":"class","!constructorDescription":"Constructor for a new tmpl/TemplateControl.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getContext context} : object<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getTemplate template} : (sap.ui.core.ID | sap.ui.core.tmpl.Template)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","fireBeforeRendering":{"!description":"Fires event {@link #event:beforeRendering beforeRendering} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setContext":{"!description":"Sets a new value for property {@link #getContext context}.\n\nThe context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oContext: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oContext":"type: object, description: New value for property <code>context<\/code>"}},"createControl":{"!description":"compiles (creates and registers) a new control","!static":false,"!category":"function","!type":"fn(mSettings: Object, sParentPath?: String, bDoNotAdd?: Boolean, oView: sap.ui.core.mvc.View) -> sap.ui.core.Control","parameters":{"mSettings":"type: object, description: the settings for the new control","oView":"type: sap.ui.core.mvc.View, description: undefined","sParentPath":"type: string, description: the parent path for the control","bDoNotAdd":"type: boolean, description: if true, then the control will not be added to the _controls aggregation"}},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>This is the base class for all template controls. Template controls are declared based on templates.","attachAfterRendering":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.tmpl.TemplateControl<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl<\/code> itself.\n\nFired when the Template Control has been (re-)rendered and its HTML is present in the DOM.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.tmpl.TemplateControl.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setTemplateRenderer":{"!description":"Sets the instance specific renderer for an anonymous template control.","!static":false,"!category":"function","!type":"fn(fnRenderer: fn()) -> sap.ui.core.tmpl.Template","parameters":{"fnRenderer":"type: function, description: the instance specific renderer function"}},"getTemplate":{"!description":"ID of the element which is the current target of the association {@link #getTemplate template}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"},"attachBeforeRendering":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeRendering beforeRendering} event of this <code>sap.ui.core.tmpl.TemplateControl<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl<\/code> itself.\n\nFired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getTemplateRenderer":{"!description":"Returns the instance specific renderer for an anonymous template control.","!static":false,"!category":"function","!type":"fn() -> fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setTemplate":{"!description":"Sets the associated {@link #getTemplate template}.","!static":false,"!category":"function","!type":"fn(oTemplate: sap.ui.core.ID | sap.ui.core.tmpl.Template) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oTemplate":"type: sap.ui.core.ID|sap.ui.core.tmpl.Template, description: ID of an element which becomes the new target of this template association; alternatively, an element instance may be given"}},"!module":"sap/ui/core/tmpl/TemplateControl","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>This is the base class for all template controls. Template controls are declared based on templates.","isInline":{"!description":"checks whether the control is inline or not","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireAfterRendering":{"!description":"Fires event {@link #event:afterRendering afterRendering} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachAfterRendering":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.tmpl.TemplateControl<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.tmpl.TemplateControl","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"bindProp":{"!description":"Creates a pseudo binding for a property to get notified once the property changes to invalidate the control and trigger a re-rendering.","!static":false,"!category":"function","!type":"fn(sPath: String) -> Object","parameters":{"sPath":"type: string, description: the binding path"}},"getContext":{"!description":"Gets current value of property {@link #getContext context}.\n\nThe context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.","!static":false,"!category":"function","!type":"fn() -> Object"}},"sap.ui.core.VariantLayoutData":{"!description":"Allows to add multiple LayoutData to one control in case that an easy switch of layouts (e.g. in a Form) is needed.","insertMultipleLayoutData":{"!description":"Inserts a multipleLayoutData into the aggregation {@link #getMultipleLayoutData multipleLayoutData}.","!static":false,"!category":"function","!type":"fn(oMultipleLayoutData: sap.ui.core.LayoutData, iIndex: Number) -> sap.ui.core.VariantLayoutData","parameters":{"oMultipleLayoutData":"type: sap.ui.core.LayoutData, description: The multipleLayoutData to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the multipleLayoutData should be inserted at; for a negative value of <code>iIndex<\/code>, the multipleLayoutData is inserted at position 0; for a value greater than the current size of the aggregation, the multipleLayoutData is inserted at the last position"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.VariantLayoutData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"removeMultipleLayoutData":{"!description":"Removes a multipleLayoutData from the aggregation {@link #getMultipleLayoutData multipleLayoutData}.","!static":false,"!category":"function","!type":"fn(vMultipleLayoutData: Number | String | sap.ui.core.LayoutData) -> sap.ui.core.LayoutData","parameters":{"vMultipleLayoutData":"type: int|string|sap.ui.core.LayoutData, description: The multipleLayoutData to remove or its index or id"}},"!proto":"sap.ui.core.LayoutData","removeAllMultipleLayoutData":{"!description":"Removes all the controls from the aggregation {@link #getMultipleLayoutData multipleLayoutData}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.LayoutData]"},"!category":"class","getMultipleLayoutData":{"!description":"Gets content of aggregation {@link #getMultipleLayoutData multipleLayoutData}.\n\nAllows multiple LayoutData.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.LayoutData]"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.VariantLayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"indexOfMultipleLayoutData":{"!description":"Checks for the provided <code>sap.ui.core.LayoutData<\/code> in the aggregation {@link #getMultipleLayoutData multipleLayoutData}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oMultipleLayoutData: sap.ui.core.LayoutData) -> Number","parameters":{"oMultipleLayoutData":"type: sap.ui.core.LayoutData, description: The multipleLayoutData whose index is looked for"}},"!constructorDescription":"Constructor for a new VariantLayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getMultipleLayoutData multipleLayoutData} : sap.ui.core.LayoutData[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}\ncan be used as well.","!module":"sap/ui/core/VariantLayoutData","!helpDescription":"Allows to add multiple LayoutData to one control in case that an easy switch of layouts (e.g. in a Form) is needed.","addMultipleLayoutData":{"!description":"Adds some multipleLayoutData to the aggregation {@link #getMultipleLayoutData multipleLayoutData}.","!static":false,"!category":"function","!type":"fn(oMultipleLayoutData: sap.ui.core.LayoutData) -> sap.ui.core.VariantLayoutData","parameters":{"oMultipleLayoutData":"type: sap.ui.core.LayoutData, description: The multipleLayoutData to add; if empty, nothing is inserted"}},"destroyMultipleLayoutData":{"!description":"Destroys all the multipleLayoutData in the aggregation {@link #getMultipleLayoutData multipleLayoutData}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.VariantLayoutData"}},"sap.ui.model.TreeBinding":{"!description":"The TreeBinding is a specific binding for trees in the model, which can be used to populate Trees.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.TreeBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"hasChildren":{"!description":"Returns if the node has child nodes","!static":false,"!category":"function","!type":"fn(oContext: Object) -> Boolean","parameters":{"oContext":"type: Object, description: the context element of the node"}},"getRootContexts":{"!description":"Returns the current value of the bound target","!static":false,"!category":"function","!type":"fn(iStartIndex: Number, iLength: Number) -> Array","parameters":{"iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index."}},"!proto":"sap.ui.model.Binding","!category":"class","sort":{"!description":"Sorts the tree according to the sorter definitions.","!static":false,"!category":"function","!type":"fn(aSorters: [sap.ui.model.Sorter])","parameters":{"aSorters":"type: sap.ui.model.Sorter[], description: Array of sap.ui.model.Sorter objects"}},"attachFilter":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11 use the <code>change<\/code> event. It now contains a parameter <code>(reason : \"filter\")<\/code> when a filter event is fired.<br>Attaches event handler <code>fnFunction<\/code> to the {@link #event:_filter _filter} event of this <code>sap.ui.model.TreeBinding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.TreeBinding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>TreeBinding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Filters the tree according to the filter definitions.","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter], sFilterType: sap.ui.model.FilterType)","parameters":{"aFilters":"type: sap.ui.model.Filter[], description: Array of sap.ui.model.Filter objects","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted, if it is not given, the standard behaviour applies"}},"getChildCount":{"!description":"Returns the number of child nodes of a specific context","!static":false,"!category":"function","!type":"fn(oContext: Object) -> Number","parameters":{"oContext":"type: Object, description: the context element of the node"}},"!constructorDescription":"Constructor for TreeBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.Model#bindTree Model#bindTree} on the corresponding model instead.","!module":"sap/ui/model/TreeBinding","!helpDescription":"The TreeBinding is a specific binding for trees in the model, which can be used to populate Trees.","detachFilter":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11 use the <code>change<\/code> event.<br>Detaches event handler <code>fnFunction<\/code> from the {@link #event:_filter _filter} event of this <code>sap.ui.model.TreeBinding<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getFilterInfo":{"!description":"Return the filter information as an AST. The default implementation checks for this.oCombinedFilter, models not using this member may override the method. Consumers must not rely on the origin information to be available, future filter implementations will not provide this information.","!static":false,"!category":"function","!type":"fn(bIncludeOrigin: Boolean) -> Object","parameters":{"bIncludeOrigin":"type: boolean, description: include information about the filter objects the tree has been created from"}},"getNodeContexts":{"!description":"Returns the current value of the bound target","!static":false,"!category":"function","!type":"fn(oContext: Object, iStartIndex: Number, iLength: Number) -> Array","parameters":{"oContext":"type: Object, description: the context element of the node","iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index."}}},"sap.ui.model.analytics.AnalyticalBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext?: Object, aSorter?: Array, aFilters?: Array, mParameters?: Object)","prototype":"sap.ui.model.analytics.AnalyticalBinding"},"sap.ui.test.matchers.BindingPath_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.BindingPath with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.BindingPath"},"sap.ui.core.delegate.ScrollEnablement":{"!description":"Delegate for touch scrolling on mobile devices.\n\nThis delegate uses native scrolling of mobile and desktop browsers. Third party scrolling libraries are not supported.\n\nControls that implement ScrollEnablement should additionally provide the getScrollDelegate method that returns the current instance of this delegate object","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.delegate.ScrollEnablement.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setPullDown":{"!description":"Set overflow control on top of scroll container.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control)","parameters":{"oControl":"type: sap.ui.core.Control, description: Top control that should be normally hidden over the top border of the scroll container (pull-down content)."}},"!proto":"sap.ui.base.Object","getChildPosition":{"!description":"Calculates scroll position of a child of a container.","!static":false,"!category":"function","!type":"fn(vElement: HTMLElement | jQuery) -> Object","parameters":{"vElement":"type: HTMLElement|jQuery, description: An element(DOM or jQuery) for which the scroll position will be calculated."}},"destroy":{"!description":"Destroys this Scrolling delegate.\n\nThis function must be called by the control which uses this delegate in the <code>exit<\/code> function.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes this Scrolling delegate.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","scrollToElement":{"!description":"Scrolls to an element within a container.","!static":false,"!category":"function","!type":"fn(oElement: HTMLElement, iTime?: Number, aOffset?: [Number]) -> sap.ui.core.delegate.ScrollEnablement","parameters":{"oElement":"type: HTMLElement, description: A DOM element.","iTime":"type: int, description: The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as value.","aOffset":"type: int[], description: Specifies an additional left and top offset of the target scroll position, relative to the upper left corner of the DOM element"}},"getHorizontal":{"!description":"Get current setting for horizontal scrolling.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setBounce":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.42 undefined<br>Setter for property <code>bounce<\/code>.","!static":false,"!category":"function","!type":"fn(bBounce: Boolean)","parameters":{"bBounce":"type: boolean, description: new value for property <code>bounce<\/code>."}},"!constructorDescription":"Creates a ScrollEnablement delegate that can be attached to Controls requiring\ncapabilities for scrolling of a certain part of their DOM.","!module":"sap/ui/core/delegate/ScrollEnablement","!helpDescription":"Delegate for touch scrolling on mobile devices.\n\nThis delegate uses native scrolling of mobile and desktop browsers. Third party scrolling libraries are not supported.\n\nControls that implement ScrollEnablement should additionally provide the getScrollDelegate method that returns the current instance of this delegate object","setGrowingList":{"!description":"Sets GrowingList control to scroll container","!static":false,"!category":"function","!type":"fn(fnScrollLoadCallback: fn(), sScrollLoadDirection: sap.m.ListGrowingDirection, fnOverflowChange: fn())","parameters":{"sScrollLoadDirection":"type: sap.m.ListGrowingDirection, description: Scrolling direction","fnScrollLoadCallback":"type: function, description: Scrolling callback","fnOverflowChange":"type: function, description: listener for the <code>overflowChange<\/code> event"}},"setVertical":{"!description":"Enable or disable vertical scrolling.","!static":false,"!category":"function","!type":"fn(bVertical: Boolean)","parameters":{"bVertical":"type: boolean, description: set true to enable vertical scrolling, false - to disable"}},"getVertical":{"!description":"Get current setting for vertical scrolling.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setHorizontal":{"!description":"Enable or disable horizontal scrolling.","!static":false,"!category":"function","!type":"fn(bHorizontal: Boolean)","parameters":{"bHorizontal":"type: boolean, description: set true to enable horizontal scrolling, false - to disable"}},"setIconTabBar":{"!description":"Sets IconTabBar control to scroll container","!static":false,"!category":"function","!type":"fn(oIconTabBar: sap.m.IconTabBar, fnScrollEndCallback: fn(), fnScrollStartCallback: fn())","parameters":{"fnScrollEndCallback":"type: function, description: callback function for the scroll end event","fnScrollStartCallback":"type: function, description: callback function for the scroll start event","oIconTabBar":"type: sap.m.IconTabBar, description: instance"}}},"sap.ui.core.delegate.ItemNavigation":{"!description":"Delegate for the navigation between DOM nodes with the keyboard.\n\nThe <code>ItemNavigation<\/code> provides keyboard and mouse navigation between DOM nodes representing items. This means that controls rendering a list of items can attach this delegate to get a common keyboard and mouse support to navigate between these items. It is possible to navigate between the items via the arrow keys. If needed, paging using the Page Up and Page Down keys is possible. (To activate call <code>setPageSize<\/code> with a value &gt; 0.) HOME and END keys are also supported. Focusing an item via mouse also is also supported. For mouse navigation, the <code>mousedown<\/code> event is used.\n\nAs the <code>ItemNavigation<\/code> works with DOM nodes, the items and the control area must be provided as DOM references. There is one root DOM reference (set via <code>setRootDomRef<\/code>). All item DOM references (set via <code>setItemDomRefs<\/code>) must be places somewhere inside of this root DOM reference. Only focusable items are used for the navigation, meaning disabled items or separator items are just ignored by navigating through the items. In some cases however, it makes sense to put the non-focusable items in the array of the DOM references to keep the indexes stable or like in the calling control. <b>Hint:<\/b> To make a DOM reference focusable a <code>tabindex<\/code> of -1 can be set.\n\n<b>Note<\/b> After re-rendering of the control or changing the DOM nodes of the control, the DOM references of the <code>ItemNavigation<\/code> must be updated. Then the same item (corresponding to the index) will get the focus.\n\nThe <code>ItemNavigation<\/code> adjusts the <code>tabindex<\/code> of all DOM references relating to the current focused item. So if the control containing the items gets the focus (e.g. via tab navigation), it is always the focused items which will be focused.\n\n<b>Note:<\/b> If the <code>ItemNavigation<\/code> is nested in another <code>ItemNavigation<\/code> (e.g. <code>SegmentedButton<\/code> in <code>Toolbar<\/code>), the <code>RootDomRef<\/code> will always have <code>tabindex<\/code> -1.\n\nPer default the <code>ItemNavigation<\/code> cycles over the items. It navigates again to the first item if the Arrow Down or Arrow Right key is pressed while the last item has the focus. It navigates to the last item if arrow up or arrow left is pressed while the first item has the focus. If you want to stop the navigation at the first and last item, call the <code>setCycling<\/code> method with a value of <code>false<\/code>.\n\nIt is possible to have multiple columns in the item navigation. If multiple columns are used, the keyboard navigation changes. The Arrow Right and Arrow Left keys will take the user to the next or previous item, and the Arrow Up and Arrow Down keys will navigate the same way but in a vertical direction.\n\nThe <code>ItemNavigation<\/code> also allows setting a selected index that is used to identify the selected item. Initially, if no other focus is set, the selected item will be the focused one. Note that navigating through the items will not change the selected item, only the focus. (For example a radio group has one selected item.)","hasDisabledModifier":{"!description":"Check whether given event has disabled modifier or not","!static":false,"!category":"function","!type":"fn(oEvent: jQuery.Event) -> Boolean","parameters":{"oEvent":"type: jQuery.Event, description: jQuery event"}},"setColumns":{"!description":"Sets whether the items are displayed in columns.\n\nIf columns are used, the Arrow Up and Arrow Down keys navigate to the next or previous item of the column. If the first or last item of the column is reached, the next focused item is then in the next or previous column.","!static":false,"!category":"function","!type":"fn(iColumns: Number, bNoColumnChange: Boolean) -> sap.ui.core.delegate.ItemNavigation","parameters":{"iColumns":"type: int, description: Count of columns for the table mode or cycling mode","bNoColumnChange":"type: boolean, description: Forbids jumping to an other column with Arrow Up and Arrow Down keys"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.delegate.ItemNavigation.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setDisabledModifiers":{"!description":"Sets the disabled modifiers These modifiers will not be handled by the <code>ItemNavigation<\/code>\n\n<pre>\nExample: Disable shift + up handling of the <code>ItemNavigation<\/code>\n\noItemNavigation.setDisabledModifiers({\n    sapnext : [\"shift\"]\n});\n\nPossible keys are : \"shift\", \"alt\", \"ctrl\", \"meta\"\nPossible events are : \"sapnext\", \"sapprevious\", \"saphome\", \"sapend\"\n<\/pre>","!static":false,"!category":"function","!type":"fn(oDisabledModifiers: Object) -> sap.ui.core.delegate.ItemNavigation","parameters":{"oDisabledModifiers":"type: Object, description: Object that includes event type with disabled keys as an array"}},"setItemDomRefs":{"!description":"Sets the item DOM references as an array for the items","!static":false,"!category":"function","!type":"fn(aItemDomRefs: [Element]) -> sap.ui.core.delegate.ItemNavigation","parameters":{"aItemDomRefs":"type: Element[], description: Array of DOM references or DOM node list object, representing the items"}},"getRootDomRef":{"!description":"Returns the root DOM reference surrounding the items","!static":false,"!category":"function","!type":"fn() -> Element"},"setCycling":{"!description":"Sets whether the <code>ItemNavigation<\/code> should cycle through the items.\n\nIf cycling is disabled the navigation stops at the first and last item, if the corresponding arrow keys are used.","!static":false,"!category":"function","!type":"fn(bCycling: Boolean) -> sap.ui.core.delegate.ItemNavigation","parameters":{"bCycling":"type: boolean, description: Set to true if cycling should be done, else false"}},"setRootDomRef":{"!description":"Sets the root DOM reference surrounding the items","!static":false,"!category":"function","!type":"fn(oDomRef: Object) -> sap.ui.core.delegate.ItemNavigation","parameters":{"oDomRef":"type: object, description: Root DOM reference"}},"!proto":"sap.ui.base.EventProvider","!category":"class","getDisabledModifiers":{"!description":"Returns disabled modifiers These modifiers will not be handled by the <code>ItemNavigation<\/code>","!static":false,"!category":"function","!type":"fn(oDisabledModifiers: Object) -> Object","parameters":{"oDisabledModifiers":"type: object, description: Object that includes event type with disabled keys as an array"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Creates an <code>ItemNavigation<\/code> delegate that can be attached to controls requiring\ncapabilities for keyboard navigation between items.","!module":"sap/ui/core/delegate/ItemNavigation","!helpDescription":"Delegate for the navigation between DOM nodes with the keyboard.\n\nThe <code>ItemNavigation<\/code> provides keyboard and mouse navigation between DOM nodes representing items. This means that controls rendering a list of items can attach this delegate to get a common keyboard and mouse support to navigate between these items. It is possible to navigate between the items via the arrow keys. If needed, paging using the Page Up and Page Down keys is possible. (To activate call <code>setPageSize<\/code> with a value &gt; 0.) HOME and END keys are also supported. Focusing an item via mouse also is also supported. For mouse navigation, the <code>mousedown<\/code> event is used.\n\nAs the <code>ItemNavigation<\/code> works with DOM nodes, the items and the control area must be provided as DOM references. There is one root DOM reference (set via <code>setRootDomRef<\/code>). All item DOM references (set via <code>setItemDomRefs<\/code>) must be places somewhere inside of this root DOM reference. Only focusable items are used for the navigation, meaning disabled items or separator items are just ignored by navigating through the items. In some cases however, it makes sense to put the non-focusable items in the array of the DOM references to keep the indexes stable or like in the calling control. <b>Hint:<\/b> To make a DOM reference focusable a <code>tabindex<\/code> of -1 can be set.\n\n<b>Note<\/b> After re-rendering of the control or changing the DOM nodes of the control, the DOM references of the <code>ItemNavigation<\/code> must be updated. Then the same item (corresponding to the index) will get the focus.\n\nThe <code>ItemNavigation<\/code> adjusts the <code>tabindex<\/code> of all DOM references relating to the current focused item. So if the control containing the items gets the focus (e.g. via tab navigation), it is always the focused items which will be focused.\n\n<b>Note:<\/b> If the <code>ItemNavigation<\/code> is nested in another <code>ItemNavigation<\/code> (e.g. <code>SegmentedButton<\/code> in <code>Toolbar<\/code>), the <code>RootDomRef<\/code> will always have <code>tabindex<\/code> -1.\n\nPer default the <code>ItemNavigation<\/code> cycles over the items. It navigates again to the first item if the Arrow Down or Arrow Right key is pressed while the last item has the focus. It navigates to the last item if arrow up or arrow left is pressed while the first item has the focus. If you want to stop the navigation at the first and last item, call the <code>setCycling<\/code> method with a value of <code>false<\/code>.\n\nIt is possible to have multiple columns in the item navigation. If multiple columns are used, the keyboard navigation changes. The Arrow Right and Arrow Left keys will take the user to the next or previous item, and the Arrow Up and Arrow Down keys will navigate the same way but in a vertical direction.\n\nThe <code>ItemNavigation<\/code> also allows setting a selected index that is used to identify the selected item. Initially, if no other focus is set, the selected item will be the focused one. Note that navigating through the items will not change the selected item, only the focus. (For example a radio group has one selected item.)","setHomeEndColumnMode":{"!description":"Sets behavior of HOME and END keys if columns are used.","!static":false,"!category":"function","!type":"fn(bStayInRow: Boolean, bCtrlEnabled: Boolean) -> sap.ui.core.delegate.ItemNavigation","parameters":{"bCtrlEnabled":"type: boolean, description: HOME/END with CTRL -> go to first/last item of all","bStayInRow":"type: boolean, description: HOME -> go to first item in row; END -> go to last item in row"}},"setTableMode":{"!description":"Sets whether the <code>ItemNavigation<\/code> should use the table mode to navigate through the items (navigation in a grid).","!static":false,"!category":"function","!type":"fn(bTableMode: Boolean, bTableList?: Boolean) -> sap.ui.core.delegate.ItemNavigation","parameters":{"bTableMode":"type: boolean, description: Set to true if table mode should be used, else false","bTableList":"type: boolean, description: This sets a different behavior for table mode. In this mode we keep using table navigation but there are some differences. e.g. <ul> <li>Page-up moves focus to the first row, not to the first cell like in table mode<\/li> <li>Page-down moves focus to the last row, not to the last cell like in table mode<\/li> <\/ul>"}},"getItemDomRefs":{"!description":"Returns the array of item DOM references","!static":false,"!category":"function","!type":"fn() -> [Element]"},"setSelectedIndex":{"!description":"Sets the selected index if the used control supports selection.","!static":false,"!category":"function","!type":"fn(iIndex: Number) -> sap.ui.core.delegate.ItemNavigation","parameters":{"iIndex":"type: int, description: Index of the first selected item"}},"setPageSize":{"!description":"Sets the page size of the item navigation to allow Page Up and Page Down keys.","!static":false,"!category":"function","!type":"fn(iPageSize: Number) -> sap.ui.core.delegate.ItemNavigation","parameters":{"iPageSize":"type: int, description: The page size, needs to be at least 1"}}},"sap.ui.core.format.NumberFormat_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.format.NumberFormat with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.format.NumberFormat"},"sap.ui.core.util.serializer.Serializer":{"!description":"Serializer class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.Serializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.Serializer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Serializer class. Iterates over all controls and call a given serializer delegate.","!module":"sap/ui/core/util/serializer/Serializer","!helpDescription":"Serializer class.","!proto":"sap.ui.base.EventProvider","!category":"class"},"sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI_obj":{"!type":"fn(sURI: String)","prototype":"sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI"},"sap.ui.model.type.Boolean_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.Boolean"},"sap.ui.core.dnd.DropInfo":{"getDropEffect":{"!description":"Gets current value of property {@link #getDropEffect dropEffect}.\n\nDefines the visual drop effect.\n\nIn Internet Explorer, default visual drop effect is <code>Copy<\/code> and this property has no effect.\n\nDefault value is <code>Move<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.dnd.DropEffect"},"detachDragOver":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragOver dragOver} event of this <code>sap.ui.core.dnd.DropInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.core.dnd.DragDropBase","fireDragOver":{"!description":"Fires event {@link #event:dragOver dragOver} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","getDropPosition":{"!description":"Gets current value of property {@link #getDropPosition dropPosition}.\n\nDefines the position for the drop action, visualized by a rectangle.\n\nDefault value is <code>On<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.dnd.DropPosition"},"setDropLayout":{"!description":"Sets a new value for property {@link #getDropLayout dropLayout}.\n\nDefines the layout of the droppable controls if <code>dropPosition<\/code> is set to <code>Between<\/code> or <code>OnOrBetween<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Default<\/code>.","!static":false,"!category":"function","!type":"fn(sDropLayout: sap.ui.core.dnd.DropLayout) -> sap.ui.core.dnd.DropInfo","parameters":{"sDropLayout":"type: sap.ui.core.dnd.DropLayout, description: New value for property <code>dropLayout<\/code>"}},"!constructorDescription":"Constructor for a new DropInfo.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getTargetAggregation targetAggregation} : string<\/li>\n<li>{@link #getDropEffect dropEffect} : sap.ui.core.dnd.DropEffect (default: Move)<\/li>\n<li>{@link #getDropPosition dropPosition} : sap.ui.core.dnd.DropPosition (default: On)<\/li>\n<li>{@link #getDropLayout dropLayout} : sap.ui.core.dnd.DropLayout (default: Default)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:dragEnter dragEnter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:dragOver dragOver} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:drop drop} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.dnd.DragDropBase#constructor sap.ui.core.dnd.DragDropBase}\ncan be used as well.","setDropEffect":{"!description":"Sets a new value for property {@link #getDropEffect dropEffect}.\n\nDefines the visual drop effect.\n\nIn Internet Explorer, default visual drop effect is <code>Copy<\/code> and this property has no effect.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Move<\/code>.","!static":false,"!category":"function","!type":"fn(sDropEffect: sap.ui.core.dnd.DropEffect) -> sap.ui.core.dnd.DropInfo","parameters":{"sDropEffect":"type: sap.ui.core.dnd.DropEffect, description: New value for property <code>dropEffect<\/code>"}},"setDropPosition":{"!description":"Sets a new value for property {@link #getDropPosition dropPosition}.\n\nDefines the position for the drop action, visualized by a rectangle.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>On<\/code>.","!static":false,"!category":"function","!type":"fn(sDropPosition: sap.ui.core.dnd.DropPosition) -> sap.ui.core.dnd.DropInfo","parameters":{"sDropPosition":"type: sap.ui.core.dnd.DropPosition, description: New value for property <code>dropPosition<\/code>"}},"fireDrop":{"!description":"Fires event {@link #event:drop drop} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachDrop":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:drop drop} event of this <code>sap.ui.core.dnd.DropInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!description":"Provides the configuration for drop operations. <b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.dnd.DropInfo.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getDropLayout":{"!description":"Gets current value of property {@link #getDropLayout dropLayout}.\n\nDefines the layout of the droppable controls if <code>dropPosition<\/code> is set to <code>Between<\/code> or <code>OnOrBetween<\/code>.\n\nDefault value is <code>Default<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.dnd.DropLayout"},"detachDragEnter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragEnter dragEnter} event of this <code>sap.ui.core.dnd.DropInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachDrop":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:drop drop} event of this <code>sap.ui.core.dnd.DropInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DropInfo<\/code> itself.\n\nThis event is fired when an element is dropped on a valid drop target, as specified by the drag-and-drop info.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DropInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DropInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.dnd.DragDropBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setTargetAggregation":{"!description":"Sets a new value for property {@link #getTargetAggregation targetAggregation}.\n\nThe aggregation name in the drop target control which is the target of this drag-and-drop action. If undefined, the entire control is the target. This can be handy if the target control does not have any aggregations or if the drop position within the target does not matter.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sTargetAggregation: String) -> sap.ui.core.dnd.DropInfo","parameters":{"sTargetAggregation":"type: string, description: New value for property <code>targetAggregation<\/code>"}},"!module":"sap/ui/core/dnd/DropInfo","attachDragEnter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragEnter dragEnter} event of this <code>sap.ui.core.dnd.DropInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DropInfo<\/code> itself.\n\nThis event is fired when a dragged element enters a drop target.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DropInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!helpDescription":"Provides the configuration for drop operations. <b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","fireDragEnter":{"!description":"Fires event {@link #event:dragEnter dragEnter} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachDragOver":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragOver dragOver} event of this <code>sap.ui.core.dnd.DropInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DropInfo<\/code> itself.\n\nThis event is fired when an element is being dragged over a valid drop target.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DropInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DropInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getTargetAggregation":{"!description":"Gets current value of property {@link #getTargetAggregation targetAggregation}.\n\nThe aggregation name in the drop target control which is the target of this drag-and-drop action. If undefined, the entire control is the target. This can be handy if the target control does not have any aggregations or if the drop position within the target does not matter.","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.dnd.DropEffect":{"!description":"Configuration options for visual drop effects that are given during a drag and drop operation.","!module":"sap/ui/core/library","Copy":{"!description":"A copy of the source item is made at the new location.","!category":"enum","!type":"String"},"Move":{"!description":"An item is moved to a new location.","!category":"enum","!type":"String"},"!category":"static class","None":{"!description":"The item cannot be dropped.","!category":"enum","!type":"String"},"Link":{"!description":"A link is established to the source at the new location.","!category":"enum","!type":"String"}},"sap.ui.model.analytics.odata4analytics.ParameterValueSetRequest":{"!description":"Creation of URIs for fetching a query parameter value set.","includeParameterText":{"!description":"Specify which components of the parameter shall be included in the value set.","!static":false,"!category":"function","!type":"fn(bIncludeText: Boolean)","parameters":{"bIncludeText":"type: boolean, description: Indicator whether or not to include the parameter text (if available) in the value set. Pass null to keep current setting."}},"getFilterExpression":{"!description":"Get the filter expression for this request.\n\nExpressions are represented by separate objects. If none exists so far, a new expression object gets created.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.FilterExpression"},"!proto":"sap.ui.base.Object","!category":"class","setFilterExpression":{"!description":"Set the filter expression for this request.\n\nExpressions are represented by separate objects. Calling this method replaces the filter object maintained by this request.","!static":false,"!category":"function","!type":"fn(oFilter: sap.ui.model.analytics.odata4analytics.FilterExpression)","parameters":{"oFilter":"type: sap.ui.model.analytics.odata4analytics.FilterExpression, description: The filter object to be associated with this request."}},"setSortExpression":{"!description":"Set the sort expression for this request.\n\nExpressions are represented by separate objects. Calling this method replaces the sort object maintained by this request.","!static":false,"!category":"function","!type":"fn(oSorter: sap.ui.model.analytics.odata4analytics.SortExpression)","parameters":{"oSorter":"type: sap.ui.model.analytics.odata4analytics.SortExpression, description: The sort object to be associated with this request."}},"!constructorDescription":"Create a request object for interaction with a query parameter value help.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Creation of URIs for fetching a query parameter value set.","getURIQueryOptionValue":{"!description":"Get the value of a query option for the OData request URI corresponding to this request.","!static":false,"!category":"function","!type":"fn(sQueryOptionName: String) -> String","parameters":{"sQueryOptionName":"type: String, description: Identifies the query option: $select, $filter,... or any custom query option"}},"getURIToParameterValueSetEntries":{"!description":"Get the unescaped URI to fetch the parameter value set.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String) -> String","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"getSortExpression":{"!description":"Get the sort expression for this request.\n\nExpressions are represented by separate objects. If none exists so far, a new expression object gets created.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.SortExpression"}},"sap.ui.model.odata.ODataMetaModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataMetaModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oMetadata: sap.ui.model.odata.ODataMetadata, oAnnotations?: sap.ui.model.odata.ODataAnnotations, oODataModelInterface?: Object)","prototype":"sap.ui.model.odata.ODataMetaModel"},"sap.ui.model.odata.v2.ODataTreeBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataTreeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, aApplicationFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter])","prototype":"sap.ui.model.odata.v2.ODataTreeBinding"},"sap.ui.core.dnd.DragInfo_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DragInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.dnd.DragDropBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.dnd.DragInfo"},"sap.ui.model.ClientTreeBindingAdapter":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!constructorDescription":"Adapter for TreeBindings to add the ListBinding functionality and use the\ntree structure in list based controls.","!module":"sap/ui/model/ClientTreeBindingAdapter","!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.CSSSizeShortHand":{"!description":"This type checks the short hand form of a margin or padding definition.\n\nE.g. \"1px 1px\" or up to four CSSSize values are allowed or tHe special keyword <code>inherit<\/code>.","!module":"sap/ui/core/library","!helpDescription":"This type checks the short hand form of a margin or padding definition.\n\nE.g. \"1px 1px\" or up to four CSSSize values are allowed or tHe special keyword <code>inherit<\/code>.","!category":"namespace"},"sap.ui.core.Locale":{"!description":"Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.","getLanguage":{"!description":"Get the locale language.\n\nNote that the case might differ from the original script tag (Lower case is enforced as recommended by BCP47/ISO639).","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Locale.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getExtension":{"!description":"Get the locale extension as a single string or <code>null<\/code>.\n\nThe extension always consists of a singleton character (not 'x'), a dash '-' and one or more extension token, each separated again with a dash.\n\nUse {@link #getExtensions} to get the individual extension tokens as an array.","!static":false,"!category":"function","!type":"fn() -> String"},"getExtensionSubtags":{"!description":"Get the locale extensions as an array of tokens.\n\nThe leading singleton and the separating dashes are not part of the result. If there is no extensions section in the locale tag, an empty array is returned.","!static":false,"!category":"function","!type":"fn() -> [String]"},"getVariant":{"!description":"Get the locale variants as a single string or <code>null<\/code>.\n\nMultiple variants are separated by a dash '-'.","!static":false,"!category":"function","!type":"fn() -> String"},"getVariantSubtags":{"!description":"Get the locale variants as an array of individual variants.\n\nThe separating dashes are not part of the result. If there is no variant section in the locale tag, an empty array is returned.","!static":false,"!category":"function","!type":"fn() -> [String]"},"!proto":"sap.ui.base.Object","!category":"class","getPrivateUseSubtags":{"!description":"Get the locale private use section as an array of tokens.\n\nThe leading singleton and the separating dashes are not part of the result. If there is no private use section in the locale tag, an empty array is returned.","!static":false,"!category":"function","!type":"fn() -> [String]"},"getSAPLogonLanguage":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44 use {@link sap.ui.core.Configuration#getSAPLogonLanguage} instead as that class allows to configure an SAP Logon language.<br>Best guess to get a proper SAP Logon Language for this locale.\n\nConversions taken into account: <ul> <li>use the language part only<\/li> <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')<\/li> <li>for Chinese, map 'Traditional Chinese' to SAP proprietary code 'zf'<\/li> <li>map private extensions x-sap1q and x-sap2q to SAP pseudo languages '1Q' and '2Q'<\/li> <li>remove ext. language sub tags<\/li> <li>convert to uppercase<\/li> <\/ul>\n\nNote that the conversion also returns a result for languages that are not supported by the default set of SAP languages. This method has no knowledge about the concrete languages of any given backend system.","!static":false,"!category":"function","!type":"fn() -> String"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Locale with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Creates an instance of the Locale.","!module":"sap/ui/core/Locale","getPrivateUse":{"!description":"Get the locale private use section or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!helpDescription":"Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section.","getRegion":{"!description":"Get the locale region or <code>null<\/code> if none was specified.\n\nNote that the case might differ from the original script tag (Upper case is enforced as recommended by BCP47/ISO3166-1).","!static":false,"!category":"function","!type":"fn() -> String"},"getScript":{"!description":"Get the locale script or <code>null<\/code> if none was specified.\n\nNote that the case might differ from the original language tag (Upper case first letter and lower case reminder enforced as recommended by BCP47/ISO15924)","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.test.OpaBuilder.Matchers":{"some":{"!description":"Creates a matcher that checks for at least one successful match from a group of matchers.","!static":"true","!category":"function","!type":"fn(aMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"labelFor":{"!description":"Creates a {@link sap.ui.test.matchers.LabelFor} matcher.","!static":"true","!category":"function","!type":"fn(sPropertyName: String, bText?: Boolean, sModelTokenPathOrText: String, aParameters?: [Object]) -> Object"},"aggregationAtIndex":{"!description":"Creates a matcher function that returns an aggregation element of a control at a given index.","!static":"true","!category":"function","!type":"fn(sAggregationName: String, iIndex: Number) -> fn()"},"conditional":{"!description":"Creates a matcher that checks states for given conditions.","!static":"true","!category":"function","!type":"fn(vConditions: sap.ui.test.matchers.Matcher | fn() | Array | Object, vSuccessMatcher: sap.ui.test.matchers.Matcher | fn() | Array | Object, vElseMatcher?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"!category":"namespace","aggregation":{"!description":"Creates a matcher function that returns all aggregation items fulfilling given matcher(s). The result will always be an array, even if it is a non-multiple aggregation.","!static":"true","!category":"function","!type":"fn(sAggregationName: String, vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"customData":{"!description":"Creates a matcher that checks whether a control has all given custom data.","!static":"true","!category":"function","!type":"fn(oCustomData: Object) -> fn()"},"descendant":{"!description":"Creates a declarative matcher definition for {@link sap.ui.test.matchers.Descendant}.","!static":"true","!category":"function","!type":"fn(vDescendent: Object | String, bDirect?: Boolean) -> Object"},"not":{"!description":"Creates a matcher function which is negating the result of provided matchers. The matcher function returns a boolean value but never a control.\n\nExample usage for only matching controls without a certain text: <code> <pre>new OpaBuilder().hasType(\"sap.m.Text\").has(\n             OpaBuilder.Matchers.not(\n                 OpaBuilder.Matchers.properties({ text: \"Ignore controls with this text\"})\n            )\n        );\n    <\/pre> <\/code>","!static":"true","!category":"function","!type":"fn(vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"resourceBundle":{"!description":"Creates a matcher that validates the given property against a token text of a library message bundle.","!static":"true","!category":"function","!type":"fn(sPropertyName: String, sLibrary: String, sToken: String, aParameters?: [String]) -> fn()"},"children":{"!description":"Creates a matcher function that returns all children fulfilling given matcher(s). The result will always be an array, even if only one child was found.","!static":"true","!category":"function","!type":"fn(vBuilderOrMatcher?: sap.ui.test.matchers.Matcher | fn() | Array | Object | sap.ui.test.OpaBuilder, bDirect?: Boolean) -> fn()"},"!description":"A collection of predefined matchers. See also {@link sap.ui.test.matchers}","aggregationMatcher":{"!description":"Checks whether at least one aggregation item fulfills given matcher(s).","!static":"true","!category":"function","!type":"fn(sAggregationName: String, vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"bindingProperties":{"!description":"Creates a matcher that checks whether the bound context has the given properties.","!static":"true","!category":"function","!type":"fn(sModelName: String, oProperties: Object) -> fn()"},"ancestor":{"!description":"Creates a declarative matcher definition for {@link sap.ui.test.matchers.Ancestor}.","!static":"true","!category":"function","!type":"fn(vAncestor: Object | String, bDirect?: Boolean) -> Object"},"match":{"!description":"Creates a matcher that checks a single input against all defined matchers.","!static":"true","!category":"function","!type":"fn(vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"TRUE":{"!description":"A matcher function that always returns <code>true<\/code>.\n\n<code> <pre>var fnTruthyMatcher = OpaBuilder.Matchers.TRUE;<\/pre> <\/code>","!category":"enum","!type":"fn()"},"i18n":{"!description":"Creates a {@link sap.ui.test.matchers.I18NText} matcher.","!static":"true","!category":"function","!type":"fn(sPropertyName: String, sModelTokenPath: String, aParameters?: [String]) -> Object"},"aggregationLength":{"!description":"Creates a {@link sap.ui.test.matchers.AggregationLengthEquals} matcher.","!static":"true","!category":"function","!type":"fn(sAggregationName: String, iLength: Number) -> Object"},"filter":{"!description":"Creates a matcher that checks all inputs against given matchers. The input can be an array or a single element. The result will always be an array. If the input is a single element, the result will be an array containing the given element (or empty if not matching the matchers).","!static":"true","!category":"function","!type":"fn(vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> fn()"},"!module":"sap/ui/test/OpaBuilder","!helpDescription":"A collection of predefined matchers. See also {@link sap.ui.test.matchers}","childrenMatcher":{"!description":"Creates a matcher function that checks whether one children fulfilling given matcher(s).","!static":"true","!category":"function","!type":"fn(vBuilderOrMatcher?: sap.ui.test.matchers.Matcher | fn() | Array | Object | sap.ui.test.OpaBuilder, bDirect?: Boolean) -> fn()"},"bindingPath":{"!description":"Creates a {@link sap.ui.test.matchers.BindingPath} matcher.","!static":"true","!category":"function","!type":"fn(sModelPropertyPath: String, sPropertyPath: String) -> Object"},"focused":{"!description":"Creates a matcher that checks whether a control has the focus.","!static":"true","!category":"function","!type":"fn(bCheckChildren?: Boolean) -> fn()"},"FALSE":{"!description":"A matcher function that always returns <code>false<\/code>.\n\n<code> <pre>var fnFalsyMatcher = OpaBuilder.Matchers.FALSE;<\/pre> <\/code>","!category":"enum","!type":"fn()"},"properties":{"!description":"Creates a {@link sap.ui.test.matchers.Properties} matcher.","!static":"true","!category":"function","!type":"fn(oProperties: Object) -> Object"}},"sap.ui.test.matchers.Matcher_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.Matcher with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.matchers.Matcher"},"sap.ui.core.Locale_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Locale with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sLocaleId: String)","prototype":"sap.ui.core.Locale"},"sap.ui.base":{"!description":"SAPUI5 base classes","Metadata":"sap.ui.base.Metadata_obj","!category":"namespace","ManagedObjectObserver":"sap.ui.base.ManagedObjectObserver_obj","Poolable":"sap.ui.base.Poolable","ManagedObjectMetadata":"sap.ui.base.ManagedObjectMetadata_obj","!module":"sap/ui/base/Object","!helpDescription":"SAPUI5 base classes","EventProvider":"sap.ui.base.EventProvider_obj","DataType":"sap.ui.base.DataType_obj","Event":"sap.ui.base.Event_obj","Object":"sap.ui.base.Object_obj","ManagedObject":"sap.ui.base.ManagedObject_obj","ObjectPool":"sap.ui.base.ObjectPool_obj","Interface":"sap.ui.base.Interface_obj"},"module:sap/base/Log.Level":{"!description":"Enumeration of the configurable log levels that a Logger should persist to the log.\n\nOnly if the current LogLevel is higher than the level {@link module:sap/base/Log.Level} of the currently added log entry, then this very entry is permanently added to the log. Otherwise it is ignored.","TRACE":{"!description":"Trace level. Use this for tracing the program flow.","!category":"enum","!type":"Number"},"ALL":{"!description":"Trace level to log everything.","!category":"enum","!type":"Number"},"!module":"sap/base/Log","!category":"static class","ERROR":{"!description":"Error level. Use this for logging of erroneous but still recoverable situations","!category":"enum","!type":"Number"},"INFO":{"!description":"Info level. Use this for logging information of purely informative nature","!category":"enum","!type":"Number"},"NONE":{"!description":"Do not log anything","!category":"enum","!type":"Number"},"DEBUG":{"!description":"Debug level. Use this for logging information necessary for debugging","!category":"enum","!type":"Number"},"FATAL":{"!description":"Fatal level. Use this for logging unrecoverable situations","!category":"enum","!type":"Number"},"WARNING":{"!description":"Warning level. Use this for logging unwanted but foreseen situations","!category":"enum","!type":"Number"}},"sap.ui.core.search.SearchProvider":{"!description":"Abstract base class for all SearchProviders which can be e.g. attached to a SearchField.\n\nDo not create instances of this class, but use a concrete subclass instead.","extend":{"!description":"Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setIcon":{"!description":"Sets a new value for property {@link #getIcon icon}.\n\nIcon of the Search Provider\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIcon: String) -> sap.ui.core.search.SearchProvider","parameters":{"sIcon":"type: string, description: New value for property <code>icon<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.search.SearchProvider.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new search/SearchProvider.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getIcon icon} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/search/SearchProvider","!helpDescription":"Abstract base class for all SearchProviders which can be e.g. attached to a SearchField.\n\nDo not create instances of this class, but use a concrete subclass instead.","!proto":"sap.ui.core.Element","!category":"class","suggest":{"!description":"Call this function to get suggest values from the search provider. The given callback function is called with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]', 2nd parameter).","!static":false,"!category":"function","!type":"fn(sValue: String, fnCallback: fn())","parameters":{"sValue":"type: string, description: The value for which suggestions are requested.","fnCallback":"type: function, description: The callback function which is called when the suggestions are available."}},"getIcon":{"!description":"Gets current value of property {@link #getIcon icon}.\n\nIcon of the Search Provider","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.TextDirection":{"!description":"Configuration options for the direction of texts.","!module":"sap/ui/core/library","!category":"static class","LTR":{"!description":"Specifies left-to-right text direction.","!category":"enum","!type":"String"},"RTL":{"!description":"Specifies right-to-left text direction.","!category":"enum","!type":"String"},"Inherit":{"!description":"Inherits the direction from its parent control/container.","!category":"enum","!type":"String"}},"sap.ui.model.odata.v2.ODataModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(serviceUrl: String | Object, mParameters?: Object)","prototype":"sap.ui.model.odata.v2.ODataModel"},"sap.ui.core.mvc.ControllerExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.ControllerExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.mvc.ControllerExtension"},"module:sap/ui/dom/jquery/Focusable":{"!description":"This module provides the following API: <ul> <li>{@link jQuery#firstFocusableDomRef}<\/li> <li>{@link jQuery#lastFocusableDomRef}<\/li> <ul>","module:sap/ui/dom/jquery/Focusable":"module:sap/ui/dom/jquery/Focusable","!module":"sap/ui/dom/jquery/Focusable","!helpDescription":"This module provides the following API: <ul> <li>{@link jQuery#firstFocusableDomRef}<\/li> <li>{@link jQuery#lastFocusableDomRef}<\/li> <ul>","!category":"namespace"},"sap.ui.model.analytics.AnalyticalTreeBindingAdapter":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!constructorDescription":"Adapter for TreeBindings to add the ListBinding functionality and use the\ntree structure in list based controls.","!module":"sap/ui/model/analytics/AnalyticalTreeBindingAdapter","getNumberOfExpandedLevels":{"!description":"Retrieves the currently set number of expanded levels from the Binding (commonly an AnalyticalBinding).","!static":false,"!category":"function","!type":"fn() -> Number"},"setNumberOfExpandedLevels":{"!description":"Sets the number of expanded levels on the TreeBinding (commonly an AnalyticalBinding). This is NOT the same as AnalyticalTreeBindingAdapter#collapse or AnalyticalTreeBindingAdapter#expand. Setting the number of expanded levels leads to different requests. This function is used by the AnalyticalTable for the ungroup/ungroup-all feature.","!static":false,"!category":"function","!type":"fn(iLevels: Number)","parameters":{"iLevels":"type: int, description: the number of levels which should be expanded, minimum is 0"}},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.base.Object","!category":"class","hasTotaledMeasures":{"!description":"Checks if the AnalyticalBinding has totaled measures available. Used for rendering sum rows.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.core.dnd.DragDropBase":{"!description":"Provides the base class for all drag-and-drop configurations. This feature enables a native HTML5 drag-and-drop API for the controls, therefore it is limited to browser support. <h3>Limitations<\/h3> <ul> <li>There is no mobile device that supports drag and drop.<\/li> <li>There is no accessible alternative for drag and drop. Applications which use the drag-and-drop functionality must provide an accessible alternative UI (for example, action buttons or menus) to perform the same operations.<\/li> <li>A custom dragging ghost element is not possible in Internet Explorer.<\/li> <li>Transparency of the drag ghost element and the cursor during drag-and-drop operations depends on the browser implementation.<\/li> <li>Internet Explorer does only support plain text MIME type for the DataTransfer Object.<\/li> <li>In Internet Explorer, default visual drop effect is <code>copy<\/code> and <code>dropEffect<\/code> property of the <code>DropInfo<\/code> has no effect. <li>Constraining a drag position is not possible, therefore there is no snap-to-grid or snap-to-element feature possible.<\/li> <li>Texts in draggable controls cannot be selected.<\/li> <li>The text of input fields in draggable controls can be selected, but not dragged.<\/li> <\/ul>","extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DragDropBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getGroupName":{"!description":"Gets current value of property {@link #getGroupName groupName}.\n\nDefines the name of the group to which this object belongs. If <code>groupName<\/code> is specified, then this object will only interacts with other drag-and-drop objects within the same group.","!static":false,"!category":"function","!type":"fn() -> String"},"setEnabled":{"!description":"Sets a new value for property {@link #getEnabled enabled}.\n\nIndicates whether this configuration is active or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bEnabled: Boolean) -> sap.ui.core.dnd.DragDropBase","parameters":{"bEnabled":"type: boolean, description: New value for property <code>enabled<\/code>"}},"setGroupName":{"!description":"Sets a new value for property {@link #getGroupName groupName}.\n\nDefines the name of the group to which this object belongs. If <code>groupName<\/code> is specified, then this object will only interacts with other drag-and-drop objects within the same group.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sGroupName: String) -> sap.ui.core.dnd.DragDropBase","parameters":{"sGroupName":"type: string, description: New value for property <code>groupName<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.dnd.DragDropBase.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new DragDropBase.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getGroupName groupName} : string<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/dnd/DragDropBase","!helpDescription":"Provides the base class for all drag-and-drop configurations. This feature enables a native HTML5 drag-and-drop API for the controls, therefore it is limited to browser support. <h3>Limitations<\/h3> <ul> <li>There is no mobile device that supports drag and drop.<\/li> <li>There is no accessible alternative for drag and drop. Applications which use the drag-and-drop functionality must provide an accessible alternative UI (for example, action buttons or menus) to perform the same operations.<\/li> <li>A custom dragging ghost element is not possible in Internet Explorer.<\/li> <li>Transparency of the drag ghost element and the cursor during drag-and-drop operations depends on the browser implementation.<\/li> <li>Internet Explorer does only support plain text MIME type for the DataTransfer Object.<\/li> <li>In Internet Explorer, default visual drop effect is <code>copy<\/code> and <code>dropEffect<\/code> property of the <code>DropInfo<\/code> has no effect. <li>Constraining a drag position is not possible, therefore there is no snap-to-grid or snap-to-element feature possible.<\/li> <li>Texts in draggable controls cannot be selected.<\/li> <li>The text of input fields in draggable controls can be selected, but not dragged.<\/li> <\/ul>","getEnabled":{"!description":"Gets current value of property {@link #getEnabled enabled}.\n\nIndicates whether this configuration is active or not.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.core.Element","!category":"class"},"sap.ui.model.odata.v4.Context_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.Context with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.odata.v4.Context"},"sap.ui.core.message":{"MessageManager":"sap.ui.core.message.MessageManager_obj","MessageParser":"sap.ui.core.message.MessageParser_obj","ControlMessageProcessor":"sap.ui.core.message.ControlMessageProcessor_obj","Message":"sap.ui.core.message.Message_obj","!module":"sap/ui/core/message/MessageProcessor","MessageProcessor":"sap.ui.core.message.MessageProcessor_obj","!category":"namespace"},"sap.ui.test.actions.Drop":{"!description":"The <code>Drop<\/code> action is used to simulate drop on a control. The control should be droppable, as defined by its dnd aggregation configuration. The dropped control should be defined in a preceding {@link sap.ui.test.actions.Drag} action.\n\nThe <code>Drop<\/code> action targets a special DOM element representing the control. This DOM element can be customized.\n\nFor most most controls, the target will be the DOM focus reference. You can choose a different DOM element by specifying its ID suffix. You can do this by directly passing the ID suffix to the Drop constructor, or by defining a control adapter function. You can also set the traget to be the root DOM element of a given aggregation, by specifying the aggregation name in the Drop constructor.\n\n* The <code>Drop<\/code> action is not supported in IE11!","getAfter":{"!description":"Gets current value of property {@link #getAfter after}.\n\nSet `after` to true, to drop the source immediately before the target element.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.actions.Drop.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getBefore":{"!description":"Gets current value of property {@link #getBefore before}.\n\nspecify a position for the drop event, relative to the position of the control's representative DOM element. This makes sense only for the case when dropping right on top of the DOM element makes no sense, and instead, the drop should happen right before or after the element. e.g. sap.m.IconTabBar. Default position is \"center\", meaning the drop will be directly on the element. Set `before` to true, to drop the source immediately before the target element.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setBefore":{"!description":"Sets a new value for property {@link #getBefore before}.\n\nspecify a position for the drop event, relative to the position of the control's representative DOM element. This makes sense only for the case when dropping right on top of the DOM element makes no sense, and instead, the drop should happen right before or after the element. e.g. sap.m.IconTabBar. Default position is \"center\", meaning the drop will be directly on the element. Set `before` to true, to drop the source immediately before the target element.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bBefore: Boolean) -> sap.ui.test.actions.Drop","parameters":{"bBefore":"type: boolean, description: New value for property <code>before<\/code>"}},"!proto":"sap.ui.test.actions.Action","setAfter":{"!description":"Sets a new value for property {@link #getAfter after}.\n\nSet `after` to true, to drop the source immediately before the target element.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(bAfter: Boolean) -> sap.ui.test.actions.Drop","parameters":{"bAfter":"type: boolean, description: New value for property <code>after<\/code>"}},"!category":"class","getAggregationName":{"!description":"Gets current value of property {@link #getAggregationName aggregationName}.\n\nname of the droppable aggregation, whose root to use as drop target. This makes sense only for some controls, where this root DOM element is droppable.","!static":false,"!category":"function","!type":"fn() -> String"},"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Drop with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAggregationName aggregationName} : string<\/li>\n<li>{@link #getBefore before} : boolean<\/li>\n<li>{@link #getAfter after} : boolean<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.actions.Action#constructor sap.ui.test.actions.Action}\ncan be used as well.","!module":"sap/ui/test/actions/Drop","!helpDescription":"The <code>Drop<\/code> action is used to simulate drop on a control. The control should be droppable, as defined by its dnd aggregation configuration. The dropped control should be defined in a preceding {@link sap.ui.test.actions.Drag} action.\n\nThe <code>Drop<\/code> action targets a special DOM element representing the control. This DOM element can be customized.\n\nFor most most controls, the target will be the DOM focus reference. You can choose a different DOM element by specifying its ID suffix. You can do this by directly passing the ID suffix to the Drop constructor, or by defining a control adapter function. You can also set the traget to be the root DOM element of a given aggregation, by specifying the aggregation name in the Drop constructor.\n\n* The <code>Drop<\/code> action is not supported in IE11!","setAggregationName":{"!description":"Sets a new value for property {@link #getAggregationName aggregationName}.\n\nname of the droppable aggregation, whose root to use as drop target. This makes sense only for some controls, where this root DOM element is droppable.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sAggregationName: String) -> sap.ui.test.actions.Drop","parameters":{"sAggregationName":"type: string, description: New value for property <code>aggregationName<\/code>"}}},"sap.ui.test.OpaPlugin_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.OpaPlugin with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.OpaPlugin"},"sap.ui.core.ScrollBarAction":{"!description":"Actions are: Click on track, button, drag of thumb, or mouse wheel click.","!module":"sap/ui/core/library","Drag":{"!description":"Scrolling done by dragging the scroll bar's paint thumb","!category":"enum","!type":"String"},"!category":"static class","Page":{"!description":"Range scrolling caused by clicking track area or using page up or page down key.","!category":"enum","!type":"String"},"MouseWheel":{"!description":"Scrolling done by mouse wheel","!category":"enum","!type":"String"},"Step":{"!description":"Single step scrolling caused by clicking an arrow button or arrow key.","!category":"enum","!type":"String"}},"sap.ui.model.odata.AnnotationHelper":{"!description":"A collection of methods which help to consume <a href=\"http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html\"> OData V4 annotations<\/a> in XML template views. Every context argument must belong to a <code>sap.ui.model.odata.ODataMetaModel<\/code> instance.\n\nFormatter functions like {@link #.format format} and {@link #.simplePath simplePath} can be used in complex bindings to turn OData V4 annotations into texts or data bindings, e.g. <code>&lt;sfi:SmartField value=\"{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}\"/><\/code>.\n\nHelper functions like {@link #.resolvePath resolvePath} can be used by template instructions in XML template views, e.g. <code>&lt;template:with path=\"meta>Value\" helper=\"sap.ui.model.odata.AnnotationHelper.resolvePath\" var=\"target\"><\/code>.\n\nSince 1.31.0, you DO NOT need to {@link jQuery.sap.require} this module before use.","gotoEntityType":{"!description":"Helper function for a <code>template:with<\/code> instruction that goes to the entity type with the qualified name which <code>oContext<\/code> points at.\n\nExample: Assume that \"entitySet\" refers to an entity set within an OData meta model; the helper function is then called on the \"entityType\" property of that entity set (which holds the qualified name of the entity type) and in turn the path of that entity type is assigned to the variable \"entityType\". <pre>\n  &lt;template:with path=\"entitySet>entityType\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntityType\" var=\"entityType\">\n<\/pre>","!static":"true","!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> String"},"getNavigationPath":{"!description":"A formatter function to be used in a complex binding inside an XML template view in order to interpret OData V4 annotations. It knows about the following dynamic expressions: <ul> <li>\"14.5.2 Expression edm:AnnotationPath\"<\/li> <li>\"14.5.11 Expression edm:NavigationPropertyPath\"<\/li> <li>\"14.5.12 Expression edm:Path\"<\/li> <li>\"14.5.13 Expression edm:PropertyPath\"<\/li> <\/ul> It returns a binding expression for a navigation path in an OData model, starting at an entity. Currently supports navigation properties. Term casts and annotations of navigation properties terminate the navigation path.\n\nExamples: <pre>\n&lt;template:if test=\"{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}\">\n    &lt;form:SimpleForm binding=\"{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}\" />\n&lt;/template:if>\n<\/pre>","!static":"true","!category":"function","!type":"fn(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: Object) -> String"},"format":{"!description":"A formatter function to be used in a complex binding inside an XML template view in order to interpret OData V4 annotations. It knows about <ul> <li> the \"14.4 Constant Expressions\" for \"edm:Bool\", \"edm:Date\", \"edm:DateTimeOffset\", \"edm:Decimal\", \"edm:Float\", \"edm:Guid\", \"edm:Int\", \"edm:TimeOfDay\". <li> the constant \"14.4.11 Expression edm:String\": This is turned into a fixed text (e.g. <code>\"Width\"<\/code>) or into a data binding expression (e.g. <code> \"{/##/dataServices/schema/0/entityType/1/com.sap.vocabularies.UI.v1.FieldGroup#Dimensions/Data/0/Label/String}\" <\/code>). Data binding expressions are used in case XML template processing has been started with the setting <code>bindTexts : true<\/code>. The purpose is to reference translatable texts from OData V4 annotations, especially for XML template processing at design time. Since 1.31.0, string constants that contain a simple binding <code>\"{@i18n>...}\"<\/code> to the hard-coded model name \"@i18n\" with arbitrary path are not turned into a fixed text, but kept as a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization. <li> the dynamic \"14.5.1 Comparison and Logical Operators\": These are turned into expression bindings to perform the operations at run-time. <li> the dynamic \"14.5.3 Expression edm:Apply\": <ul> <li> \"14.5.3.1.1 Function odata.concat\": This is turned into a data binding expression relative to an entity. <li> \"14.5.3.1.2 Function odata.fillUriTemplate\": This is turned into an expression binding to fill the template at run-time. <li> \"14.5.3.1.3 Function odata.uriEncode\": This is turned into an expression binding to encode the parameter at run-time. <li> Apply functions may be nested arbitrarily. <\/ul> <li> the dynamic \"14.5.6 Expression edm:If\": This is turned into an expression binding to be evaluated at run-time. The expression is a conditional expression like <code>\"{=condition ? expression1 : expression2}\"<\/code>. <li> the dynamic \"14.5.10 Expression edm:Null\": This is turned into a <code>null<\/code> value. In <code>odata.concat<\/code> it is ignored. <li> the dynamic \"14.5.12 Expression edm:Path\" and \"14.5.13 Expression edm:PropertyPath\": This is turned into a data binding relative to an entity, including type information and constraints as available from metadata, e.g. <code>\"{path : 'Name', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'255'}}\"<\/code>. Depending on the used type, some additional constraints of this type are set: <ul> <li>Edm.DateTime: The \"displayFormat\" constraint is set to the value of the \"sap:display-format\" annotation of the referenced property. <li>Edm.Decimal: The \"precision\" and \"scale\" constraints are set to the values of the corresponding attributes of the referenced property. The \"minimum\", \"maximum\", \"minimumExclusive\" and \"maximumExlusive\" constraints are set to the values of the corresponding \"Org.OData.Validation.V1\" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. <li>Edm.String: The \"maxLength\" constraint is set to the value of the corresponding attribute of the referenced property and the \"isDigitSequence\" constraint is set to the value of the \"com.sap.vocabularies.Common.v1.IsDigitSequence\" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. <\/ul> <\/ul> Unsupported or incorrect values are turned into a string nevertheless, but indicated as such. Proper escaping is used to make sure that data binding syntax is not corrupted. An error describing the problem is logged to the console in such a case.\n\nExample: <pre>\n&lt;Text text=\"{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}\" />\n<\/pre>","!static":"true","!category":"function","!type":"fn(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: Object) -> String"},"!category":"namespace","isMultiple":{"!description":"A formatter function to be used in a complex binding inside an XML template view in order to interpret OData V4 annotations. It knows about the following dynamic expressions: <ul> <li>\"14.5.2 Expression edm:AnnotationPath\"<\/li> <li>\"14.5.11 Expression edm:NavigationPropertyPath\"<\/li> <li>\"14.5.12 Expression edm:Path\"<\/li> <li>\"14.5.13 Expression edm:PropertyPath\"<\/li> <\/ul> It returns the information whether the navigation path ends with an association end with multiplicity \"*\". It throws an error if the navigation path has an association end with multiplicity \"*\" which is not the last one. Currently supports navigation properties. Term casts and annotations of navigation properties terminate the navigation path.\n\nExamples: <pre>\n&lt;template:if test=\"{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.isMultiple'}\">\n<\/pre>","!static":"true","!category":"function","!type":"fn(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: Object) -> String"},"createPropertySetting":{"!description":"Creates a property setting (which is either a constant value or a binding info object) from the given parts and from the optional root formatter function. Each part can have one of the following types: <ul> <li><code>boolean<\/code>, <code>number<\/code>, <code>undefined<\/code>: The part is a constant value.\n\n<li><code>string<\/code>: The part is a data binding expression with complex binding syntax (for example, as created by {@link #.format format}) and is parsed accordingly to create either a constant value or a binding info object. Proper backslash escaping must be used for constant values with curly braces.\n\n<li><code>object<\/code>: The part is a binding info object if it has a \"path\" or \"parts\" property, otherwise it is a constant value. <\/ul> If a binding info object is not the only part and has a \"parts\" property itself, then it must have no other properties except \"formatter\"; this is the case for expression bindings and data binding expressions created by {@link #.format format}.\n\nIf all parts are constant values, the resulting property setting is also a constant value computed by applying the root formatter function to the constant parts once. If at least one part is a binding info object, the resulting property setting is also a binding info object and the root formatter function will be applied again and again to the current values of all parts, no matter whether constant or variable.\n\nNote: The root formatter function should not rely on its <code>this<\/code> value because it depends on how the function is called.\n\nNote: A single data binding expression can be given directly to {@link sap.ui.base.ManagedObject#applySettings applySettings}, no need to call this function first.\n\nExample: <pre>\nfunction myRootFormatter(oValue1, oValue2, sFullName, sGreeting, iAnswer) {\n    return ...; //TODO compute something useful from the given values\n}\n\noSupplierContext = oMetaModel.getMetaContext(\"/ProductSet('HT-1021')/ToSupplier\");\noValueContext = oMetaModel.createBindingContext(\"com.sap.vocabularies.UI.v1.DataPoint/Value\", oSupplierContext);\n\nvPropertySetting =  sap.ui.model.odata.AnnotationHelper.createPropertySetting([\n    sap.ui.model.odata.AnnotationHelper.format(oValueContext),\n    \"{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}\",\n    \"{:= 'Mr. ' + ${/FirstName} + ' ' + ${/LastName}}\",\n    \"hello, world!\",\n    42\n], myRootFormatter);\n\noControl.applySettings({\"someProperty\" : vPropertySetting});\n<\/pre>","!static":"true","!category":"function","!type":"fn(aParts: [Object], fnRootFormatter?: fn()) -> Object | Object"},"gotoFunctionImport":{"!description":"Helper function for a <code>template:with<\/code> instruction that goes to the function import with the name which <code>oContext<\/code> points at.\n\nExample: Assume that \"dataField\" refers to a DataFieldForAction within an OData meta model; the helper function is then called on the \"Action\" property of that data field (which holds an object with the qualified name of the function import in the <code>String<\/code> property) and in turn the path of that function import is assigned to the variable \"function\". <pre>\n  &lt;template:with path=\"dataField>Action\"\n  helper=\"sap.ui.model.odata.AnnotationHelper.gotoFunctionImport\" var=\"function\">\n<\/pre>","!static":"true","!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> String"},"resolvePath":{"!description":"Helper function for a <code>template:with<\/code> instruction that resolves a dynamic \"14.5.2 Expression edm:AnnotationPath\", \"14.5.11 Expression edm:NavigationPropertyPath\", \"14.5.12 Expression edm:Path\" or \"14.5.13 Expression edm:PropertyPath\". Currently supports navigation properties and term casts.\n\nExample: <pre>\n  &lt;template:with path=\"meta>Value\" helper=\"sap.ui.model.odata.AnnotationHelper.resolvePath\" var=\"target\">\n<\/pre>","!static":"true","!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> String"},"!module":"sap/ui/model/odata/AnnotationHelper","!helpDescription":"A collection of methods which help to consume <a href=\"http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html\"> OData V4 annotations<\/a> in XML template views. Every context argument must belong to a <code>sap.ui.model.odata.ODataMetaModel<\/code> instance.\n\nFormatter functions like {@link #.format format} and {@link #.simplePath simplePath} can be used in complex bindings to turn OData V4 annotations into texts or data bindings, e.g. <code>&lt;sfi:SmartField value=\"{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}\"/><\/code>.\n\nHelper functions like {@link #.resolvePath resolvePath} can be used by template instructions in XML template views, e.g. <code>&lt;template:with path=\"meta>Value\" helper=\"sap.ui.model.odata.AnnotationHelper.resolvePath\" var=\"target\"><\/code>.\n\nSince 1.31.0, you DO NOT need to {@link jQuery.sap.require} this module before use.","gotoEntitySet":{"!description":"Helper function for a <code>template:with<\/code> instruction that depending on how it is called goes to the entity set with the given name or to the one determined by the last navigation property. Supports the following dynamic expressions: <ul> <li>\"14.5.2 Expression edm:AnnotationPath\"<\/li> <li>\"14.5.11 Expression edm:NavigationPropertyPath\"<\/li> <li>\"14.5.12 Expression edm:Path\"<\/li> <li>\"14.5.13 Expression edm:PropertyPath\"<\/li> <\/ul>\n\nExample: <pre>\n  &lt;template:with path=\"facet>Target\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntitySet\" var=\"entitySet\"/>\n  &lt;template:with path=\"associationSetEnd>entitySet\" helper=\"sap.ui.model.odata.AnnotationHelper.gotoEntitySet\" var=\"entitySet\"/>\n<\/pre>","!static":"true","!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> String"},"simplePath":{"!description":"Formatter function that is used in a complex binding inside an XML template view. The function is used to interpret OData V4 annotations, supporting the same annotations as {@link #.format format} but with a simplified output aimed at design-time templating with smart controls.\n\nIn contrast to <code>format<\/code>, \"14.5.12 Expression edm:Path\" or \"14.5.13 Expression edm:PropertyPath\" is turned into a simple binding path without type or constraint information. In certain cases, a complex binding is required to allow for proper escaping of the path.\n\nExample: <pre>\n  &lt;sfi:SmartField value=\"{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.simplePath'}\"/>\n<\/pre>","!static":"true","!category":"function","!type":"fn(oInterface: sap.ui.core.util.XMLPreprocessor.IContext | sap.ui.model.Context, vRawValue?: Object) -> String"}},"sap.ui.model.odata.ODataContextBinding":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 please use {@link sap.ui.model.odata.v2.ODataContextBinding} instead.<br>The ContextBinding is a specific binding for a setting context for the model","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataContextBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for odata.ODataContextBinding","!module":"sap/ui/model/odata/ODataContextBinding","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 please use {@link sap.ui.model.odata.v2.ODataContextBinding} instead.<br>The ContextBinding is a specific binding for a setting context for the model","!proto":"sap.ui.model.ContextBinding","!category":"class"},"sap.ui.model.type.DateTimeInterval_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.DateTimeInterval with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.DateInterval.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.DateTimeInterval"},"sap.ui.test.actions.Action_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Action with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.actions.Action"},"sap.ui.core.Manifest":{"!description":"The Manifest class.","getComponentName":{"!description":"Returns the Component name which is defined in the manifest as <code>sap.ui5/componentName<\/code> or <code>sap.app/id<\/code>","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Manifest.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.Object","resolveUri":{"!description":"Resolves the given URI relative to the Component by default or optional relative to the manifest when passing 'manifest' as second parameter.","!static":false,"!category":"function","!type":"fn(sUri: String, sRelativeTo?: String) -> String","parameters":{"sRelativeTo":"type: string, description: defines to which base URI the given URI will be resolved to; one of \u2018component' (default) or 'manifest'","sUri":"type: string, description: URI to resolve as string"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.Manifest with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getRawJson":{"!description":"Returns the raw manifest defined in the metadata of the component. If not specified, the return value is null.","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Creates and initializes a manifest wrapper which provides API access to\nthe content of the manifest.","!module":"sap/ui/core/Manifest","load":{"!description":"Function to load the manifest by URL","!static":true,"!category":"function","!type":"fn(mOptions: Object) -> sap.ui.core.Manifest | Promise","parameters":{"mOptions":"type: object, description: the configuration options"}},"!helpDescription":"The Manifest class.","getEntry":{"!description":"Returns the configuration of a manifest section or the value for a specific path. If no key is specified, the return value is null.\n\nExample: <code> { \"sap.ui5\": { \"dependencies\": { \"libs\": { \"sap.m\": {} }, \"components\": { \"my.component.a\": {} } } }); <\/code>\n\nThe configuration above can be accessed in the following ways: <ul> <li><b>By section/namespace<\/b>: <code>oManifest.getEntry(\"sap.ui5\")<\/code><\/li> <li><b>By path<\/b>: <code>oManifest.getEntry(\"/sap.ui5/dependencies/libs\")<\/code><\/li> <\/ul>\n\nBy section/namespace returns the configuration for the specified manifest section and by path allows to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with a slash (/).","!static":false,"!category":"function","!type":"fn(sKey: String) -> Object | null","parameters":{"sKey":"type: string, description: Either the manifest section name (namespace) or a concrete path"}},"getJson":{"!description":"Returns the manifest defined in the metadata of the component. If not specified, the return value is null.","!static":false,"!category":"function","!type":"fn() -> Object"}},"sap.ui.core.Control":{"toggleStyleClass":{"!description":"The string given as \"sStyleClass\" will be be either added to or removed from the \"class\" attribute of this control's root HTML element, depending on the value of \"bAdd\": if bAdd is true, sStyleClass will be added. If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present. If sStyleClass is null or empty string, the call is ignored.\n\nSee addStyleClass and removeStyleClass for further documentation.","!static":false,"!category":"function","!type":"fn(sStyleClass: String, bAdd: Boolean) -> sap.ui.core.Control","parameters":{"bAdd":"type: boolean, description: whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)","sStyleClass":"type: string, description: the CSS class name to be added or removed"}},"getAccessibilityInfo":{"!description":"This function (if available on the concrete control) provides the current accessibility state of the control.\n\nApplications must not call this hook method directly, it is called by the framework.\n\nSubclasses of Control should implement this hook to provide any necessary accessibility information:\n\n<pre>\nMyControl.prototype.getAccessibilityInfo = function() {\n   return {\n     role: \"textbox\",      // String which represents the WAI-ARIA role which is implemented by the control.\n     type: \"date input\",   // String which represents the control type (Must be a translated text). Might correlate with\n                           // the role.\n     description: \"value\", // String which describes the most relevant control state (e.g. the inputs value). Must be a\n                           // translated text.\n                           // Note: The type and the enabled/editable state must not be handled here.\n     focusable: true,      // Boolean which describes whether the control can get the focus.\n     enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or\n                           // <code>null<\/code> can be provided.\n     editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or\n                           // <code>null<\/code> can be provided.\n     children: []          // Aggregations of the given control (e.g. when the control is a layout). Primitive aggregations will be ignored.\n                           // Note: Children should only be provided when it is helpful to understand the accessibility context\n                           //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a\n                           //       layout should).\n   };\n};\n<\/pre>\n\nNote: The returned object provides the accessibility state of the control at the point in time when this function is called.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.core.Element","!category":"class","setBusyIndicatorSize":{"!description":"Sets a new value for property {@link #getBusyIndicatorSize busyIndicatorSize}.\n\nThe size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Medium<\/code>.","!static":false,"!category":"function","!type":"fn(sBusyIndicatorSize: sap.ui.core.BusyIndicatorSize) -> sap.ui.core.Control","parameters":{"sBusyIndicatorSize":"type: sap.ui.core.BusyIndicatorSize, description: New value for property <code>busyIndicatorSize<\/code>"}},"placeAt":{"!description":"Puts <code>this<\/code> control into the specified container (<code>oRef<\/code>) at the given position (<code>oPosition<\/code>).\n\nFirst it is checked whether <code>oRef<\/code> is a container element / control (has a multiple aggregation with type <code>sap.ui.core.Control<\/code> and name 'content') or is an Id String of such a container. If this is not the case <code>oRef<\/code> can either be a Dom Reference or Id String of the UIArea (if it does not yet exist implicitly a new UIArea is created),\n\nThe <code>oPosition<\/code> can be one of the following:\n\n<ul> <li>\"first\": The control is added as the first element to the container.<\/li> <li>\"last\": The control is added as the last element to the container (default).<\/li> <li>\"only\": All existing children of the container are removed (not destroyed!) and the control is added as new child.<\/li> <li><i>index<\/i>: The control is added at the specified <i>index<\/i> to the container.<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(oRef: String | Element | sap.ui.core.Control, vPosition?: String | Number) -> sap.ui.core.Control","parameters":{"oRef":"type: string|Element|sap.ui.core.Control, description: container into which the control should be put","vPosition":"type: string|int, description: Describes the position where the control should be put into the container"}},"setFieldGroupIds":{"!description":"Sets a new value for property {@link #getFieldGroupIds fieldGroupIds}.\n\nThe IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>[]<\/code>.","!static":false,"!category":"function","!type":"fn(sFieldGroupIds: [String]) -> sap.ui.core.Control","parameters":{"sFieldGroupIds":"type: string[], description: New value for property <code>fieldGroupIds<\/code>"}},"getBusy":{"!description":"Gets current value of property {@link #getBusy busy}.\n\nWhether the control is currently in busy state.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Creates and initializes a new control with the given <code>sId<\/code> and settings.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getBlocked blocked} : boolean (default: false)<\/li>\n<li>{@link #getBusy busy} : boolean (default: false)<\/li>\n<li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)<\/li>\n<li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.BusyIndicatorSize (default: Medium)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getFieldGroupIds fieldGroupIds} : string[] (default: [])<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:validateFieldGroup validateFieldGroup} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","detachBrowserEvent":{"!description":"Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.\n\nNote: listeners are only removed, if the same combination of event type, callback function and context object is given as in the call to <code>attachBrowserEvent<\/code>.","!static":false,"!category":"function","!type":"fn(sEventType?: String, fnHandler?: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: The context object that was given in the call to <code>attachBrowserEvent<\/code>.","fnHandler":"type: function, description: The function that is to be no longer executed.","sEventType":"type: string, description: A string containing one or more JavaScript event types, such as \"click\" or \"blur\"."}},"removeStyleClass":{"!description":"Removes the given string from the list of custom style classes that have been set previously. Regular style classes like \"sapUiBtn\" cannot be removed.","!static":false,"!category":"function","!type":"fn(sStyleClass: String) -> sap.ui.core.Control","parameters":{"sStyleClass":"type: string, description: the style to be removed"}},"checkFieldGroupIds":{"!description":"Returns whether this control belongs to a given combination of field groups.\n\nIf the <code>vFieldGroupIds<\/code> parameter is not specified, the method checks whether this control belongs to <strong>any<\/strong> field group, that is, whether any field group ID is defined for it.\n\nIf a list of field group IDs is specified, either as an array of strings or as a single string (interpreted as a comma separated list of IDs), then the method will check whether this control belongs to <strong>all<\/strong> given field groups. Accordingly, an empty list of IDs (empty array or empty string) will always return true.\n\nNote that a string value for <code>vFieldGroupIds<\/code> (comma separated list) will not be trimmed. All whitespace characters are significant, but in general not recommended in field group IDs.","!static":false,"!category":"function","!type":"fn(vFieldGroupIds?: [String | String]) -> Boolean","parameters":{"vFieldGroupIds":"type: string|string[], description: An array of field group IDs or a single string with a comma separated list of IDs to match"}},"detachValidateFieldGroup":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validateFieldGroup validateFieldGroup} event of this <code>sap.ui.core.Control<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Control","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"onAfterRendering":{"!description":"Function is called when the rendering of the control is completed.\n\nApplications must not call this hook method directly, it is called by the framework.\n\nSubclasses of Control should override this hook to implement any necessary actions after the rendering.","!static":false,"!category":"function","!type":"fn()"},"setBlocked":{"!description":"Set the controls block state.","!static":false,"!category":"function","!type":"fn(bBlocked: Boolean) -> sap.ui.core.Control","parameters":{"bBlocked":"type: boolean, description: The new blocked state to be set"}},"!description":"Base Class for Controls.\n\nControls provide the following features: <ul> <li><b>Rendering<\/b>: the <code>RenderManager<\/code> only expects instances of class <code>Control<\/code> in its {@link sap.ui.core.RenderManager#renderControl renderControl} method. By convention, each control class has an associated static class that takes care of rendering the control (its 'Renderer').<\/li> <li><b>show / hide<\/b>: a control can be hidden, although it is still part of the control tree, see property {@link #getVisible visible}<\/li> <li><b>local busy indicator<\/b>: marks a control visually as 'busy', see properties {@link #getBusy busy} and {@link #getBusyIndicatorDelay busyIndicatorDelay}<\/li> <li><b>field groups<\/b>: by assigning the same group ID to a set of editable controls, they form a group which can be validated together. See property {@link #getFieldGroupIds fieldGroupIds} and event {@link #event:validateFieldGroup validateFieldGroup}. The term <i>field<\/i> was chosen as most often this feature will be used to group editable fields in a form.<\/li> See the documentation for {@link topic:5b0775397e394b1fb973fa207554003e Field Groups} for more details. <li><b>custom style classes<\/b>: all controls allow to add custom CSS classes to their rendered DOM without modifying their renderer code. See methods {@link #addStyleClass addStyleClass}, {@link #removeStyleClass removeStyleClass}, {@link #toggleStyleClass toggleStyleClass} and {@link #hasStyleClass hasStyleClass}.<\/br> The necessary implementation is encapsulated in {@link sap.ui.core.CustomStyleClassSupport CustomStyleClassSupport} and can be applied to selected element classes as well.<\/li> <li><b>browser events<\/b>: by calling the methods {@link #attachBrowserEvent attachBrowserEvent} and {@link #detachBrowserEvent detachBrowserEvent}, consumers can let the control class take care of registering / de-registering a given set of event listeners to the control's root DOM node. The framework will adapt the registration whenever the DOM node changes (e.g. before or after rendering or when the control is destroyed).<\/li> <\/ul>\n\nSee section \"{@link topic:8dcab0011d274051808f959800cabf9f Developing Controls}\" in the documentation for an introduction to control development.","setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nWhether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean) -> sap.ui.core.Control","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Control.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getRenderer":{"!description":"Returns a renderer for this control instance.\n\nIt is retrieved using the RenderManager as done during rendering.","!static":false,"!category":"function","!type":"fn() -> Object"},"hasStyleClass":{"!description":"Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control via previous call(s) to addStyleClass().","!static":false,"!category":"function","!type":"fn(sStyleClass: String) -> Boolean","parameters":{"sStyleClass":"type: string, description: the style to check for"}},"isBusy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15 use {@link #getBusy} instead<br>Check if the control is currently in busy state.","!static":false,"!category":"function","!type":"fn()"},"onBeforeRendering":{"!description":"Function is called before the rendering of the control is started.\n\nApplications must not call this hook method directly, it is called by the framework.\n\nSubclasses of Control should override this hook to implement any necessary actions before the rendering.","!static":false,"!category":"function","!type":"fn()"},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nWhether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getBusyIndicatorSize":{"!description":"Gets current value of property {@link #getBusyIndicatorSize busyIndicatorSize}.\n\nThe size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.\n\nDefault value is <code>Medium<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.BusyIndicatorSize"},"fireValidateFieldGroup":{"!description":"Fires event {@link #event:validateFieldGroup validateFieldGroup} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.Control","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"invalidate":{"!description":"Marks this control and its children for a re-rendering, usually because its state has changed and now differs from the rendered DOM.\n\nManaged settings (properties, aggregations, associations) automatically invalidate the corresponding object. Changing the state via the standard mutators, therefore, does not require an explicit call to <code>invalidate<\/code>.\n\nBy default, all invalidations are buffered and processed together (asynchronously) in a new browser task.\n\nThe <code>oOrigin<\/code> parameter was introduced to allow parent controls to limit their re-rendering to certain areas that have been invalidated by their children. As there is no strong guideline for control developers whether or not to provide the parameter, it is not a reliable source of information. It is, therefore, not recommended in general to use it, only in scenarios where a control and its descendants know each other very well (e.g. complex controls where parent and children have the same code owner).","!static":false,"!category":"function","!type":"fn(oOrigin?: sap.ui.base.ManagedObject)","parameters":{"oOrigin":"type: sap.ui.base.ManagedObject, description: Child control for which the method was called"}},"getControlsByFieldGroupId":{"!description":"Returns a list of all child controls with a field group ID. See {@link #checkFieldGroupIds checkFieldGroupIds} for a description of the <code>vFieldGroupIds<\/code> parameter. Associated controls are not taken into account.","!static":false,"!category":"function","!type":"fn(vFieldGroupIds?: [String | String]) -> [sap.ui.core.Control]","parameters":{"vFieldGroupIds":"type: string|string[], description: ID of the field group or an array of field group IDs to match"}},"setBusyIndicatorDelay":{"!description":"Define the delay, after which the busy indicator will show up.","!static":false,"!category":"function","!type":"fn(iDelay: Number) -> sap.ui.core.Control","parameters":{"iDelay":"type: int, description: The delay in ms"}},"rerender":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.70 using this method is no longer recommended, but still works. Synchronous DOM updates via this method have several drawbacks: they only work when the control has been rendered before (no initial rendering possible), multiple state changes won't be combined automatically into a single re-rendering, they might cause additional layout trashing, standard invalidation might cause another async re-rendering.\n\nThe recommended alternative is to rely on invalidation and standard re-rendering.<br>Synchronously updates the DOM of this control to reflect the current object state.\n\nNote that this method can only be called when the control already has a DOM representation (it has been rendered before) and when the control still is assigned to a UIArea.","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Defines a new subclass of Control with the name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> can contain the same information that {@link sap.ui.core.Element.extend} already accepts, plus the following <code>renderer<\/code> property:\n\nExample: <pre>\nControl.extend(\"sap.mylib.MyControl\", {\n  metadata : {\n    library : \"sap.mylib\",\n    properties : {\n      text : \"string\",\n      width : \"sap.ui.core.CSSSize\"\n    }\n  },\n  renderer: {\n    apiVersion: 2,\n    render: function(oRM, oControl) {\n      oRM.openStart(\"div\", oControl);\n      oRM.style(\"width\", oControl.getWidth());\n      oRM.openEnd();\n      oRM.text(oControl.getText());\n      oRM.close(\"div\");\n    }\n  }\n});\n<\/pre>\n\nThere are multiple ways how a renderer can be specified: <ul> <li>As a <b>plain object<\/b>: The object will be used to create a new renderer by using {@link sap.ui.core.Renderer.extend} to extend the renderer of the base class of this control. The new renderer will have the same global name as this control class with the additional suffix 'Renderer'.<br> <b>Note:<\/b> The <code>Renderer.extend<\/code> method expects a plain object (no prototype chain).<\/li> <li>As a <b>function<\/b>: The given function will be used as <code>render<\/code> function of a new renderer; the renderer will be created in the same way as described for the <i>plain object<\/i> case.<\/li> <li>As a <b>ready-made renderer<\/b>, e.g. imported from the corresponding renderer module. As renderers are simple objects (not instances of a specific class), some heuristic is used to distinguish renderers from the <i>plain object<\/i> case above: An object is assumed to be a ready-made renderer when it has a <code>render<\/code> function and either is already exposed under the expected global name or has an <code>extend<\/code> method.<\/li> <li>As a <b>fully qualified name<\/b>: The name will be looked up as a global property. If not defined, a module name will be derived from the global name (dots replaced by slashes), the module will be required and provides the renderer, either as AMD export or via the named global property.<\/li> <li><b>Omitting the <code>renderer<\/code> property<\/b> or setting it to <code>undefined<\/code>: The fully qualified name of the renderer will be derived from the fully qualified name of the control by adding the suffix \"Renderer\". The renderer then is retrieved in the same way as described for the <i>fully qualified name<\/i> case.<\/li> <li><b><code>null<\/code> or empty string<\/b>: The control will have no renderer, a call to <code>oControl.getMetadata().getRenderer()<\/code> will return <code>undefined<\/code>.<\/li> <\/ul>\n\nIf the resulting renderer is incomplete (has no <code>render<\/code> function) or if it cannot be found at all, rendering of the control will be skipped.\n\n<b>Note:<\/b> The <code>apiVersion: 2<\/code> flag is required to enable in-place rendering technology. Before setting this property, please ensure that the constraints documented in section \"Contract for Renderer.apiVersion 2\" of the {@link sap.ui.core.RenderManager RenderManager} API documentation are fulfilled.","!static":true,"!category":"function","!type":"fn(sClassName: String, oStaticInfo: Object) -> fn()","parameters":{"oStaticInfo":"type: object, description: static info to construct the metadata from","sClassName":"type: string, description: fully qualified name of the class that is described by this metadata object"}},"getBlocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Gets current value of property {@link #getBlocked blocked}.\n\nWhether the control is currently in blocked state.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setBusy":{"!description":"Set the controls busy state.\n\n<b>Note:<\/b> The busy state can't be set on controls (e.g. sap.m.ColumnListItem) which renderings have the following tags as DOM root element: area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr|tr","!static":false,"!category":"function","!type":"fn(bBusy: Boolean) -> sap.ui.core.Control","parameters":{"bBusy":"type: boolean, description: The new busy state to be set"}},"!module":"sap/ui/core/Control","getBusyIndicatorDelay":{"!description":"Gets current value of property {@link #getBusyIndicatorDelay busyIndicatorDelay}.\n\nThe delay in milliseconds, after which the busy indicator will show up for this control.\n\nDefault value is <code>1000<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"!helpDescription":"Base Class for Controls.\n\nControls provide the following features: <ul> <li><b>Rendering<\/b>: the <code>RenderManager<\/code> only expects instances of class <code>Control<\/code> in its {@link sap.ui.core.RenderManager#renderControl renderControl} method. By convention, each control class has an associated static class that takes care of rendering the control (its 'Renderer').<\/li> <li><b>show / hide<\/b>: a control can be hidden, although it is still part of the control tree, see property {@link #getVisible visible}<\/li> <li><b>local busy indicator<\/b>: marks a control visually as 'busy', see properties {@link #getBusy busy} and {@link #getBusyIndicatorDelay busyIndicatorDelay}<\/li> <li><b>field groups<\/b>: by assigning the same group ID to a set of editable controls, they form a group which can be validated together. See property {@link #getFieldGroupIds fieldGroupIds} and event {@link #event:validateFieldGroup validateFieldGroup}. The term <i>field<\/i> was chosen as most often this feature will be used to group editable fields in a form.<\/li> See the documentation for {@link topic:5b0775397e394b1fb973fa207554003e Field Groups} for more details. <li><b>custom style classes<\/b>: all controls allow to add custom CSS classes to their rendered DOM without modifying their renderer code. See methods {@link #addStyleClass addStyleClass}, {@link #removeStyleClass removeStyleClass}, {@link #toggleStyleClass toggleStyleClass} and {@link #hasStyleClass hasStyleClass}.<\/br> The necessary implementation is encapsulated in {@link sap.ui.core.CustomStyleClassSupport CustomStyleClassSupport} and can be applied to selected element classes as well.<\/li> <li><b>browser events<\/b>: by calling the methods {@link #attachBrowserEvent attachBrowserEvent} and {@link #detachBrowserEvent detachBrowserEvent}, consumers can let the control class take care of registering / de-registering a given set of event listeners to the control's root DOM node. The framework will adapt the registration whenever the DOM node changes (e.g. before or after rendering or when the control is destroyed).<\/li> <\/ul>\n\nSee section \"{@link topic:8dcab0011d274051808f959800cabf9f Developing Controls}\" in the documentation for an introduction to control development.","addStyleClass":{"!description":"The string given as \"sStyleClass\" will be added to the \"class\" attribute of this control's root HTML element.\n\nThis method is intended to be used to mark controls as being of a special type for which special styling can be provided using CSS selectors that reference this style class name.\n\n<pre>\nExample:\n   myButton.addStyleClass(\"myRedTextButton\"); // add a CSS class to one button instance\n\n...and in CSS:\n   .myRedTextButton {\n      color: red;\n   }\n<\/pre>\n\nThis will add the CSS class \"myRedTextButton\" to the Button HTML and the CSS code above will then make the text in this particular button red.\n\nOnly characters allowed inside HTML attributes are allowed. Quotes are not allowed and this method will ignore any strings containing quotes. Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed individually later by calling removeStyleClass. Multiple calls with the same sStyleClass will have no different effect than calling once. If sStyleClass is null, empty string or it contains quotes, the call is ignored.","!static":false,"!category":"function","!type":"fn(sStyleClass: String) -> sap.ui.core.Control","parameters":{"sStyleClass":"type: string, description: the CSS class name to be added"}},"attachValidateFieldGroup":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validateFieldGroup validateFieldGroup} event of this <code>sap.ui.core.Control<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.Control<\/code> itself.\n\nEvent is fired if a logical field group defined by <code>fieldGroupIds<\/code> of a control was left or when the user explicitly pressed the key combination that triggers validation.\n\nBy default, the <code>RETURN<\/code> key without any modifier keys triggers validation, see {@link #triggerValidateFieldGroup}.\n\nListen to this event to validate data of the controls belonging to a field group. See {@link #setFieldGroupIds}, or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Control","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.Control<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getFieldGroupIds":{"!description":"Returns a copy of the field group IDs array. Modification of the field group IDs need to call {@link #setFieldGroupIds setFieldGroupIds} to apply the changes.","!static":false,"!category":"function","!type":"fn() -> [String]"},"attachBrowserEvent":{"!description":"Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles DOM element replacements caused by re-rendering.\n\n<b>IMPORTANT:<\/b><\/br> This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically. E.g. when working with a <code>sap.ui.commons.Button<\/code>, always use the Button's \"press\" event, not the native \"click\" event, because \"press\" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.\n\nIn the event handler, <code>this<\/code> refers to the Control - not to the root DOM element like in jQuery. While the DOM element can be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not be done. E.g. use {@link #addStyleClass} instead if the modification is of visual nature.\n\nUse {@link #detachBrowserEvent} to remove the event handler(s) again.","!static":false,"!category":"function","!type":"fn(sEventType?: String, fnHandler?: fn(), oListener?: Object) -> sap.ui.core.Control","parameters":{"oListener":"type: object, description: The object, that wants to be notified, when the event occurs","fnHandler":"type: function, description: A function to execute each time the event is triggered.","sEventType":"type: string, description: A string containing one or more JavaScript event types, such as \"click\" or \"blur\"."}},"clone":{"!description":"Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional internal state.\n\nThe additionally cloned information contains: <ul> <li>browser event handlers attached with {@link #attachBrowserEvent}<\/li> <li>text selection behavior<\/li> <li>style classes added with {@link #addStyleClass}<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(sIdSuffix?: String, aLocalIds?: [String]) -> sap.ui.core.Control","parameters":{"sIdSuffix":"type: string, description: a suffix to be appended to the cloned element id","aLocalIds":"type: string[], description: an array of local IDs within the cloned hierarchy (internally used)"}},"allowTextSelection":{"!description":"Defines whether the user can select text inside this control. Defaults to <code>true<\/code> as long as this method has not been called.\n\n<b>Note:<\/b>This only works in IE and Safari; for Firefox the element's style must be set to: <pre>\n  -moz-user-select: none;\n<\/pre> in order to prevent text selection.","!static":false,"!category":"function","!type":"fn(bAllow: Boolean) -> sap.ui.core.Control","parameters":{"bAllow":"type: boolean, description: whether to allow text selection or not"}},"getIdForLabel":{"!description":"Returns the DOMNode Id to be used for the \"labelFor\" attribute of the label.\n\nBy default, this is the Id of the control itself.","!static":false,"!category":"function","!type":"fn() -> String"},"triggerValidateFieldGroup":{"!description":"Triggers the <code>validateFieldGroup<\/code> event for this control.\n\nCalled by <code>sap.ui.core.UIArea<\/code> if a field group should be validated after it lost the focus or when the key combination was pressed that was configured to trigger validation.\n\nBy default, the <code>RETURN<\/code> key without any modifier keys triggers validation. There's no public API to change that key combination.\n\nSee {@link #attachValidateFieldGroup}.","!static":false,"!category":"function","!type":"fn()"}},"module:sap/ui/events/F6Navigation":{"!description":"Central handler for F6 key event. Based on the current target and the given event the next element in the F6 chain is focused.\n\nThis handler might be also called manually. In this case the central handler is deactivated for the given event.\n\nIf the event is not a keydown event, it does not represent the F6 key, the default behavior is prevented, the handling is explicitly skipped (<code>oSettings.skip<\/code>) or the target (<code>oSettings.target<\/code>) is not contained in the used scopes (<code>oSettings.scope<\/code>), the event is skipped.","!module":"sap/ui/events/F6Navigation","!helpDescription":"Central handler for F6 key event. Based on the current target and the given event the next element in the F6 chain is focused.\n\nThis handler might be also called manually. In this case the central handler is deactivated for the given event.\n\nIf the event is not a keydown event, it does not represent the F6 key, the default behavior is prevented, the handling is explicitly skipped (<code>oSettings.skip<\/code>) or the target (<code>oSettings.target<\/code>) is not contained in the used scopes (<code>oSettings.scope<\/code>), the event is skipped.","handleF6GroupNavigation":{"!description":"Handles the F6 key event.","!category":"function","!type":"fn(oEvent: jQuery.Event, oSettings?: Object)"},"module:sap/ui/events/F6Navigation":"module:sap/ui/events/F6Navigation","!category":"namespace","fastNavigationKey":{"!description":"CustomData attribute name for fast navigation groups (in DOM additional prefix \"data-\" is needed)","!category":"enum","!type":"String"}},"sap.ui.core.util.PasteHelper_obj":{"!type":"fn()","prototype":"sap.ui.core.util.PasteHelper"},"sap.ui":{"component.load":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use {@link sap.ui.core.Component.load}<br>Load a component without instantiating it.\n\nProvides support for loading components asynchronously by setting <code>oConfig.async<\/code> to true. In that case, the method returns a JavaScript 6 Promise that will be fulfilled with the component class after loading.\n\nUsing <code>async = true<\/code> doesn't necessarily mean that no more synchronous loading occurs. Both the framework as well as component implementations might still execute synchronous requests. The contract for <code>async = true<\/code> just allows to use async calls.\n\nWhen a manifest.json is referenced in oConfig this manifest is not used for the derived instances of the Component class. The manifest/manifest url must be provided for every instance explicitly.\n\nWhen asynchronous loading is used, additional <code>asyncHints<\/code> can be provided. The structure of these hints and how they impact the loading of components, is still experimental. Code that wants to be safe wrt. version updates, should not use the code>asyncHints<\/code> property. <ul> <li><code>oConfig.asyncHints.components : string[]<\/code>a list of components needed by the current component and its subcomponents The framework will try to preload these components (their Component-preload.js) asynchronously, errors will be ignored. Please note that the framework has no knowledge about whether a Component provides a preload file or whether it is bundled in some library preload. If Components are listed in the hints section, they will be preloaded.<\/li> <li><code>oConfig.asyncHints.libs : string[]<\/code>libraries needed by the Component and its subcomponents. The framework will asynchronously load those libraries, if they're not loaded yet.<\/li> <li><code>oConfig.asyncHints.preloadBundles : string[]<\/code>a list of additional preload bundles The framework will try to load these bundles asynchronously before requiring the Component, errors will be ignored. The named modules must only represent preload bundles. If they are normal modules, their dependencies will be loaded with the normal synchronous request mechanism and performance might degrade.<\/li> <li><code>oConfig.asyncHints.preloadOnly : boolean (default: false)<\/code> whether only the preloads should be done, but not the loading of the Component controller class itself. <\/ul>\n\nIf Components and/or libraries are listed in the hints section, all the corresponding preload files will be requested in parallel. The constructor class will only be required after all of them are rejected or resolved. Instead of specifying just the name of a component or library in the hints, an object might be given that contains a mandatory <code>name<\/code> property and, optionally, an <code>url<\/code> that will be used for a <code>registerModulePath<\/code> and/or a <code>lazy<\/code> property. When <code>lazy<\/code> is set to a truthy value, only a necessary <code>registerModulePath<\/code> will be executed, but the corresponding component or lib won't be preloaded. For preload bundles, also an object might be given instead of a simple name, but there only the <code>url<\/code> property is supported, not the <code>lazy<\/code> property.\n\nNote: so far, only the requests for the preload files (library and/or component) are executed asynchronously. If a preload is deactivated by configuration (e.g. debug mode), then remaining requests still might be synchronous.","!static":"true","!category":"function","!type":"fn(oConfig: Object) -> fn() | Promise"},"template":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use an {@link sap.ui.core.mvc.XMLView XMLView} or {@link sap.ui.core.mvc.JSView JSView} instead.<br>Creates a Template for the given ID, DOM reference or a configuration object.\n\nIf no parameter is defined, this function makes a lookup of DOM elements which are specifying a type attribute. If the value of this type attribute matches a registered type then the content of this DOM element will be used to create a new <code>Template<\/code> instance.\n\nIf you want to lookup all kind of existing and known templates and parse them directly you can simply call: <pre>\n  sap.ui.template();\n<\/pre>\n\nTo parse a concrete DOM element you can do so by using this function in the following way: <pre>\n  sap.ui.template(\"theTemplateId\");\n<\/pre>\n\nOr you can pass the reference to a DOM element and use this DOM element as a source for the template: <pre>\n  sap.ui.template(oDomRef);\n<\/pre>\n\nThe last option to use this function is to pass the information via a configuration object. This configuration object can be used to pass a context for the templating framework when compiling the template: <pre>\n  var oTemplateById = sap.ui.template({\n    id: \"theTemplateId\",\n    context: { ... }\n  });\n\n  var oTemplateByDomRef = sap.ui.template({\n    domref: oDomRef,\n    context: { ... }\n  });\n<\/pre>\n\nIt can also be used to load a template from another file: <pre>\n  var oTemplate = sap.ui.template({\n    id: \"myTemplate\",\n    src: \"myTemplate.tmpl\"\n  });\n\n  var oTemplateWithContext = sap.ui.template({\n    id: \"myTemplate\",\n    src: \"myTemplate.tmpl\",\n    context: { ... }\n  });\n<\/pre>","!static":"true","!category":"function","!type":"fn(oTemplate?: String | Element | Object) -> [sap.ui.core.tmpl.Template | sap.ui.core.tmpl.Template]"},"jsview":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use {@link sap.ui.core.mvc.JSView.create JSView.create} to create view instances; for defining JavaScript views, there's no substitute yet and <em>sap.ui.jsview<\/em> still has to be used<br>Defines or creates an instance of a JavaScript view.\n\nThe behavior of this method depends on the signature of the call and on the current context.\n\n<h3>View Definition<\/h3> <pre>\n  sap.ui.jsview(sId, vView);\n<\/pre> Defines a view of the given name with the given implementation. <code>sId<\/code> must be the view's name, <code>vView<\/code> must be an object and can contain implementations for any of the hooks provided by JSView.\n\n<h3>View Instantiation (deprecated)<\/h3> <pre>\n  var oView = sap.ui.jsview(vView);\n  var oView = sap.ui.jsview(vView, bASync);\n  var oView = sap.ui.jsview(sId, vView);\n  var oView = sap.ui.jsview(sId, vView, bAsync);\n<\/pre> Creates an instance of the view with the given name (and id). If no view implementation has been defined for that view name, a JavaScript module with the same qualified name and with suffix <code>.view.js<\/code> will be loaded (required) and executed. The module should register a view definition on execution (1st. variant above).\n\nIf <code>sId<\/code> is omitted, an ID will be created automatically.\n\nWhen <code>bAsync<\/code> has a truthy value, the view definition will be read asynchronously, if needed, but the (incomplete) view instance will be returned immediately.\n\n<b>Note:<\/b> Using <code>sap.ui.jsview<\/code> for creating view instances has been deprecated, use {@link sap.ui.core.mvc.JSView.create JSView.create} instead. <code>JSView.create<\/code> enforces asynchronous loading and can be used via an AMD reference, it doesn't rely on a global name.\n\n<b>Note:<\/b> Any other call signature will lead to a runtime error.","!static":"true","!category":"function","!type":"fn(sId: String, vView: String | Object, bAsync?: Boolean) -> sap.ui.core.mvc.JSView | undefined"},"extensionpoint":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Use {@link sap.ui.core.ExtensionPoint.load} instead<br>Creates 0..n UI5 controls from an <code>ExtensionPoint<\/code>.\n\nOne control if the <code>ExtensionPoint<\/code> is e.g. filled with a <code>View<\/code>, zero for extension points without configured extension and n controls for multi-root <code>Fragments<\/code> as extension.\n\nIn <code>JSViews<\/code>, this function allows both JSON notation in aggregation content as well as adding an extension point to an aggregation after the target control has already been instantiated. In the latter case the optional parameters oTargetControls and oTargetAggregation need to be specified.","!static":"true","!category":"function","!type":"fn(oContainer: sap.ui.core.mvc.View | sap.ui.core.Fragment, sExtName: String, fnCreateDefaultContent?: fn(), oTargetControl?: sap.ui.core.Control, sAggregationName?: String) -> [sap.ui.core.Control]"},"loader":"sap.ui.loader","!category":"namespace","localResources":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use <code>sap.ui.loader.config<\/code> instead.<br>Redirects access to resources that are part of the given namespace to a location relative to the assumed <b>application root folder<\/b>.\n\nAny UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.) whose resource name starts with <code>sNamespace<\/code>, will be loaded from an equally named subfolder of the <b>application root folder<\/b>. If the resource name consists of multiple segments (separated by a dot), each segment is assumed to represent an individual folder. In other words: when a resource name is converted to a URL, any dots ('.') are converted to slashes ('/').\n\n<b>Limitation:<\/b> For the time being, the <b>application root folder<\/b> is assumed to be the same as the folder where the current page resides in.\n\nUsage sample: <pre>\n  // Let UI5 know that resources, whose name starts with \"com.mycompany.myapp\"\n  // should be loaded from the URL location \"./com/mycompany/myapp\"\n  sap.ui.localResources(\"com.mycompany.myapp\");\n\n  // The following call implicitly will use the mapping done by the previous line\n  // It will load a view from ./com/mycompany/myapp/views/Main.view.xml\n  View.create({ viewName : \"com.mycompany.myapp.views.Main\", type : ViewType.XML}).then(function(oView) {\n      // do stuff\n  });\n<\/pre>\n\nWhen applications need a more flexible mapping between resource names and their location, they can use {@link jQuery.sap.registerModulePath}.\n\nIt is intended to make this configuration obsolete in future releases, but for the time being, applications must call this method when they want to store resources relative to the assumed application root folder.","!static":"true","!category":"function","!type":"fn(sNamespace: String)"},"jsfragment":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.core.Fragment.load} instead<br>Defines OR instantiates an HTML-based fragment.\n\nTo define a JS fragment, call: <pre>\n   sap.ui.jsfragment(sName, oFragmentDefinition)\n<\/pre> where: <ul> <li><code>sName<\/code> is the name by which this fragment later can be found and instantiated. If defined in its own file, in order to be found by the module loading system, the file location and name must correspond to <code>sName<\/code> (path + file name must be: fragmentName + \".fragment.js\"). <\/li> <li><code>oFragmentDefinition<\/code> is an object at least holding the <code>createContent(oController)<\/code> method which defines the fragment content. If given during instantiation, the <code>createContent<\/code> method receives a controller instance (otherwise, parameter <code>oController<\/code> will be undefined) and the return value must be one <code>sap.ui.core.Control<\/code> (which could have any number of children).<\/li> <\/ul>\n\nTo instantiate a JS fragment, call: <pre>\n   sap.ui.jsfragment([sId], sFragmentName, [oController]);\n<\/pre> The fragment ID is optional (generated if not given) and the fragment implementation <i>can<\/i> use it to make contained controls unique (this depends on the implementation: some JS fragments may choose not to support multiple instances within one application and not use the ID prefixing). The <code>sFragmentName<\/code> must correspond to a JS fragment which can be loaded via the module system (<code>sFragmentName<\/code> converted to a path + \".fragment.js\" suffix) and which defines the fragment. Or it can be a name that has been used earlier to define a fragment of that name. If <code>oController<\/code> is given, the methods referenced in the fragment will be called on this controller. Note that fragments may require a controller to be given and certain methods to be available.","!static":"true","!category":"function","!type":"fn(vName: String | Object, vFragmentDefinition?: Object | String, oController?: sap.ui.core.mvc.Controller | Object) -> [sap.ui.core.Control | sap.ui.core.Control]"},"view":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Use {@link sap.ui.core.mvc.View.create View.create} instead<br>Creates a view of the given type, name and with the given ID.\n\nThe <code>vView<\/code> configuration object can have the following properties for the view instantiation: <ul> <li>The ID <code>vView.id<\/code> specifies an ID for the View instance. If no ID is given, an ID will be generated.<\/li> <li>The view name <code>vView.viewName<\/code> corresponds to an XML module that can be loaded via the module system (vView.viewName + suffix \".view.xml\")<\/li> <li>The controller instance <code>vView.controller<\/code> must be a valid controller implementation. The given controller instance overrides the controller defined in the view definition<\/li> <li>The view type <code>vView.type<\/code> specifies what kind of view will be instantiated. All valid view types are listed in the enumeration sap.ui.core.mvc.ViewType.<\/li> <li>The view data <code>vView.viewData<\/code> can hold user specific data. This data is available during the whole lifecycle of the view and the controller<\/li> <li>The view loading mode <code>vView.async<\/code> must be a boolean and defines if the view source is loaded synchronously or asynchronously. In async mode, the view is rendered empty initially, and re-rendered with the loaded view content.<\/li> <li><code>vView.preprocessors<\/code><\/li> can hold a map from the specified preprocessor type (e.g. \"xml\") to an array of preprocessor configurations; each configuration consists of a <code>preprocessor<\/code> property (optional when registered as on-demand preprocessor) and may contain further preprocessor-specific settings. The preprocessor can be either a module name as string implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a function according to {@link sap.ui.core.mvc.View.Preprocessor.process}. Do not set properties starting with underscore like <code>_sProperty<\/code> property, these are reserved for internal purposes. When several preprocessors are provided for one hook, it has to be made sure that they do not conflict when being processed serially.\n\n<strong>Note<\/strong>: These preprocessors are only available to this instance. For global or on-demand availability use {@link sap.ui.core.mvc.XMLView.registerPreprocessor}.\n\n<strong>Note<\/strong>: Please note that preprocessors in general are currently only available to XMLViews.\n\n<strong>Note<\/strong>: Preprocessors only work in async views and will be ignored when the view is instantiated in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the bSyncSupport flag of the preprocessor to true.","!static":"true","!category":"function","!type":"fn(sId: String, vView?: String | Object, sType: sap.ui.core.mvc.ViewType) -> sap.ui.core.mvc.View"},"getVersionInfo":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Use {@link sap.ui.VersionInfo.load} instead<br>Loads the version info file (resources/sap-ui-version.json) and returns it or if a library name is specified then the version info of the individual library will be returned.\n\nIn case of the version info file is not available an error will occur when calling this function.","!static":"true","!category":"function","!type":"fn(mOptions?: String | Object) -> Object | undefined | Promise"},"jsonview":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Use {@link sap.ui.core.mvc.JSONView.create JSONView.create} instead.<br>Creates a JSON view of the given name and id.\n\nThe <code>viewName<\/code> must either correspond to a JSON module that can be loaded via the module system (viewName + suffix \".view.json\") and which defines the view or it must be a configuration object for a view. The configuration object can have a viewName, viewContent and a controller property. The viewName behaves as described above, viewContent can hold the view description as JSON string or as object literal.\n\n<strong>Note<\/strong>: when an object literal is given, it might be modified during view construction.\n\nThe controller property can hold a controller instance. If a controller instance is given, it overrides the controller defined in the view.\n\nWhen property <code>async<\/code> is set to true, the view definition and the controller class (and its dependencies) will be loaded asynchronously. Any controls used in the view might be loaded sync or async, depending on the view configuration. Even when the view definition is provided as string or object tree, controller or controls might be loaded asynchronously. In any case, a view instance will be returned synchronously by this factory API, but its content (control tree) might appear only later. Also see {@link sap.ui.core.mvc.View#loaded}.\n\nLike with any other control, an id is optional and will be created when missing.","!static":"true","!category":"function","!type":"fn(sId: String, vView: String | Object) -> sap.ui.core.mvc.JSONView"},"define":{"!description":"Defines a JavaScript module with its ID, its dependencies and a module export value or factory.\n\nThe typical and only suggested usage of this method is to have one single, top level call to <code>sap.ui.define<\/code> in one JavaScript resource (file). When a module is requested by its module ID for the first time, the corresponding resource is determined from the ID and the current {@link sap.ui.loader.config configuration}. The resource will be loaded and executed which in turn will execute the top level <code>sap.ui.define<\/code> call.\n\nIf the module ID was omitted from that call, it will be substituted by the ID that was used to request the module. As a preparation step, the dependencies as well as their transitive dependencies, will be loaded. Then, the module value (its export) will be determined: if a static value (object, literal) was given as <code>vFactory<\/code>, that value will be the module value. If a function was given, that function will be called (providing the module exports of the declared dependencies as parameters to the function) and its return value will be used as module export value. The framework internally associates the resulting value with the module ID and provides it to the original requester of the module. Whenever the module is requested again, the same export value will be returned (modules are executed only once).\n\n<i>Example:<\/i><br> The following example defines a module, but doesn't hard code the module ID. If stored in a file 'sap/mylib/SomeClass.js', it can be requested with the ID 'sap/mylib/SomeClass'. <pre>\n  sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {\n\n    // create a new class\n    var SomeClass = function() {};\n\n    // add methods to its prototype\n    SomeClass.prototype.foo = function() {\n\n        // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )\n        var mSettings = Helper.foo();\n\n        // create and return an sap.m.Bar (using its local name 'Bar')\n        return new Bar(mSettings);\n\n    }\n\n    // return the class as module value\n    return SomeClass;\n\n  });\n<\/pre>\n\nIn another module or in an application HTML page, the {@link sap.ui.require} API can be used to load the sap/mylib/Something module and to work with it:\n\n<pre>\nsap.ui.require(['sap/mylib/Something'], function(Something) {\n\n  // instantiate a Something and call foo() on it\n  new Something().foo();\n\n});\n<\/pre>\n\n<h3>Module Name Syntax<\/h3>\n\n<code>sap.ui.define<\/code> uses a simplified variant of the {@link jQuery.sap.getResourcePath unified resource name} syntax for the module's own name as well as for its dependencies. The only difference to that syntax is, that for <code>sap.ui.define<\/code> and <code>sap.ui.require<\/code>, the extension (which always would be '.js') has to be omitted. Both methods always add this extension internally.\n\nAs a convenience, the name of a dependency can start with the segment './' which will be replaced by the name of the package that contains the currently defined module (relative name).\n\nIt is best practice to omit the name of the defined module (first parameter) and to use relative names for the dependencies whenever possible. This reduces the necessary configuration, simplifies renaming of packages and allows to map them to a different namespace.\n\n<h3>Dependency to Modules<\/h3>\n\nIf a dependencies array is given, each entry represents the name of another module that the currently defined module depends on. All dependency modules are loaded before the export of the currently defined module is determined. The module export of each dependency module will be provided as a parameter to a factory function, the order of the parameters will match the order of the modules in the dependencies array.\n\n<b>Note:<\/b> The order in which the dependency modules are <i>executed<\/i> is <b>not<\/b> defined by the order in the dependencies array! The execution order is affected by dependencies <i>between<\/i> the dependency modules as well as by their current state (whether a module already has been loaded or not). Neither module implementations nor dependents that require a module set must make any assumption about the execution order (other than expressed by their dependencies).\n\n<b>Note:<\/b> A static module export (a literal provided to <code>sap.ui.define<\/code>) cannot depend on the module exports of the dependency modules as it has to be calculated before the dependencies are resolved. As an alternative, modules can define a factory function, calculate a static export value in that function, potentially based on the dependencies, and return the result as module export value. The same approach must be taken when the module export is supposed to be a function.\n\n<h3>Asynchronous Contract<\/h3>\n\n<code>sap.ui.define<\/code> is designed to support real Asynchronous Module Definitions (AMD) in future, although it internally still might use synchronous module loading, depending on configuration and context. However, callers of <code>sap.ui.define<\/code> must never rely on any synchronous behavior that they might observe in a specific test scenario.\n\nFor example, callers of <code>sap.ui.define<\/code> must not use the module export value immediately after invoking <code>sap.ui.define<\/code>:\n\n<pre>\n  // COUNTER EXAMPLE HOW __NOT__ TO DO IT\n\n  // define a class Something as AMD module\n  sap.ui.define('Something', [], function() {\n    var Something = function() {};\n    return Something;\n  });\n\n  // DON'T DO THAT!\n  // accessing the class _synchronously_ after sap.ui.define was called\n  new Something();\n\n<\/pre>\n\nApplications that need to ensure synchronous module definition or synchronous loading of dependencies <b>MUST<\/b> use the deprecated legacy APIs {@link jQuery.sap.declare} and {@link jQuery.sap.require}.\n\n<h3>(No) Global References<\/h3>\n\nTo be in line with AMD best practices, modules defined with <code>sap.ui.define<\/code> should not make any use of global variables if those variables are also available as module exports. Instead, they should add dependencies to those modules and use the corresponding parameter of the factory function to access the module exports.\n\nAs the current programming model and the documentation of UI5 heavily rely on global names, there will be a transition phase where UI5 enables AMD modules and local references to module exports in parallel to the old global names. The fourth parameter of <code>sap.ui.define<\/code> has been added to support that transition phase. When this parameter is set to true, the framework provides two additional features\n\n<ol> <li>Before the factory function is called, the existence of the global parent namespace for the current module is ensured<\/li> <li>The module export returned by the module's factory function will be automatically exported under the global name which is derived from the ID of the module<\/li> <\/ol>\n\nThe parameter lets the framework know whether any of those two operations is needed or not. In future versions of UI5, a central configuration option is planned to suppress those 'exports'.\n\n<h3>Third Party Modules<\/h3> Although third party modules don't use UI5 APIs, they still can be listed as dependencies in a <code>sap.ui.define<\/code> call. They will be requested and executed like UI5 modules, but to make their exports available, so called <em>shims<\/em> have to be defined.\n\nNote that UI5 temporarily deactivates an existing AMD loader while it executes third party modules known to support AMD. This sounds contradictorily at a first glance as UI5 wants to support AMD, but for now it is necessary to fully support UI5 applications that rely on global names for such modules.\n\nFor third-party modules that UI5 delivers (e.g. those in namespace <code>sap/ui/thirdparty/<\/code>), the necessary shims are defined by UI5 itself by executing the private module <code>ui5loader-autoconfig.js<\/code> during bootstrap.\n\nExample: <pre>\n  // module 'Something' wants to use third party library 'URI.js'\n  // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'\n  // the following shim helps UI5 to correctly load URI.js and to retrieve the module's export value\n  // Apps don't have to define that shim, it is already applied by ui5loader-autconfig.js\n  sap.ui.loader.config({\n    shim: {\n      'sap/ui/thirdparty/URI': {\n         amd: true, // URI.js reacts on an AMD loader, this flag lets UI5 temp. disable such loaders\n         exports: 'URI' // name of the global variable under which URI.js exports its module value\n      }\n    }\n  });\n\n  // now the module can be retrieved like other modules\n  sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {\n\n    new URIModuleValue(...); // same as the global 'URI' name: new URI(...)\n\n    ...\n  });\n<\/pre>\n\n<h3>Differences to Standard AMD<\/h3>\n\nThe current implementation of <code>sap.ui.define<\/code> differs from the AMD specification (https://github.com/amdjs/amdjs-api) or from concrete AMD loaders like <code>requireJS<\/code> in several aspects: <ul> <li>The name <code>sap.ui.define<\/code> is different from the plain <code>define<\/code>. This has two reasons: first, it avoids the impression that <code>sap.ui.define<\/code> is an exact implementation of an AMD loader. And second, it allows the coexistence of an AMD loader (e.g. requireJS) and <code>sap.ui.define<\/code> in one application as long as UI5 or applications using UI5 are not fully prepared to run with an AMD loader. Note that the difference of the API names also implies that the UI5 loader can't be used to load 'real' AMD modules as they expect methods <code>define<\/code> and <code>require<\/code> to be available. Modules that use Unified Module Definition (UMD) syntax, can be loaded, but only when no AMD loader is present or when they expose their export also to the global namespace, even when an AMD loader is present (as e.g. jQuery does) or when a shim is defined for them using the <code>amd:true<\/code> flag (see example above)<\/li> <li>Depending on configuration and the current context, <code>sap.ui.define<\/code> loads the dependencies of a module either synchronously using a sync XHR call + eval or asynchronously via script tags. The sync loading is basically a tribute to the synchronous history of UI5. There's no way for a module developer to enforce synchronous loading of the dependencies and on the long run, sync loading will be faded out. Applications that need to ensure synchronous loading of dependencies <b>MUST<\/b> use the deprecated legacy APIs like {@link jQuery.sap.require}.<\/li> <li><code>sap.ui.define<\/code> does not support plugins to use other file types, formats or protocols. It is not planned to support this in future<\/li> <li><code>sap.ui.define<\/code> does not support absolute URLs as module names (dependencies) nor does it allow module names that start with a slash. To refer to a module at an absolute URL, a resource root can be registered that points to that URL (or to a prefix of it).<\/li> <li><code>sap.ui.define<\/code> does <b>not<\/b> support the 'sugar' of requireJS where CommonJS style dependency declarations using <code>sap.ui.require(\"something\")<\/code> are automagically converted into <code>sap.ui.define<\/code> dependencies before executing the factory function.<\/li> <\/ul>\n\n<h3>Limitations, Design Considerations<\/h3> <ul> <li><b>Limitation<\/b>: as dependency management is not supported for Non-UI5 modules, the only way to ensure proper execution order for such modules currently is to rely on the order in the dependency array. Obviously, this only works as long as <code>sap.ui.define<\/code> uses synchronous loading. It will be enhanced when asynchronous loading is implemented.<\/li> <li>It was discussed to enforce asynchronous execution of the module factory function (e.g. with a timeout of 0). But this would have invalidated the current migration scenario where a sync <code>jQuery.sap.require<\/code> call can load a <code>sap.ui.define<\/code>'ed module. If the module definition would not execute synchronously, the synchronous contract of the require call would be broken (default behavior in existing UI5 applications)<\/li> <li>A single file must not contain multiple calls to <code>sap.ui.define<\/code>. Multiple calls currently are only supported in the so called 'preload' files that the UI5 merge tooling produces. The exact details of how this works might be changed in future implementations and are not part of the API contract<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn(sModuleName?: String, aDependencies?: [String], vFactory: fn() | Object, bExport?: Boolean)"},"model":"sap.ui.model","xmlfragment":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.core.Fragment.load} instead<br>Instantiates an XML-based Fragment.\n\nTo instantiate a fragment, call: <pre>\n   sap.ui.xmlfragment([sId], sFragmentName, [oController]);\n<\/pre> The fragment instance ID is optional and will be used as prefix for the ID of all contained controls. If no ID is passed, controls will not be prefixed. The <code>sFragmentName<\/code> must correspond to an XML fragment which can be loaded via the module system (fragmentName + \".fragment.xml\") and which defines the fragment. If <code>oController<\/code> is given, the methods referenced in the fragment will be called on this controller.\n\nNote that fragments may require a controller to be given and certain methods to be available.\n\n<h3>Advanced usage:<\/h3> To instantiate a fragment and optionally directly give the XML definition instead of loading it from a file, call: <pre>\n    sap.ui.xmlfragment(oFragmentConfig, [oController]);\n<\/pre> The <code>oFragmentConfig<\/code> object can either have a <code>fragmentName<\/code> or a <code>fragmentContent<\/code> property, but not both. <code>fragmentContent<\/code> can hold the fragment definition as XML string; if not given, <code>fragmentName<\/code> must be given and the fragment content definition is loaded via the module system. Again, if <code>oController<\/code> is given, the methods referenced in the fragment will be called on this controller.","!static":"true","!category":"function","!type":"fn(sId: String, vFragment: String | Object, oController?: sap.ui.core.mvc.Controller | Object) -> [sap.ui.core.Control | sap.ui.core.Control]"},"require.toUrl":{"!description":"Calculates a URL from the provided resource name.\n\nThe calculation takes any configured ID mappings or resource paths into account (see {@link sap.ui.loader.config config options map and paths}. It also supports relative segments such as <code>./<\/code> and <code>../<\/code> within the path, but not at its beginning. If relative navigation would cross the root namespace (e.g. <code>sap.ui.require.toUrl(\"../\")<\/code>) or when the resource name starts with a slash or with a relative segment, an error is thrown.\n\n<b>Note:<\/b> <code>toUrl<\/code> does not resolve the returned URL; whether it is an absolute URL or a relative URL depends on the configured <code>baseUrl<\/code> and <code>paths<\/code>.","!static":"true","!category":"function","!type":"fn(sName: String) -> String"},"app":"sap.ui.app","!description":"The <code>sap.ui<\/code> namespace is the central OpenAjax compliant entry point for UI related JavaScript functionality provided by SAP.","controller":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use {@link sap.ui.core.mvc.Controller.create Controller.create} or {@link sap.ui.core.mvc.Controller.extend Controller.extend} instead.<br>Defines a controller class or creates an instance of an already defined controller class.\n\nWhen a name and a controller implementation object is given, a new controller class of the given name is created. The members of the implementation object will be copied into each new instance of that controller class (shallow copy). <b>Note<\/b>: as the members are shallow copied, controller instances will share all object values. This might or might not be what applications expect.\n\nIf only a name is given, a new instance of the named controller class is returned.","!static":"true","!category":"function","!type":"fn(sName: String, oControllerImpl?: Object, bAsync?: Boolean) -> undefined | sap.ui.core.mvc.Controller | Promise"},"test":"sap.ui.test","resource":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56.0 use <code>sap.ui.require.toUrl<\/code> instead.<br>Returns the URL of a resource that belongs to the given library and has the given relative location within the library. This is mainly meant for static resources like images that are inside the library. It is NOT meant for access to JavaScript modules or anything for which a different URL has been registered with jQuery.sap.registerModulePath(). For these cases use jQuery.sap.getModulePath(). It DOES work, however, when the given sResourcePath starts with \"themes/\" (= when it is a theme-dependent resource). Even when for this theme a different location outside the normal library location is configured.","!static":"true","!category":"function","!type":"fn(sLibraryName: String, sResourcePath: String) -> String"},"Device":"sap.ui.Device","htmlview":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Use {@link sap.ui.core.mvc.HTMLView.create HTMLView.create} instead<br>Defines or creates an instance of a declarative HTML view.\n\nThe behavior of this method depends on the signature of the call and on the current context.\n\n<ul> <li>View Definition <code>sap.ui.htmlview(sId, vView)<\/code>: Defines a view of the given name with the given implementation. sId must be the views name, vView must be an object and can contain implementations for any of the hooks provided by HTMLView<\/li> <li>View Instantiation <code>sap.ui.htmlview(sId?, vView)<\/code>: Creates an instance of the view with the given name (and id)<\/li>. <\/ul>\n\nAny other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will be created automatically.","!static":"true","!category":"function","!type":"fn(sId: String, vView: String | Object) -> sap.ui.core.mvc.HTMLView | undefined"},"htmlfragment":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.core.Fragment.load} instead<br>Instantiates an HTML-based Fragment.\n\nTo instantiate a fragment, call: <pre>\n   sap.ui.htmlfragment([sId], sFragmentName, [oController]);\n<\/pre> The fragment instance ID is optional and will be used as prefix for the ID of all contained controls. If no ID is passed, controls will not be prefixed. The <code>sFragmentName<\/code> must correspond to an HTML fragment which can be loaded via the module system (fragmentName + \".fragment.html\") and which defines the fragment. If <code>oController<\/code> is given, the methods referenced in the fragment will be called on this controller. Note that fragments may require a controller to be given and certain methods to be available.\n\n<h3>Advanced usage:<\/h3> To instantiate a fragment and optionally directly give the HTML definition instead of loading it from a file, call: <pre>\n    sap.ui.htmlfragment(oFragmentConfig, [oController]);\n<\/pre> The <code>oFragmentConfig<\/code> object can either have a <code>fragmentName<\/code> or a <code>fragmentContent<\/code> property, but not both of them. <code>fragmentContent<\/code> can hold the fragment definition as XML string; if not given, <code>fragmentName<\/code> must be given and the fragment content definition is loaded by the module system. Again, if <code>oController<\/code> is given, any methods referenced in the fragment will be called on this controller.","!static":"true","!category":"function","!type":"fn(sId: String, vFragment: String | Object, oController?: sap.ui.core.mvc.Controller | Object) -> [sap.ui.core.Control | sap.ui.core.Control]"},"xmlview":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Use {@link sap.ui.core.mvc.XMLView.create XMLView.create} instead<br>Instantiates an XMLView of the given name and with the given ID.\n\nThe <code>vView<\/code> can either be the name of the module that contains the view definition or it can be a configuration object with properties <code>viewName<\/code>, <code>viewContent<\/code> and a <code>controller<\/code> property (more properties are described in the parameters section below).\n\nIf a <code>viewName<\/code> is given, it behaves the same as when <code>vView<\/code> is a string: the named resource will be loaded and parsed as XML. Alternatively, an already loaded view definition can be provided as <code>viewContent<\/code>, either as XML string or as an already parsed XML document. Exactly one of <code>viewName<\/code> and <code>viewContent<\/code> must be given, if none or both are given, an error will be reported. The <code>controller<\/code> property is optional and can hold a controller instance. When given, it overrides the controller class defined in the view definition.\n\nWhen property <code>async<\/code> is set to true, the view definition and the controller class (and its dependencies) will be loaded asynchronously. Any controls used in the view might be loaded sync or async, depending on the processingMode. Even when the view definition is provided as string or XML Document, controller or controls might be loaded asynchronously. In any case a view instance will be returned synchronously by this factory API, but its content (control tree) might appear only later. Also see {@link sap.ui.core.mvc.View#loaded}.\n\n<strong>Note<\/strong>: If an XML document is given, it might be modified during view construction.\n\n<strong>Note<\/strong>: On root level, you can only define content for the default aggregation, e.g. without adding the <code>&lt;content&gt;<\/code> tag. If you want to specify content for another aggregation of a view like <code>dependents<\/code>, place it in a child control's dependents aggregation or add it by using {@link sap.ui.core.mvc.XMLView#addDependent}.\n\n<strong>Note<\/strong>: If you enable caching, you need to take care of the invalidation via keys. Automatic invalidation takes only place if the UI5 version or the component descriptor (manifest.json) change. This is still an experimental feature and may experience slight changes of the invalidation parameters or the cache key format.\n\nLike with any other control, <code>sId<\/code> is optional and an ID will be created automatically.","!static":"true","!category":"function","!type":"fn(sId: String, vView: String | Object) -> sap.ui.core.mvc.XMLView"},"require":{"!description":"Resolves one or more module dependencies.\n\n<h3>Synchronous Retrieval of a Single Module Export Value (Probing)<\/h3>\n\nWhen called with a single string, that string is assumed to be the ID of an already loaded module and the export of that module is returned. If the module has not been loaded yet, or if it is a Non-UI5 module (e.g. third-party module) without a shim, <code>undefined<\/code> is returned.\n\nThis signature variant allows synchronous access to module exports without initiating module loading.\n\nSample: <pre>\n  var JSONModel = sap.ui.require(\"sap/ui/model/json/JSONModel\");\n<\/pre>\n\nFor modules that are known to be UI5 modules, this signature variant can be used to check whether the module has been loaded.\n\n<h3>Asynchronous Loading of Multiple Modules<\/h3>\n\nIf an array of strings is given and (optionally) a callback function, then the strings are interpreted as module IDs and the corresponding modules (and their transitive dependencies) are loaded. Then the callback function will be called asynchronously. The module exports of the specified modules will be provided as parameters to the callback function in the same order in which they appeared in the dependencies array.\n\nThe return value for the asynchronous use case is <code>undefined<\/code>.\n\n<pre>\n  sap.ui.require(['sap/ui/model/json/JSONModel', 'sap/ui/core/UIComponent'], function(JSONModel,UIComponent) {\n\n    var MyComponent = UIComponent.extend('MyComponent', {\n      ...\n    });\n    ...\n\n  });\n<\/pre>\n\nThis method uses the same variation of the {@link jQuery.sap.getResourcePath unified resource name} syntax that {@link sap.ui.define} uses: module names are specified without the implicit extension '.js'. Relative module names are not supported.","!static":"true","!category":"function","!type":"fn(vDependencies: [String | String], fnCallback?: fn(), fnErrback?: fn()) -> Object | undefined"},"getCore":{"!description":"Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.","!static":"true","!category":"function","!type":"fn() -> sap.ui.core.Core"},"setRoot":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use {@link sap.ui.core.Control#placeAt Control#placeAt} instead.<br>Displays the control tree with the given root inside the area of the given DOM reference (or inside the DOM node with the given ID) or in the given Control.\n\nExample: <pre>\n  &lt;div id=\"SAPUI5UiArea\">&lt;/div>\n  &lt;script>\n    var oRoot = new sap.ui.commons.Label();\n    oRoot.setText(\"Hello world!\");\n    sap.ui.setRoot(\"SAPUI5UiArea\", oRoot);\n  &lt;/script>\n<\/pre> <p>\n\nThis is a shortcut for <code>sap.ui.getCore().setRoot()<\/code>.\n\nInternally, if a string is given that does not identify a UIArea or a control then implicitly a new <code>UIArea<\/code> is created for the given DOM reference and the given control is added.","!static":"true","!category":"function","!type":"fn(oDomRef: String | Element | sap.ui.core.Control, oControl: sap.ui.base.Interface | sap.ui.core.Control)"},"lazyRequire":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 Lazy loading enforces synchronous requests and therefore has been deprecated without a replacement. Instead of loading classes via lazy stubs, they should be required as dependencies of an AMD module (using {@link sap.ui.define}) or on demand with a call to {@link sap.ui.require}.<br>Creates a lazy loading stub for a given class <code>sClassName<\/code>.\n\nIf the class has been loaded already, nothing is done. Otherwise a stub object or constructor and - optionally - a set of stub methods are created. All created stubs will load the corresponding module on execution and then delegate to their counterpart in the loaded module.\n\nWhen no methods are given or when the list of methods contains the special name \"new\" (which is an operator can't be used as method name in JavaScript), then a stub <b>constructor<\/b> for class <code>sClassName<\/code> is created. Otherwise, a plain object is created.\n\n<b>Note<\/b>: Accessing any stub as a plain object without executing it (no matter whether it is a function or an object) won't load the module and therefore most likely won't work as expected. This is a fundamental restriction of the lazy loader approach.\n\n<b>Note<\/b>: As a side effect of this method, the namespace containing the given class is created <b>immediately<\/b>.","!static":"true","!category":"function","!type":"fn(sClassName: String, sMethods?: String, sModuleName?: String)"},"VersionInfo":"sap.ui.VersionInfo","core":"sap.ui.core","component":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use {@link sap.ui.core.Component.get Component.get} or {@link sap.ui.core.Component.create Component.create} instead. Note: {@link sap.ui.core.Component.create Component.create} does not support synchronous loading or the deprecated options <em>manifestFirst<\/em> and <em>manifestUrl<\/em>.<br>Creates a new instance of a <code>Component<\/code> or returns the instance of an existing <code>Component<\/code>.\n\nIf you want to look up an existing <code>Component<\/code> you can call this function with a Component ID as parameter: <pre>\n  var oComponent = sap.ui.component(sComponentId);\n<\/pre>\n\nTo create a new instance of a component you pass a component configuration object into this function: <pre>\n  var oComponent = sap.ui.component({\n    name: \"my.Component\",\n    url: \"my/component/location\",\n    id: \"myCompId1\"\n  });\n<\/pre>","!static":"true","!category":"function","!type":"fn(vConfig: String | Object) -> sap.ui.core.Component | Promise"},"fragment":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.core.Fragment.load} instead<br>Instantiate a Fragment - this method loads the Fragment content, instantiates it, and returns this content. The Fragment object itself is not an entity which has further significance beyond this constructor.\n\nTo instantiate an existing Fragment, call this method as: sap.ui.fragment(sName, sType, [oController]); The sName must correspond to a Fragment module which can be loaded via the module system (fragmentName + suffix \".fragment.[typeextension]\") and which defines the Fragment content. If oController is given, the (event handler) methods referenced in the Fragment will be called on this controller. Note that Fragments may require a Controller to be given and certain methods to be available.\n\nThe Fragment types \"XML\", \"JS\" and \"HTML\" are available by default; additional Fragment types can be implemented and added using the sap.ui.core.Fragment.registerType() function.\n\nAdvanced usage: To instantiate a Fragment and give further configuration options, call this method as: sap.ui.fragment(oFragmentConfig, [oController]); The oFragmentConfig object can have the following properties: - \"fragmentName\": the name of the Fragment, as above - \"fragmentContent\": the definition of the Fragment content itself. When this property is given, any given name is ignored. The type of this property depends on the Fragment type, e.g. it could be a string for XML Fragments. - \"type\": the type of the Fragment, as above (mandatory) - \"id\": the ID of the Fragment (optional) Further properties may be supported by future or custom Fragment types. Any given properties will be forwarded to the Fragment implementation.\n\nIf you want to give a fixed ID for the Fragment, please use the advanced version of this method call with the configuration object or use the typed factories like sap.ui.xmlfragment(...) or sap.ui.jsfragment(...). Otherwise the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the ID of all contained controls.","!static":"true","!category":"function","!type":"fn(sName: String, sType: String, oController?: sap.ui.core.mvc.Controller | Object) -> [sap.ui.core.Control | sap.ui.core.Control]"},"!module":"sap/ui/Global","!helpDescription":"The <code>sap.ui<\/code> namespace is the central OpenAjax compliant entry point for UI related JavaScript functionality provided by SAP.","namespace":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 see {@link topic:c78c07c094e04ccfaab659378a1707c7 Creating Control and Class Modules}.<br>Ensures that a given a namespace or hierarchy of nested namespaces exists in the current <code>window<\/code>.","!static":"true","!category":"function","!type":"fn(sNamespace: String) -> Object"},"templateview":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 use {@link sap.ui.core.mvc.XMLView} in combination with {@link topic:5ee619fc1370463ea674ee04b65ed83b XML Templating} instead<br>Defines or creates an instance of a template view.\n\nThe behavior of this method depends on the signature of the call and on the current context.\n\n<ul> <li>View Definition <code>sap.ui.templateview(sId, vView)<\/code>: Defines a view of the given name with the given implementation. sId must be the views name, vView must be an object and can contain implementations for any of the hooks provided by templateview<\/li> <li>View Instantiation <code>sap.ui.templateview(sId?, vView)<\/code>: Creates an instance of the view with the given name (and id)<\/li>. <\/ul>\n\nAny other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will be created automatically.","!static":"true","!category":"function","!type":"fn(sId: String, vView: String | Object) -> sap.ui.core.mvc.TemplateView | undefined"},"base":"sap.ui.base"},"sap.ui.core.LocalBusyIndicator":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.14.2 The LocalBusyIndicator Control is not needed anymore by the new implementation of the LBI. Hence, it is not used anymore.<br>The LocalBusyIndicator is a special version of the BusyIndicator. This one doesn't block the whole screen - it just blocks the corresponding control and puts a local animation over the control. To use the functionality of this control the corresponding control needs to be enabled via the 'LocalBusyIndicatorSupport' accordingly to the ListBox control (see the init-function of the ListBox).","extend":{"!description":"Creates a new subclass of class sap.ui.core.LocalBusyIndicator with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThis property is the height of the control that has to be covered. With this height the position of the animation can be properly set.\n\nDefault value is <code>100px<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.LocalBusyIndicator.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new LocalBusyIndicator.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100px)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 100px)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/core/LocalBusyIndicator","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.14.2 The LocalBusyIndicator Control is not needed anymore by the new implementation of the LBI. Hence, it is not used anymore.<br>The LocalBusyIndicator is a special version of the BusyIndicator. This one doesn't block the whole screen - it just blocks the corresponding control and puts a local animation over the control. To use the functionality of this control the corresponding control needs to be enabled via the 'LocalBusyIndicatorSupport' accordingly to the ListBox control (see the init-function of the ListBox).","!proto":"sap.ui.core.Control","!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThis property is the width of the control that has to be covered. With this width the position of the animation can be properly set.\n\nDefault value is <code>100px<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThis property is the height of the control that has to be covered. With this height the position of the animation can be properly set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100px<\/code>.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.core.LocalBusyIndicator","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThis property is the width of the control that has to be covered. With this width the position of the animation can be properly set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100px<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.core.LocalBusyIndicator","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}}},"sap.ui.Device.browser":{"!description":"Contains information about the used browser.","BROWSER":"sap.ui.Device.browser.BROWSER","webview":{"!description":"If this flag is set to <code>true<\/code>, the Safari browser runs in webview mode on iOS.\n\n<b>Note:<\/b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected, technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g. the availability of {@link sap.ui.Device.browser.version}.","!category":"enum","!type":"Boolean"},"chrome":{"!description":"If this flag is set to <code>true<\/code>, a browser that is based on the Chromium browser project is used, such as the Google Chrome browser or the Microsoft Edge (Chromium) browser.","!category":"enum","!type":"Boolean"},"safari":{"!description":"If this flag is set to <code>true<\/code>, the Apple Safari browser is used.\n\n<b>Note:<\/b> This flag is also <code>true<\/code> when the standalone (fullscreen) mode or webview is used on iOS devices. Please also note the flags {@link sap.ui.Device.browser.fullscreen} and {@link sap.ui.Device.browser.webview}.","!category":"enum","!type":"Boolean"},"firefox":{"!description":"If this flag is set to <code>true<\/code>, the Mozilla Firefox browser is used.","!category":"enum","!type":"Boolean"},"mobile":{"!description":"If this flag is set to <code>true<\/code>, the mobile variant of the browser is used or a tablet or phone device is detected.\n\n<b>Note:<\/b> This information might not be available for all browsers.","!category":"enum","!type":"Boolean"},"mozilla":{"!description":"If this flag is set to <code>true<\/code>, a browser featuring a Mozilla engine is used.","!category":"enum","!type":"Boolean"},"!category":"namespace","blink":{"!description":"If this flag is set to <code>true<\/code>, a browser featuring a Blink rendering engine is used.","!category":"enum","!type":"Boolean"},"webkit":{"!description":"If this flag is set to <code>true<\/code>, a browser featuring a Webkit engine is used.\n\n<b>Note:<\/b> This flag is also <code>true<\/code> when the used browser was based on the Webkit engine, but uses another rendering engine in the meantime. For example the Chrome browser started from version 28 and above uses the Blink rendering engine.","!category":"enum","!type":"Boolean"},"version":{"!description":"The version of the browser as <code>float<\/code>.\n\nMight be <code>-1<\/code> if no version can be determined.","!category":"enum","!type":"Number"},"msie":{"!description":"If this flag is set to <code>true<\/code>, the Microsoft Internet Explorer browser is used.","!category":"enum","!type":"Boolean"},"versionStr":{"!description":"The version of the browser as <code>string<\/code>.\n\nMight be empty if no version can be determined.","!category":"enum","!type":"String"},"edge":{"!description":"If this flag is set to <code>true<\/code>, the Microsoft Edge (EdgeHTML) browser is used. The Microsoft Edge (Chromium) browser is reported via the {@link #chrome} flag instead, because it also uses Chromium as its browser engine.","!category":"enum","!type":"Boolean"},"!module":"sap/ui/Device","fullscreen":{"!description":"If this flag is set to <code>true<\/code>, the Safari browser runs in standalone fullscreen mode on iOS.\n\n<b>Note:<\/b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected, technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g. the availability of {@link sap.ui.Device.browser.version}.","!category":"enum","!type":"Boolean"},"!helpDescription":"Contains information about the used browser.","name":{"!description":"The name of the browser.","!category":"enum","!type":"String"},"internet_explorer":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.browser.msie} instead.<br>If this flag is set to <code>true<\/code>, the Microsoft Internet Explorer browser is used.","!category":"enum","!type":"Boolean"}},"sap.ui.model.ContextBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object, oEvents?: Object)","prototype":"sap.ui.model.ContextBinding"},"sap.ui.base.ObjectPool":{"!description":"Manages a pool of objects for reuse, all of the same type; the type has to be specified at construction time.\n\nEach pool maintains a list of free objects of the given type. If {@link sap.ui.base.ObjectPool.prototype.borrowObject} is called, an existing free object is taken from the pool. When no free object is available, a new instance is created by calling the constructor without any arguments. In either case, the {@link sap.ui.base.Poolable#init} method is called on the object to initialize it with the data for the current caller.\n\nWhen the object is no longer needed, it has to be returned to the pool by calling {@link #returnObject}. At that point in time, {@link sap.ui.base.Poolable#reset} is called on the object to remove all data from it. Then it is is added back to the list of free objects for future reuse.\n\nSee {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.\n\nExample: <pre>\n  sap.ui.define([\n    \"sap/ui/base/Event\",\n    \"sap/ui/base/ObjectPool\"\n  ], function(Event, ObjectPool) {\n\n    // create a pool for events\n    var oEventPool = new ObjectPool(Event);\n\n    ...\n\n    // borrow an instance and initialize it at the same time\n    var oEvent = oEventPool.borrowObject('myEvent', this, {foo: 'bar'});\n    // this internally calls oEvent.init('myEvent', this, {foo: 'bar'})\n\n    // return the borrowed object\n    oEventPool.returnObject(oEvent);\n    // this internally calls oEvent.reset()\n\n    ...\n\n  }});\n<\/pre>","extend":{"!description":"Creates a new subclass of class sap.ui.base.ObjectPool with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"borrowObject":{"!description":"Borrows a free object from the pool. Any arguments to this method are forwarded to the init method of the borrowed object.","!static":false,"!category":"function","!type":"fn(arg?: Object) -> Object","parameters":{"arg":"type: any, description: optional initialization parameters for the borrowed object"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.base.ObjectPool.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"returnObject":{"!description":"Returns an object to the pool. The object must have been borrowed from this pool beforehand. The reset method is called on the object before it is added to the set of free objects.","!static":false,"!category":"function","!type":"fn(oObject: Object)","parameters":{"oObject":"type: object, description: The object to return to the pool"}},"!constructorDescription":"Creates an <code>ObjectPool<\/code> for maintaining instances of the given class <code>oObjectClass<\/code>.\n\n<code>oObjectClass<\/code> must implement the {@link sap.ui.base.Poolable} interface.","!module":"sap/ui/base/ObjectPool","!helpDescription":"Manages a pool of objects for reuse, all of the same type; the type has to be specified at construction time.\n\nEach pool maintains a list of free objects of the given type. If {@link sap.ui.base.ObjectPool.prototype.borrowObject} is called, an existing free object is taken from the pool. When no free object is available, a new instance is created by calling the constructor without any arguments. In either case, the {@link sap.ui.base.Poolable#init} method is called on the object to initialize it with the data for the current caller.\n\nWhen the object is no longer needed, it has to be returned to the pool by calling {@link #returnObject}. At that point in time, {@link sap.ui.base.Poolable#reset} is called on the object to remove all data from it. Then it is is added back to the list of free objects for future reuse.\n\nSee {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.\n\nExample: <pre>\n  sap.ui.define([\n    \"sap/ui/base/Event\",\n    \"sap/ui/base/ObjectPool\"\n  ], function(Event, ObjectPool) {\n\n    // create a pool for events\n    var oEventPool = new ObjectPool(Event);\n\n    ...\n\n    // borrow an instance and initialize it at the same time\n    var oEvent = oEventPool.borrowObject('myEvent', this, {foo: 'bar'});\n    // this internally calls oEvent.init('myEvent', this, {foo: 'bar'})\n\n    // return the borrowed object\n    oEventPool.returnObject(oEvent);\n    // this internally calls oEvent.reset()\n\n    ...\n\n  }});\n<\/pre>","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.UIArea":{"getContent":{"!description":"Gets content of aggregation {@link #getContent content}.\n\nContent that is displayed in the UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"!proto":"sap.ui.base.ManagedObject","!category":"class","getId":{"!description":"Returns this <code>UIArea<\/code>'s id (as determined from provided RootNode).","!static":false,"!category":"function","!type":"fn() -> String | null"},"isInvalidateSuppressed":{"!description":"Returns whether rerendering is currently suppressed on this UIArea","!static":false,"!category":"function","!type":"fn()"},"isActive":{"!description":"Checks whether the control is still valid (is in the DOM)","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getRootControl":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use function {@link #getContent} instead<br>Returns the content control of this <code>UIArea<\/code> at the specified index. If no index is given the first content control is returned.","!static":false,"!category":"function","!type":"fn(idx: Number) -> sap.ui.core.Control","parameters":{"idx":"type: int, description: index of the control in the content of this <code>UIArea<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getContent content} : sap.ui.core.Control[]<\/li>\n<li>{@link #getDependents dependents} : sap.ui.core.Control[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","indexOfDependent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getDependents dependents}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oDependent: sap.ui.core.Control) -> Number","parameters":{"oDependent":"type: sap.ui.core.Control, description: The dependent whose index is looked for"}},"setRootControl":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use {@link #removeAllContent} and {@link #addContent} instead<br>Sets the root control to be displayed in this UIArea.\n\nFirst, all old content controls (if any) will be detached from this UIArea (e.g. their parent relationship to this UIArea will be cut off). Then the parent relationship for the new content control (if not empty) will be set to this UIArea and finally, the UIArea will be marked for re-rendering.\n\nThe real re-rendering happens whenever the re-rendering is called. Either implicitly at the end of any control event or by calling sap.ui.getCore().applyChanges().","!static":false,"!category":"function","!type":"fn(oRootControl: sap.ui.base.Interface | sap.ui.core.Control)","parameters":{"oRootControl":"type: sap.ui.base.Interface|sap.ui.core.Control, description: the Control that should be the Root for this <code>UIArea<\/code>."}},"getBindingContext":{"!description":"Provide getBindingContext, as UIArea can be parent of an element.","!static":false,"!category":"function","!type":"fn() -> null"},"isLocked":{"!description":"Returns the locked state of the <code>sap.ui.core.UIArea<\/code>","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setRootNode":{"!description":"Allows setting the root node hosting this instance of <code>UIArea<\/code>.\n\nThe node must have an ID that will be used as ID for this instance of <code>UIArea<\/code>.","!static":false,"!category":"function","!type":"fn(oRootNode: Object)","parameters":{"oRootNode":"type: object, description: the hosting DOM node for this instance of <code>UIArea<\/code>."}},"lock":{"!description":"Locks this instance of UIArea.\n\nRerendering and eventing will not be active as long as no {@link #unlock} is called.","!static":false,"!category":"function","!type":"fn()"},"destroyContent":{"!description":"Destroys all the content in the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIArea"},"destroyDependents":{"!description":"Destroys all the dependents in the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIArea"},"getRootNode":{"!description":"Returns the Root Node hosting this instance of <code>UIArea<\/code>.","!static":false,"!category":"function","!type":"fn() -> Element"},"!description":"An area in a page that hosts a tree of UI elements.\n\n<code>UIArea<\/code>s are fully managed by the UI5 {@link sap.ui.core.Core Core}. They cannot be created by the application but are implicitly created by the Core when controls are placed via {@link sap.ui.core.Control#placeAt Control#placeAt} at a new DOM element for which no <code>UIArea<\/code> exists yet.\n\n<code>UIArea<\/code>s are essential for the rendering of controls. Controls get rendered only when they are directly or indirectly contained in the <code>content<\/code> aggregation of a <code>UIArea<\/code>. <code>Control#placeAt<\/code> ensures that there is a <code>UIArea<\/code> with the given ID and adds the control to the <code>content<\/code> aggregation of this <code>UIArea<\/code>. Whenever controls become invalidated, the corresponding <code>UIArea<\/code> remembers this and takes care of the re-rendering of the control.\n\nAdditionally, <code>UIArea<\/code>s play an important role in the event handling of controls. They register for a standard set of browser events. For each incoming event, they identify the control to which the target of the event belongs to and dispatch the event to that control. This dispatching reduces the number of event handlers in a page.\n\n<code>UIArea<\/code>s also act as a data binding root for their contained controls. Whenever a model is attached to or detached from the Core, this change is propagated to all <code>UIAreas<\/code> which in turn propagate it further down to their aggregated children, etc.\n\nThe special aggregation named <code>dependents<\/code> also participates in the databinding, but its content is not rendered by the <code>UIArea<\/code>. It can be used for popups or similar controls that are not contained in the normal control tree, but nevertheless should receive model or binding context updates.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.UIArea.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"unlock":{"!description":"Un-Locks this instance of UIArea.\n\nRerendering and eventing will now be enabled again.","!static":false,"!category":"function","!type":"fn()"},"removeDependent":{"!description":"Removes a dependent from the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn(vDependent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vDependent":"type: int|string|sap.ui.core.Control, description: The dependent to remove or its index or id"}},"getDependents":{"!description":"Gets content of aggregation {@link #getDependents dependents}.\n\nDependent objects whose lifecycle is bound to the UIArea but which are not automatically rendered by the UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"indexOfContent":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation {@link #getContent content}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> Number","parameters":{"oContent":"type: sap.ui.core.Control, description: The content whose index is looked for"}},"removeAllDependents":{"!description":"Removes all the controls from the aggregation {@link #getDependents dependents}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"removeAllContent":{"!description":"Removes all the controls from the aggregation {@link #getContent content}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Control]"},"invalidate":{"!description":"Triggers asynchronous re-rendering of the <code>UIArea<\/code>'s content.\n\nServes as an end-point for the bubbling of invalidation requests along the element/control aggregation hierarchy.","!static":false,"!category":"function","!type":"fn()"},"addContent":{"!description":"Adds some content to the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control) -> sap.ui.core.UIArea","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to add; if empty, nothing is inserted"}},"getEventingParent":{"!description":"Returns the Core's event provider as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.EventProvider"},"removeContent":{"!description":"Removes a content from the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(vContent: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","parameters":{"vContent":"type: int|string|sap.ui.core.Control, description: The content to remove or its index or id"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.UIArea with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/core/UIArea","addDependent":{"!description":"Adds some dependent to the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn(oDependent: sap.ui.core.Control) -> sap.ui.core.UIArea","parameters":{"oDependent":"type: sap.ui.core.Control, description: The dependent to add; if empty, nothing is inserted"}},"!helpDescription":"An area in a page that hosts a tree of UI elements.\n\n<code>UIArea<\/code>s are fully managed by the UI5 {@link sap.ui.core.Core Core}. They cannot be created by the application but are implicitly created by the Core when controls are placed via {@link sap.ui.core.Control#placeAt Control#placeAt} at a new DOM element for which no <code>UIArea<\/code> exists yet.\n\n<code>UIArea<\/code>s are essential for the rendering of controls. Controls get rendered only when they are directly or indirectly contained in the <code>content<\/code> aggregation of a <code>UIArea<\/code>. <code>Control#placeAt<\/code> ensures that there is a <code>UIArea<\/code> with the given ID and adds the control to the <code>content<\/code> aggregation of this <code>UIArea<\/code>. Whenever controls become invalidated, the corresponding <code>UIArea<\/code> remembers this and takes care of the re-rendering of the control.\n\nAdditionally, <code>UIArea<\/code>s play an important role in the event handling of controls. They register for a standard set of browser events. For each incoming event, they identify the control to which the target of the event belongs to and dispatch the event to that control. This dispatching reduces the number of event handlers in a page.\n\n<code>UIArea<\/code>s also act as a data binding root for their contained controls. Whenever a model is attached to or detached from the Core, this change is propagated to all <code>UIAreas<\/code> which in turn propagate it further down to their aggregated children, etc.\n\nThe special aggregation named <code>dependents<\/code> also participates in the databinding, but its content is not rendered by the <code>UIArea<\/code>. It can be used for popups or similar controls that are not contained in the normal control tree, but nevertheless should receive model or binding context updates.","getUIArea":{"!description":"Returns this UI area. Needed to stop recursive calls from an element to its parent.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIArea"},"insertDependent":{"!description":"Inserts a dependent into the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn(oDependent: sap.ui.core.Control, iIndex: Number) -> sap.ui.core.UIArea","parameters":{"oDependent":"type: sap.ui.core.Control, description: The dependent to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the dependent should be inserted at; for a negative value of <code>iIndex<\/code>, the dependent is inserted at position 0; for a value greater than the current size of the aggregation, the dependent is inserted at the last position"}},"insertContent":{"!description":"Inserts a content into the aggregation {@link #getContent content}.","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control, iIndex: Number) -> sap.ui.core.UIArea","parameters":{"oContent":"type: sap.ui.core.Control, description: The content to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the content should be inserted at; for a negative value of <code>iIndex<\/code>, the content is inserted at position 0; for a value greater than the current size of the aggregation, the content is inserted at the last position"}},"configureEventLogging":{"!description":"Enabled or disables logging of certain event types.\n\nThe event handling code of class UIArea logs all processed browser events with log level DEBUG. Only some events that occur too frequently are suppressed by default: <code>mousemove<\/code>, <code>mouseover<\/code>, <code>mouseout<\/code>, <code>scroll<\/code>, <code>dragover<\/code>, <code>dragenter<\/code> and <code>dragleave<\/code>.\n\nWith this method, logging can be disabled for further event types or it can be enabled for some or all of the event types listed above. The parameter <code>mEventTypes<\/code> is a map of boolean values keyed by event type names. When the value for an event type coerces to true, events of that type won't be logged.","!static":true,"!category":"function","!type":"fn(mEventTypes?: Object) -> Object","parameters":{"mEventTypes":"type: object, description: Map of logging flags keyed by event types"}}},"sap.ui.test.gherkin.StepDefinitions":{"!description":"Provides the interface between human and machine since a Gherkin feature file is human-readable and the computer does not know how to execute its steps.\n\nIt defines what each step in the Gherkin feature file will actually do when it is executed.","extend":{"!description":"Creates a new subclass of class sap.ui.test.gherkin.StepDefinitions with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"init":{"!description":"Registers the step definitions by calling the method \"register\".","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.gherkin.StepDefinitions.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Meant to be implemented/overridden by a child object. Specifically, the functions \"init\" and \"closeApplication\"\nneed to be overridden.","!module":"sap/ui/test/gherkin/StepDefinitions","!helpDescription":"Provides the interface between human and machine since a Gherkin feature file is human-readable and the computer does not know how to execute its steps.\n\nIt defines what each step in the Gherkin feature file will actually do when it is executed.","!proto":"sap.ui.base.Object","!category":"class","closeApplication":{"!description":"Closes the application and cleans up any mess made by the tests. To avoid erroneous exceptions during test execution, make sure that it is safe to run this method even if the application was never started.","!static":false,"!category":"function","!type":"fn()"},"register":{"!description":"Registers a step definition.","!static":false,"!category":"function","!type":"fn(rRegex: RegExp, fnFunc: fn())","parameters":{"fnFunc":"type: function, description: the function to execute in the event that the regular expression matches. Receives regular expression capturing groups as parameters in the same order that they are specified in the regular expression. If a data table is specified for the step, it will be passed as an additional final parameter. At execution time, all functions within a particular scenario will execute within the same \"this\" context.","rRegex":"type: RegExp, description: the regular expression that matches the feature file step (with leading \"Given\", \"When\", \"Then\", \"But\" or \"*\" removed). E.g. if the feature file has the step \"Then I should be served a coffee\" it will be truncated to \"I should be served a coffee\" and tested against \"rRegex\" to check for a match. The simple regular expression /^I should be served a coffee$/i would match this text. The regular expression can specify capturing groups, which will be passed as parameters to \"fnFunc\"."}}},"jQuery.os":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os} instead<br>Holds information about the current operating system","!module":"jquery.sap.mobile","os":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.name} instead<br>The name of the operating system; currently supported are: \"ios\", \"android\", \"blackberry\"","!category":"enum","!type":"String"},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os} instead<br>Holds information about the current operating system","blackberry":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.blackberry} instead<br>Whether the current operating system is BlackBerry","!category":"enum","!type":"Boolean"},"android":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.android} instead<br>Whether the current operating system is Android","!category":"enum","!type":"Boolean"},"fVersion":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.version} instead<br>The version of the operating system parsed as a float (major and first minor version)","!category":"enum","!type":"Number"},"winphone":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.windows_phone} instead<br>Whether the current operating system is Windows Phone","!category":"enum","!type":"Boolean"},"!category":"namespace","ios":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.ios} instead<br>Whether the current operating system is Apple iOS","!category":"enum","!type":"Boolean"},"version":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use {@link sap.ui.Device.os.versionStr} instead<br>The version of the operating system as a string (including minor versions)","!category":"enum","!type":"String"}},"sap.ui.core.tmpl":{"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"DOMAttribute":"sap.ui.core.tmpl.DOMAttribute_obj","!category":"namespace","DOMElement":"sap.ui.core.tmpl.DOMElement_obj","content":{"!description":"The Template definition as a String.","!category":"enum","!type":"String"},"Template":"sap.ui.core.tmpl.Template_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"HandlebarsTemplate":"sap.ui.core.tmpl.HandlebarsTemplate_obj","name":{"!description":"Name of the DOM attribute","!category":"enum","!type":"String"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"context":{"!description":"The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.","!category":"enum","!type":"Object"},"TemplateControl":"sap.ui.core.tmpl.TemplateControl_obj","text":{"!description":"The text content of the DOM element","!category":"enum","!type":"String"},"tag":{"!description":"The HTML-tag of the DOM element which contains the text","!category":"enum","!type":"String"},"value":{"!description":"Value of the DOM attribute","!category":"enum","!type":"String"}},"sap.ui.model.resource.ResourceModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oData: Object)","prototype":"sap.ui.model.resource.ResourceModel"},"sap.ui.base.ManagedObjectMetadata":{"getEvent":{"!description":"Returns an info object for the named public event of the described class, no matter whether the event was defined by the class itself or by one of its ancestor classes.\n\nIf neither the described class nor its ancestor classes define an event with the given name, <code>undefined<\/code> is returned.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: name of the event"}},"getDefaultAggregation":{"!description":"Returns an info object for the default aggregation of the described class.\n\nIf the class itself does not define a default aggregation, then the info object for the default aggregation of the parent class is returned.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.Metadata","getAllAggregations":{"!description":"Returns a map of info objects for all public aggregations of the described class, including public aggregations form the ancestor classes.\n\nThe returned map keys the aggregation info objects by their name. In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"!category":"class","getManagedProperty":{"!description":"Returns the info object for the named public or private property declared by the described class or by any of its ancestors.\n\nIf the name is not given (or has a falsy value), then it is substituted by the name of the default property of the described class (if it is defined).\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: name of the property to be retrieved or empty"}},"getAllEvents":{"!description":"Returns a map of info objects for all public events of the described class, including public events form the ancestor classes.\n\nThe returned map keys the event info objects by their name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"getLibraryName":{"!description":"Returns the name of the library that contains the described UIElement.","!static":false,"!category":"function","!type":"fn() -> String"},"getAssociations":{"!description":"Returns a map of info objects for all public associations of the described class. Associations declared by ancestor classes are not included.\n\nThe returned map keys the association info objects by their name. In case of 0..1 associations this is the singular name, otherwise it is the plural name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"forwardAggregation":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(sForwardedSourceAggregation: String, mOptions: Object)","parameters":{"sForwardedSourceAggregation":"type: string, description: The name of the aggregation to be forwarded","mOptions":"type: object, description: The forwarding target as well as additional options"}},"getPropertyLikeSetting":{"!description":"Returns an info object for a public setting with the given name that either is a public property or a public aggregation of cardinality 0..1 and with at least one simple alternative type. The setting can be defined by the class itself or by one of its ancestor classes.\n\nIf neither the described class nor its ancestor classes define a suitable setting with the given name, <code>undefined<\/code> is returned.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: name of the property like setting"}},"isGeneratedId":{"!description":"Test whether a given ID looks like it was automatically generated.\n\nExamples: <pre>\nTrue for:\n  \"foo--__bar04--baz\"\n  \"foo--__bar04\"\n  \"__bar04--baz\"\n  \"__bar04\"\n  \"__bar04--\"\n  \"__bar04--foo\"\nFalse for:\n  \"foo__bar04\"\n  \"foo__bar04--baz\"\n<\/pre>\n\nSee {@link sap.ui.base.ManagedObjectMetadata.prototype.uid} for details on ID generation.","!static":true,"!category":"function","!type":"fn(sId: String) -> Boolean","parameters":{"sId":"type: string, description: the ID that should be tested"}},"getEvents":{"!description":"Returns a map of info objects for the public events of the described class. Events declared by ancestor classes are not included.\n\nThe returned map keys the event info objects by their name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"uid":{"!description":"Calculates a new ID based on a prefix.\n\nTo guarantee uniqueness of the generated IDs across all ID prefixes, prefixes must not end with digits.","!static":true,"!category":"function","!type":"fn(sIdPrefix: String) -> String","parameters":{"sIdPrefix":"type: string, description: prefix for the new ID"}},"getAggregation":{"!description":"Returns an info object for the named public aggregation of the described class no matter whether the aggregation was defined by the class itself or by one of its ancestor classes.\n\nIf neither the class nor its ancestor classes define a public aggregation with the given name, <code>undefined<\/code> is returned.\n\nIf the name is not given (or has a falsy value), then it is substituted by the name of the default aggregation of the 'described class' (if any).\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName?: String) -> Object","parameters":{"sName":"type: string, description: name of the aggregation or empty"}},"!constructorDescription":"Creates a new metadata object that describes a subclass of ManagedObject.\n\n<b>Note:<\/b> Code outside the <code>sap.ui.base<\/code> namespace must not call this\nconstructor directly. Instances will be created automatically when a new class is\ndefined with one of the {@link sap.ui.base.ManagedObject.extend <i>SomeClass<\/i>.extend}\nmethods.\n\n<b>Note<\/b>: throughout this class documentation, the described subclass of ManagedObject\nis referenced as <i>the described class<\/i>.","getAssociation":{"!description":"Returns an info object for the named public association of the described class, no matter whether the association was defined by the class itself or by one of its ancestor classes.\n\nIf neither the described class nor its ancestor classes define an association with the given name, <code>undefined<\/code> is returned.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: name of the association"}},"getPropertyDefaults":{"!description":"Returns a map of default values for all properties declared by the described class and its ancestors, keyed by the property name.","!static":false,"!category":"function","!type":"fn() -> Object.<string,any>"},"hasEvent":{"!description":"Checks the existence of the given event by its name","!static":false,"!category":"function","!type":"fn(sName: String) -> Boolean","parameters":{"sName":"type: string, description: name of the event"}},"getAggregations":{"!description":"Returns a map of info objects for the public aggregations of the described class. Aggregations declared by ancestor classes are not included.\n\nThe returned map keys the aggregation info objects by their name. In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"addAPIParentInfoBegin":{"!description":"Adds information to the given oAggregatedObject about its original API parent (or a subsequent API parent in case of multiple forwarding). MUST be called before an element is forwarded to another internal aggregation (in case forwarding is done explicitly/manually without using the declarative mechanism introduced in UI5 1.56).\n\nCAUTION: ManagedObjectMetadata.addAPIParentInfoEnd(...) MUST be called AFTER the element has been forwarded (set to an aggregation of an internal control). These two calls must wrap the forwarding.","!static":true,"!category":"function","!type":"fn(oAggregatedObject: sap.ui.base.ManagedObject, oParent: sap.ui.base.ManagedObject, sAggregationName: String)","parameters":{"oAggregatedObject":"type: sap.ui.base.ManagedObject, description: Object to which the new API parent info should be added","oParent":"type: sap.ui.base.ManagedObject, description: Object that is a new API parent","sAggregationName":"type: string, description: the name of the aggregation under which oAggregatedObject is aggregated by the API parent"}},"getAllPrivateAssociations":{"!description":"Returns a map of info objects for all private (hidden) associations of the described class, including private associations from the ancestor classes.\n\nThe returned map contains association info objects keyed by the association name. In case of 0..1 associations this is the singular name, otherwise it is the plural name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"setDesignTimeDefaultMapping":{"!description":"Sets the map with the module names to predefined DesignTime objects which will be available in {@link sap.ui.base.ManagedObjectMetadata.prototype.loadDesignTime}","!static":true,"!category":"function","!type":"fn(mPredefinedDesignTime: Object.<string,string>)","parameters":{"mPredefinedDesignTime":"type: Object.<string,string>, description: map containing the module names"}},"!description":"<strong>Note about Info Objects<\/strong>\n\nSeveral methods in this class return info objects that describe a property, aggregation, association or event of the class described by this metadata object. The type, structure and behavior of these info objects is not yet documented and not part of the stable, public API.\n\nCode using such methods and the returned info objects therefore needs to be aware of the following restrictions:\n\n<ul> <li>the set of properties exposed by each info object, their type and value might change as well as the class of the info object itself.\n\nProperties that represent settings provided during class definition (in the oClassInfo parameter of the 'extend' call, e.g. 'type', 'multiple' of an aggregation) are more likely to stay the same than additional, derived properties like '_iKind'.<\/li>\n\n<li>info objects must not be modified / enriched although they technically could.<\/li>\n\n<li>the period of validity of info objects is not defined. They should be referenced only for a short time and not be kept as members of long living objects or closures.<\/li>\n\n<\/ul>","getProperty":{"!description":"Returns an info object for the named public property of the described class, no matter whether the property was defined by the class itself or by one of its ancestor classes.\n\nIf neither the described class nor its ancestor classes define a property with the given name, <code>undefined<\/code> is returned.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: name of the property"}},"addAPIParentInfoEnd":{"!description":"Completes the information about the original API parent of the given element. MUST be called after an element is forwarded to another internal aggregation. For every call to ManagedObjectMetadata.addAPIParentInfoBegin(...) this method here must be called as well.","!static":true,"!category":"function","!type":"fn(oAggregatedObject: sap.ui.base.ManagedObject)","parameters":{"oAggregatedObject":"type: sap.ui.base.ManagedObject, description: Object to which the new API parent info should be added"}},"getAllAssociations":{"!description":"Returns a map of info objects for all public associations of the described class, including public associations form the ancestor classes.\n\nThe returned map keys the association info objects by their name. In case of 0..1 associations this is the singular name, otherwise it is the plural name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"getAllPrivateProperties":{"!description":"Returns a map of info objects for all private (hidden) properties of the described class, including private properties from the ancestor classes.\n\nThe returned map contains property info objects keyed by the property name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"getProperties":{"!description":"Returns a map of info objects for the public properties of the described class. Properties declared by ancestor classes are not included.\n\nThe returned map keys the property info objects by their name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"loadDesignTime":{"!description":"Load and returns the design time metadata asynchronously. It inherits/merges parent design time metadata and if provided merges also instance specific design time metadata that was provided via the dt namespace.\n\nBe aware that ManagedObjects do not ensure to have unique IDs. This may lead to issues if you would like to persist DesignTime based information. In that case you need to take care of identification yourself.","!static":false,"!category":"function","!type":"fn(oManagedObject?: sap.ui.base.ManagedObject, sScopeKey?: String) -> Promise","parameters":{"oManagedObject":"type: sap.ui.base.ManagedObject, description: instance that could have instance specific design time metadata","sScopeKey":"type: string, description: scope name for which metadata will be resolved, see sap.ui.base.ManagedObjectMetadataScope"}},"getDefaultAggregationName":{"!description":"Returns the name of the default aggregation of the described class.\n\nIf the class itself does not define a default aggregation, then the default aggregation of the parent is returned. If no class in the hierarchy defines a default aggregation, <code>undefined<\/code> is returned.","!static":false,"!category":"function","!type":"fn() -> String"},"hasProperty":{"!description":"Checks the existence of the given public property by its name","!static":false,"!category":"function","!type":"fn(sName: String) -> Boolean","parameters":{"sName":"type: string, description: name of the property"}},"getAllProperties":{"!description":"Returns a map of info objects for all public properties of the described class, including public properties from the ancestor classes.\n\nThe returned map keys the property info objects by their name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"getManagedAggregation":{"!description":"Returns the info object for the named public or private aggregation declared by the described class or by any of its ancestors.\n\nIf the name is not given (or has a falsy value), then it is substituted by the name of the default aggregation of the described class (if it is defined).\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sAggregationName: String) -> Object","parameters":{"sAggregationName":"type: string, description: name of the aggregation to be retrieved or empty"}},"!module":"sap/ui/base/ManagedObjectMetadata","getManagedAssociation":{"!description":"Returns the info object for the named public or private association declared by the described class or by any of its ancestors.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: name of the association to be retrieved"}},"!helpDescription":"<strong>Note about Info Objects<\/strong>\n\nSeveral methods in this class return info objects that describe a property, aggregation, association or event of the class described by this metadata object. The type, structure and behavior of these info objects is not yet documented and not part of the stable, public API.\n\nCode using such methods and the returned info objects therefore needs to be aware of the following restrictions:\n\n<ul> <li>the set of properties exposed by each info object, their type and value might change as well as the class of the info object itself.\n\nProperties that represent settings provided during class definition (in the oClassInfo parameter of the 'extend' call, e.g. 'type', 'multiple' of an aggregation) are more likely to stay the same than additional, derived properties like '_iKind'.<\/li>\n\n<li>info objects must not be modified / enriched although they technically could.<\/li>\n\n<li>the period of validity of info objects is not defined. They should be referenced only for a short time and not be kept as members of long living objects or closures.<\/li>\n\n<\/ul>","hasAggregation":{"!description":"Checks the existence of the given public aggregation by its name.","!static":false,"!category":"function","!type":"fn(sName: String) -> Boolean","parameters":{"sName":"type: string, description: name of the aggregation"}},"getAllPrivateAggregations":{"!description":"Returns a map of info objects for all private (hidden) aggregations of the described class, including private aggregations from the ancestor classes.\n\nThe returned map contains aggregation info objects keyed by the aggregation name. In case of 0..1 aggregations this is the singular name, otherwise it is the plural name.\n\n<b>Warning:<\/b> Type, structure and behavior of the returned info objects is not documented and therefore not part of the API. See the {@link #constructor Notes about Info objects} in the constructor documentation of this class.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"hasAssociation":{"!description":"Checks the existence of the given public association by its name","!static":false,"!category":"function","!type":"fn(sName: String) -> Boolean","parameters":{"sName":"type: string, description: name of the association"}}},"sap.ui.core.util.ExportType":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Base export type. Subclasses can be used for {@link sap.ui.core.util.Export Export}.","setCharset":{"!description":"Sets a new value for property {@link #getCharset charset}.\n\nCharset.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sCharset: String) -> sap.ui.core.util.ExportType","parameters":{"sCharset":"type: string, description: New value for property <code>charset<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.ExportType.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getRowCount":{"!description":"Returns the number of rows.","!static":false,"!category":"function","!type":"fn() -> Number"},"getMimeType":{"!description":"Gets current value of property {@link #getMimeType mimeType}.\n\nMIME type.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.ManagedObject","setMimeType":{"!description":"Sets a new value for property {@link #getMimeType mimeType}.\n\nMIME type.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sMimeType: String) -> sap.ui.core.util.ExportType","parameters":{"sMimeType":"type: string, description: New value for property <code>mimeType<\/code>"}},"!category":"class","columnGenerator":{"!description":"Creates a column \"generator\" (inspired by ES6 Generators)","!static":false,"!category":"function","!type":"fn() -> Generator"},"setFileExtension":{"!description":"Sets a new value for property {@link #getFileExtension fileExtension}.\n\nFile extension.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sFileExtension: String) -> sap.ui.core.util.ExportType","parameters":{"sFileExtension":"type: string, description: New value for property <code>fileExtension<\/code>"}},"getColumnCount":{"!description":"Returns the number of columns.","!static":false,"!category":"function","!type":"fn() -> Number"},"getByteOrderMark":{"!description":"Gets current value of property {@link #getByteOrderMark byteOrderMark}.\n\nWhether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).\n\nDefault value is <code>undefined<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getCharset":{"!description":"Gets current value of property {@link #getCharset charset}.\n\nCharset.","!static":false,"!category":"function","!type":"fn() -> String"},"rowGenerator":{"!description":"Creates a row \"generator\" (inspired by ES6 Generators)","!static":false,"!category":"function","!type":"fn() -> Generator"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new ExportType.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getFileExtension fileExtension} : string<\/li>\n<li>{@link #getMimeType mimeType} : string<\/li>\n<li>{@link #getCharset charset} : string<\/li>\n<li>{@link #getByteOrderMark byteOrderMark} : boolean (default: undefined)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/core/util/ExportType","cellGenerator":{"!description":"Creates a cell \"generator\" (inspired by ES6 Generators)","!static":false,"!category":"function","!type":"fn() -> Generator"},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Base export type. Subclasses can be used for {@link sap.ui.core.util.Export Export}.","getFileExtension":{"!description":"Gets current value of property {@link #getFileExtension fileExtension}.\n\nFile extension.","!static":false,"!category":"function","!type":"fn() -> String"},"_generate":{"!description":"Handles the generation process of the file.<br>","!static":false,"!category":"function","!type":"fn(oExport: sap.ui.core.util.Export) -> String","parameters":{"oExport":"type: sap.ui.core.util.Export, description: export instance"}},"setByteOrderMark":{"!description":"Sets a new value for property {@link #getByteOrderMark byteOrderMark}.\n\nWhether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>undefined<\/code>.","!static":false,"!category":"function","!type":"fn(bByteOrderMark: Boolean) -> sap.ui.core.util.ExportType","parameters":{"bByteOrderMark":"type: boolean, description: New value for property <code>byteOrderMark<\/code>"}},"generate":{"!description":"Generates the file content.<br> Should be implemented by the individual types!","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.Percentage":{"!description":"A string type that represents a percentage value.","!module":"sap/ui/core/library","!helpDescription":"A string type that represents a percentage value.","!category":"namespace"},"sap.ui.model.analytics.odata4analytics.Model_obj":{"!type":"fn(oModel: Object, aWorkaroundID: [String])","prototype":"sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround"},"sap.ui.model.odata.type.Boolean_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Boolean with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Boolean"},"sap.ui.model.odata.v4.ValueListType":{"!description":"Specifies the value list type of a property.","!module":"sap/ui/model/odata/v4/ValueListType","!category":"static class","Standard":{"!description":"There is a dynamic value list with multiple queries including selection criteria.","!category":"enum","!type":"String"},"None":{"!description":"There is no value list.","!category":"enum","!type":"String"},"Fixed":{"!description":"There is one enumeration of fixed values.","!category":"enum","!type":"String"}},"sap.ui.core.RenderManager_obj":{"!type":"fn()","prototype":"sap.ui.core.RenderManager"},"sap.ui.model.BindingMode":{"!description":"Binding type definitions.","!module":"sap/ui/model/BindingMode","TwoWay":{"!description":"BindingMode two way means from model to view and vice versa","!category":"enum","!type":"String"},"OneWay":{"!description":"BindingMode one way means from model to view","!category":"enum","!type":"String"},"!category":"static class","OneTime":{"!description":"BindingMode one time means value is only read from the model once","!category":"enum","!type":"String"},"Default":{"!description":"BindingMode default means that the binding mode of the model is used","!category":"enum","!type":"String"}},"sap.ui.core.message.MessageManager":{"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.message.MessageManager.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.EventProvider","destroy":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.32 do not call <code>destroy()<\/code> on a <code>MessageManager<\/code>.<br>Destroy MessageManager","!static":false,"!category":"function","!type":"fn()"},"!category":"class","unregisterObject":{"!description":"Unregister ManagedObject","!static":false,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject)","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: The sap.ui.base.ManagedObject"}},"unregisterMessageProcessor":{"!description":"Deregister MessageProcessor","!static":false,"!category":"function","!type":"fn(oProcessor: sap.ui.core.message.MessageProcessor)","parameters":{"oProcessor":"type: sap.ui.core.message.MessageProcessor, description: The MessageProcessor"}},"addMessages":{"!description":"Add messages to MessageManager","!static":false,"!category":"function","!type":"fn(vMessages: [sap.ui.core.message.Message | sap.ui.core.message.Message])","parameters":{"vMessages":"type: sap.ui.core.message.Message|sap.ui.core.message.Message[], description: Array of sap.ui.core.message.Message or single sap.ui.core.message.Message"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.MessageManager with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMessageModel":{"!description":"Get the MessageModel","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.message.MessageModel"},"!constructorDescription":"Constructor for a new MessageManager.","!module":"sap/ui/core/message/MessageManager","removeAllMessages":{"!description":"Remove all messages","!static":false,"!category":"function","!type":"fn()"},"registerMessageProcessor":{"!description":"Register MessageProcessor","!static":false,"!category":"function","!type":"fn(oProcessor: sap.ui.core.message.MessageProcessor)","parameters":{"oProcessor":"type: sap.ui.core.message.MessageProcessor, description: The MessageProcessor"}},"removeMessages":{"!description":"Remove given Messages","!static":false,"!category":"function","!type":"fn(vMessages: [sap.ui.core.message.Message | sap.ui.core.message.Message])","parameters":{"vMessages":"type: sap.ui.core.message.Message|sap.ui.core.message.Message[], description: The message(s) to be removed."}},"registerObject":{"!description":"When using the databinding type system, the validation/parsing of a new property value could fail. In this case, a validationError/parseError event is fired. These events bubble up to the core. For registered ManagedObjects, the MessageManager attaches to these events and creates a <code>sap.ui.core.message.Message<\/code> (bHandleValidation=true) for each of these errors and cancels the event bubbling.","!static":false,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject, bHandleValidation: Boolean)","parameters":{"bHandleValidation":"type: boolean, description: Handle validationError/parseError events for this object. If set to true, the MessageManager creates a Message for each validation/parse error. The event bubbling is canceled in every case.","oObject":"type: sap.ui.base.ManagedObject, description: The sap.ui.base.ManagedObject"}}},"sap.ui.core.Dock":{"!description":"Docking position: horizontal/vertical.\n\nDefines a position on the element which is used for aligned positioning of another element (e.g. the left top corner of a popup is positioned at the left bottom corner of the input field). For the horizontal position possible values are \"begin\", \"left\", \"center\", \"right\" and \"end\", where left/right always are left and right, or begin/end which are dependent on the text direction. For the vertical position possible values are \"top\", \"center\" and \"bottom\". Examples: \"left top\", \"end bottom\", \"center center\".","!module":"sap/ui/core/library","!helpDescription":"Docking position: horizontal/vertical.\n\nDefines a position on the element which is used for aligned positioning of another element (e.g. the left top corner of a popup is positioned at the left bottom corner of the input field). For the horizontal position possible values are \"begin\", \"left\", \"center\", \"right\" and \"end\", where left/right always are left and right, or begin/end which are dependent on the text direction. For the vertical position possible values are \"top\", \"center\" and \"bottom\". Examples: \"left top\", \"end bottom\", \"center center\".","!category":"namespace"},"sap.ui.model.ValidateException_obj":{"!type":"fn(message: String, violatedConstraints?: [String])","prototype":"sap.ui.model.ValidateException"},"module:sap/ui/dom/jquery/scrollRightRTL":{"!description":"This module provides the {@link jQuery#scrollRightRTL} API.","!module":"sap/ui/dom/jquery/scrollRightRTL","!helpDescription":"This module provides the {@link jQuery#scrollRightRTL} API.","!category":"namespace","module:sap/ui/dom/jquery/scrollRightRTL":"module:sap/ui/dom/jquery/scrollRightRTL"},"sap.ui.core.mvc.TemplateView":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56.0 use {@link sap.ui.core.mvc.XMLView} in combination with {@link topic:5ee619fc1370463ea674ee04b65ed83b XML Templating} instead.<br>A view defined in a template.","extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.TemplateView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.TemplateView.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new mvc/TemplateView.","!module":"sap/ui/core/mvc/TemplateView","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56.0 use {@link sap.ui.core.mvc.XMLView} in combination with {@link topic:5ee619fc1370463ea674ee04b65ed83b XML Templating} instead.<br>A view defined in a template.","!proto":"sap.ui.core.mvc.View","!category":"class"},"sap.ui.model.Context":{"!description":"The Context is a pointer to an object in the model data, which is used to allow definition of relative bindings, which are resolved relative to the defined object. Context elements are created either by the ListBinding for each list entry or by using createBindingContext.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.Context.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getModel":{"!description":"Getter for model","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Model"},"getObject":{"!description":"Gets the (model dependent) object the context points to or the object with the given relative binding path","!static":false,"!category":"function","!type":"fn(sPath?: String, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: the binding path","mParameters":"type: object, description: additional model specific parameters (optional)"}},"getProperty":{"!description":"Gets the property with the given relative binding path","!static":false,"!category":"function","!type":"fn(sPath: String) -> Object","parameters":{"sPath":"type: string, description: the binding path"}},"!proto":"sap.ui.base.Object","!category":"class","getMessages":{"!description":"Returns messages associated with this context, that is messages belonging to the object referred to by this context or a child object of that object. The messages are sorted by their {@link sap.ui.core.message.Message#getType type} according to the type's severity in a way that messages with highest severity come first.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.message.Message]"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.Context with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for Context class.","isPreliminary":{"!description":"This method returns, whether the context is preliminary.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!module":"sap/ui/model/Context","!helpDescription":"The Context is a pointer to an object in the model data, which is used to allow definition of relative bindings, which are resolved relative to the defined object. Context elements are created either by the ListBinding for each list entry or by using createBindingContext.","getPath":{"!description":"Getter for path of the context itself or a subpath","!static":false,"!category":"function","!type":"fn(sPath?: String) -> String","parameters":{"sPath":"type: string, description: the binding path (optional)"}}},"sap.ui.core.IntervalTrigger":{"!description":"Provides a trigger that triggers in a set interval and calls all registered listeners. If the interval is <= 0 the trigger is switched off and won't trigger at all.","extend":{"!description":"Creates a new subclass of class sap.ui.core.IntervalTrigger with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.IntervalTrigger.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates an instance of EventBus.","!module":"sap/ui/core/IntervalTrigger","!helpDescription":"Provides a trigger that triggers in a set interval and calls all registered listeners. If the interval is <= 0 the trigger is switched off and won't trigger at all.","setInterval":{"!description":"Sets the trigger interval. If the value is >0 triggering will start if there are any registered listeners. If the interval is set to <=0 triggering will stop.","!static":false,"!category":"function","!type":"fn(iInterval: Number)","parameters":{"iInterval":"type: int, description: sets the interval in milliseconds when a new triggering should occur."}},"!proto":"sap.ui.base.Object","destroy":{"!description":"Destructor method for objects.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","removeListener":{"!description":"Removes corresponding listener from list.","!static":true,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: that should be removed","fnFunction":"type: function, description: is the previously registered function"}},"addListener":{"!description":"Adds a listener to the list that should be triggered.","!static":true,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: that should be triggered.","fnFunction":"type: function, description: is the called function that should be called when the trigger want to trigger the listener."}}},"sap.ui.model.odata.ODataModel":{"bindList":{"!description":"Creates a new list binding for this model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Predefined filter/s, can be either a filter or an array of filters","sPath":"type: string, description: Binding path, either absolute or relative to a given <code>oContext<\/code>","oContext":"type: sap.ui.model.Context, description: Binding context referring to this model","aSorters":"type: sap.ui.model.Sorter|sap.ui.model.Sorter[], description: Initial sort order, can be either a sorter or an array of sorters","mParameters":"type: object, description: Map which contains additional parameters for the binding"}},"hasPendingChanges":{"!description":"Checks if there exist pending changes in the model created by the setProperty method.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"attachMetadataFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:metadataFailed metadataFailed} event of this <code>sap.ui.model.odata.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"callFunction":{"!description":"Trigger a request to the function import odata service that was specified in the model constructor.","!static":false,"!category":"function","!type":"fn(sFunctionName: String, mParameters?: Object) -> Object","parameters":{"sFunctionName":"type: string, description: A string containing the name of the function to call. The name is concatenated to the sServiceUrl which was specified in the model constructor.","mParameters":"type: object, description: Optional parameter map containing any of the following properties:"}},"submitBatch":{"!description":"Submits the collected changes in the batch which were collected via <code>addBatchReadOperations<\/code> or <code>addBatchChangeOperations<\/code>. The batch will be cleared afterwards. If the batch is empty, no request will be sent and false will be returned.\n\n<b>Note:<\/b> No data will be stored in the model as long as <code>bImportData<\/code> is not set.","!static":false,"!category":"function","!type":"fn(fnSuccess?: fn(), fnError?: fn(), bAsync?: Boolean, bImportData?: Boolean) -> Object","parameters":{"fnError":"type: function, description: A callback function which is called when the batch request failed. The handler can have the parameter <code>oError<\/code> which contains additional error information.","bImportData":"type: boolean, description: Whether response data should be imported into the model","fnSuccess":"type: function, description: A callback function which is called when the batch request has been successfully sent. Note: Errors that may have come up in the single batch operations can be accessed in the <code>aErrorResponses<\/code> parameter in the callback handler. The handler can have the following parameters: <code>oData<\/code>, <code>oResponse<\/code> and <code>aErrorResponses<\/code>.","bAsync":"type: boolean, description: true for asynchronous request"}},"attachAnnotationsFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:annotationsFailed annotationsFailed} event of this <code>sap.ui.model.odata.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"updateBindings":{"!description":"update all bindings","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: If set to false an update will only be done when the value of a binding changed."}},"create":{"!description":"Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported and may not work.","!static":false,"!category":"function","!type":"fn(sPath: String, oData: Object, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the collection where an entry should be created. The path is concatenated to the sServiceUrl which was specified in the model constructor.","oData":"type: object, description: data of the entry that should be created.","mParameters":"type: object, description: Optional parameter map containing any of the following properties:"}},"detachAnnotationsLoaded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:annotationsLoaded annotationsLoaded} event of this <code>sap.ui.model.odata.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireMetadataFailed":{"!description":"Fires event {@link #event:metadataFailed metadataFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"setRefreshAfterChange":{"!description":"Enable/Disable automatic updates of all Bindings after change operations","!static":false,"!category":"function","!type":"fn(bRefreshAfterChange: Boolean)","parameters":{"bRefreshAfterChange":"type: boolean, description: undefined"}},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.48 please use {@link sap.ui.model.odata.v2.ODataModel} instead.<br>Model implementation for OData format","getKey":{"!description":"Returns the key part from the entry URI or the given context or object","!static":false,"!category":"function","!type":"fn(oObject: Object | sap.ui.model.Context, bDecode: Boolean)","parameters":{"oObject":"type: object|sap.ui.model.Context, description: The context or object","bDecode":"type: boolean, description: Whether the URI decoding should be applied on the key"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"read":{"!description":"Trigger a GET request to the odata service that was specified in the model constructor. The data will not be stored in the model. The requested data is returned with the response.","!static":false,"!category":"function","!type":"fn(sPath: String, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data which should be retrieved. The path is concatenated to the sServiceUrl which was specified in the model constructor.","mParameters":"type: object, description: Optional parameter map containing any of the following properties:"}},"getServiceMetadata":{"!description":"Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>metadataLoaded<\/code> event to get notified when the metadata is available and then call this function.","!static":false,"!category":"function","!type":"fn() -> Object"},"destroy":{"!static":false,"!category":"function","!type":"fn()"},"getSecurityToken":{"!description":"Returns the current security token. If the token has not been requested from the server it will be requested first.","!static":false,"!category":"function","!type":"fn() -> String"},"fireAnnotationsFailed":{"!description":"Fires event {@link #event:annotationsFailed annotationsFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"addAnnotationXML":{"!description":"Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which can be retrieved by calling the getServiceAnnotations()-method.","!static":false,"!category":"function","!type":"fn(sXMLContent: String, bSuppressEvents?: Boolean) -> Promise","parameters":{"bSuppressEvents":"type: boolean, description: Whether not to fire annotationsLoaded event on the annotationParser","sXMLContent":"type: string, description: The string that should be parsed as annotation XML"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"submitChanges":{"!description":"Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties. If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes. Changes to this entries should be done on the entry itself. So no deep updates are supported.","!static":false,"!category":"function","!type":"fn(fnSuccess?: fn(), fnError?: fn(), oParameters?: Object) -> Object","parameters":{"fnError":"type: function, description: a callback function which is called when the request failed. The handler can have the parameter: oError which contains additional error information","fnSuccess":"type: function, description: a callback function which is called when the data has been successfully updated. The handler can have the following parameters: oData and response.","oParameters":"type: object, description: optional parameter for additional information introduced in SAPUI5 1.9.1"}},"refreshSecurityToken":{"!description":"refresh XSRF token by performing a GET request against the service root URL.","!static":false,"!category":"function","!type":"fn(fnSuccess?: fn(), fnError?: fn(), bAsync?: Boolean) -> Object","parameters":{"fnError":"type: function, description: a callback function which is called when the request failed. The handler can have the parameter: oError which contains additional error information.","fnSuccess":"type: function, description: a callback function which is called when the data has been successfully retrieved.","bAsync":"type: boolean, description: true for asynchronous requests."}},"setTokenHandlingEnabled":{"!description":"Enable/Disable XCSRF-Token handling","!static":false,"!category":"function","!type":"fn(bTokenHandling?: Boolean)","parameters":{"bTokenHandling":"type: boolean, description: whether to use token handling or not"}},"!module":"sap/ui/model/odata/ODataModel","attachAnnotationsLoaded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:annotationsLoaded annotationsLoaded} event of this <code>sap.ui.model.odata.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.48 please use {@link sap.ui.model.odata.v2.ODataModel} instead.<br>Model implementation for OData format","forceNoCache":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.13 the caching should be controlled by the backend by setting the correct cache control header<br>Force no caching","!static":false,"!category":"function","!type":"fn(bForceNoCache?: Boolean)","parameters":{"bForceNoCache":"type: boolean, description: whether to force no caching"}},"setProperty":{"!description":"Sets a new value for the given property <code>sPropertyName<\/code> in the model without triggering a server request. This can be done by the submitChanges method.\n\nNote: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.\n\nBefore updating a different entry the existing changes of the current entry have to be submitted or resetted by the corresponding methods: submitChanges, resetChanges.\n\nIMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of refresh on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.","!static":false,"!category":"function","!type":"fn(sPath: String, oValue: Object, oContext?: Object, bAsyncUpdate?: Boolean) -> Boolean","parameters":{"oValue":"type: any, description: value to set the property to","sPath":"type: string, description: path of the property to set","oContext":"type: object, description: the context which will be used to set the property","bAsyncUpdate":"type: boolean, description: whether to update other bindings dependent on this property asynchronously"}},"deleteCreatedEntry":{"!description":"Deletes a created entry from the request queue and the model.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context)","parameters":{"oContext":"type: sap.ui.model.Context, description: The context object pointing to the created entry"}},"refreshMetadata":{"!description":"Refreshes the metadata for model, e.g. in case the first request for metadata has failed.","!static":false,"!category":"function","!type":"fn()"},"setCountSupported":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 please use {@link #setDefaultCountMode} instead.<br>Sets whether this OData service supports $count on its collections.","!static":false,"!category":"function","!type":"fn(bCountSupported: Boolean)","parameters":{"bCountSupported":"type: boolean, description: undefined"}},"!proto":"sap.ui.model.Model","update":{"!description":"Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported and may not work. These should be done seperate on the entry directly.","!static":false,"!category":"function","!type":"fn(sPath: String, oData: Object, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data that should be updated. The path is concatenated to the sServiceUrl which was specified in the model constructor.","oData":"type: object, description: data of the entry that should be updated.","mParameters":"type: object, description: Optional, can contain the following attributes:"}},"!category":"class","setDefaultCountMode":{"!description":"Sets the default mode how to retrieve the item count for a collection in this model.\n\nThe count can be determined in the following ways <ul> <li>by sending a separate <code>$count<\/code> request<\/li> <li>by adding parameter <code>$inlinecount=allpages<\/code> to one or all data requests<\/li> <li>a combination of the previous two<\/li> <li>not at all (questions about the size of the collection can't be answered then)<\/li> <\/ul> See {@link sap.ui.model.odata.CountMode} for all enumeration values and more details.\n\nNote that a call to this method does not modify the count mode for existing list bindings, only bindings that are created afterwards will use the new mode when no mode is defined at their creation.\n\nIf no default count mode is set for an <code>ODataModel<\/code> (v1), the mode <code>Both<\/code> will be used for compatibility reasons.","!static":false,"!category":"function","!type":"fn(sCountMode: sap.ui.model.odata.CountMode)","parameters":{"sCountMode":"type: sap.ui.model.odata.CountMode, description: The new default count mode for this model"}},"attachMetadataLoaded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:metadataLoaded metadataLoaded} event of this <code>sap.ui.model.odata.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"remove":{"!description":"Trigger a DELETE request to the odata service that was specified in the model constructor.","!static":false,"!category":"function","!type":"fn(sPath: String, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data that should be removed. The path is concatenated to the sServiceUrl which was specified in the model constructor.","mParameters":"type: object, description: Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:"}},"!constructorDescription":"Constructor for a new ODataModel.","addBatchReadOperations":{"!description":"Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array. If an illegal batch operation is added to the batch nothing will be performed and false will be returned.","!static":false,"!category":"function","!type":"fn(aReadOperations: [Object])","parameters":{"aReadOperations":"type: any[], description: an array of read batch operations created via <code>createBatchOperation<\/code> and <code>sMethod<\/code> = GET"}},"resetChanges":{"!description":"Resets the collected changes by the setProperty method and reloads the data from the server.","!static":false,"!category":"function","!type":"fn(fnSuccess?: fn(), fnError?: fn())","parameters":{"fnError":"type: function, description: a callback function which is called when the request failed","fnSuccess":"type: function, description: a callback function which is called when the data has been successfully resetted. The handler can have the following parameters: oData and response."}},"fireMetadataLoaded":{"!description":"Fires event {@link #event:metadataLoaded metadataLoaded} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"createBatchOperation":{"!description":"Creates a single batch operation (read or change operation) which can be used in a batch request.","!static":false,"!category":"function","!type":"fn(sPath: String, sMethod: String, oData?: Object, oParameters?: Object)","parameters":{"sPath":"type: string, description: A string containing the path to the collection or entry where the batch operation should be performed. The path is concatenated to the sServiceUrl which was specified in the model constructor.","sMethod":"type: string, description: for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE","oData":"type: object, description: optional data payload which should be created, updated, deleted in a change batch operation.","oParameters":"type: object, description: optional parameter for additional information introduced in SAPUI5 1.9.1,"}},"detachMetadataLoaded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:metadataLoaded metadataLoaded} event of this <code>sap.ui.model.odata.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getDefaultCountMode":{"!description":"Returns the default count mode for retrieving the count of collections","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.CountMode"},"clearBatch":{"!description":"Removes all operations in the current batch.","!static":false,"!category":"function","!type":"fn()"},"detachAnnotationsFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:annotationsFailed annotationsFailed} event of this <code>sap.ui.model.odata.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getData":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.6.0 please use {@link #getProperty} instead<br>Return requested data as object if the data has already been loaded and stored in the model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, bIncludeExpandEntries?: Boolean) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data object that should be returned.","oContext":"type: object, description: the optional context which is used with the sPath to retrieve the requested data.","bIncludeExpandEntries":"type: boolean, description: This parameter should be set when a URI or custom parameter with a $expand System Query Option was used to retrieve associated entries embedded/inline. If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any). If false the associated/expanded entry properties are removed and not included in the desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned."}},"detachMetadataFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:metadataFailed metadataFailed} event of this <code>sap.ui.model.odata.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMetaModel":{"!description":"Returns an instance of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges V4 annotations from the existing {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.\n\n<b>BEWARE:<\/b> Access to this OData meta model will fail before the promise returned by {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.ODataMetaModel"},"setHeaders":{"!description":"Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend. Private headers which are set in the ODataModel cannot be modified. These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.\n\nTo remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.","!static":false,"!category":"function","!type":"fn(mHeaders: Object)","parameters":{"mHeaders":"type: object, description: the header name/value map."}},"getProperty":{"!description":"Returns the value for the property with the given <code>sPath<\/code>. If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries<\/code> parameter determines if the navigation property should be included in the returned value or not. Please note that this currently works for 1..1 navigation properties only.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, bIncludeExpandEntries?: Boolean) -> Object","parameters":{"sPath":"type: string, description: the path/name of the property","oContext":"type: object, description: the context if available to access the property value","bIncludeExpandEntries":"type: boolean, description: This parameter should be set when a URI or custom parameter with a $expand System Query Option was used to retrieve associated entries embedded/inline. If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any). If false the associated/expanded entry properties are removed and not included in the desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned."}},"getHeaders":{"!description":"Returns all headers and custom headers which are stored in the OData model.","!static":false,"!category":"function","!type":"fn() -> Object"},"setUseBatch":{"!description":"Enable/Disable batch for all requests","!static":false,"!category":"function","!type":"fn(bUseBatch?: Boolean)","parameters":{"bUseBatch":"type: boolean, description: whether the requests should be encapsulated in a batch request"}},"addAnnotationUrl":{"!description":"Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.","!static":false,"!category":"function","!type":"fn(vUrl: [String | String]) -> Promise","parameters":{"vUrl":"type: string|string[], description: Either one URL as string or an array or URL strings"}},"createKey":{"!description":"Creates the key from the given collection name and property map","!static":false,"!category":"function","!type":"fn(sCollection: String, oKeyParameters: Object, bDecode: Boolean)","parameters":{"sCollection":"type: string, description: The name of the collection","bDecode":"type: boolean, description: Whether the URI decoding should be applied on the key","oKeyParameters":"type: object, description: The object containing at least all the key properties of the entity type"}},"isCountSupported":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 please use {@link #getDefaultCountMode} instead.<br>Returns whether this model supports the $count on its collections","!static":false,"!category":"function","!type":"fn() -> Boolean"},"refresh":{"!description":"Refresh the model.\n\nThis will check all bindings for updated data and update the controls if data has been changed.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean, bRemoveData?: Boolean)","parameters":{"bRemoveData":"type: boolean, description: If set to true then the model data will be removed/cleared. Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.","bForceUpdate":"type: boolean, description: Force update of controls"}},"getServiceAnnotations":{"!description":"Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>annotationsLoaded<\/code> event to get notified when the annotations are available and then call this function.","!static":false,"!category":"function","!type":"fn() -> Object"},"createEntry":{"!description":"Creates a new entry object which is described by the metadata of the entity type of the specified sPath Name. A context object is returned which can be used to bind against the newly created object.\n\nFor each created entry a request is created and stored in a request queue. The request queue can be submitted by calling submitChanges. To delete a created entry from the request queue call deleteCreateEntry.\n\nThe optional vProperties parameter can be used as follows:\n\n- vProperties could be an array containing the property names which should be included in the new entry. Other properties defined in the entity type are not included. - vProperties could be an object which includes the desired properties and the values which should be used for the created entry.\n\nIf vProperties is not specified, all properties in the entity type will be included in the created entry.\n\nIf there are no values specified the properties will have undefined values.\n\nPlease note that deep creates (including data defined by navigationproperties) are not supported","!static":false,"!category":"function","!type":"fn(sPath: String, vProperties: Array | Object) -> sap.ui.model.Context","parameters":{"vProperties":"type: array|object, description: An array that specifies a set of properties or the entry","sPath":"type: string, description: Name of the path to the collection"}},"addBatchChangeOperations":{"!description":"Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array. The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again. If an illegal batch operation is added to the change set nothing will be performed and false will be returned.","!static":false,"!category":"function","!type":"fn(aChangeOperations: [Object])","parameters":{"aChangeOperations":"type: any[], description: an array of change batch operations created via <code>createBatchOperation<\/code> and <code>sMethod<\/code> = POST, PUT, MERGE or DELETE"}},"fireAnnotationsLoaded":{"!description":"Fires event {@link #event:annotationsLoaded annotationsLoaded} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.test.actions.EnterText_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.EnterText with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.actions.EnterText"},"sap.ui.test.actions.Drag":{"!description":"The <code>Drag<\/code> action is used to simulate a drag interaction with a control. The control should be draggable, as defined by its dnd aggregation configuration. The drop location will be defined by a consequtive {@link sap.ui.test.actions.Drop} action.\n\nThe <code>Drag<\/code> action targets the DOM focus reference of the control.\n\nThe <code>Drag<\/code> action is not supported in IE11!","extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Drag with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.actions.Drag.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/test/actions/Drag","!helpDescription":"The <code>Drag<\/code> action is used to simulate a drag interaction with a control. The control should be draggable, as defined by its dnd aggregation configuration. The drop location will be defined by a consequtive {@link sap.ui.test.actions.Drop} action.\n\nThe <code>Drag<\/code> action targets the DOM focus reference of the control.\n\nThe <code>Drag<\/code> action is not supported in IE11!","!proto":"sap.ui.test.actions.Action","!category":"class"},"sap.ui.core.util.ExportColumn":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Can have a name and a cell template.","setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nColumn name.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.util.ExportColumn","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.ExportColumn.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getName":{"!description":"Gets current value of property {@link #getName name}.\n\nColumn name.","!static":false,"!category":"function","!type":"fn() -> String"},"getTemplate":{"!description":"Gets content of aggregation {@link #getTemplate template}.\n\nCell template for column.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.ExportCell"},"!proto":"sap.ui.base.ManagedObject","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportColumn with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setTemplate":{"!description":"Sets the aggregated {@link #getTemplate template}.","!static":false,"!category":"function","!type":"fn(oTemplate: sap.ui.core.util.ExportCell) -> sap.ui.core.util.ExportColumn","parameters":{"oTemplate":"type: sap.ui.core.util.ExportCell, description: The template to set"}},"!constructorDescription":"Constructor for a new ExportCell.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getTemplate template} : sap.ui.core.util.ExportCell<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/core/util/ExportColumn","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Can have a name and a cell template.","destroyTemplate":{"!description":"Destroys the template in the aggregation {@link #getTemplate template}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.ExportColumn"}},"sap.ui.model.odata.v2.ODataModel":{"bindList":{"!description":"Creates a new list binding for this model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Predefined filters, can be either a filter or an array of filters","sPath":"type: string, description: Binding path, either absolute or relative to a given <code>oContext<\/code>","oContext":"type: sap.ui.model.Context, description: Binding context referring to this model","aSorters":"type: sap.ui.model.Sorter|sap.ui.model.Sorter[], description: Initial sort order, can be either a sorter or an array of sorters","mParameters":"type: object, description: Map which contains additional parameters for the binding"}},"hasPendingChanges":{"!description":"Checks if there exist pending changes in the model.\n\nBy default, only client data changes triggered through: {@link #createEntry} {@link #setProperty} are taken into account.\n\nIf <code>bAll<\/code> is set to <code>true<\/code>, also deferred requests triggered through: {@link #create} {@link #update} {@link #remove} are taken into account.","!static":false,"!category":"function","!type":"fn(bAll?: Boolean) -> Boolean","parameters":{"bAll":"type: boolean, description: If set to true, deferred requests are also taken into account."}},"bindTree":{"!description":"Creates a new tree binding for this model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object, aSorters?: [sap.ui.model.Sorter]) -> sap.ui.model.TreeBinding","parameters":{"aFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Predefined filters, can be either a filter or an array of filters","sPath":"type: string, description: Binding path, either absolute or relative to a given <code>oContext<\/code>","oContext":"type: sap.ui.model.Context, description: Binding context referring to this model","aSorters":"type: sap.ui.model.Sorter[], description: An array of predefined sorters","mParameters":"type: object, description: Map of parameters for the tree binding"}},"setChangeGroups":{"!description":"Definition of groups per entity type for two-way binding changes.","!static":false,"!category":"function","!type":"fn(mGroups: Object.<string,sap.ui.model.odata.v2.ODataModel.ChangeGroupDefinition>)","parameters":{"mGroups":"type: Object.<string,sap.ui.model.odata.v2.ODataModel.ChangeGroupDefinition>, description: A map containing the definition of batch groups for two-way binding changes, keyed by entity names. The map has the following format: <pre>\n{\n  \"EntityTypeName\": {\n    groupId: \"ID\",\n    [changeSetId: \"ID\",]\n    [single: true/false,]\n  }\n}\n<\/pre> <ul> <li><code>groupId<\/code>: Defines the group for changes of the defined <i>EntityTypeName<\/i><\/li> <li><code>changeSetId<\/code>: ID of a <code>ChangeSet<\/code> which bundles the changes for the entity type.<\/li> <li><code>single<\/code>: Defines if every change will get an own change set (defaults to <code>true<\/code>)<\/li> <\/ul>"}},"attachMetadataFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>metadataFailed<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"callFunction":{"!description":"Trigger a request to the function import OData service that was specified in the model constructor.\n\nIf the return type of the function import is either an entity type or a collection of an entity type, then the changes are reflected in the model. Otherwise they are ignored, and the <code>response<\/code> can be processed in the <code>success<\/code> callback.","!static":false,"!category":"function","!type":"fn(sFunctionName: String, mParameters?: Object) -> Object","parameters":{"sFunctionName":"type: string, description: A string containing the name of the function to call. The name is concatenated to the service URL which was specified in the model constructor.","mParameters":"type: object, description: Optional parameter map containing any of the following properties:"}},"getDeferredGroups":{"!description":"Returns the array of group IDs that are set as deferred.","!static":false,"!category":"function","!type":"fn() -> Array"},"attachAnnotationsFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>annotationsFailed<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachBatchRequestFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:batchRequestFailed batchRequestFailed} event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"detachBatchRequestSent":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:batchRequestSent batchRequestSent} event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"updateBindings":{"!description":"Update all bindings.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: If set to <code>false<\/code>, an update will only be done when the value of a binding changed."}},"securityTokenAvailable":{"!description":"Returns a promise, which will resolve with the security token as soon as it is available.","!static":false,"!category":"function","!type":"fn() -> Promise"},"getETag":{"!description":"Returns the ETag for a given binding path/context or data object.","!static":false,"!category":"function","!type":"fn(sPath?: String, oContext?: sap.ui.model.Context, oEntity?: Object) -> String","parameters":{"sPath":"type: string, description: The binding path","oContext":"type: sap.ui.model.Context, description: The binding context","oEntity":"type: object, description: The entity data"}},"create":{"!description":"Trigger a <code>POST<\/code> request to the OData service that was specified in the model constructor.\n\nPlease note that deep creates are not supported and may not work.","!static":false,"!category":"function","!type":"fn(sPath: String, oData: Object, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the collection where an entry should be created. The path is concatenated to the service URL which was specified in the model constructor.","oData":"type: object, description: Data of the entry that should be created.","mParameters":"type: object, description: Optional parameter map containing any of the following properties:"}},"detachAnnotationsLoaded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>annotationsLoaded<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMessageScope":{"!description":"Returns this model's message scope.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.MessageScope"},"setChangeBatchGroups":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.32 Use {@link #setChangeGroups} instead<br>Definition of batch groups per entity type for two-way binding changes.","!static":false,"!category":"function","!type":"fn(mGroups: Object.<string,sap.ui.model.odata.v2.ODataModel.ChangeGroupDefinition>)","parameters":{"mGroups":"type: Object.<string,sap.ui.model.odata.v2.ODataModel.ChangeGroupDefinition>, description: A map containing the definition of batch groups for two-way binding changes. The map has the following format: <pre>\n{\n  \"EntityTypeName\": {\n    batchGroupId: \"ID\",\n    [changeSetId: \"ID\",]\n    [single: true/false,]\n  }\n}\n<\/pre> <ul> <li><code>batchGroupId<\/code>: Defines the batch group for changes of the defined <i>EntityTypeName<\/i><\/li> <li><code>changeSetId<\/code>: ID of a <code>ChangeSet<\/code> which bundles the changes for the entity type.<\/li> <li><code>single<\/code>: Defines if every change will get an own change set (defaults to <code>true<\/code>)<\/li> <\/ul>"}},"fireMetadataFailed":{"!description":"Fires event {@link #event:metadataFailed metadataFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"setRefreshAfterChange":{"!description":"Defines whether all bindings are updated after a change operation.\n\nThis flag can be overruled on request level by providing the <code>refreshAfterChange<\/code> parameter to the corresponding function (for example {@link #update}).","!static":false,"!category":"function","!type":"fn(bRefreshAfterChange: Boolean)","parameters":{"bRefreshAfterChange":"type: boolean, description: Whether to automatically refresh after changes"}},"attachBatchRequestCompleted":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:batchRequestCompleted batchRequestCompleted} event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!description":"Model implementation based on the OData protocol.\n\nSee chapter {@link topic:6c47b2b39db9404582994070ec3d57a2 OData V2 Model} for a general introduction.","getKey":{"!description":"Returns the key part for the given the canonical entry URI, model context or data object or <code>undefined<\/code> when the <code>vValue<\/code> can't be interpreted.","!static":false,"!category":"function","!type":"fn(vValue: String | Object | sap.ui.model.Context) -> String","parameters":{"vValue":"type: string|object|sap.ui.model.Context, description: The canonical entry URI, the context or entry object"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v2.ODataModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getObject":{"!description":"Returns the JSON object for an entity with the given <code>sPath<\/code> and optional <code>oContext<\/code>.\n\nWith the <code>mParameters.select<\/code> parameter it is possible to specify comma-separated property or navigation property names which should be included in the result object. This works like the OData <code>$select<\/code> parameter. With the <code>mParameters.expand<\/code> parameter it is possible to specify comma-separated navigation property names which should be included inline in the result object. This works like the OData <code>$expand<\/code> parameter.\n\nThis method will return a copy and not a reference of the entity. It does not load any data and may not return all requested data if it is not available/loaded. If select entries are contained in the parameters and not all selected properties are available, this method will return <code>undefined<\/code> instead of incomplete data. If no select entries are defined, all properties available on the client will be returned.\n\nExample:<br> <code>{select: \"Products/ProductName, Products\", expand:\"Products\"}<\/code> will return no properties of the entity itself, but only the ProductName property of the Products navigation property. If Products/ProductName has not been loaded before, so is not available on the client, it will return <code>undefined<\/code>.\n\nNote:<br> If <code>mParameters.select<\/code> is not specified, the returned object could contain model-internal attributes. This may lead to problems when submitting this data to the service for an update/create operation. To get a copy of the entity without containing such internal attributes, use <code>{select: \"*\"}<\/code> instead.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: Path referencing the object","oContext":"type: object, description: Context the path should be resolved with, in case it is relative","mParameters":"type: object, description: Map of parameters"}},"invalidateEntry":{"!description":"Invalidate a single entry in the model data.\n\nMark the selected entry in the model cache as invalid. Next time a context binding or list binding is done, the entry will be detected as invalid and will be refreshed from the server.","!static":false,"!category":"function","!type":"fn(vEntry: String | sap.ui.model.Context)","parameters":{"vEntry":"type: string|sap.ui.model.Context, description: the reference to the entry, either by key, absolute path or context object"}},"read":{"!description":"Trigger a <code>GET<\/code> request to the OData service that was specified in the model constructor.\n\nThe data will be stored in the model. The requested data is returned with the response.","!static":false,"!category":"function","!type":"fn(sPath: String, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data which should be retrieved. The path is concatenated to the service URL which was specified in the model constructor.","mParameters":"type: object, description: Optional parameter map containing any of the following properties:"}},"getServiceMetadata":{"!description":"Return the parsed XML metadata as a Javascript object.\n\nPlease note that the metadata is loaded asynchronously and this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>metadataLoaded<\/code> event to get notified when the metadata is available and then call this function.","!static":false,"!category":"function","!type":"fn() -> Object"},"destroy":{"!static":false,"!category":"function","!type":"fn()"},"getSecurityToken":{"!description":"Returns the current security token.\n\nIf the token has not been requested from the server it will be requested first (synchronously).","!static":false,"!category":"function","!type":"fn() -> String"},"isMetadataLoadingFailed":{"!description":"Checks whether metadata loading has failed in the past.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"canonicalRequestsEnabled":{"!description":"Check whether the canonical requests calculation is switched on. See 'canonicalRequests' parameter of the model constructor.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireAnnotationsFailed":{"!description":"Fires event {@link #event:annotationsFailed annotationsFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"addAnnotationXML":{"!description":"Adds new XML content to be parsed for OData annotations, which are then merged into the annotations object which can be retrieved by calling the {@link #getServiceAnnotations}-method.","!static":false,"!category":"function","!type":"fn(sXMLContent: String, bSuppressEvents?: Boolean) -> Promise","parameters":{"bSuppressEvents":"type: boolean, description: Whether not to fire annotationsLoaded event on the annotationParser","sXMLContent":"type: string, description: The string that should be parsed as annotation XML"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"messageScopeSupported":{"!description":"Checks whether the service has set the OData V2 annotation \"message-scope-supported\" on the <code>EntityContainer<\/code> with the value <code>true<\/code>. This is a a precondition for the setting of {@link sap.ui.model.odata.MessageScope.BusinessObject} via {@link #setMessageScope}.","!static":false,"!category":"function","!type":"fn() -> Promise"},"metadataLoaded":{"!description":"Returns a promise for the loaded state of the metadata.\n\nThe promise won't get rejected in case the metadata loading failed but is only resolved if the metadata is loaded successfully. If <code>refreshMetadata<\/code> function is called after this promise is already resolved you should rely on the promise returned by <code>refreshMetadata<\/code> to get information about the refreshed metadata loaded state.\n\nThe Metadata needs to be loaded prior to performing OData calls. Chaining to the returned promise ensures that all required parameters have been loaded, e.g. authentication token.","!static":false,"!category":"function","!type":"fn() -> Promise"},"submitChanges":{"!description":"Submits the collected changes which were collected by the {@link #setProperty} method and other deferred requests.\n\nThe update method is defined by the global <code>defaultUpdateMethod<\/code> parameter which is <code>sap.ui.model.odata.UpdateMethod.Merge<\/code> by default. In case of a <code>sap.ui.model.odata.UpdateMethod.Merge<\/code> request only the changed properties will be updated. If a URI with a <code>$expand<\/code> query option was used then the expand entries will be removed from the collected changes. Changes to this entries should be done on the entry itself. So no deep updates are supported.\n\n<b>Important<\/b>: The success/error handler will only be called if batch support is enabled. If multiple batch groups are submitted the handlers will be called for every batch group. If there are no changes/requests or all contained requests are aborted before a batch request returns, the success handler will be called with an empty response object. If the abort method on the return object is called, all contained batch requests will be aborted and the error handler will be called for each of them.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Object","parameters":{"mParameters":"type: object, description: A map which contains the following parameter properties:"}},"refreshSecurityToken":{"!description":"Refresh XSRF token by performing a GET request against the service root URL.","!static":false,"!category":"function","!type":"fn(fnSuccess?: fn(), fnError?: fn(), bAsync?: Boolean) -> Object","parameters":{"fnError":"type: function, description: Callback function which is called when the request failed. The handler can have the parameter: oError which contains additional error information.","fnSuccess":"type: function, description: Callback function which is called when the data has been successfully retrieved.","bAsync":"type: boolean, description: Whether the request should be sent asynchronously"}},"setTokenHandlingEnabled":{"!description":"Enable/Disable XCSRF-Token handling.","!static":false,"!category":"function","!type":"fn(bTokenHandling?: Boolean)","parameters":{"bTokenHandling":"type: boolean, description: Whether to use token handling or not"}},"!module":"sap/ui/model/odata/v2/ODataModel","attachAnnotationsLoaded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>annotationsLoaded<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireBatchRequestFailed":{"!description":"Fires event {@link #event:batchRequestFailed batchRequestFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"!helpDescription":"Model implementation based on the OData protocol.\n\nSee chapter {@link topic:6c47b2b39db9404582994070ec3d57a2 OData V2 Model} for a general introduction.","createBindingContext":{"!description":"Creates a binding context for the given path.\n\nIf the data of the context is not yet available, it can not be created, but first the entity needs to be fetched from the server asynchronously. In case no callback function is provided, the request will not be triggered.\n\nIf a callback function is given, the created binding context for a fetched entity is passed as argument to the given callback function.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, mParameters?: Object, fnCallBack?: fn(), bReload?: Boolean) -> sap.ui.model.Context","parameters":{"sPath":"type: string, description: Binding path","oContext":"type: object, description: Binding context","bReload":"type: boolean, description: Whether to reload data","mParameters":"type: object, description: Map which contains additional parameters for the binding","fnCallBack":"type: function, description: Function to be called when context has been created. The parameter of the callback function is the newly created binding context."}},"setProperty":{"!description":"Sets a new value for the given property <code>sPath<\/code> in the model.\n\nIf the <code>changeBatchGroup<\/code> for the changed entity type is set to {@link #setDeferredGroups deferred}, changes could be submitted with {@link #submitChanges}. Otherwise the change will be submitted directly.","!static":false,"!category":"function","!type":"fn(sPath: String, oValue: Object, oContext?: sap.ui.model.Context, bAsyncUpdate?: Boolean) -> Boolean","parameters":{"oValue":"type: any, description: Value to set the property to","sPath":"type: string, description: Path of the property to set","oContext":"type: sap.ui.model.Context, description: The context which will be used to set the property","bAsyncUpdate":"type: boolean, description: Whether to update other bindings dependent on this property asynchronously"}},"getDeferredBatchGroups":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.32 use {@link #getDeferredGroups} instead<br>Returns the array of batch group IDs that are set as deferred","!static":false,"!category":"function","!type":"fn() -> Array"},"hasPendingRequests":{"!description":"Checks if there are pending requests, either ongoing or sequential.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"deleteCreatedEntry":{"!description":"Deletes a created entry from the request queue and from the model.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context)","parameters":{"oContext":"type: sap.ui.model.Context, description: The context object pointing to the created entry"}},"refreshMetadata":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.42 undefined<br>Refreshes the metadata for this model, for example when the request for metadata has failed.\n\n<b>Note<\/b>: Do not use <code>refreshMetadata<\/code> if the metadata is outdated or should be updated. This will lead to inconsistent data in the application.\n\nReturns a new promise which can be resolved or rejected depending on the metadata loading state.","!static":false,"!category":"function","!type":"fn() -> Promise"},"getChangeGroups":{"!description":"Returns the definition of groups per entity type for two-way binding changes","!static":false,"!category":"function","!type":"fn() -> Object.<string,sap.ui.model.odata.v2.ODataModel.ChangeGroupDefinition>"},"getPendingChanges":{"!description":"Returns the changed properties of all changed entities in a map which are still pending. The key is the string name of the entity and the value is an object which contains the changed properties.\n\nIn contrast to the two related functions {@link #hasPendingChanges} and {@link #resetChanges}, only client data changes are supported.","!static":false,"!category":"function","!type":"fn() -> Object.<string,object>"},"attachBatchRequestSent":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:batchRequestSent batchRequestSent} event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getOriginalProperty":{"!description":"Returns the original value for the property with the given path and context. The original value is the value that was last responded by the server.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object) -> Object","parameters":{"sPath":"type: string, description: The path/name of the property","oContext":"type: object, description: The context if available to access the property value"}},"detachBatchRequestCompleted":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:batchRequestCompleted batchRequestCompleted} event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!proto":"sap.ui.model.Model","update":{"!description":"Trigger a <code>PUT/MERGE<\/code> request to the OData service that was specified in the model constructor.\n\nThe update method used is defined by the global <code>defaultUpdateMethod<\/code> parameter which is <code>sap.ui.model.odata.UpdateMethod.Merge<\/code> by default. Please note that deep updates are not supported and may not work. These should be done separately and directly on the corresponding entry.","!static":false,"!category":"function","!type":"fn(sPath: String, oData: Object, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data that should be updated. The path is concatenated to the sServiceUrl which was specified in the model constructor.","oData":"type: object, description: Data of the entry that should be updated.","mParameters":"type: object, description: Optional, can contain the following attributes:"}},"!category":"class","bindContext":{"!description":"Creates new context binding for this model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext: sap.ui.model.Context, mParameters?: Object.<string,any>) -> sap.ui.model.ContextBinding","parameters":{"sPath":"type: string, description: Resolved path","oContext":"type: sap.ui.model.Context, description: Context object","mParameters":"type: Object.<string,any>, description: Map of parameters"}},"setDefaultCountMode":{"!description":"Sets the default mode how to retrieve the item count for a collection in this model.\n\nThe count can be determined in the following ways <ul> <li>by sending a separate <code>$count<\/code> request<\/li> <li>by adding parameter <code>$inlinecount=allpages<\/code> to one or all data requests<\/li> <li>a combination of the previous two<\/li> <li>not at all (questions about the size of the collection can't be answered then)<\/li> <\/ul> See {@link sap.ui.model.odata.CountMode} for all enumeration values and more details.\n\nNote that a call to this method does not modify the count mode for existing list bindings, only bindings that are created afterwards will use the new mode when no mode is defined at their creation.\n\nIf no default count mode is set for an <code>ODataModel<\/code> (v2), the mode <code>Request<\/code> will be used.","!static":false,"!category":"function","!type":"fn(sCountMode: sap.ui.model.odata.CountMode)","parameters":{"sCountMode":"type: sap.ui.model.odata.CountMode, description: The new default count mode for this model"}},"attachMetadataLoaded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>metadataLoaded<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"remove":{"!description":"Trigger a <code>DELETE<\/code> request to the OData service that was specified in the model constructor.","!static":false,"!category":"function","!type":"fn(sPath: String, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data that should be removed. The path is concatenated to the service URL which was specified in the model constructor.","mParameters":"type: object, description: Optional, can contain the following attributes:"}},"attachBatchRequestFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:batchRequestFailed batchRequestFailed} event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.v2.ODataModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"forceEntityUpdate":{"!description":"Force the update on the server of an entity by setting its ETag to '*'.\n\nETag handling must be active so the force update will work.","!static":false,"!category":"function","!type":"fn(sKey: String)","parameters":{"sKey":"type: string, description: The key to an Entity e.g.: Customer(4711)"}},"!constructorDescription":"Constructor for a new ODataModel.","resetChanges":{"!description":"Resets changes that have been collected.\n\nBy default, only client data changes triggered through: {@link #createEntry} {@link #setProperty} are taken into account.\n\nIf <code>bAll<\/code> is set to <code>true<\/code>, also deferred requests triggered through: {@link #create} {@link #update} {@link #remove} are taken into account.","!static":false,"!category":"function","!type":"fn(aPath?: Array, bAll?: Boolean) -> Promise","parameters":{"bAll":"type: boolean, description: If set to true, also deferred requests are taken into account.","aPath":"type: array, description: Array of paths that should be reset. If no array is passed, all changes will be reset."}},"enableCanonicalRequests":{"!description":"Enable/Disable canonical requests calculation. When enabled, a given resource path will be shortened as much as possible.","!static":false,"!category":"function","!type":"fn(bCanonicalRequests: Boolean)","parameters":{"bCanonicalRequests":"type: boolean, description: Enable/disable canonical request calculation"}},"fireMetadataLoaded":{"!description":"Fires event {@link #event:metadataLoaded metadataLoaded} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"getChangeBatchGroups":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.36 use {@link #getChangeGroups} instead<br>Returns the definition of batch groups per entity type for two-way binding changes.","!static":false,"!category":"function","!type":"fn() -> Object.<string,sap.ui.model.odata.v2.ODataModel.ChangeGroupDefinition>"},"detachMetadataLoaded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>metadataLoaded<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getDefaultCountMode":{"!description":"Returns the default count mode for retrieving the count of collections","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.CountMode"},"fireBatchRequestCompleted":{"!description":"Fires event {@link #event:batchRequestCompleted batchRequestCompleted} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: parameters to add to the fired event"}},"detachAnnotationsFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>annotationsFailed<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getData":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.24 please use {@link #getProperty} instead<br>Return requested data as object if the data has already been loaded and stored in the model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, bIncludeExpandEntries?: Boolean) -> Object","parameters":{"sPath":"type: string, description: A string containing the path to the data object that should be returned.","oContext":"type: object, description: The optional context which is used with the <code>sPath<\/code> to retrieve the requested data.","bIncludeExpandEntries":"type: boolean, description: This parameter should be set when a URI or custom parameter with a <code>$expand<\/code> system query option was used to retrieve associated entries embedded. If set to <code>true<\/code> then the <code>getProperty<\/code> function returns a desired property value or entry and includes the associated expand entries (if any). If set to <code>false<\/code> the associated/expanded entry properties are removed and not included in the desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy, not a reference of the entry will be returned."}},"detachMetadataFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>metadataFailed<\/code> event of this <code>sap.ui.model.odata.v2.ODataModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getMetaModel":{"!description":"Returns an instance of an OData meta model which offers a unified access to both OData V2 metadata and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata} as a foundation and merges V4 annotations from the existing {@link sap.ui.model.odata.v2.ODataAnnotations} directly into the corresponding model element.\n\n<b>BEWARE:<\/b> Access to this OData meta model will fail before the promise returned by {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.ODataMetaModel"},"fireBatchRequestSent":{"!description":"Fires event {@link #event:batchRequestSent batchRequestSent} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"setHeaders":{"!description":"Set custom headers which are provided in a key/value map.\n\nThese headers are used for requests against the OData backend. Private headers which are set in the ODataModel cannot be modified. These private headers are: <code>accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion<\/code>.\n\nTo remove these custom headers simply set the <code>mHeaders<\/code> parameter to null. Please also note that when calling this method again, all previous custom headers are removed unless they are specified again in the <code>mHeaders<\/code> parameter.","!static":false,"!category":"function","!type":"fn(mHeaders: Object)","parameters":{"mHeaders":"type: object, description: The header name/value map."}},"getProperty":{"!description":"Returns the value for the property with the given <code>sPath<\/code>.\n\nIf the path points to a navigation property which has been loaded via <code>$expand<\/code> then the <code>bIncludeExpandEntries<\/code> parameter determines if the navigation property should be included in the returned value or not. Please note that this currently works for 1..1 navigation properties only.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, bIncludeExpandEntries?: Boolean) -> Object","parameters":{"sPath":"type: string, description: Path/name of the property","oContext":"type: object, description: Context if available to access the property value","bIncludeExpandEntries":"type: boolean, description: @deprecated Please use {@link #getObject} function with select/expand parameters instead. This parameter should be set when a URI or custom parameter with a <code>$expand<\/code> system query option was used to retrieve associated entries embedded/inline. If true then the <code>getProperty<\/code> function returns a desired property value/entry and includes the associated expand entries (if any). Note: A copy and not a reference of the entry will be returned."}},"getHeaders":{"!description":"Returns all headers and custom headers which are stored in this OData model.","!static":false,"!category":"function","!type":"fn() -> Object"},"getRefreshAfterChange":{"!static":false,"!category":"function","!type":"fn() -> Boolean"},"setUseBatch":{"!description":"Enable or disable batch mode for future requests.","!static":false,"!category":"function","!type":"fn(bUseBatch?: Boolean)","parameters":{"bUseBatch":"type: boolean, description: Whether the requests should be encapsulated in a batch request"}},"addAnnotationUrl":{"!description":"Adds (a) new URL(s) whose content should be parsed as OData annotations, which are then merged into the annotations object which can be retrieved by calling the {@link #getServiceAnnotations}-method. If a <code>$metadata<\/code> URL is passed, the data will also be merged into the metadata object, which can be reached by calling the {@link #getServiceMetadata} method.","!static":false,"!category":"function","!type":"fn(vUrl: [String | String]) -> Promise","parameters":{"vUrl":"type: string|string[], description: Either one URL as string or an array of URL strings"}},"createKey":{"!description":"Creates the key from the given collection name and property map.\n\nPlease make sure that the metadata document is loaded before using this function.","!static":false,"!category":"function","!type":"fn(sCollection: String, oKeyProperties: Object) -> String","parameters":{"sCollection":"type: string, description: Name of the collection","oKeyProperties":"type: object, description: Object containing at least all the key properties of the entity type"}},"refresh":{"!description":"Refresh the model.\n\nThis will reload all data stored in the model. This will check all bindings for updated data and update the controls if data has been changed.\n\nNote: In contrast to an individual Binding refresh, the model refresh ignores Binding-specific parameters/queries.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean, bRemoveData?: Boolean, sGroupId?: String)","parameters":{"bRemoveData":"type: boolean, description: If set to <code>true<\/code> then the model data will be removed/cleared. Please note that the data might not be there when calling e.g. <code>getProperty<\/code> too early before the refresh call returned.","bForceUpdate":"type: boolean, description: Force update of controls","sGroupId":"type: string, description: ID of a request group; requests belonging to the same group will be bundled in one batch request"}},"invalidate":{"!description":"Invalidate the model data.\n\nMark all entries in the model cache as invalid. Next time a context or list is bound (binding), the respective entries will be detected as invalid and will be refreshed from the server.\n\nTo refresh all model data use @link sap.ui.model.odata.v2.ODatamModel#refresh","!static":false,"!category":"function","!type":"fn(fnCheckEntry?: fn())","parameters":{"fnCheckEntry":"type: function, description: A function which can be used to restrict invalidation to specific entries, gets the entity key and object as parameters and should return true for entities to invalidate."}},"setDeferredBatchGroups":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.32 use {@link #setDeferredGroups} instead<br>Setting batch groups as deferred.\n\nRequests that belong to a deferred batch group have to be sent by explicitly calling {@link #submitChanges}.","!static":false,"!category":"function","!type":"fn(aGroupIds: Array)","parameters":{"aGroupIds":"type: array, description: Array of batch group IDs that should be set as deferred"}},"setMessageScope":{"!description":"Sets this model's message scope.","!static":false,"!category":"function","!type":"fn(sMessageScope: sap.ui.model.odata.MessageScope)","parameters":{"sMessageScope":"type: sap.ui.model.odata.MessageScope, description: The message scope"}},"setDeferredGroups":{"!description":"Setting request groups as deferred.\n\nRequests that belong to a deferred group will be sent by explicitly calling {@link #submitChanges}.","!static":false,"!category":"function","!type":"fn(aGroupIds: Array)","parameters":{"aGroupIds":"type: array, description: Array of group IDs that should be set as deferred"}},"invalidateEntityType":{"!description":"Invalidate all entries of the given entity type in the model data.\n\nMark entries of the provided entity type in the model cache as invalid. Next time a context binding or list binding is done, the entry will be detected as invalid and will be refreshed from the server.","!static":false,"!category":"function","!type":"fn(sEntityType: String)","parameters":{"sEntityType":"type: string, description: the qualified name of the entity type"}},"bindProperty":{"!description":"Creates a new property binding for this model.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object, mParameters?: Object.<string,any>) -> sap.ui.model.PropertyBinding","parameters":{"sPath":"type: string, description: Path pointing to the property that should be bound; either an absolute path or a path relative to a given <code>oContext<\/code>","oContext":"type: object, description: A context object for the new binding","mParameters":"type: Object.<string,any>, description: Map of optional parameters for the binding; the ODataModel (v2) currently supports no additional parameters"}},"getServiceAnnotations":{"!description":"Return the annotation object. Please note that the metadata is loaded asynchronously and this function might return undefined because the metadata has not been loaded yet. In this case attach to the <code>annotationsLoaded<\/code> event to get notified when the annotations are available and then call this function.","!static":false,"!category":"function","!type":"fn() -> Object"},"createEntry":{"!description":"Creates a new entry object which is described by the metadata of the entity type of the specified <code>sPath<\/code> Name. A context object is returned which can be used to bind against the newly created object.\n\nFor each created entry a request is created and stored in a request queue. The request queue can be submitted by calling {@link #submitChanges}. To delete a created entry from the request queue call {@link #deleteCreatedEntry}.\n\nThe optional parameter <code>mParameters.properties<\/code> can be used as follows: <ul> <li><code>properties<\/code> could be an array containing the property names which should be included in the new entry. Other properties defined in the entity type won't be included. <\/li> <li><code>properties<\/code> could be an object which includes the desired properties and the corresponding values which should be used for the created entry. <\/li> <\/ul> If <code>properties<\/code> is not specified, all properties in the entity type will be included in the created entry.\n\nIf there are no values specified, the properties will have <code>undefined<\/code> values.\n\nPlease note that deep creates (including data defined by navigation properties) are not supported.","!static":false,"!category":"function","!type":"fn(sPath: String, mParameters: Object) -> sap.ui.model.Context","parameters":{"sPath":"type: string, description: Name of the path to the EntitySet","mParameters":"type: object, description: A map of the following parameters:"}},"annotationsLoaded":{"!description":"Returns a promise that resolves with an array containing information about the initially loaded annotations.\n\n<b>Important<\/b>: This covers the annotations that were given to the model constructor, not the ones that might have been added later on using the protected API method {@link #addAnnotationUrl}. In order to get information about those, the event <code>annotationsLoaded<\/code> can be used.","!static":false,"!category":"function","!type":"fn() -> Promise"},"fireAnnotationsLoaded":{"!description":"Fires event {@link #event:annotationsLoaded annotationsLoaded} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.v2.ODataModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.test.Opa5":{"iTeardownMyUIComponent":{"!description":"Destroys the UIComponent and removes the div from the dom like all the references on its objects. Use {@link sap.ui.test.Opa5#hasUIComponentStarted} to ensure that a UIComponent has been started and teardown can be safely performed.","!static":false,"!category":"function","!type":"fn() -> jQuery.promise"},"getWindow":{"!description":"Returns the window object in the current context. If an iframe is launched, it will return the iframe's window.","!static":true,"!category":"function","!type":"fn() -> Window"},"createPageObjects":{"!description":"Creates a set of page objects, each consisting of actions and assertions and adds them to the Opa configuration.\n\nUse page objects to structure your actions and assertions based on parts of the screen. This helps to avoid name clashes and to structure your tests.","!static":true,"!category":"function","!type":"fn(mPageObjects: Object.<string,sap.ui.test.PageObjectDefinition>) -> Object.<string,Object>","parameters":{"mPageObjects":"type: Object.<string,sap.ui.test.PageObjectDefinition>, description: Multiple page objects are possible, provide at least actions or assertions"}},"iStartMyUIComponent":{"!description":"Starts a UIComponent.","!static":false,"!category":"function","!type":"fn(oOptions: Object) -> jQuery.promise","parameters":{"oOptions":"type: object, description: An Object that contains the configuration for starting up a UIComponent."}},"!proto":"sap.ui.base.Object","!category":"class","iTeardownMyAppFrame":{"!description":"Removes the iframe from the DOM and removes all the references to its objects. Use {@link sap.ui.test.Opa5#hasAppStartedInAFrame} to ensure that an iframe has been started and teardown can be safely performed.","!static":true,"!category":"function","!type":"fn() -> jQuery.promise"},"stopQueue":{"!description":"Clears the queue and stops running tests so that new tests can be run. This means all waitFor statements registered by {@link sap.ui.test.Opa5#waitFor} will not be invoked anymore and the promise returned by {@link sap.ui.test.Opa5.emptyQueue} will be rejected. When its called inside of a check in {@link sap.ui.test.Opa5#waitFor} the success function of this waitFor will not be called.","!static":true,"!category":"function","!type":"fn()"},"hasAppStartedInAFrame":{"!description":"Checks if the application has been started using {@link sap.ui.test.Opa5#iStartMyAppInAFrame}","!static":false,"!category":"function","!type":"fn() -> Boolean"},"iStartMyAppInAFrame":{"!description":"Starts an app in an iframe. Only works reliably if running on the same server.","!static":true,"!category":"function","!type":"fn(vSourceOrOptions: String | Object, iTimeout?: Number, autoWait?: Boolean, width?: String | Number, height?: String | Number) -> jQuery.promise","parameters":{"autoWait":"type: boolean, description: Since 1.53, activates autoWait while the application is starting up. This allows more time for application startup and stabilizes tests for slow-loading applications. This parameter is false by default, regardless of the global autoWait value, to prevent issues in existing tests.","width":"type: string|number, description: Since 1.57, sets a fixed width for the iframe.","iTimeout":"type: number, description: The timeout for loading the iframe in seconds - default is 80.","vSourceOrOptions":"type: string|object, description: The source URL of the iframe or, since 1.53, you can provide a startup configuration object as the only parameter.","height":"type: string|number, description: Since 1.57, sets a fixed height for the iframe. Setting width and/or height is useful when testing responsive applications on screens of varying sizes. By default, the iframe dimensions are 60% of the outer window dimensions."}},"getHashChanger":{"!description":"Returns the HashChanger object in the current context. If an iframe is launched, it will return the iframe's HashChanger.","!static":true,"!category":"function","!type":"fn() -> sap.ui.core.routing.HashChanger"},"getJQuery":{"!description":"Returns the jQuery object in the current context. If an iframe is launched, it will return the iframe's jQuery object.","!static":true,"!category":"function","!type":"fn() -> jQuery"},"extendConfig":{"!description":"Extends and overwrites default values of the {@link sap.ui.test.Opa.config}. Most frequent usecase: <pre>\n    <code>\n        // Every waitFor will append this namespace in front of your viewName\n        Opa5.extendConfig({\n           viewNamespace: \"namespace.of.my.views.\"\n        });\n\n        var oOpa = new Opa5();\n\n        // Looks for a control with the id \"myButton\" in a View with the name \"namespace.of.my.views.Detail\"\n        oOpa.waitFor({\n             id: \"myButton\",\n             viewName: \"Detail\"\n        });\n\n        // Looks for a control with the id \"myList\" in a View with the name \"namespace.of.my.views.Master\"\n        oOpa.waitFor({\n             id: \"myList\",\n             viewName: \"Master\"\n        });\n    <\/code>\n<\/pre>\n\nSample usage: <pre>\n    <code>\n        var oOpa = new Opa5();\n\n        // this statement will  will time out after 15 seconds and poll every 400ms.\n        // those two values come from the defaults of {@link sap.ui.test.Opa.config}.\n        oOpa.waitFor({\n        });\n\n        // All wait for statements added after this will take other defaults\n        Opa5.extendConfig({\n            timeout: 10,\n            pollingInterval: 100\n        });\n\n        // this statement will time out after 10 seconds and poll every 100 ms\n        oOpa.waitFor({\n        });\n\n        // this statement will time out after 20 seconds and poll every 100 ms\n        oOpa.waitFor({\n            timeout: 20;\n        });\n    <\/code>\n<\/pre>","!static":true,"!category":"function","!type":"fn(options: Object)","parameters":{"options":"type: object, description: The values to be added to the existing config"}},"hasUIComponentStarted":{"!description":"Checks if the application has been started using {@link sap.ui.test.Opa5#iStartMyUIComponent}","!static":false,"!category":"function","!type":"fn() -> Boolean"},"emptyQueue":{"!description":"Waits until all waitFor calls are done See {@link sap.ui.test.Opa.emptyQueue} for the description","!static":true,"!category":"function","!type":"fn() -> jQuery.promise"},"waitFor":{"!description":"Takes a superset of the parameters of {@link sap.ui.test.Opa#waitFor}.","!static":false,"!category":"function","!type":"fn(options: Object) -> Object","parameters":{"options":"type: object, description: An object containing conditions for waiting and callbacks.\n\nThe allowed keys are listed below. If a key is not allowed, an error is thrown, stating that \"the parameter is not defined in the API\".\n\nAs of version 1.72, in addition to the listed keys, declarative matchers are also allowed. Any matchers declared on the root level of the options object are merged with those declared in <code>options.matchers<\/code>. For details on declarative matchers, see the <code>options.matchers<\/code> property."}},"hasAppStarted":{"!description":"Checks if the application has been started using {@link sap.ui.test.Opa5#iStartMyAppInAFrame} or {@link sap.ui.test.Opa5#iStartMyUIComponent}","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!description":"UI5 extension of the OPA framework.\n\nHelps you when writing tests for UI5 apps. Provides convenience to wait and retrieve for UI5 controls without relying on global IDs. Makes it easy to wait until your UI is in the state you need for testing, for example waiting for back-end data.","iWaitForPromise":{"!description":"Schedule a promise on the OPA5 queue.The promise will be executed in order with all waitFors - any subsequent waitFor will be executed after the promise is done. The promise is not directly chained, but instead its result is awaited in a new waitFor statement. This means that any \"thenable\" should be acceptable.","!static":false,"!category":"function","!type":"fn(oPromise: jQuery.promise | Promise) -> jQuery.promise","parameters":{"oPromise":"type: jQuery.promise|Promise, description: promise to schedule on the OPA5 queue"}},"resetConfig":{"!description":"Resets Opa.config to its default values. See {@link sap.ui.test.Opa5#waitFor} for the description Default values for OPA5 are: <ul> <li>viewNamespace: empty string<\/li> <li>arrangements: instance of OPA5<\/li> <li>actions: instance of OPA5<\/li> <li>assertions: instance of OPA5<\/li> <li>visible: true<\/li> <li>enabled: false<\/li> <li>timeout : 15 seconds, 0 for infinite timeout<\/li> <li>pollingInterval: 400 milliseconds<\/li> <li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.<\/li> <li>autoWait: false - since 1.42<\/li> <li>appParams: object with URI parameters for the tested app - since 1.48<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn()"},"!module":"sap/ui/test/Opa5","getTestLibConfig":{"!description":"Return particular test lib config object. This method is intended to be used by test libraries to access their configuration provided by the test in the testLibs section in {@link sap.ui.test.Opa5.extendConfig}","!static":true,"!category":"function","!type":"fn(sTestLibName: String) -> Object","parameters":{"sTestLibName":"type: string, description: test library name"}},"!helpDescription":"UI5 extension of the OPA framework.\n\nHelps you when writing tests for UI5 apps. Provides convenience to wait and retrieve for UI5 controls without relying on global IDs. Makes it easy to wait until your UI is in the state you need for testing, for example waiting for back-end data.","getPlugin":{"!description":"Returns the Opa plugin used for retrieving controls. If an iframe is launched, it will return the iframe's plugin.","!static":true,"!category":"function","!type":"fn() -> sap.ui.test.OpaPlugin"},"getContext":{"!description":"Gives access to a singleton object you can save values in. See {@link sap.ui.test.Opa.getContext} for the description","!static":true,"!category":"function","!type":"fn() -> Object"},"iTeardownMyApp":{"!description":"Tears down the started application regardless of how it was started. Removes the iframe launched by {@link sap.ui.test.Opa5#iStartMyAppInAFrame} or destroys the UIComponent launched by {@link sap.ui.test.Opa5#iStartMyUIComponent}. This function is designed to make the test's teardown independent of the startup. Use {@link sap.ui.test.Opa5#hasAppStarted} to ensure that the application has been started and teardown can be safely performed.","!static":false,"!category":"function","!type":"fn() -> jQuery.promise"},"getUtils":{"!description":"Returns the QUnit utils object in the current context. If an iframe is launched, it will return the iframe's QUnit utils.","!static":true,"!category":"function","!type":"fn() -> sap.ui.test.qunit"}},"sap.ui.core.util.MockServer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.MockServer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object, oScope?: Object)","prototype":"sap.ui.core.util.MockServer"},"jQuery.sap.history_obj":{"!type":"fn(mSettings: Object)","prototype":"jQuery.sap.history"},"sap.ui.core.DeclarativeSupport_obj":{"!type":"fn()","prototype":"sap.ui.core.DeclarativeSupport"},"sap.ui.test.matchers.Ancestor_obj":{"!type":"fn(vAncestor: Object | String, bDirect?: Boolean)","prototype":"sap.ui.test.matchers.Ancestor"},"module:sap/ui/core/ComponentSupport":{"!description":"The module <code>sap/ui/core/ComponentSupport<\/code> provides functionality which is used to find declared Components in the HTML page and to create the Component instances which will be put into a {@link sap.ui.core.ComponentContainer}.\n\nThe {@link module:sap/ui/core/ComponentSupport.run} function is called automatically once the module has been required. This allows declarative support for components.\n\n<h3>Usage<\/h3> To enable the <code>sap/ui/core/ComponentSupport<\/code> include it as the <code>oninit<\/code> module in the bootstrap: <pre>\n&lt;script id=\"sap-ui-bootstrap\"\n    src=\"/resources/sap-ui-core.js\"\n    ...\n    data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n    ...>\n&lt;/script>\n<\/pre>\n\nTo load and render components inside the HTML page, a special data attribute has to be specified on the respective DOM elements: <code>data-sap-ui-component<\/code>. All DOM elements marked with this data attribute will be regarded as container elements for the created <code>ComponentContainer<\/code> instances.\n\n<pre>\n&lt;body id=\"content\" class=\"sapUiBody sapUiSizeCompact\" role=\"application\">\n    ...\n    &lt;div data-sap-ui-component\n        data-id=\"container\"\n        data-name=\"sap.ui.core.samples.formatting\"\n        ...\n        data-handle-validation=\"true\"\n        ...>\n    &lt;/div>\n    ...\n&lt;/body>\n<\/pre>\n\n<h3>Configuration<\/h3> All configuration settings for the <code>ComponentContainer<\/code> have to be defined as <code>data<\/code> attributes on the respective HTML tags. Each data attribute will be interpreted as a setting and parsed considering the data type of the matching property in the <code>ComponentContainer<\/code>.\n\nAs HTML is case-insensitive, in order to define a property with upper-case characters, you have to \"escape\" them with a dash character, similar to CSS attributes. The following code gives an example:\n\n<pre>\n&lt;div data-sap-ui-component ... data-handle-validation=\"true\" ...>&lt;/div>\n<\/pre>\n\n<b>Beware:<\/b>\n\nThe <code>ComponentSupport<\/code> module enforces asynchronous loading of the respective component and its library dependencies. This is done by applying default settings for the following properties of the <code>ComponentContainer<\/code>:\n\n<ul> <li><code>async<\/code> {boolean} (<b>forced to <code>true<\/code><\/b>)<\/li> <li><code>manifest<\/code> {boolean|string} (<b>forced to <code>true<\/code> if no string is provided to ensure manifest first<\/b>)<\/li> <li><code>lifecycle<\/code> {sap.ui.core.ComponentLifecycle} (defaults to <code>Container<\/code>)<\/li> <li><code>autoPrefixId<\/code> {boolean} (defaults to <code>true<\/code>)<\/li> <\/ul>\n\nSee {@link topic:82a0fcecc3cb427c91469bc537ebdddf Declarative API for Initial Components}.","!module":"sap/ui/core/ComponentSupport","!helpDescription":"The module <code>sap/ui/core/ComponentSupport<\/code> provides functionality which is used to find declared Components in the HTML page and to create the Component instances which will be put into a {@link sap.ui.core.ComponentContainer}.\n\nThe {@link module:sap/ui/core/ComponentSupport.run} function is called automatically once the module has been required. This allows declarative support for components.\n\n<h3>Usage<\/h3> To enable the <code>sap/ui/core/ComponentSupport<\/code> include it as the <code>oninit<\/code> module in the bootstrap: <pre>\n&lt;script id=\"sap-ui-bootstrap\"\n    src=\"/resources/sap-ui-core.js\"\n    ...\n    data-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n    ...>\n&lt;/script>\n<\/pre>\n\nTo load and render components inside the HTML page, a special data attribute has to be specified on the respective DOM elements: <code>data-sap-ui-component<\/code>. All DOM elements marked with this data attribute will be regarded as container elements for the created <code>ComponentContainer<\/code> instances.\n\n<pre>\n&lt;body id=\"content\" class=\"sapUiBody sapUiSizeCompact\" role=\"application\">\n    ...\n    &lt;div data-sap-ui-component\n        data-id=\"container\"\n        data-name=\"sap.ui.core.samples.formatting\"\n        ...\n        data-handle-validation=\"true\"\n        ...>\n    &lt;/div>\n    ...\n&lt;/body>\n<\/pre>\n\n<h3>Configuration<\/h3> All configuration settings for the <code>ComponentContainer<\/code> have to be defined as <code>data<\/code> attributes on the respective HTML tags. Each data attribute will be interpreted as a setting and parsed considering the data type of the matching property in the <code>ComponentContainer<\/code>.\n\nAs HTML is case-insensitive, in order to define a property with upper-case characters, you have to \"escape\" them with a dash character, similar to CSS attributes. The following code gives an example:\n\n<pre>\n&lt;div data-sap-ui-component ... data-handle-validation=\"true\" ...>&lt;/div>\n<\/pre>\n\n<b>Beware:<\/b>\n\nThe <code>ComponentSupport<\/code> module enforces asynchronous loading of the respective component and its library dependencies. This is done by applying default settings for the following properties of the <code>ComponentContainer<\/code>:\n\n<ul> <li><code>async<\/code> {boolean} (<b>forced to <code>true<\/code><\/b>)<\/li> <li><code>manifest<\/code> {boolean|string} (<b>forced to <code>true<\/code> if no string is provided to ensure manifest first<\/b>)<\/li> <li><code>lifecycle<\/code> {sap.ui.core.ComponentLifecycle} (defaults to <code>Container<\/code>)<\/li> <li><code>autoPrefixId<\/code> {boolean} (defaults to <code>true<\/code>)<\/li> <\/ul>\n\nSee {@link topic:82a0fcecc3cb427c91469bc537ebdddf Declarative API for Initial Components}.","!category":"namespace","run":{"!description":"Find all DOM elements with the attribute <code>data-sap-ui-component<\/code> and parse the attributes from these DOM elements for the settings of the <code>ComponentContainer<\/code> which will be placed into these DOM elements.\n\nThis function is called automatically once the module has been required.","!category":"function","!type":"fn()"},"module:sap/ui/core/ComponentSupport":"module:sap/ui/core/ComponentSupport"},"sap.ui.model.type.Boolean":{"!description":"This class represents boolean simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Boolean.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Boolean type.","!module":"sap/ui/model/type/Boolean","!helpDescription":"This class represents boolean simple types.","!proto":"sap.ui.model.SimpleType","!category":"class"},"sap.ui.core.mvc.OverrideExecution":{"!description":"Execution option for overrides defined by a <code>ControllerExtension<\/code>.","Before":{"!description":"The override function gets executed before the original function","!category":"enum","!type":"String"},"!module":"sap/ui/core/mvc/OverrideExecution","Instead":{"!description":"The override function is called instead of the original function\n\nThis is the default option for ControllerExtension overrides","!category":"enum","!type":"String"},"After":{"!description":"The override function gets executed after the original function","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.core.ImeMode":{"!description":"State of the Input Method Editor (IME) for the control.\n\nDepending on its value, it allows users to enter and edit for example Chinese characters.","Auto":{"!description":"The value is automatically computed by the user agent.","!category":"enum","!type":"String"},"Active":{"!description":"IME is used for entering characters.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Inactive":{"!description":"IME is not used for entering characters.","!category":"enum","!type":"String"},"!category":"static class","Disabled":{"!description":"IME is disabled.","!category":"enum","!type":"String"}},"sap.ui.core.AccessibleLandmarkRole":{"!description":"Defines the accessible landmark roles for ARIA support. This enumeration is used with the AccessibleRole control property. For more information, go to \"Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)\" at the www.w3.org homepage.","Navigation":{"!description":"Represents the ARIA role <code>navigation<\/code>.\n\nA region that contains a collection of items and objects that, as a whole, combine to create a navigation facility.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","ContentInfo":{"!description":"Represents the ARIA role <code>contentinfo<\/code>.\n\nA region that contains information about the content on the page.","!category":"enum","!type":"String"},"Form":{"!description":"Represents the ARIA role <code>form<\/code>.\n\nA region that contains a collection of items and objects that, as a whole, combine to create a form.","!category":"enum","!type":"String"},"Banner":{"!description":"Represents the ARIA role <code>banner<\/code>.\n\nA banner usually appears at the top of the page and typically spans the full width.","!category":"enum","!type":"String"},"Search":{"!description":"Represents the ARIA role <code>search<\/code>.\n\nA region that contains a collection of items and objects that, as a whole, combine to create a search facility.","!category":"enum","!type":"String"},"Region":{"!description":"Represents the ARIA role <code>region<\/code>.\n\nA section of a page, that is important enough to be included in a page summary or table of contents.","!category":"enum","!type":"String"},"!category":"static class","Main":{"!description":"Represents the ARIA role <code>main<\/code>.\n\nThe main content of a page.","!category":"enum","!type":"String"},"None":{"!description":"No explicit role is applicable.\n\nThe interpretation of this value depends on the control / element which defines a property with this type. Normally this value means that no accessible landmark should be written.","!category":"enum","!type":"String"},"Complementary":{"!description":"Represents the ARIA role <code>complementary<\/code>.\n\nA section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.","!category":"enum","!type":"String"}},"sap.ui.core.ValueState":{"!description":"Marker for the correctness of the current value.","Warning":{"!description":"State is valid but with a warning.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Error":{"!description":"State is not valid.","!category":"enum","!type":"String"},"!category":"static class","Information":{"!description":"State is informative.","!category":"enum","!type":"String"},"None":{"!description":"State is not specified.","!category":"enum","!type":"String"},"Success":{"!description":"State is valid.","!category":"enum","!type":"String"}},"sap.ui.core.IDScope":{"!description":"Marker interface to flag controls that provide access to substructures from a byId method.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.core.postmessage.Bus":{"!description":"Responsible for the communication between different window objects.\n\n<h3>Overview<\/h3> This class is a singleton. The class instance can be retrieved as follows: <ul> <li>via the constructor <code>new sap.ui.core.postmessage.Bus()<\/code><\/li> <li>via the static method <code>sap.ui.core.postmessage.Bus.getInstance()<\/code><\/li> <\/ul>\n\nFor supported data types for payload messages, see {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm}.","extend":{"!description":"Creates a new subclass of class sap.ui.core.postmessage.Bus with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.EventBus.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.postmessage.Bus.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/core/postmessage/Bus","!helpDescription":"Responsible for the communication between different window objects.\n\n<h3>Overview<\/h3> This class is a singleton. The class instance can be retrieved as follows: <ul> <li>via the constructor <code>new sap.ui.core.postmessage.Bus()<\/code><\/li> <li>via the static method <code>sap.ui.core.postmessage.Bus.getInstance()<\/code><\/li> <\/ul>\n\nFor supported data types for payload messages, see {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm}.","subscribe":{"!description":"Attaches an event handler to the event with the given identifier on the given event channel","!static":false,"!category":"function","!type":"fn(sChannelId?: String, sEventId: String, fnFunction: fn(), oListener?: Object) -> sap.ui.core.postmessage.Bus","parameters":{"oListener":"type: object, description: Object that wants to be notified when the event occurs (<code>this<\/code> context within the handler function). If it is not specified, the handler function is called in the context of the event bus.","sEventId":"type: string, description: Identifier of the event to listen for","fnFunction":"type: function, description: Handler function to call when the event occurs; this function is called in the context of the <code>oListener<\/code> instance (if present) or on the event bus instance. Arguments: <pre>\n- {string} sChannelId - Channel ID\n- {string} sEventId - Event ID\n- {object} mParameters - Event parameters\n    - {Event} originalEvent - Post message original event\n    - {string} channelId - Channel ID\n    - {string} eventId - Event ID\n    - {Window} source - Sender window\n    - {string} origin - Sender origin, e.g. https://example.com\n    - {*} [data] - Payload data\n<\/pre>","sChannelId":"type: string, description: Channel of the event to subscribe to. If not given, the default channel is used. The channel <code>\"sap.ui\"<\/code> is reserved by the UI5 framework. An application can listen to events on this channel, but is not allowed to publish its own events there."}},"publish":{"!description":"Publish message into cross-window communication channel","!static":false,"!category":"function","!type":"fn(mParameters: Object)","parameters":{"mParameters":"type: object, description: Map with params"}},"!proto":"sap.ui.core.EventBus","!category":"class","getInstance":{"!description":"Returns an instance of the class","!static":true,"!category":"function","!type":"fn() -> sap.ui.core.postmessage.Bus"}},"sap.ui.model.TreeBindingUtils":{"!module":"sap/ui/model/TreeBindingUtils","mergeSections":{"!description":"Merges together oNewSection into a set of other sections (aSections) The array/objects are not modified, the function returns a new section array.","!static":"true","!category":"function","!type":"fn(aSections: [Object], oNewSection: Object) -> [Object]"},"!category":"namespace"},"sap.ui.model.odata.type":{"Raw":"sap.ui.model.odata.type.Raw_obj","SByte":"sap.ui.model.odata.type.SByte_obj","Time":"sap.ui.model.odata.type.Time_obj","!category":"namespace","Guid":"sap.ui.model.odata.type.Guid_obj","String":"sap.ui.model.odata.type.String_obj","Int16":"sap.ui.model.odata.type.Int16_obj","Unit":"sap.ui.model.odata.type.Unit_obj","DateTime":"sap.ui.model.odata.type.DateTime_obj","Int":"sap.ui.model.odata.type.Int_obj","Decimal":"sap.ui.model.odata.type.Decimal_obj","Int32":"sap.ui.model.odata.type.Int32_obj","Currency":"sap.ui.model.odata.type.Currency_obj","Stream":"sap.ui.model.odata.type.Stream_obj","Boolean":"sap.ui.model.odata.type.Boolean_obj","!description":"The types in this namespace are {@link sap.ui.model.SimpleType simple types} corresponding to OData primitive types for both {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem OData V2} and {@link http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html OData V4} (see \"4.4 Primitive Types\").\n\nThey can be used in any place where simple types are allowed (and the model representation matches), but they are of course most valuable when used in bindings to a {@link sap.ui.model.odata.v2.ODataModel} or {@link sap.ui.model.odata.v4.ODataModel}.\n\n<b>Example:<\/b> <pre>\n  &lt;Label text=\"ID\"/>\n  &lt;Input value=\"{path : 'id', type : 'sap.ui.model.odata.type.String',\n      constraints : {nullable : false, maxLength : 10}}\"/>\n  &lt;Label text=\"valid through\"/>\n  &lt;Input value=\"{path : 'validThrough', type : 'sap.ui.model.odata.type.DateTime',\n      constraints : {displayFormat : 'Date'}}\"/>\n<\/pre>\n\nAll types support formatting from the representation used in ODataModel (\"model format\") to various representations used by UI elements (\"target type\") and vice versa. Additionally they support validating a given value against the type's constraints.\n\nThe following target types may be supported: <table> <tr><th>Type<\/th><th>Description<\/th><\/tr> <tr><td><code>string<\/code><\/td><td>The value is converted to a <code>string<\/code>, so that it can be displayed in an input field. Supported by all types.<\/td><\/tr> <tr><td><code>boolean<\/code><\/td><td>The value is converted to a <code>Boolean<\/code>, so that it can be displayed in a checkbox. Only supported by {@link sap.ui.model.odata.type.Boolean}.<\/td><\/tr> <tr><td><code>int<\/code><\/td><td>The value is converted to an integer (as <code>number<\/code>). May cause truncation of decimals and overruns. Supported by all numeric types.<\/td><\/tr> <tr><td><code>float<\/code><\/td><td>The value is converted to a <code>number<\/code>. Supported by all numeric types.<\/td><\/tr> <tr><td><code>object<\/code><\/td><td>The value is converted to a <code>Date<\/code> so that it can be displayed in a date or time picker. Supported by {@link sap.ui.model.odata.type.Date} and {@link sap.ui.model.odata.type.DateTimeOffset} since 1.69.0. <\/td><\/tr> <tr><td><code>any<\/code><\/td><td>A technical format. The value is simply passed through. Only supported by <code>format<\/code>, not by <code>parse<\/code>. Supported by all types.<\/td><\/tr> <\/table>\n\nAll constraints relevant for OData V2 may be given as strings besides their natural types (e.g. <code>nullable : \"false\"<\/code> or <code>maxLength : \"10\"<\/code>). This makes the life of template processors easier, but is not needed for OData V4.\n\n<b>Handling of <code>null<\/code><\/b>:\n\nAll types handle <code>null<\/code> in the same way. When formatting to <code>string<\/code>, it is simply passed through (and <code>undefined<\/code> becomes <code>null<\/code>, too). When parsing from <code>string<\/code>, it is also passed through. Additionally, {@link sap.ui.model.odata.type.String String} and {@link sap.ui.model.odata.type.Guid Guid} convert the empty string to <code>null<\/code> when parsing. <code>validate<\/code> decides based on the constraint <code>nullable<\/code>: If <code>false<\/code>, <code>null<\/code> is not accepted and leads to a (locale-dependent) <code>ParseException<\/code>.\n\nThis ensures that the user cannot clear an input field bound to an attribute with non-nullable type. However it does not ensure that the user really entered something if the field was empty before.\n\n<b><code>Date<\/code> vs. <code>DateTime<\/code><\/b>:\n\nThe type {@link sap.ui.model.odata.type.Date} is only valid for an OData V4 service. If you use the type for an OData V2 service, displaying is possible but you get an error message from server if you try to save changes.\n\nFor an OData V2 service use {@link sap.ui.model.odata.type.DateTime} with the constraint <code>displayFormat: \"Date\"<\/code> to display only a date.","TimeOfDay":"sap.ui.model.odata.type.TimeOfDay_obj","ODataType":"sap.ui.model.odata.type.ODataType_obj","DateTimeOffset":"sap.ui.model.odata.type.DateTimeOffset_obj","Double":"sap.ui.model.odata.type.Double_obj","Date":"sap.ui.model.odata.type.Date_obj","DateTimeBase":"sap.ui.model.odata.type.DateTimeBase_obj","!module":"sap/ui/model/odata/type/ODataType","Int64":"sap.ui.model.odata.type.Int64_obj","Single":"sap.ui.model.odata.type.Single_obj","!helpDescription":"The types in this namespace are {@link sap.ui.model.SimpleType simple types} corresponding to OData primitive types for both {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem OData V2} and {@link http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html OData V4} (see \"4.4 Primitive Types\").\n\nThey can be used in any place where simple types are allowed (and the model representation matches), but they are of course most valuable when used in bindings to a {@link sap.ui.model.odata.v2.ODataModel} or {@link sap.ui.model.odata.v4.ODataModel}.\n\n<b>Example:<\/b> <pre>\n  &lt;Label text=\"ID\"/>\n  &lt;Input value=\"{path : 'id', type : 'sap.ui.model.odata.type.String',\n      constraints : {nullable : false, maxLength : 10}}\"/>\n  &lt;Label text=\"valid through\"/>\n  &lt;Input value=\"{path : 'validThrough', type : 'sap.ui.model.odata.type.DateTime',\n      constraints : {displayFormat : 'Date'}}\"/>\n<\/pre>\n\nAll types support formatting from the representation used in ODataModel (\"model format\") to various representations used by UI elements (\"target type\") and vice versa. Additionally they support validating a given value against the type's constraints.\n\nThe following target types may be supported: <table> <tr><th>Type<\/th><th>Description<\/th><\/tr> <tr><td><code>string<\/code><\/td><td>The value is converted to a <code>string<\/code>, so that it can be displayed in an input field. Supported by all types.<\/td><\/tr> <tr><td><code>boolean<\/code><\/td><td>The value is converted to a <code>Boolean<\/code>, so that it can be displayed in a checkbox. Only supported by {@link sap.ui.model.odata.type.Boolean}.<\/td><\/tr> <tr><td><code>int<\/code><\/td><td>The value is converted to an integer (as <code>number<\/code>). May cause truncation of decimals and overruns. Supported by all numeric types.<\/td><\/tr> <tr><td><code>float<\/code><\/td><td>The value is converted to a <code>number<\/code>. Supported by all numeric types.<\/td><\/tr> <tr><td><code>object<\/code><\/td><td>The value is converted to a <code>Date<\/code> so that it can be displayed in a date or time picker. Supported by {@link sap.ui.model.odata.type.Date} and {@link sap.ui.model.odata.type.DateTimeOffset} since 1.69.0. <\/td><\/tr> <tr><td><code>any<\/code><\/td><td>A technical format. The value is simply passed through. Only supported by <code>format<\/code>, not by <code>parse<\/code>. Supported by all types.<\/td><\/tr> <\/table>\n\nAll constraints relevant for OData V2 may be given as strings besides their natural types (e.g. <code>nullable : \"false\"<\/code> or <code>maxLength : \"10\"<\/code>). This makes the life of template processors easier, but is not needed for OData V4.\n\n<b>Handling of <code>null<\/code><\/b>:\n\nAll types handle <code>null<\/code> in the same way. When formatting to <code>string<\/code>, it is simply passed through (and <code>undefined<\/code> becomes <code>null<\/code>, too). When parsing from <code>string<\/code>, it is also passed through. Additionally, {@link sap.ui.model.odata.type.String String} and {@link sap.ui.model.odata.type.Guid Guid} convert the empty string to <code>null<\/code> when parsing. <code>validate<\/code> decides based on the constraint <code>nullable<\/code>: If <code>false<\/code>, <code>null<\/code> is not accepted and leads to a (locale-dependent) <code>ParseException<\/code>.\n\nThis ensures that the user cannot clear an input field bound to an attribute with non-nullable type. However it does not ensure that the user really entered something if the field was empty before.\n\n<b><code>Date<\/code> vs. <code>DateTime<\/code><\/b>:\n\nThe type {@link sap.ui.model.odata.type.Date} is only valid for an OData V4 service. If you use the type for an OData V2 service, displaying is possible but you get an error message from server if you try to save changes.\n\nFor an OData V2 service use {@link sap.ui.model.odata.type.DateTime} with the constraint <code>displayFormat: \"Date\"<\/code> to display only a date.","Byte":"sap.ui.model.odata.type.Byte_obj"},"sap.ui.test.matchers.I18NText_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.I18NText with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.I18NText"},"sap.ui.core.Icon":{"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association {@link #getAriaLabelledBy ariaLabelledBy}.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"getHoverBackgroundColor":{"!description":"Gets current value of property {@link #getHoverBackgroundColor hoverBackgroundColor}.\n\nBackground color for Icon in hover state. This property has no visual effect when run on mobile device.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!static":false,"!category":"function","!type":"fn() -> String"},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.ID]"},"getAccessibilityInfo":{"!static":false,"!category":"function","!type":"fn()"},"getBackgroundColor":{"!description":"Gets current value of property {@link #getBackgroundColor backgroundColor}.\n\nBackground color of the Icon in normal state.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Control","!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThis is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"getUseIconTooltip":{"!description":"Gets current value of property {@link #getUseIconTooltip useIconTooltip}.\n\nDecides whether a default Icon tooltip should be used if no tooltip is set.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setDecorative":{"!description":"Sets a new value for property {@link #getDecorative decorative}.\n\nA decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bDecorative: Boolean) -> sap.ui.core.Icon","parameters":{"bDecorative":"type: boolean, description: New value for property <code>decorative<\/code>"}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThis is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"Constructor for a new Icon.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSrc src} : sap.ui.core.URI<\/li>\n<li>{@link #getSize size} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getColor color} : string<\/li>\n<li>{@link #getHoverColor hoverColor} : string<\/li>\n<li>{@link #getActiveColor activeColor} : string<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getBackgroundColor backgroundColor} : string<\/li>\n<li>{@link #getHoverBackgroundColor hoverBackgroundColor} : string<\/li>\n<li>{@link #getActiveBackgroundColor activeBackgroundColor} : string<\/li>\n<li>{@link #getDecorative decorative} : boolean (default: true)<\/li>\n<li>{@link #getUseIconTooltip useIconTooltip} : boolean (default: true)<\/li>\n<li>{@link #getAlt alt} : string<\/li>\n<li>{@link #getNoTabStop noTabStop} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getAriaLabelledBy ariaLabelledBy} : (sap.ui.core.ID | sap.ui.core.Control)[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association {@link #getAriaLabelledBy ariaLabelledBy}.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.Icon","parameters":{"vAriaLabelledBy":"type: sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to add; if empty, nothing is inserted"}},"setSize":{"!description":"Sets a new value for property {@link #getSize size}.\n\nSince Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSize: sap.ui.core.CSSSize) -> sap.ui.core.Icon","parameters":{"sSize":"type: sap.ui.core.CSSSize, description: New value for property <code>size<\/code>"}},"getNoTabStop":{"!description":"Gets current value of property {@link #getNoTabStop noTabStop}.\n\nDefines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getActiveColor":{"!description":"Gets current value of property {@link #getActiveColor activeColor}.\n\nThis color is shown when icon is pressed/activated by the user.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!static":false,"!category":"function","!type":"fn() -> String"},"getDecorative":{"!description":"Gets current value of property {@link #getDecorative decorative}.\n\nA decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setActiveBackgroundColor":{"!description":"Sets a new value for property {@link #getActiveBackgroundColor activeBackgroundColor}.\n\nBackground color for Icon in active state.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sActiveBackgroundColor: String) -> sap.ui.core.Icon","parameters":{"sActiveBackgroundColor":"type: string, description: New value for property <code>activeBackgroundColor<\/code>"}},"getActiveBackgroundColor":{"!description":"Gets current value of property {@link #getActiveBackgroundColor activeBackgroundColor}.\n\nBackground color for Icon in active state.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!static":false,"!category":"function","!type":"fn() -> String"},"setNoTabStop":{"!description":"Sets a new value for property {@link #getNoTabStop noTabStop}.\n\nDefines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bNoTabStop: Boolean) -> sap.ui.core.Icon","parameters":{"bNoTabStop":"type: boolean, description: New value for property <code>noTabStop<\/code>"}},"attachPress":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:press press} event of this <code>sap.ui.core.Icon<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.Icon<\/code> itself.\n\nThis event is fired when icon is pressed/activated by the user. When a handler is attached to this event, the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Icon","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.Icon<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!description":"Icon uses embedded font instead of pixel image. Comparing to image, Icon is easily scalable, color can be altered live and various effects can be added using css.\n\nA set of built in Icons is available and they can be fetched by calling sap.ui.core.IconPool.getIconURI and set this value to the src property on the Icon.","setSrc":{"!description":"Sets a new value for property {@link #getSrc src}.\n\nThis property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSrc: sap.ui.core.URI) -> sap.ui.core.Icon","parameters":{"sSrc":"type: sap.ui.core.URI, description: New value for property <code>src<\/code>"}},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named {@link #getAriaLabelledBy ariaLabelledBy}.","!static":false,"!category":"function","!type":"fn(vAriaLabelledBy: Number | sap.ui.core.ID | sap.ui.core.Control) -> sap.ui.core.ID","parameters":{"vAriaLabelledBy":"type: int|sap.ui.core.ID|sap.ui.core.Control, description: The ariaLabelledBy to be removed or its index or ID"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Icon.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setBackgroundColor":{"!description":"Sets a new value for property {@link #getBackgroundColor backgroundColor}.\n\nBackground color of the Icon in normal state.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sBackgroundColor: String) -> sap.ui.core.Icon","parameters":{"sBackgroundColor":"type: string, description: New value for property <code>backgroundColor<\/code>"}},"setAlt":{"!description":"Sets a new value for property {@link #getAlt alt}.\n\nThis defines the alternative text which is used for outputting the aria-label attribute on the DOM.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sAlt: String) -> sap.ui.core.Icon","parameters":{"sAlt":"type: string, description: New value for property <code>alt<\/code>"}},"getSrc":{"!description":"Gets current value of property {@link #getSrc src}.\n\nThis property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"setUseIconTooltip":{"!description":"Sets a new value for property {@link #getUseIconTooltip useIconTooltip}.\n\nDecides whether a default Icon tooltip should be used if no tooltip is set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bUseIconTooltip: Boolean) -> sap.ui.core.Icon","parameters":{"bUseIconTooltip":"type: boolean, description: New value for property <code>useIconTooltip<\/code>"}},"getColor":{"!description":"Gets current value of property {@link #getColor color}.\n\nThe color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!static":false,"!category":"function","!type":"fn() -> String"},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThis is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.core.Icon","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThis is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.core.Icon","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Icon with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"detachPress":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:press press} event of this <code>sap.ui.core.Icon<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Icon","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"firePress":{"!description":"Fires event {@link #event:press press} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.Icon","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getHoverColor":{"!description":"Gets current value of property {@link #getHoverColor hoverColor}.\n\nThis color is shown when icon is hovered. This property has no visual effect when run on mobile device.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!static":false,"!category":"function","!type":"fn() -> String"},"getSize":{"!description":"Gets current value of property {@link #getSize size}.\n\nSince Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setColor":{"!description":"Sets a new value for property {@link #getColor color}.\n\nThe color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sColor: String) -> sap.ui.core.Icon","parameters":{"sColor":"type: string, description: New value for property <code>color<\/code>"}},"!module":"sap/ui/core/Icon","!helpDescription":"Icon uses embedded font instead of pixel image. Comparing to image, Icon is easily scalable, color can be altered live and various effects can be added using css.\n\nA set of built in Icons is available and they can be fetched by calling sap.ui.core.IconPool.getIconURI and set this value to the src property on the Icon.","setHoverColor":{"!description":"Sets a new value for property {@link #getHoverColor hoverColor}.\n\nThis color is shown when icon is hovered. This property has no visual effect when run on mobile device.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHoverColor: String) -> sap.ui.core.Icon","parameters":{"sHoverColor":"type: string, description: New value for property <code>hoverColor<\/code>"}},"getAlt":{"!description":"Gets current value of property {@link #getAlt alt}.\n\nThis defines the alternative text which is used for outputting the aria-label attribute on the DOM.","!static":false,"!category":"function","!type":"fn() -> String"},"setHoverBackgroundColor":{"!description":"Sets a new value for property {@link #getHoverBackgroundColor hoverBackgroundColor}.\n\nBackground color for Icon in hover state. This property has no visual effect when run on mobile device.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHoverBackgroundColor: String) -> sap.ui.core.Icon","parameters":{"sHoverBackgroundColor":"type: string, description: New value for property <code>hoverBackgroundColor<\/code>"}},"setActiveColor":{"!description":"Sets a new value for property {@link #getActiveColor activeColor}.\n\nThis color is shown when icon is pressed/activated by the user.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sActiveColor: String) -> sap.ui.core.Icon","parameters":{"sActiveColor":"type: string, description: New value for property <code>activeColor<\/code>"}}},"sap.ui.model.ParseException_obj":{"!type":"fn(message: String)","prototype":"sap.ui.model.ParseException"},"sap.ui.core.ws.SapPcpWebSocket":{"!description":"WebSocket class implementing the pcp-protocol.","extend":{"!description":"Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.ws.SapPcpWebSocket.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates a new WebSocket connection and uses the pcp-protocol for communication.","fireMessage":{"!description":"Fires event {@link #event:message message} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.ws.SapPcpWebSocket","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"!module":"sap/ui/core/ws/SapPcpWebSocket","!helpDescription":"WebSocket class implementing the pcp-protocol.","!proto":"sap.ui.core.ws.WebSocket","!category":"class","send":{"!description":"Sends a message and optional pcp-header-fields using the pcp-protocol.\n\nIf the connection is not yet opened, the message will be queued and sent when the connection is established.","!static":false,"!category":"function","!type":"fn(message: String | Blob | ArrayBuffer, oPcpFields?: Object) -> sap.ui.core.ws.SapPcpWebSocket","parameters":{"oPcpFields":"type: object, description: additional pcp-fields as key-value map","message":"type: string|Blob|ArrayBuffer, description: message to send"}}},"module:sap/ui/events/jquery/EventSimulation":{"!module":"sap/ui/events/jquery/EventSimulation","!category":"namespace","module:sap/ui/events/jquery/EventSimulation":"module:sap/ui/events/jquery/EventSimulation"},"sap.ui.model.analytics.odata4analytics.SortExpression_obj":{"!type":"fn(oModel: Object, oSchema: Object, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType)","prototype":"sap.ui.model.analytics.odata4analytics.SortExpression"},"sap.ui.model.odata.type.DateTimeOffset":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.DateTimeOffset<\/code><\/a>.\n\nIn {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a <code>Date<\/code> instance in local time. In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code> like \"1970-12-31T23:59:58Z\". See parameter <code>oConstraints.V4<\/code> for more information.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.DateTimeOffset with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.DateTimeOffset.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.DateTimeOffset<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(vValue?: Date | String, sTargetType: String) -> Date | String","parameters":{"sTargetType":"type: string, description: The target type, may be \"any\", \"object\" (since 1.69.0), \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: Date|string, description: The value to be formatted, which is represented in the model as a <code>Date<\/code> instance (OData V2) or as a string like \"1970-12-31T23:59:58Z\" (OData V4); both representations are accepted independent of the model's OData version"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/DateTimeOffset","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.DateTimeOffset<\/code><\/a>.\n\nIn {@link sap.ui.model.odata.v2.ODataModel} this type is represented as a <code>Date<\/code> instance in local time. In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code> like \"1970-12-31T23:59:58Z\". See parameter <code>oConstraints.V4<\/code> for more information.","!proto":"sap.ui.model.odata.type.DateTimeBase","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints, depending on the model's OData version.","!static":false,"!category":"function","!type":"fn(vValue: Object)","parameters":{"vValue":"type: any, description: The value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value to a <code>Date<\/code> instance (OData V2) or a string like \"1970-12-31T23:59:58Z\" (OData V4), depending on the model's OData version.","!static":false,"!category":"function","!type":"fn(vValue: Date | String, sSourceType: String) -> Date | String","parameters":{"sSourceType":"type: string, description: The source type (the expected type of <code>vValue<\/code>), must be \"string\", \"object\" (since 1.69.0), or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: Date|string, description: The value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>; <code>Date<\/code> objects are expected to represent local time and are supported if and only if source type is \"object\"."}}},"sap.ui.model.analytics.odata4analytics.Model.ReferenceByURI":{"!description":"Handle to an OData model by the URI pointing to it.","!constructorDescription":"Create a reference to an OData model by the URI of the related OData service.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Handle to an OData model by the URI pointing to it.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.ComponentMetadata_obj":{"!type":"fn(sClassName: String, oStaticInfo: Object)","prototype":"sap.ui.core.ComponentMetadata"},"module:sap/ui/performance/trace/Interaction":{"!description":"Provides base functionality for interaction detection heuristics & API. Interaction detection works through the detection of relevant events and tracking of rendering activities.<br> An example:<br> The user clicks on a button<br> <ul> <li>\"click\" event gets detected via notification (<code>var notifyEventStart<\/code>)<\/li> <li>a click handler is registered on the button, so this is an interaction start (<code>var notifyStepStart<\/code>)<\/li> <li>some requests are made and rendering has finished (<code>var notifyStepEnd<\/code>)<\/li> <\/ul> All measurement takes place in {@link module:sap/ui/performance/Measurement}.","filter":{"!description":"Gets all interaction measurements for which a provided filter function returns a truthy value.\n\nTo filter for certain categories of measurements a fnFilter can be implemented like this <code> function(InteractionMeasurement) { return InteractionMeasurement.duration > 0 }<\/code>","!category":"function","!type":"fn(fnFilter: fn()) -> [Object]"},"getAll":{"!description":"Gets all interaction measurements.","!category":"function","!type":"fn(bFinalize: Boolean) -> [Object]"},"setActive":{"!description":"Enables the interaction tracking.","!category":"function","!type":"fn(bActive: Boolean)"},"module:sap/ui/performance/trace/Interaction":"module:sap/ui/performance/trace/Interaction","!module":"sap/ui/performance/trace/Interaction","!helpDescription":"Provides base functionality for interaction detection heuristics & API. Interaction detection works through the detection of relevant events and tracking of rendering activities.<br> An example:<br> The user clicks on a button<br> <ul> <li>\"click\" event gets detected via notification (<code>var notifyEventStart<\/code>)<\/li> <li>a click handler is registered on the button, so this is an interaction start (<code>var notifyStepStart<\/code>)<\/li> <li>some requests are made and rendering has finished (<code>var notifyStepEnd<\/code>)<\/li> <\/ul> All measurement takes place in {@link module:sap/ui/performance/Measurement}.","!category":"namespace","getActive":{"!description":"Returns true if the interaction detection was enabled explicitly, or implicitly along with fesr.","!category":"function","!type":"fn() -> Boolean"}},"sap.ui.Device":{"!description":"Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events like media queries, orientation change or resizing.\n\nThis API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap dynamically depending on the capabilities of the browser or device.","orientation":"sap.ui.Device.orientation","system":"sap.ui.Device.system","os":"sap.ui.Device.os","!module":"sap/ui/Device","!helpDescription":"Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events like media queries, orientation change or resizing.\n\nThis API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap dynamically depending on the capabilities of the browser or device.","browser":"sap.ui.Device.browser","resize":"sap.ui.Device.resize","!category":"namespace","media":"sap.ui.Device.media","support":"sap.ui.Device.support"},"sap.ui.model.type.Unit":{"!description":"This class represents the Unit composite type.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Unit with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Unit.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Unit type.","formatValue":{"!description":"Format the given array containing amount and Unit code to an output value of type string. Other internal types than 'string' are not supported by the Unit type. If a source format has been defined for this type, the formatValue does also accept a string value as input, which will be parsed into an array using the source format. If vValues is not defined or null, null will be returned.","!static":false,"!category":"function","!type":"fn(vValue: Array | String, sInternalType: String) -> Object","parameters":{"sInternalType":"type: string, description: the target type","vValue":"type: array|string, description: the array of values or string value to be formatted. If an array is given, index 0 is the number value, and index 1 is the Unit code (CLDR or custom). Indices 2+ are the bound values for the dynamic format options."}},"!module":"sap/ui/model/type/Unit","!helpDescription":"This class represents the Unit composite type.","!proto":"sap.ui.model.CompositeType","!category":"class","parseValue":{"!description":"Parse a string value to an array containing amount and Unit. Parsing of other internal types than 'string' is not supported by the Unit type. In case a source format has been defined, after parsing the Unit is formatted using the source format and a string value is returned instead.","!static":false,"!category":"function","!type":"fn(vValue: Object, sInternalType: String, aCurrentValues: Array) -> Array | String","parameters":{"aCurrentValues":"type: array, description: the current values of all binding parts","sInternalType":"type: string, description: the source type","vValue":"type: any, description: the value to be parsed"}}},"sap.ui.test.matchers.AggregationContainsPropertyEqual":{"!description":"Checks if an aggregation contains at least one item that has a property set to a certain value.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <pre><code>{\n    aggregationContainsPropertyEqual: {\n        aggregationName: \"string\",\n        propertyName: \"string\",\n        propertyValue: \"string\"\n    }\n}\n<\/code><\/pre>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.AggregationContainsPropertyEqual.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.test.matchers.Matcher","!category":"class","getAggregationName":{"!description":"Gets current value of property {@link #getAggregationName aggregationName}.\n\nThe Name of the aggregation that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"isMatching":{"!description":"Checks if the control has a filled aggregation with at least one control that have a property equaling propertyName/Value.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}},"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationContainsPropertyEqual with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAggregationName aggregationName} : string<\/li>\n<li>{@link #getPropertyName propertyName} : string<\/li>\n<li>{@link #getPropertyValue propertyValue} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","getPropertyValue":{"!description":"Gets current value of property {@link #getPropertyValue propertyValue}.\n\nThe value of the Property that is used for matching.","!static":false,"!category":"function","!type":"fn() -> Object"},"setPropertyName":{"!description":"Sets a new value for property {@link #getPropertyName propertyName}.\n\nThe Name of the property that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.test.matchers.AggregationContainsPropertyEqual","parameters":{"sPropertyName":"type: string, description: New value for property <code>propertyName<\/code>"}},"!module":"sap/ui/test/matchers/AggregationContainsPropertyEqual","!helpDescription":"Checks if an aggregation contains at least one item that has a property set to a certain value.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <pre><code>{\n    aggregationContainsPropertyEqual: {\n        aggregationName: \"string\",\n        propertyName: \"string\",\n        propertyValue: \"string\"\n    }\n}\n<\/code><\/pre>","setPropertyValue":{"!description":"Sets a new value for property {@link #getPropertyValue propertyValue}.\n\nThe value of the Property that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oPropertyValue: Object) -> sap.ui.test.matchers.AggregationContainsPropertyEqual","parameters":{"oPropertyValue":"type: any, description: New value for property <code>propertyValue<\/code>"}},"setAggregationName":{"!description":"Sets a new value for property {@link #getAggregationName aggregationName}.\n\nThe Name of the aggregation that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sAggregationName: String) -> sap.ui.test.matchers.AggregationContainsPropertyEqual","parameters":{"sAggregationName":"type: string, description: New value for property <code>aggregationName<\/code>"}},"getPropertyName":{"!description":"Gets current value of property {@link #getPropertyName propertyName}.\n\nThe Name of the property that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.postmessage.Bus_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.postmessage.Bus with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.EventBus.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.postmessage.Bus"},"sap.ui.model.CompositeType":{"!description":"This is an abstract base class for composite types. Composite types have multiple parts and know how to merge/split them upon formatting/parsing the value. Typical use cases are currency or amount values.\n\nSubclasses of <code>CompositeType<\/code> may set the following boolean properties in the constructor: <ul> <li><code>bParseWithValues<\/code>: Whether the {@link #parseValue} method requires the current binding values as a third parameter; defaults to <code>false<\/code><\/li> <li><code>bUseInternalValues<\/code>: Whether the {@link #formatValue} and {@link #parseValue} methods operate on the internal values; defaults to <code>false<\/code><\/li> <li><code>bUseRawValues<\/code>: Whether the {@link #formatValue} and {@link #parseValue} methods operate on the raw model values; the types of embedded bindings are ignored; defaults to <code>false<\/code><\/li> <\/ul> <code>bUseRawValues<\/code> and <code>bUseInternalValues<\/code> cannot be both <code>true<\/code>.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.CompositeType.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.model.SimpleType","getParseWithValues":{"!description":"Returns whether the {@link #parseValue} method requires the current binding values as a third parameter.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"validateValue":{"!description":"Validates whether the given raw values meet the defined constraints. This method does nothing if no constraints are defined.","!static":false,"!category":"function","!type":"fn(aValues: [Object])","parameters":{"aValues":"type: any[], description: The set of values to be validated"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.model.CompositeType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new CompositeType.","formatValue":{"!description":"Formats the given raw values to an output value of the given target type. This happens according to the format options if the target type is <code>string<\/code>. If <code>aValues<\/code> is not defined or <code>null<\/code>, <code>null<\/code> is returned.","!static":false,"!category":"function","!type":"fn(aValues: [Object], sTargetType: String) -> Object","parameters":{"sTargetType":"type: string, description: The target type; see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}","aValues":"type: any[], description: The values to be formatted"}},"!module":"sap/ui/model/CompositeType","!helpDescription":"This is an abstract base class for composite types. Composite types have multiple parts and know how to merge/split them upon formatting/parsing the value. Typical use cases are currency or amount values.\n\nSubclasses of <code>CompositeType<\/code> may set the following boolean properties in the constructor: <ul> <li><code>bParseWithValues<\/code>: Whether the {@link #parseValue} method requires the current binding values as a third parameter; defaults to <code>false<\/code><\/li> <li><code>bUseInternalValues<\/code>: Whether the {@link #formatValue} and {@link #parseValue} methods operate on the internal values; defaults to <code>false<\/code><\/li> <li><code>bUseRawValues<\/code>: Whether the {@link #formatValue} and {@link #parseValue} methods operate on the raw model values; the types of embedded bindings are ignored; defaults to <code>false<\/code><\/li> <\/ul> <code>bUseRawValues<\/code> and <code>bUseInternalValues<\/code> cannot be both <code>true<\/code>.","parseValue":{"!description":"Parses an external value of the given source type to the corresponding values in model representation.","!static":false,"!category":"function","!type":"fn(vValue: Object, sSourceType: String, aCurrentValues?: Array) -> [Object]","parameters":{"aCurrentValues":"type: array, description: The current values of all binding parts; required if {@link #getParseWithValues} returns <code>true<\/code>","sSourceType":"type: string, description: The source type (the expected type of <code>vValue<\/code>); see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}","vValue":"type: any, description: The value to be parsed"}},"getUseInternalValues":{"!description":"Returns whether the {@link #formatValue} and {@link #parseValue} methods operate on the internal, related native JavaScript values.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getUseRawValues":{"!description":"Returns whether the {@link #formatValue} and {@link #parseValue} methods operate on the raw model values instead of formatted values.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.model.odata.v4.SubmitMode":{"!description":"Modes to control the use of batch requests for a group ID.","Auto":{"!description":"Requests associated with the group ID are sent in a batch request which is triggered automatically before rendering.","!category":"enum","!type":"String"},"!module":"sap/ui/model/odata/v4/SubmitMode","!category":"static class","API":{"!description":"Requests associated with the group ID are sent in a batch request via {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.","!category":"enum","!type":"String"},"Direct":{"!description":"Requests associated with the group ID are sent directly without batch.","!category":"enum","!type":"String"}},"sap.ui.model.odata.type.Double":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Double<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Double with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Double.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Double<\/code>.","formatValue":{"!description":"Formats the given value to the given target type. When formatting to \"string\", very large or very small values are formatted to the exponential format (e.g. \"-3.14 E+15\").","!static":false,"!category":"function","!type":"fn(vValue: Number | String, sTargetType: String) -> Number | String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: number|string, description: the value to be formatted, which is represented as a number in the model"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Double","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Double<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(fValue: Number)","parameters":{"fValue":"type: number, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to an Edm.Double in <code>number<\/code> representation.","!static":false,"!category":"function","!type":"fn(vValue: String | Number, sSourceType: String) -> Number","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); may be \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|number, description: the value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>; note that there is no way to enter <code>Infinity<\/code> or <code>NaN<\/code> values"}}},"sap.ui.base.ManagedObjectObserver":{"!description":"Use the <code>ManagedObjectObserver<\/code> to get notified when properties, aggregations or associations of a <code>ManagedObject<\/code> instance have changed.\n\nUse the {@link #observe} method to add instances of ManagedObject that should be observed or to enhance the set of observed properties, aggregations etc. for an already observed instance.\n\nUse the {@link #unobserve} method to stop observing an instance of ManagedObject or to reduce the set of observed properties, aggregations etc. for an observed instance.\n\nUse the {@link #disconnect} method to completely stop observing all instances of ManagedObject hat previously had been added to this observer.\n\nThe only parameter to the constructor is a function <code>fnCallback<\/code> which will be called for every observed change. Depending on the type of the change, different change objects are passed to the callback:\n\n<h4>Property Change<\/h4> {string} change.name the name of the property that changed<br> {string} change.type 'property'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.old the old value<br> {any} change.current the new value<br>\n\n<h4>Aggregation Change<\/h4> {string} change.name the name of the aggregation that changed<br> {string} change.type 'aggregation'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {sap.ui.base.ManagedObject} change.child the child managed object instance<br>\n\n<h4>Association Change<\/h4> {string} change.name the name of the association that changed<br> {string} change.type 'association'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {string|string[]} change.ids the ids that changed<br>\n\n<h4>Event Registry Change<\/h4> {string} change.name the name of the event that changed<br> {string} change.type 'event'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {object} change.listener the listener object<br> {object} change.func the listeners function<br> {object} change.data the events data<br>\n\n<h4>Binding Change<\/h4> {string} change.name the name of the binding that changed<br> {string} change.type 'binding'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'prepare', 'ready' or 'remove'<br> {object} change.bindingInfo the binding info object<br> {string} change.memberType 'property' or 'aggregation'<br>\n\n<h4>destroy managed Object<\/h4> {string} change.type 'destroy'<br> {object} change.object the managed object instance on which the change occurred<br>","extend":{"!description":"Creates a new subclass of class sap.ui.base.ManagedObjectObserver with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"disconnect":{"!description":"Disconnect the observer from all objects.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.base.ManagedObjectObserver.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new ManagedObjectObserver.","!module":"sap/ui/base/ManagedObjectObserver","!helpDescription":"Use the <code>ManagedObjectObserver<\/code> to get notified when properties, aggregations or associations of a <code>ManagedObject<\/code> instance have changed.\n\nUse the {@link #observe} method to add instances of ManagedObject that should be observed or to enhance the set of observed properties, aggregations etc. for an already observed instance.\n\nUse the {@link #unobserve} method to stop observing an instance of ManagedObject or to reduce the set of observed properties, aggregations etc. for an observed instance.\n\nUse the {@link #disconnect} method to completely stop observing all instances of ManagedObject hat previously had been added to this observer.\n\nThe only parameter to the constructor is a function <code>fnCallback<\/code> which will be called for every observed change. Depending on the type of the change, different change objects are passed to the callback:\n\n<h4>Property Change<\/h4> {string} change.name the name of the property that changed<br> {string} change.type 'property'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.old the old value<br> {any} change.current the new value<br>\n\n<h4>Aggregation Change<\/h4> {string} change.name the name of the aggregation that changed<br> {string} change.type 'aggregation'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {sap.ui.base.ManagedObject} change.child the child managed object instance<br>\n\n<h4>Association Change<\/h4> {string} change.name the name of the association that changed<br> {string} change.type 'association'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {string|string[]} change.ids the ids that changed<br>\n\n<h4>Event Registry Change<\/h4> {string} change.name the name of the event that changed<br> {string} change.type 'event'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'remove' or 'insert'<br> {object} change.listener the listener object<br> {object} change.func the listeners function<br> {object} change.data the events data<br>\n\n<h4>Binding Change<\/h4> {string} change.name the name of the binding that changed<br> {string} change.type 'binding'<br> {object} change.object the managed object instance on which the change occurred<br> {any} change.mutation 'prepare', 'ready' or 'remove'<br> {object} change.bindingInfo the binding info object<br> {string} change.memberType 'property' or 'aggregation'<br>\n\n<h4>destroy managed Object<\/h4> {string} change.type 'destroy'<br> {object} change.object the managed object instance on which the change occurred<br>","!proto":"sap.ui.base.Object","unobserve":{"!description":"Stops observing the given object. A configuration is used to specify the meta data settings that should be ignored. Configuration should be as specific as possible to avoid negative performance impact.","!static":false,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject, oConfiguration: Object)","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: the managed object instance that was observed","oConfiguration":"type: object, description: a configuration specifying the settings to stop observing for the object. If no configuration is provided, the object is unobserved completely"}},"!category":"class","isObserved":{"!description":"Checks whether a given configuration set for a control is observed.\n\nAll given settings must be observed for the method to return true.","!static":false,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject, oConfiguration: Object) -> Boolean","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: the managed object instance that was observed","oConfiguration":"type: object, description: a configuration specifying the settings to check for the object. If no configuration is provided it checks if the object observes at least for one property, etc."}},"observe":{"!description":"Starts observing the given object. A configuration is used to specify the meta data settings that should be observed. Configuration should be as specific as possible to avoid negative performance impact. Observing all settings (properties, aggregations, associations) should be avoided.","!static":false,"!category":"function","!type":"fn(oObject: sap.ui.base.ManagedObject, oConfiguration: Object)","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: the managed object instance to be observed","oConfiguration":"type: object, description: a mandatory configuration specifying the settings to observe for the object"}}},"sap.ui.core.support.usage":{"EventBroadcaster":"sap.ui.core.support.usage.EventBroadcaster_obj","!module":"sap/ui/core/support/usage/EventBroadcaster","!category":"namespace"},"sap.ui.model.CompositeBinding":{"getInternalValue":{"!description":"Returns the current internal value of the bound target which is an array of the internal (JS native) values of nested bindings","!static":false,"!category":"function","!type":"fn() -> Array"},"!proto":"sap.ui.model.PropertyBinding","getRawValue":{"!description":"Returns the current raw value of the bound target which is an array of the raw (model) values of nested bindings","!static":false,"!category":"function","!type":"fn() -> Array"},"!category":"class","detachChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>change<\/code> event of this <code>sap.ui.model.CompositeBinding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setExternalValue":{"!description":"Sets the external value of a composite binding. If no CompositeType is assigned to the binding, the default implementation assumes a space separated list of values. This will cause the setValue to be called for each nested binding, except for undefined values in the array.","!static":false,"!category":"function","!type":"fn(oValue: Object)","parameters":{"oValue":"type: object, description: the value to set for this binding"}},"!constructorDescription":"Constructor for CompositeBinding.","!description":"Combines multiple property bindings (called 'parts') into a single one.\n\nA <code>CompositeBinding<\/code> combines the values from all its binding parts (each an instance of <code>PropertyBinding<\/code>), either by calling a formatter function or by involving a {@link sap.ui.model.CompositeType composite type}. When a formatter function is used, then the composite binding is automatically limited to <code>OneWay<\/code> mode. When a type is used, the binding can also operate in <code>TwoWay<\/code> mode.\n\nHigher layers of the framework derive composite bindings from easy-to-write string representations (the following features require complex binding syntax, e.g. <code>data-sap-ui-bindingSyntax=\"complex\"<\/code>):\n\nXML views, for example, convert attribute values with nested curly braces like <pre>\n  text=\"{fullname} &amp;lt;{email}&amp;gt;\"\n<\/pre> into a composite binding with two parts (one property binding for property \"fullname\" and one for property \"email\") and with a generic formatter function that injects the values of the parts into the string literal \"{0} &lt;{1}&gt;\" accordingly.\n\nSimilarly, {@link topic:daf6852a04b44d118963968a1239d2c0 expression bindings} are parsed and converted into composite bindings, too. The formatter function is created by the framework and executes the calculations as defined by the expression string, taking the values from the binding parts as input.\n\n<b>Note:<\/b> A nesting of composite bindings is currently not supported (albeit being helpful).","resume":{"!description":"Suspends the binding update. No change events will be fired.\n\nA refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.","!static":false,"!category":"function","!type":"fn()"},"suspend":{"!description":"Suspends the binding update. No change events will be fired.\n\nA refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.CompositeBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setRawValue":{"!description":"Sets the raw value of the bound target. Parameter must be an array of values matching the raw (model) types of nested bindings.","!static":false,"!category":"function","!type":"fn(aValues: Array)","parameters":{"aValues":"type: array, description: the new values of the nested bindings"}},"updateRequired":{"!description":"Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.","!static":false,"!category":"function","!type":"fn(oModel: Object) -> Boolean","parameters":{"oModel":"type: object, description: The model instance to compare against"}},"getBindings":{"!description":"Returns the property bindings contained in this composite binding.","!static":false,"!category":"function","!type":"fn() -> Array"},"attachChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>change<\/code> event of this <code>sap.ui.model.CompositeBinding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.CompositeBinding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setType":{"!description":"Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly. The internal type is the property type of the element which the value is formatted to.","!static":false,"!category":"function","!type":"fn(oType: sap.ui.model.CompositeType, sInternalType: String)","parameters":{"sInternalType":"type: string, description: the internal type of the element property which this binding is bound against.","oType":"type: sap.ui.model.CompositeType, description: the type for the binding"}},"detachAggregatedDataStateChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>AggregatedDataStateChange<\/code> event of this <code>sap.ui.model.CompositeBinding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getExternalValue":{"!description":"Returns the current external value of the bound target which is formatted via a type or formatter function.","!static":false,"!category":"function","!type":"fn() -> Object"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.CompositeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Returns the raw values of the property bindings in an array.","!static":false,"!category":"function","!type":"fn() -> Object"},"!module":"sap/ui/model/CompositeBinding","!helpDescription":"Combines multiple property bindings (called 'parts') into a single one.\n\nA <code>CompositeBinding<\/code> combines the values from all its binding parts (each an instance of <code>PropertyBinding<\/code>), either by calling a formatter function or by involving a {@link sap.ui.model.CompositeType composite type}. When a formatter function is used, then the composite binding is automatically limited to <code>OneWay<\/code> mode. When a type is used, the binding can also operate in <code>TwoWay<\/code> mode.\n\nHigher layers of the framework derive composite bindings from easy-to-write string representations (the following features require complex binding syntax, e.g. <code>data-sap-ui-bindingSyntax=\"complex\"<\/code>):\n\nXML views, for example, convert attribute values with nested curly braces like <pre>\n  text=\"{fullname} &amp;lt;{email}&amp;gt;\"\n<\/pre> into a composite binding with two parts (one property binding for property \"fullname\" and one for property \"email\") and with a generic formatter function that injects the values of the parts into the string literal \"{0} &lt;{1}&gt;\" accordingly.\n\nSimilarly, {@link topic:daf6852a04b44d118963968a1239d2c0 expression bindings} are parsed and converted into composite bindings, too. The formatter function is created by the framework and executes the calculations as defined by the expression string, taking the values from the binding parts as input.\n\n<b>Note:<\/b> A nesting of composite bindings is currently not supported (albeit being helpful).","setValue":{"!description":"Sets the values. This will cause the setValue to be called for each nested binding, except for undefined values in the array.","!static":false,"!category":"function","!type":"fn(aValues: Array)","parameters":{"aValues":"type: array, description: the values to set for this binding"}},"detachDataStateChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>DataStateChange<\/code> event of this <code>sap.ui.model.CompositeBinding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachAggregatedDataStateChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>AggregatedDataStateChange<\/code> event of this <code>sap.ui.model.CompositeBinding<\/code>.\n\nThe <code>AggregatedDataStateChange<\/code> event is fired asynchronously, meaning that the <code>DataState<\/code> object given as parameter of the event contains all changes that were applied to the <code>DataState<\/code> in the running thread.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function.","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"initialize":{"!description":"Initialize the binding. The method should be called when creating a binding. The default implementation calls checkUpdate(true). Prevent checkUpdate to be triggered while initializing nestend bindings, it is sufficient to call checkUpdate when all nested bindings are initialized.","!static":false,"!category":"function","!type":"fn()"},"setInternalValue":{"!description":"Sets the internal value of the bound target. Parameter must be an array of values matching the internal (JS native) types of nested bindings.","!static":false,"!category":"function","!type":"fn(aValues: Array)","parameters":{"aValues":"type: array, description: the new values of the nested bindings"}},"attachDataStateChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>DataStateChange<\/code> event of this <code>sap.ui.model.CompositeBinding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.CompositeBinding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.model.analytics.odata4analytics.Parameter_obj":{"!type":"fn(oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization, oProperty: Object)","prototype":"sap.ui.model.analytics.odata4analytics.Parameter"},"sap.ui.test.OpaBuilder":{"viewNamespace":{"!description":"Sets the <code>viewNamespace<\/code> parameter.","!static":false,"!category":"function","!type":"fn(sViewNamespace: String) -> sap.ui.test.OpaBuilder","parameters":{"sViewNamespace":"type: string, description: the viewNamespace"}},"isDialogElement":{"!description":"Defines whether target control is part of a popover or dialog (sets <code>searchOpenDialogs<\/code> property).","!static":false,"!category":"function","!type":"fn(bDialog?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bDialog":"type: boolean, description: can be set to false to disable <code>searchOpenDialogs<\/code>, set to true if omitted"}},"hasI18NText":{"!description":"Adds a matcher for given properties.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, sModelTokenPath: String, aParameters?: [Object]) -> sap.ui.test.OpaBuilder","parameters":{"sModelTokenPath":"type: string, description: the path to the I18N text. If model is omitted, <code>i18n<\/code> is used as model name.","aParameters":"type: any[], description: the values to be used instead of the placeholders","sPropertyName":"type: string, description: the name of the property to check for i18n text"}},"!proto":"sap.ui.base.Object","checkNumberOfMatches":{"!description":"Adds a check for the expected number of matching controls.","!static":false,"!category":"function","!type":"fn(iExpectedNumber: Number) -> sap.ui.test.OpaBuilder","parameters":{"iExpectedNumber":"type: number, description: the number of expected matching controls"}},"pollingInterval":{"!description":"Sets the <code>pollingInterval<\/code> parameter.","!static":false,"!category":"function","!type":"fn(iPollingInterval: Number) -> sap.ui.test.OpaBuilder","parameters":{"iPollingInterval":"type: int, description: the polling interval in milliseconds"}},"description":{"!description":"Set a output text that will be used as success and error message base message.","!static":false,"!category":"function","!type":"fn(sDescription: String) -> sap.ui.test.OpaBuilder","parameters":{"sDescription":"type: string, description: a descriptive text"}},"mustBeReady":{"!description":"Sets the <code>autoWait<\/code> parameter.","!static":false,"!category":"function","!type":"fn(bReady?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bReady":"type: boolean, description: can be set to false to prevent <code>autoWait<\/code>, set to true if omitted"}},"!category":"class","debugTimeout":{"!description":"Sets the <code>debugTimeout<\/code> parameter.","!static":false,"!category":"function","!type":"fn(iDebugTimeout: Number) -> sap.ui.test.OpaBuilder","parameters":{"iDebugTimeout":"type: int, description: the debug timeout in seconds"}},"do":{"!description":"Add an action to be performed on all matched controls.","!static":false,"!category":"function","!type":"fn(vActions: sap.ui.test.actions.Action | fn() | Array, bReplace?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"vActions":"type: sap.ui.test.actions.Action|function|Array, description: the action(s) to be performed on matched controls","bReplace":"type: boolean, description: true to replace all previous defined actions, false to add it (default)"}},"hasProperties":{"!description":"Adds a matcher for given properties.","!static":false,"!category":"function","!type":"fn(oProperties: Object) -> sap.ui.test.OpaBuilder","parameters":{"oProperties":"type: object, description: map of properties that target control(s) must match"}},"error":{"!description":"Adds an error message or function.","!static":false,"!category":"function","!type":"fn(vErrorMessage: String | fn(), bReplace?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bReplace":"type: boolean, description: true to replace all previous defined error functions, false to add it (default)","vErrorMessage":"type: string|function, description: the message to be shown (or function executed) on failure"}},"hasAggregationLength":{"!description":"Adds a matcher that checks for a certain number of aggregation items.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, int?: undefined) -> sap.ui.test.OpaBuilder","parameters":{"sAggregationName":"type: string, description: the aggregation name","int":"type: undefined, description: iNumber length to check against"}},"hasAggregationProperties":{"!description":"Adds a matcher to aggregation items checking for certain properties. At least one item must match the properties.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oProperties: Object) -> sap.ui.test.OpaBuilder","parameters":{"oProperties":"type: object, description: map of properties that aggregation item must match","sAggregationName":"type: string, description: the aggregation name"}},"doOnChildren":{"!description":"Executes a builder with matching controls being descendants of matching target control(s). Children are any controls in the control tree beneath this target control(s).","!static":false,"!category":"function","!type":"fn(vChildBuilderOrMatcher?: sap.ui.test.matchers.Matcher | fn() | Array | Object | sap.ui.test.OpaBuilder, vActions?: sap.ui.test.actions.Action | fn() | Array, bDirect?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bDirect":"type: boolean, description: specifies if the ancestor should be a direct ancestor (parent)","vActions":"type: sap.ui.test.actions.Action|function|Array, description: the actions to be performed on matching child items","vChildBuilderOrMatcher":"type: sap.ui.test.matchers.Matcher|function|Array|Object|sap.ui.test.OpaBuilder, description: the child builder or child matcher"}},"doPress":{"!description":"Executes a {@link sap.ui.test.actions.Press} action on target control(s).","!static":false,"!category":"function","!type":"fn(sIdSuffix?: String) -> sap.ui.test.OpaBuilder","parameters":{"sIdSuffix":"type: string, description: the id suffix of the DOM Element the press action will be executed on"}},"doOnAggregation":{"!description":"Performs given actions on all items of an aggregation fulfilling the matchers.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object, vActions: sap.ui.test.actions.Action | fn() | Array) -> sap.ui.test.OpaBuilder","parameters":{"vActions":"type: sap.ui.test.actions.Action|function|Array, description: the actions to be performed on matching aggregation items","sAggregationName":"type: string, description: the aggregation name","vMatchers":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: the matchers to filter aggregation items"}},"timeout":{"!description":"Sets the <code>timeout<\/code> parameter.","!static":false,"!category":"function","!type":"fn(iTimeout: Number) -> sap.ui.test.OpaBuilder","parameters":{"iTimeout":"type: int, description: the timeout in seconds"}},"!constructorDescription":"Constructor for a new OpaBuilder.","viewName":{"!description":"Sets the <code>viewName<\/code> parameter.","!static":false,"!category":"function","!type":"fn(sViewName: String) -> sap.ui.test.OpaBuilder","parameters":{"sViewName":"type: string, description: the viewName"}},"options":{"!description":"Apply custom options. The options might override previously defined options of the OpaBuilder.","!static":false,"!category":"function","!type":"fn(oOptions: Object) -> sap.ui.test.OpaBuilder","parameters":{"oOptions":"type: object, description: the {@link sap.ui.test.Opa5#waitFor} options to apply"}},"create":{"!description":"Convenience creation and initialization of a new OpaBuilder.","!static":true,"!category":"function","!type":"fn(oOpaInstance?: sap.ui.test.Opa5, vId?: String | RegExp, vControlType?: String, bDialogElement?: Boolean, vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object, vActions?: sap.ui.test.actions.Action | fn() | Array, oOptions?: Object) -> sap.ui.test.OpaBuilder","parameters":{"vId":"type: string|RegExp, description: the id of the target control(s)","bDialogElement":"type: boolean, description: if true, only popover and dialogs are searched for","vActions":"type: sap.ui.test.actions.Action|function|Array, description: the actions to be performed on target control(s)","oOpaInstance":"type: sap.ui.test.Opa5, description: the Opa5 instance to operate on","vControlType":"type: string, description: the type of the target control(s)","oOptions":"type: object, description: oOptions the {@link sap.ui.test.Opa5#waitFor} options to apply","vMatchers":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: additional matchers to filter target control(s)"}},"doConditional":{"!description":"Add an action that is only performed if target control fulfills the conditions. It is internally using {@link sap.ui.test.OpaBuilder.Actions.conditional}.","!static":false,"!category":"function","!type":"fn(vConditions: sap.ui.test.matchers.Matcher | fn() | Array | Object, vSuccessActions: sap.ui.test.actions.Action | fn() | Array, vElseActions?: sap.ui.test.actions.Action | fn() | Array) -> sap.ui.test.OpaBuilder","parameters":{"vElseActions":"type: sap.ui.test.actions.Action|function|Array, description: the action(s) to be performed when conditions are not fulfilled","vSuccessActions":"type: sap.ui.test.actions.Action|function|Array, description: the actions to be performed when conditions are fulfilled","vConditions":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: target control is checked against these given conditions"}},"has":{"!description":"Defines additional matchers for the target control(s).","!static":false,"!category":"function","!type":"fn(vMatchers: sap.ui.test.matchers.Matcher | fn() | Array | Object, bReplace?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bReplace":"type: boolean, description: true to replace all previous defined matchers, false to add it (default)","vMatchers":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: additional matchers to filter target control(s)"}},"!description":"Builder pattern for {@link sap.ui.test.Opa5#waitFor} options object - a function driven API supporting easy test definition and execution.\n\nSample usage: <code><pre>\n// {\n//    id: \"myButton\",\n//    press: new Press()\n// }\nOpaBuilder.create()\n    .hasId(\"myButton\")\n    .doPress()\n    .build();\n<\/pre><\/code>\n\nReplace <code>this.waitFor<\/code> call completely: <code><pre>\n// return this.waitFor({\n//    controlType: \"sap.m.StandardListItem\",\n//    matchers: [\n//       {\n//           properties: { text: \"my test text\" }\n//       }\n//    ],\n//    press: new Press(),\n//    success: function () {\n//        Opa5.assert.ok(true, \"Item selected - OK\");\n//    },\n//    errorMessage: \"Item selected - FAILURE\"\n// });\nreturn OpaBuilder.create(this)\n    .hasType(\"sap.m.StandardListItem\")\n    .hasProperties({ text: \"my test text\" })\n    .doPress()\n    .description(\"Item selected\")\n    .execute();\n<\/pre><\/code>","doEnterText":{"!description":"Performs a {@link sap.ui.test.actions.EnterText} on target control(s).","!static":false,"!category":"function","!type":"fn(sText: String, bClearFirst?: Boolean, bKeepFocus?: Boolean, sIdSuffix?: String) -> sap.ui.test.OpaBuilder","parameters":{"bKeepFocus":"type: boolean, description: true to keep focus on target control, false to focus out (default)","sIdSuffix":"type: string, description: the id suffix of the DOM Element the action will be executed on","sText":"type: string, description: the text to be entered","bClearFirst":"type: boolean, description: true to clear already existing text, false to keep it (default)"}},"hasSome":{"!description":"Adds a group of matchers that requires only one of them to actually match. It is internally using {@link OpaBuilder.Matchers.some}.","!static":false,"!category":"function","!type":"fn(aMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> sap.ui.test.OpaBuilder","parameters":{"aMatchers":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: aMatchers list of matchers were one must be met"}},"mustBeVisible":{"!description":"Sets the <code>visible<\/code> parameter.","!static":false,"!category":"function","!type":"fn(bVisible?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bVisible":"type: boolean, description: can be set to false to prevent <code>visible<\/code> check, set to true if omitted"}},"defaultOptions":{"!description":"Set or get the default options to be used as the builder base. If no options are provided, the current default options are returned.","!static":true,"!category":"function","!type":"fn(oOptions?: Object) -> Object","parameters":{"oOptions":"type: object, description: the new default options to be used"}},"check":{"!description":"Add a check function. If another check function already exists, the functions are chained.","!static":false,"!category":"function","!type":"fn(fnCheck: fn(), bReplace?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"fnCheck":"type: function, description: the check that is executed on matched controls","bReplace":"type: boolean, description: true to replace all previous defined matchers, false to add it (default)"}},"execute":{"!description":"Executes the definition on the given or previously defined Opa5 instance.","!static":false,"!category":"function","!type":"fn(oOpaInstance?: sap.ui.test.Opa5) -> sap.ui.test.OpaBuilder","parameters":{"oOpaInstance":"type: sap.ui.test.Opa5, description: the Opa5 instance to call {@link sap.ui.test.Opa5#waitFor} on"}},"hasId":{"!description":"Defines the id of the target control(s).","!static":false,"!category":"function","!type":"fn(vId: String | RegExp) -> sap.ui.test.OpaBuilder","parameters":{"vId":"type: string|RegExp, description: the id of the target control(s)"}},"viewId":{"!description":"Sets the <code>viewId<\/code> parameter.","!static":false,"!category":"function","!type":"fn(sViewId: String) -> sap.ui.test.OpaBuilder","parameters":{"sViewId":"type: string, description: the viewId"}},"!module":"sap/ui/test/OpaBuilder","hasConditional":{"!description":"Adds a matcher that checks states for given conditions. It is internally using {@link OpaBuilder.Matchers.conditional}.","!static":false,"!category":"function","!type":"fn(vConditions: sap.ui.test.matchers.Matcher | fn() | Array | Object, vSuccessMatcher: sap.ui.test.matchers.Matcher | fn() | Array | Object, vElseMatcher?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> sap.ui.test.OpaBuilder","parameters":{"vSuccessMatcher":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: actual matcher that is executed if conditions are met","vConditions":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: conditions to pre-check","vElseMatcher":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: actual matcher that is executed if conditions are not met"}},"mustBeEnabled":{"!description":"Sets the <code>enabled<\/code> parameter.","!static":false,"!category":"function","!type":"fn(bEnabled?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"bEnabled":"type: boolean, description: can be set to false to prevent <code>enabled<\/code> check, set to true if omitted"}},"!helpDescription":"Builder pattern for {@link sap.ui.test.Opa5#waitFor} options object - a function driven API supporting easy test definition and execution.\n\nSample usage: <code><pre>\n// {\n//    id: \"myButton\",\n//    press: new Press()\n// }\nOpaBuilder.create()\n    .hasId(\"myButton\")\n    .doPress()\n    .build();\n<\/pre><\/code>\n\nReplace <code>this.waitFor<\/code> call completely: <code><pre>\n// return this.waitFor({\n//    controlType: \"sap.m.StandardListItem\",\n//    matchers: [\n//       {\n//           properties: { text: \"my test text\" }\n//       }\n//    ],\n//    press: new Press(),\n//    success: function () {\n//        Opa5.assert.ok(true, \"Item selected - OK\");\n//    },\n//    errorMessage: \"Item selected - FAILURE\"\n// });\nreturn OpaBuilder.create(this)\n    .hasType(\"sap.m.StandardListItem\")\n    .hasProperties({ text: \"my test text\" })\n    .doPress()\n    .description(\"Item selected\")\n    .execute();\n<\/pre><\/code>","build":{"!description":"Build the final {@link sap.ui.test.Opa5#waitFor} options object and returns it.","!static":false,"!category":"function","!type":"fn() -> Object"},"hasAggregation":{"!description":"Adds matchers to aggregation items, that at least one aggregation item must match.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, vMatchers?: sap.ui.test.matchers.Matcher | fn() | Array | Object) -> sap.ui.test.OpaBuilder","parameters":{"sAggregationName":"type: string, description: the aggregation name","vMatchers":"type: sap.ui.test.matchers.Matcher|function|Array|Object, description: matchers to filter aggregation items"}},"success":{"!description":"Adds a success message or function. When providing an OpaBuilder, the action will execute it.","!static":false,"!category":"function","!type":"fn(vSuccess: String | fn() | sap.ui.test.OpaBuilder, bReplace?: Boolean) -> sap.ui.test.OpaBuilder","parameters":{"vSuccess":"type: string|function|sap.ui.test.OpaBuilder, description: the message that will be shown (or function executed) on success","bReplace":"type: boolean, description: true to replace all previous defined success functions, false to add it (default)"}},"fragmentId":{"!description":"Sets the <code>fragmentId<\/code> parameter.","!static":false,"!category":"function","!type":"fn(sFragmentId: String) -> sap.ui.test.OpaBuilder","parameters":{"sFragmentId":"type: string, description: the fragment id"}},"hasType":{"!description":"Defines the control type of the target control(s).","!static":false,"!category":"function","!type":"fn(vControlType: String) -> sap.ui.test.OpaBuilder","parameters":{"vControlType":"type: string, description: the type of the target control(s)"}}},"sap.ui.core.Popup_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Popup with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oContent: sap.ui.core.Control | sap.ui.core.Element | Element, bModal?: Boolean, bShadow?: Boolean, bAutoClose?: Boolean)","prototype":"sap.ui.core.Popup"},"sap.ui.base.DataType":{"!description":"Represents the type of properties in a <code>ManagedObject<\/code> class.\n\nEach type provides some metadata like its {@link #getName qualified name} or its {@link #getBaseType base type} in case of a derived type. Array types provide information about the allowed {@link #getComponentType type of components} in an array, enumeration types inform about the set of their allowed {@link #getEnumValues keys and values}.\n\nEach type has a method to {@link #isValid check whether a value is valid} for a property of that type.\n\nAlready defined types can be looked up by calling {@link #.getType DataType.getType}, new types can only be created by calling the factory method {@link #.createType DataType.createType}, calling the constructor will throw an error.","getName":{"!description":"The qualified name of the data type.","!static":false,"!category":"function","!type":"fn() -> String"},"getEnumValues":{"!description":"Returns the object with keys and values from which this enum type was created or <code>undefined<\/code> if this is not an enum type.","!static":false,"!category":"function","!type":"fn() -> Object"},"isArrayType":{"!description":"Whether this type is an array type.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isValid":{"!description":"Checks whether the given value is valid for this type.\n\nTo be implemented by concrete types.","!static":false,"!category":"function","!type":"fn(vValue: Object) -> Boolean","parameters":{"vValue":"type: any, description: Value to be checked"}},"!proto":"sap.ui.base.Object","isInterfaceType":{"!static":true,"!category":"function","!type":"fn(sType: String) -> Boolean","parameters":{"sType":"type: string, description: name of type to check"}},"!category":"class","createType":{"!description":"Derives a new type from a given base type.\n\nExample:<br> <pre>\n\n  var fooType = DataType.createType('foo', {\n      isValid : function(vValue) {\n          return /^(foo(bar)?)$/.test(vValue);\n      }\n  }, DataType.getType('string'));\n\n  fooType.isValid('foo'); // true\n  fooType.isValid('foobar'); // true\n  fooType.isValid('==foobar=='); // false\n\n<\/pre>\n\nIf <code>mSettings<\/code> contains an implementation for <code>isValid<\/code>, then the validity check of the newly created type will first execute the check of the base type and then call the given <code>isValid<\/code> function.\n\nArray types and enumeration types cannot be created with this method. They're created on-the-fly by {@link #.getType DataType.getType} when such a type is looked up.\n\n<b>Note:<\/b> The creation of new primitive types is not supported. When a type is created without a base type, it is automatically derived from the primitive type <code>any<\/code>.\n\n<b>Note:<\/b> If a type has to be used in classes tagged with <code>@ui5-metamodel<\/code>, then the implementation of <code>isValid<\/code> must exactly have the structure shown in the example above (single return statement, regular expression literal of the form <code>/^(...)$/<\/code>, calling <code>/regex/.test()<\/code> on the given value). Only the inner part of the regular expression literal can be different.","!static":true,"!category":"function","!type":"fn(sName: String, mSettings: Object, base?: sap.ui.base.DataType | String) -> sap.ui.base.DataType","parameters":{"mSettings":"type: object, description: Settings for the new type","sName":"type: string, description: Unique qualified name of the new type","base":"type: sap.ui.base.DataType|string, description: Base type for the new type"}},"getDefaultValue":{"!description":"The default value for this type. Each type must define a default value.","!static":false,"!category":"function","!type":"fn() -> Object"},"isEnumType":{"!description":"Whether this type is an enumeration type.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"registerInterfaceTypes":{"!description":"Registers the given array of type names as known interface types. Only purpose is to enable the {@link #isInterfaceType} check.","!static":true,"!category":"function","!type":"fn(aTypes: [String])","parameters":{"aTypes":"type: string[], description: interface types to be registered"}},"setNormalizer":{"!description":"Set or unset a normalizer function to be used for values of this data type.\n\nWhen a normalizer function has been set, it will be applied to values of this type whenever {@link #normalize} is called. <code>ManagedObject.prototype.setProperty<\/code> calls the <code>normalize<\/code> method before setting a new value to a property (normalization is applied on-write, not on-read).\n\nThe <code>fnNormalize<\/code> function has the signature <pre>\n  fnNormalize(value:any) : any\n<\/pre> It will be called with a value for this type and should return a normalized value (which also must be valid for the this type). There's no mean to reject a value. The <code>this<\/code> context of the function will be this type.\n\nThis method allows applications or application frameworks to plug-in a generic value normalization for a type, e.g. to convert all URLs in some app-specific way before they are applied to controls. It is not intended to break-out of the value range defined by a type.","!static":false,"!category":"function","!type":"fn(fnNormalizer: fn())","parameters":{"fnNormalizer":"type: function, description: Function to apply for normalizing"}},"!constructorDescription":"Pseudo-Constructor for class <code>DataType<\/code>, never to be used.","!module":"sap/ui/base/DataType","!helpDescription":"Represents the type of properties in a <code>ManagedObject<\/code> class.\n\nEach type provides some metadata like its {@link #getName qualified name} or its {@link #getBaseType base type} in case of a derived type. Array types provide information about the allowed {@link #getComponentType type of components} in an array, enumeration types inform about the set of their allowed {@link #getEnumValues keys and values}.\n\nEach type has a method to {@link #isValid check whether a value is valid} for a property of that type.\n\nAlready defined types can be looked up by calling {@link #.getType DataType.getType}, new types can only be created by calling the factory method {@link #.createType DataType.createType}, calling the constructor will throw an error.","getType":{"!description":"Looks up the type with the given name and returns it.\n\nSee {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Defining Control Properties} for a list of the built-in primitive types and their semantics.\n\nThe lookup consists of the following steps: <ul> <li>When a type with the given name is already known, it will be returned<\/li> <li>When the name ends with a pair of brackets (<code>[]<\/code>), a type with the name in front of the brackets (<code>name.slice(0,-2)<\/code>) will be looked up and an array type will be created with the looked-up type as its component type. If the component type is <code>undefined<\/code>, <code>undefined<\/code> will be returned<\/li> <li>When a global property exists with the same name as the type and when the value of that property is an instance of <code>DataType<\/code>, that instance will be returned<\/li> <li>When a global property exists with the same name as the type and when the value of that property is a plain object (its prototype is <code>Object<\/code>), then an enum type will be created, based on the keys and values in that object. The <code>parseValue<\/code> method of the type will accept any of the keys in the plain object and convert them to the corresponding value; <code>isValid<\/code> will accept any of the values from the plain object's keys. The <code>defaultValue<\/code> will be the value of the first key found in the plain object<\/li> <li>When a global property exist with any other, non-falsy value, a warning is logged and the primitive type 'any' is returned<\/li> <li>If no such global property exist, an error is logged and <code>undefined<\/code> is returned<\/li> <\/ul>\n\n<b<Note:<\/b> UI Libraries and even components can introduce additional types. This method only checks for types that either have been defined already, or that describe arrays of values of an already defined type or types whose name matches the global name of a plain object (containing enum keys and values). This method doesn't try to load modules that might contain type definitions. So before being able to lookup and use a specific type, the module containing its definition has to be loaded. For that reason it is suggested that controls (or <code>ManagedObject<\/code> classes in general) declare a dependency to all modules (typically <code>some/lib/library.js<\/code> modules) that contain the type definitions needed by the specific control or class definition.","!static":true,"!category":"function","!type":"fn(sTypeName: String) -> sap.ui.base.DataType | undefined","parameters":{"sTypeName":"type: string, description: Qualified name of the type to retrieve"}},"getComponentType":{"!description":"Returns the component type of this type or <code>undefined<\/code> if this is not an array type.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.DataType | undefined"},"getPrimitiveType":{"!description":"Returns the most basic (primitive) type that this type has been derived from.\n\nIf the type is a primitive type by itself, <code>this<\/code> is returned.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.DataType"},"normalize":{"!description":"Normalizes the given value using the specified normalizer for this data type.\n\nIf no normalizer has been set, the original value is returned.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> Object","parameters":{"oValue":"type: any, description: Value to be normalized"}},"parseValue":{"!description":"Parses the given string value and converts it into the specific data type.","!static":false,"!category":"function","!type":"fn(sValue: String) -> Object","parameters":{"sValue":"type: string, description: String representation for a value of this type"}},"getBaseType":{"!description":"The base type of this type or undefined if this is a primitive type.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.DataType | undefined"}},"sap.ui.model.MetaModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.MetaModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.MetaModel"},"sap.ui.core.format.NumberFormat":{"!description":"The NumberFormat is a static class for formatting and parsing numeric values according to a set of format options.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.format.NumberFormat.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.Object","format":{"!description":"Format a number according to the given format options.","!static":false,"!category":"function","!type":"fn(vValue: Number | Array, sMeasure?: String) -> String","parameters":{"sMeasure":"type: string, description: an optional unit which has an impact on formatting currencies and units","vValue":"type: number|array, description: the number to format or an array which contains the number to format and the sMeasure parameter"}},"!category":"class","getDefaultUnitPattern":{"!description":"Returns a default unit format/parse pattern for the given unit short name. The returned pattern can then be used for custom units, for example as a <code>unitPattern-count-other<\/code> pattern. The <code>unitPattern-count-other<\/code> pattern is then used by NumberFormat instances as a fallback in case no other patterns are defined, see the below example:\n\n<pre>\nvar oFormat = NumberFormat.getUnitInstance({\n    \"customUnits\": {\n        \"myUnit\": {\n            \"unitPattern-count-other\": NumberFormat.getDefaultUnitPattern(\"Bottles\"); // returns \"{0} Bottles\"\n        }\n    }\n});\noFormat.format(1234, \"myUnit\"); // returns \"1.234,00 Bottles\"\n<\/pre>","!static":true,"!category":"function","!type":"fn(sShortName: String) -> String","parameters":{"sShortName":"type: string, description: the short name of the unit used in the created pattern"}},"parse":{"!description":"Parse a string which is formatted according to the given format options.","!static":false,"!category":"function","!type":"fn(sValue: String) -> Number | Array","parameters":{"sValue":"type: string, description: the string containing a formatted numeric value"}},"getCurrencyInstance":{"!description":"Get a currency instance of the NumberFormat, which can be used for formatting.\n\nIf no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.\n\n<p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. <\/p>\n\nThe currency instance supports locally defined custom currency exclusive to the created instance. The following example shows how to use custom currencies (e.g. for Bitcoins): <pre>\nvar oFormat = NumberFormat.getCurrencyInstance({\n    \"currencyCode\": false,\n    \"customCurrencies\": {\n        \"BTC\": {\n            \"symbol\": \"Ƀ\",\n            \"decimals\": 3\n        }\n    }\n});\n\noFormat.format(123.4567, \"BTC\"); // \"Ƀ 123.457\"\n<\/pre>\n\nAs an alternative to using a fixed <code>symbol<\/code> for your custom currencies, you can also provide an ISO-Code. The provided ISO-Code will be used to look up the currency symbol in the global configuration, either defined in the CLDR or custom defined on the Format Settings (see {@link sap.ui.core.Configuration.FormatSettings#setCustomCurrencies}, {@link sap.ui.core.Configuration.FormatSettings#addCustomCurrencies}).\n\nIf no symbol is given at all, the custom currency key is used for formatting.\n\n<pre>\nvar oFormat = NumberFormat.getCurrencyInstance({\n    \"currencyCode\": false,\n    \"customCurrencies\": {\n        \"MyDollar\": {\n            \"isoCode\": \"USD\",\n            \"decimals\": 3\n        },\n        \"Bitcoin\": {\n            \"decimals\": 2\n        }\n    }\n});\n\n// symbol looked up from global configuration\noFormat.format(123.4567, \"MyDollar\"); // \"$123.457\"\n\n// no symbol available, custom currency key is rendered\noFormat.format(777.888, \"Bitcoin\"); // \"Bitcoin 777.89\"\n<\/pre>","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.NumberFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used."}},"getFloatInstance":{"!description":"Get a float instance of the NumberFormat, which can be used for formatting.\n\nIf no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.\n\n<p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. <\/p>","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.NumberFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used."}},"getPercentInstance":{"!description":"Get a percent instance of the NumberFormat, which can be used for formatting.\n\nIf no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.\n\n<p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. <\/p>","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.NumberFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used."}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.format.NumberFormat with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for NumberFormat - must not be used: To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.","!module":"sap/ui/core/format/NumberFormat","!helpDescription":"The NumberFormat is a static class for formatting and parsing numeric values according to a set of format options.","getUnitInstance":{"!description":"Get a unit instance of the NumberFormat, which can be used for formatting units.\n\nIf no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.\n\n<p> This instance has HALF_AWAY_FROM_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. <\/p>","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.NumberFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used."}},"getIntegerInstance":{"!description":"Get an integer instance of the NumberFormat, which can be used for formatting.\n\nIf no locale is given, the currently configured {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.\n\n<p> This instance has TOWARDS_ZERO set as default rounding mode. Please set the roundingMode property in oFormatOptions to change the default value. <\/p>","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.NumberFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used."}}},"sap.ui.core.support.Plugin":{"!description":"This class represents a plugin for the support tool functionality of UI5. This class is internal and all its functions must not be used by an application.","init":{"!description":"Initialization function called each time the support mode is started (diagnostics popup is opened). For Plugins that are for diagnostics tool window and application window, the init method is called twice, with the <code>oSupportStub<\/code>","!static":false,"!category":"function","!type":"fn(oSupportStub: sap.ui.core.support.Support)","parameters":{"oSupportStub":"type: sap.ui.core.support.Support, description: the support stub"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.support.Plugin.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"$":{"!description":"Returns the DOM node that represents this plugin wrapped as jQuery object.\n\nIf an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery. This matches the naming convention for named inner DOM nodes of a plugin.\n\nIf no suffix is given and if no DOM exists, a DIV with the ID of this plugin will be created and appended to the support popup content section (identified by class .sapUiSupportCntnt).","!static":false,"!category":"function","!type":"fn(sSuffix?: String) -> jQuery","parameters":{"sSuffix":"type: string, description: ID suffix to get a jQuery object for"}},"!proto":"sap.ui.base.Object","!category":"class","getId":{"!description":"Returns the id of this plugin instance.","!static":false,"!category":"function","!type":"fn() -> String"},"isActive":{"!description":"Returns whether the plugin is currently active or not.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"addStylesheet":{"!description":"Adds the given stylesheet to the Support Tool's HTML page.\n\nA &lt;link&gt; tag will be added to the head of the HTML page, referring to the given CSS resource. The URL of the resource is determined from the given resource name by calling {@link jQuery.sap.getResourcePath}.\n\nA plugin should call this method only when it is {@link #runsAsToolPlugin running inside the tool window}.","!static":false,"!category":"function","!type":"fn(sCssResourcePath: String)","parameters":{"sCssResourcePath":"type: string, description: Resource name of a CSS file, but without the '.css' extension"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.support.Plugin with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"exit":{"!description":"Finalization function called each time the support mode is ended (support popup is closed).","!static":false,"!category":"function","!type":"fn(oSupportStub: sap.ui.core.support.Support)","parameters":{"oSupportStub":"type: sap.ui.core.support.Support, description: the support stub"}},"!constructorDescription":"Creates an instance of sap.ui.core.support.Plugin.","getTitle":{"!description":"Returns the title of this plugin instance.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/core/support/Plugin","runsAsToolPlugin":{"!description":"Returns true if the plugin instance currently runs in tool window, otherwise false","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!helpDescription":"This class represents a plugin for the support tool functionality of UI5. This class is internal and all its functions must not be used by an application.","isToolPlugin":{"!description":"Returns whether a plugin instance can run in the diagnostics tool window, default is <code>true<\/code>. Plugins that are <b>only<\/b> available on the application window should return <code>false<\/code> and overwrite the method for this matter.\n\nThe method is also used in a static manner (called on the prototype) and therefore must not rely on any instance specific members.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isAppPlugin":{"!description":"Returns whether this plugin instance can run in the application window, default is <code>true<\/code>. Plugins that are <b>only<\/b> available on the diagnostics tool window should return <code>false<\/code> and overwrite the method for this matter.\n\nThe method is also used in a static manner (called on the prototype) and therefore must not rely on any instance specific members.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.model.xml.XMLTreeBinding":{"!description":"Tree binding implementation for XML format","!module":"sap/ui/model/xml/XMLTreeBinding","!helpDescription":"Tree binding implementation for XML format","getNodeContexts":{"!description":"Return node contexts for the tree","!static":false,"!category":"function","!type":"fn(oContext: Object, iStartIndex: Number, iLength: Number) -> Array","parameters":{"oContext":"type: object, description: to use for retrieving the node contexts","iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index."}},"!proto":"sap.ui.model.ClientTreeBinding","!category":"class"},"sap.ui.base.ManagedObject":{"detachValidationError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationError validationError} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireModelContextChange":{"!description":"Fires event {@link #event:modelContextChange modelContextChange} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.base.ManagedObject","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setBindingContext":{"!description":"Set the binding context for this ManagedObject for the model with the given name.\n\n<b>Note:<\/b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null<\/code><\/li> <li>empty string <code>\"\"<\/code><\/li> <li>string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code><\/li> <\/ul> Omitting the model name (or using the value <code>undefined<\/code>) is explicitly allowed and refers to the default model.\n\nA value of <code>null<\/code> for <code>oContext<\/code> hides the parent context. The parent context will no longer be propagated to aggregated child controls. A value of <code>undefined<\/code> removes a currently active context or a <code>null<\/code> context and the parent context gets visible and propagated again.\n\n<b>Note:<\/b> A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context, sModelName?: String) -> sap.ui.base.ManagedObject","parameters":{"oContext":"type: sap.ui.model.Context, description: the new binding context for this object","sModelName":"type: string, description: the name of the model to set the context for or <code>undefined<\/code>"}},"_onContextualSettingsChanged":{"!description":"Hook method to let descendants of ManagedObject know when propagated contextual settings have changed","!static":false,"!category":"function","!type":"fn()"},"fireFormatError":{"!description":"Fires event {@link #event:formatError formatError} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.base.ManagedObject","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getOriginInfo":{"!description":"Returns the origin info for the value of the given property.\n\nThe origin info might contain additional information for translatable texts. The bookkeeping of this information is not active by default and must be activated by configuration. Even then, it might not be present for all properties and their values depending on where the value came form.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Object","parameters":{"sPropertyName":"type: string, description: the name of the property"}},"fireParseError":{"!description":"Fires event {@link #event:parseError parseError} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.base.ManagedObject","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"resetProperty":{"!description":"Resets the given property to the default value and also restores the \"initial\" state (like it has never been set).\n\nAs subclasses might have implemented side effects in the named setter <code>setXYZ<\/code> for property 'xyz', that setter is called with a value of <code>null<\/code>, which by convention restores the default value of the property. This is only done to notify subclasses, the internal state is anyhow reset.\n\nWhen the property has not been modified so far, nothing will be done.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.base.ManagedObject","parameters":{"sPropertyName":"type: string, description: Name of the property"}},"fireValidationSuccess":{"!description":"Fires event {@link #event:validationSuccess validationSuccess} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.base.ManagedObject","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"unbindObject":{"!description":"Removes the defined binding context of this object, all bindings will now resolve relative to the parent context again.","!static":false,"!category":"function","!type":"fn(sModelName?: String) -> sap.ui.base.ManagedObject","parameters":{"sModelName":"type: string, description: Name of the model to remove the context for."}},"detachValidationSuccess":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationSuccess validationSuccess} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getBinding":{"!description":"Get the binding object for a specific aggregation/property","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.Binding","parameters":{"sName":"type: string, description: the name of the property or aggregation"}},"removePropagationListener":{"!description":"remove a propagation listener","!static":false,"!category":"function","!type":"fn(listener: fn()) -> sap.ui.base.ManagedObject","parameters":{"listener":"type: function, description: function"}},"getBindingContext":{"!description":"Get the binding context of this object for the given model name.\n\nIf the object does not have a binding context set on itself and has no own model set, it will use the first binding context defined in its parent hierarchy.\n\n<b>Note:<\/b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null<\/code><\/li> <li>empty string <code>\"\"<\/code><\/li> <li>string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code><\/li> <\/ul> Omitting the model name (or using the value <code>undefined<\/code>) is explicitly allowed and refers to the default model.\n\n<b>Note:<\/b> A ManagedObject inherits binding contexts from the Core only when it is a descendant of a UIArea.","!static":false,"!category":"function","!type":"fn(sModelName?: String) -> sap.ui.model.Context","parameters":{"sModelName":"type: string, description: the name of the model or <code>undefined<\/code>"}},"bindObject":{"!description":"Bind the object to the referenced entity in the model.\n\nThe entity is used as the binding context to resolve bound properties or aggregations of the object itself and all of its children relatively to the given path. If a relative binding path is used, it will be evaluated anew whenever the parent context changes.\n\nWhenever the corresponding model becomes available or changes (either via a call to {@link #setModel setModel} or propagated from a {@link #getParent parent}), its {@link sap.ui.model.Model#bindContext bindContext} method will be called to create a new {@link sap.ui.model.ContextBinding ContextBinding} with the configured binding options.\n\nThere is no difference between <code>bindObject<\/code> and {@link sap.ui.core.Element#bindElement bindElement}. Method <code>bindElement<\/code> was deprecated and renamed to <code>bindObject<\/code> when this kind of binding was no longer limited to <code>sap.ui.core.Element<\/code>s.\n\nAlso see {@link topic:91f05e8b6f4d1014b6dd926db0e91070 Context Binding} in the documentation.","!static":false,"!category":"function","!type":"fn(oBindingInfo: Object) -> sap.ui.base.ManagedObject","parameters":{"oBindingInfo":"type: object, description: An object describing the binding"}},"destroyAggregation":{"!description":"Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName<\/code> and empties the aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically destroy all objects in an aggregation. Use the concrete method destroy<i>XYZ<\/i> for aggregation 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed","sAggregationName":"type: string, description: the name of the aggregation"}},"isTreeBinding":{"!description":"This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding. In this case and if the aggregation is a tree node the overridden method should then return true. If true is returned the tree binding will be used instead of the list binding.","!static":false,"!category":"function","!type":"fn(sName: String) -> Boolean","parameters":{"sName":"type: string, description: the aggregation to bind (e.g. nodes for a tree managed object)"}},"create":{"!description":"Creates a new ManagedObject from the given data.\n\nIf <code>vData<\/code> is a managed object already, that object is returned. If <code>vData<\/code> is an object (literal), then a new object is created with <code>vData<\/code> as settings. The type of the object is either determined by a property of name <code>Type<\/code> (capital 'T') in the <code>vData<\/code> or by a property <code>type<\/code> (lower case 't') in the <code>oKeyInfo<\/code> object. In both cases, the type can be specified by name (dot separated name of the class) or by the constructor function of the class.","!static":true,"!category":"function","!type":"fn(vData: sap.ui.base.ManagedObject | Object, oKeyInfo?: Object, oScope?: Object)","parameters":{"oKeyInfo":"type: object, description: undefined","vData":"type: sap.ui.base.ManagedObject|object, description: the data to create the object from","oScope":"type: object, description: Scope object to resolve types and formatters in bindings"}},"!description":"Base Class that introduces some basic concepts, such as, state management and data binding.\n\nNew subclasses of ManagedObject are created with a call to {@link #.extend ManagedObject.extend} and can make use of the following managed features:\n\n<h3>Properties<\/h3> Managed properties represent the state of a ManagedObject. They can store a single value of a simple data type (like 'string' or 'int'). They have a <i>name<\/i> (e.g. 'size') and methods to get the current value (<code>getSize<\/code>), or to set a new value (<code>setSize<\/code>). When a property is modified by calling the setter, the ManagedObject is marked as invalidated. A managed property can be bound against a property in a {@link sap.ui.model.Model} by using the {@link #bindProperty} method. Updates to the model property will be automatically reflected in the managed property and - if TwoWay databinding is active, changes to the managed property will be reflected in the model. An existing binding can be removed by calling {@link #unbindProperty}.\n\nIf a ManagedObject is cloned, the clone will have the same values for its managed properties as the source of the clone - if the property wasn't bound. If it is bound, the property in the clone will be bound to the same model property as in the source.\n\nDetails about the declaration of a managed property, the metadata that describes it and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend } method.\n\n<h3>Aggregations<\/h3> Managed aggregations can store one or more references to other ManagedObjects. They are a mean to control the lifecycle of the aggregated objects: one ManagedObject can be aggregated by at most one parent ManagedObject at any time. When a ManagedObject is destroyed, all aggregated objects are destroyed as well and the object itself is removed from its parent. That is, aggregations won't contain destroyed objects or null/undefined.\n\nAggregations have a <i>name<\/i> ('e.g 'header' or 'items'), a <i>cardinality<\/i> ('0..1' or '0..n') and are of a specific <i>type<\/i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get the aggregated object for a specific aggregation of cardinality 0..1 (e.g. <code>setHeader<\/code>, <code>getHeader<\/code> for an aggregation named 'header'). For an aggregation of cardinality 0..n, there are methods to get all aggregated objects (<code>getItems<\/code>), to locate an object in the aggregation (e.g. <code>indexOfItem<\/code>), to add, insert or remove a single aggregated object (<code>addItem<\/code>, <code>insertItem<\/code>, <code>removeItem<\/code>) or to remove or destroy all objects from an aggregation (<code>removeAllItems<\/code>, <code>destroyItems<\/code>).\n\nDetails about the declaration of a managed aggregation, the metadata that describes the aggregation, and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.\n\nAggregations of cardinality 0..n can be bound to a collection in a model by using {@link #bindAggregation} (and unbound again using {@link #unbindAggregation}). For each context in the model collection, a corresponding object will be created in the managed aggregation, either by cloning a template object or by calling a factory function.\n\nAggregations also control the databinding context of bound objects: by default, aggregated objects inherit all models and binding contexts from their parent object.\n\nWhen a ManagedObject is cloned, all aggregated objects will be cloned as well - but only if they haven't been added by databinding. In that case, the aggregation in the clone will be bound to the same model collection.\n\n<h3>Associations<\/h3> Managed associations also form a relationship between objects, but they don't define a lifecycle for the associated objects. They even can 'break' in the sense that an associated object might have been destroyed already although it is still referenced in an association. For the same reason, the internal storage for associations are not direct object references but only the IDs of the associated target objects.\n\nAssociations have a <i>name<\/i> ('e.g 'initialFocus'), a <i>cardinality<\/i> ('0..1' or '0..n') and are of a specific <i>type<\/i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get the associated object for a specific association of cardinality 0..1 (e.g. <code>setInitialFocus<\/code>, <code>getInitialFocus<\/code>). For an association of cardinality 0..n, there are methods to get all associated objects (<code>getRefItems<\/code>), to add, insert or remove a single associated object (<code>addRefItem<\/code>, <code>insertRefItem<\/code>, <code>removeRefItem<\/code>) or to remove all objects from an association (<code>removeAllRefItems<\/code>).\n\nDetails about the declaration of a managed association, the metadata that describes it and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.\n\nAssociations can't be bound to the model.\n\nWhen a ManagedObject is cloned, the result for an association depends on the relationship between the associated target object and the root of the clone operation. If the associated object is part of the to-be-cloned object tree (reachable via aggregations from the root of the clone operation), then the cloned association will reference the clone of the associated object. Otherwise the association will reference the same object as in the original tree. When a ManagedObject is destroyed, other objects that are only associated, are not affected by the destroy operation.\n\n<h3>Events<\/h3> Managed events provide a mean for communicating important state changes to an arbitrary number of 'interested' listeners. Events have a <i>name<\/i> and (optionally) a set of <i>parameters<\/i>. For each event there will be methods to add or remove an event listener as well as a method to fire the event. (e.g. <code>attachChange<\/code>, <code>detachChange<\/code>, <code>fireChange<\/code> for an event named 'change').\n\nDetails about the declaration of managed events, the metadata that describes the event, and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.\n\nWhen a ManagedObject is cloned, all listeners registered for any event in the clone source are also registered to the clone. Later changes are not reflected in any direction (neither from source to clone, nor vice versa).\n\n<a name=\"lowlevelapi\"><h3>Low Level APIs:<\/h3><\/a> The prototype of ManagedObject provides several generic, low level APIs to manage properties, aggregations, associations, and events. These generic methods are solely intended for implementing higher level, non-generic methods that manage a single managed property etc. (e.g. a function <code>setSize(value)<\/code> that sets a new value for property 'size'). {@link sap.ui.base.ManagedObject.extend} creates default implementations of those higher level APIs for all managed aspects. The implementation of a subclass then can override those default implementations with a more specific implementation, e.g. to implement a side effect when a specific property is set or retrieved. It is therefore important to understand that the generic low-level methods ARE NOT SUITABLE FOR GENERIC ACCESS to the state of a managed object, as that would bypass the overriding higher level methods and their side effects.","detachFormatError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:formatError formatError} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachValidationSuccess":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationSuccess validationSuccess} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject<\/code> itself.\n\nFired after a new value for a bound property has been propagated to the model. Only fired, when the binding uses a data type.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"unbindProperty":{"!description":"Unbind the property from the model","!static":false,"!category":"function","!type":"fn(sName: String, bSuppressReset: Boolean) -> sap.ui.base.ManagedObject","parameters":{"sName":"type: string, description: the name of the property","bSuppressReset":"type: boolean, description: whether the reset to the default value when unbinding should be suppressed"}},"getMetadata":{"!description":"Returns the metadata for the ManagedObject class.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.ManagedObjectMetadata"},"getModel":{"!description":"Get the model to be used for data bindings with the given model name. If the object does not have a model set on itself, it will use the first model defined in its parent hierarchy.\n\nThe name can be omitted to reference the default model or it must be a non-empty string.\n\n<b>Note:<\/b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null<\/code><\/li> <li>empty string <code>\"\"<\/code><\/li> <li>string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code><\/li> <\/ul> Omitting the model name (or using the value <code>undefined<\/code>) is explicitly allowed and refers to the default model.","!static":false,"!category":"function","!type":"fn(sModelName?: String | undefined) -> sap.ui.model.Model","parameters":{"sModelName":"type: string|undefined, description: name of the model to be retrieved"}},"validateProperty":{"!description":"Checks whether the given value is of the proper type for the given property name.\n\nIn case <code>null<\/code> or <code>undefined<\/code> is passed, the default value for this property is used as value. If no default value is defined for the property, the default value of the type of the property is used.\n\nIf the property has a data type that is an instance of sap.ui.base.DataType and if a <code>normalize<\/code> function is defined for that type, that function will be called with the resulting value as only argument. The result of the function call is then used instead of the raw value.\n\nThis method is called by {@link #setProperty}. In many cases, subclasses of ManagedObject don't need to call it themselves.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, oValue: Object) -> Object","parameters":{"oValue":"type: any, description: Value to be set","sPropertyName":"type: string, description: Name of the property"}},"unbindAggregation":{"!description":"Unbind the aggregation from the model.\n\nAfter unbinding, the current content of the aggregation is destroyed by default. When the <code>bSuppressReset<\/code> parameter is set, it is however retained.","!static":false,"!category":"function","!type":"fn(sName: String, bSuppressReset: Boolean) -> sap.ui.base.ManagedObject","parameters":{"sName":"type: string, description: Name of the aggregation","bSuppressReset":"type: boolean, description: Indicates whether destroying the content of the aggregation is skipped"}},"attachValidationError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationError validationError} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject<\/code> itself.\n\nFired when a new value for a bound property should have been propagated to the model, but validating the value failed with an exception.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireValidationError":{"!description":"Fires event {@link #event:validationError validationError} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.base.ManagedObject","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"findAggregatedObjects":{"!description":"Searches and returns all aggregated objects that pass the given check function.\n\nWhen the search is done recursively (<code>bRecursive === true<\/code>), it will be executed depth-first and ancestors will be added to the result array before their descendants.\n\nIf no check function is given, all aggregated objects will pass the check and be added to the result array.\n\n<b>Take care: this operation might be expensive.<\/b>","!static":false,"!category":"function","!type":"fn(bRecursive: Boolean, fnCondition?: Boolean) -> [sap.ui.base.ManagedObject]","parameters":{"fnCondition":"type: boolean, description: Objects for which this function returns a falsy value will not be added to the result array","bRecursive":"type: boolean, description: Whether the whole aggregation tree should be searched"}},"removeAssociation":{"!description":"Removes a <code>ManagedObject<\/code> from the association named <code>sAssociationName<\/code>.\n\nIf an object is removed, the ID of that object is returned and this <code>ManagedObject<\/code> is marked as changed. Otherwise <code>null<\/code> is returned.\n\nIf the same object was added multiple times to the same association, only a single occurrence of it will be removed by this method. If the object is not found or if the parameter can't be interpreted neither as a <code>ManagedObject<\/code> (or ID) nor as an index in the association, nothing will be removed. The same is true if an index is given and if that index is out of range for the association.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically remove an object from an association. Use the concrete method remove<i>XYZ<\/i> for association 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAssociationName: String, vObject: Number | String | sap.ui.base.ManagedObject, bSuppressInvalidate?: Boolean) -> String | null","parameters":{"vObject":"type: int|string|sap.ui.base.ManagedObject, description: the position or ID of the <code>ManagedObject<\/code> to remove or the <code>ManagedObject<\/code> itself; if <code>vObject<\/code> is invalid input, a negative value or a value greater or equal than the current size of the association, nothing is removed","sAssociationName":"type: string, description: the string identifying the association the <code>ManagedObject<\/code> should be removed from.","bSuppressInvalidate":"type: boolean, description: if <code>true<\/code>, the managed object is not marked as changed"}},"destroy":{"!description":"Cleans up the resources associated with this object and all its aggregated children.\n\nAfter an object has been destroyed, it can no longer be used!\n\nApplications should call this method if they don't need the object any longer.","!static":false,"!category":"function","!type":"fn(bSuppressInvalidate?: Boolean)","parameters":{"bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed"}},"getPropagationListeners":{"!description":"get propagation listeners","!static":false,"!category":"function","!type":"fn() -> Array"},"applySettings":{"!description":"Sets all the properties, aggregations, associations and event handlers as given in the object literal <code>mSettings<\/code>. If a property, aggregation, etc. is not listed in <code>mSettings<\/code>, then its value is not changed by this method.\n\nFor properties and 0..1 aggregations/associations, any given setting overwrites the current value. For 0..n aggregations, the given values are appended; event listeners are registered in addition to existing ones.\n\nFor the possible keys and values in <code>mSettings<\/code> see the general documentation in {@link sap.ui.base.ManagedObject} or the specific documentation of the constructor of the concrete managed object class.","!static":false,"!category":"function","!type":"fn(mSettings: Object, oScope?: Object) -> sap.ui.base.ManagedObject","parameters":{"mSettings":"type: object, description: the settings to apply to this managed object","oScope":"type: object, description: Scope object to resolve types and formatters"}},"addAggregation":{"!description":"Adds some entity <code>oObject<\/code> to the aggregation identified by <code>sAggregationName<\/code>.\n\nIf the given object is not valid with regard to the aggregation (if it is not an instance of the type specified for that aggregation) or when the method is called for an aggregation of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.\n\nIf the aggregation already has content, the new object will be added after the current content. If the new object was already contained in the aggregation, it will be moved to the end.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically add an object to an aggregation. Use the concrete method add<i>XYZ<\/i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oObject: sap.ui.base.ManagedObject, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: the object to add; if empty, nothing is added","bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject as well as the added child are not marked as changed","sAggregationName":"type: string, description: the string identifying the aggregation that <code>oObject<\/code> should be added to."}},"detachModelContextChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:modelContextChange modelContextChange} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Defines a new subclass of ManagedObject with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> can contain the same information that {@link sap.ui.base.Object.extend} already accepts, plus the following new properties in the 'metadata' object literal:\n\n<ul> <li><code>library : <i>string<\/i><\/code><\/li> <li><code>properties : <i>object<\/i><\/code><\/li> <li><code>defaultProperty : <i>string<\/i><\/code><\/li> <li><code>aggregations : <i>object<\/i><\/code><\/li> <li><code>defaultAggregation : <i>string<\/i><\/code><\/li> <li><code>associations : <i>object<\/i><\/code><\/li> <li><code>events : <i>object<\/i><\/code><\/li> <li><code>specialSettings : <i>object<\/i><\/code>// this one is still experimental and not for public usage!<\/li> <\/ul>\n\nEach of these properties is explained in more detail lateron.\n\nExample: <pre>\nManagedObect.extend('sap.mylib.MyClass', {\n  metadata : {\n    library: 'sap.mylib',\n    properties : {\n      value: 'string',\n      width: 'sap.ui.core.CSSSize',\n      height: { type: 'sap.ui.core.CSSSize', defaultValue: '100%'}\n      description: { type: 'string', defaultValue: '', selector: '#{id}-desc'}\n    },\n    defaultProperty : 'value',\n    aggregations : {\n      header : { type: 'sap.mylib.FancyHeader', multiple : false }\n      items : 'sap.ui.core.Control',\n      buttons: { type: 'sap.mylib.Button', multiple : true, selector: '#{id} > .sapMLButtonsSection'}\n    },\n    defaultAggregation : 'items',\n    associations : {\n      initiallyFocused : { type: 'sap.ui.core.Control' }\n    },\n    events: {\n      beforeOpen : {\n        parameters : {\n          opener : { type: 'sap.ui.core.Control' }\n        }\n      }\n    },\n  },\n\n  init: function() {\n  }\n\n}); // end of 'extend' call\n<\/pre>\n\nDetailed explanation of properties<br>\n\n<b>'library'<\/b> : <i>string<\/i><br> Name of the library that the new subclass should belong to. If the subclass is a control or element, it will automatically register with that library so that authoring tools can discover it. By convention, the name of the subclass should have the library name as a prefix, e.g. 'sap.ui.commons.Panel' belongs to library 'sap.ui.commons'.\n\n<b>'properties'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new managed property in the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new property or it can be an object literal with the following properties <ul> <li><code>type: <i>string<\/i><\/code> type of the new property. Must either be one of the built-in types 'string', 'boolean', 'int', 'float', 'object', 'function' or 'any', or a type created and registered with {@link sap.ui.base.DataType.createType} or an array type based on one of the previous types (e.g. 'int[]' or 'string[]', but not just 'array').<\/li> <li><code>visibility: <i>string<\/i><\/code> either 'hidden' or 'public', defaults to 'public'. Properties that belong to the API of a class must be 'public' whereas 'hidden' properties can only be used internally. Only public properties are accepted by the constructor or by <code>applySettings<\/code> or in declarative representations like an <code>XMLView<\/code>. Equally, only public properties are cloned.<\/li> <li><code>byValue: <i>boolean<\/i><\/code> (either can be omitted or set to the boolean value <code>true<\/code>) If set to <code>true<\/code>, the property value will be {@link module:sap/base/util/deepClone deep cloned} on write and read operations to ensure that the internal value can't be modified by the outside. The property <code>byValue<\/code> is currently limited to a <code>boolean<\/code> value. Other types are reserved for future use. Class definitions must only use boolean values for the flag (or omit it), but readers of ManagedObject metadata should handle any truthy value as <code>true<\/code> to be future safe. Note that using <code>byValue:true<\/code> has a performance impact on property access and therefore should be used carefully. It also doesn't make sense to set this option for properties with a primitive type (they have value semantic anyhow) or for properties with arrays of primitive types (they have been cloned already in the past with a cheaper implementation). Future versions of UI5 might encourage this as a limitation during class definition. <li><code>group:<i>string<\/i><\/code> a semantic grouping of the properties, intended to be used in design time tools. Allowed values are (case sensitive): Accessibility, Appearance, Behavior, Data, Designtime, Dimension, Identification, Misc<\/li> <li><code>defaultValue: <i>any<\/i><\/code> the default value for the property or null if there is no defaultValue.<\/li> <li><code>bindable: <i>boolean|string<\/i><\/code> (either can be omitted or set to the boolean value <code>true<\/code> or the magic string 'bindable') If set to <code>true<\/code> or 'bindable', additional named methods <code>bind<i>Name<\/i><\/code> and <code>unbind<i>Name<\/i><\/code> are generated as convenience. Despite its name, setting this flag is not mandatory to make the managed property bindable. The generic methods {@link #bindProperty} and {@link #unbindProperty} can always be used. <\/li> <li><code>selector: <i>string<\/i><\/code> Optional; can be set to a valid CSS selector (as accepted by the {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector Element.prototype.querySelector} method). When set, it locates the DOM element that represents this property's value. It should only be set for properties that have a visual text representation in the DOM.\n\nThe purpose of the selector is to allow other framework parts or design time tooling to identify the DOM parts of a control or element that represent a specific property without knowing the control or element implementation in detail.\n\nAs an extension to the standard CSS selector syntax, the selector string can contain the placeholder <code>{id}<\/code> (multiple times). Before evaluating the selector in the context of an element or control, all occurrences of the placeholder have to be replaced by the (potentially escaped) ID of that element or control. In fact, any selector should start with <code>#{id}<\/code> to ensure that the query result is limited to the desired element or control.\n\n<b>Note<\/b>: there is a convenience method {@link sap.ui.core.Element#getDomRefForSetting} that evaluates the selector in the context of a concrete element or control instance. It also handles the placeholder <code>{id}<\/code>. Only selected framework features may use that private method, it is not yet a public API and might be changed or removed in future versions of UI5. However, instead of maintaining the <code>selector<\/code> in the metadata, element and control classes can overwrite <code>getDomRefForSetting<\/code> and determine the DOM element dynamically.<\/li> <\/ul> Property names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the aggregation.\n\nFor each public property 'foo', the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>getFoo() - returns the current value of property 'foo'. Internally calls {@link #getProperty}<\/li> <li>setFoo(v) - sets 'v' as the new value of property 'foo'. Internally calls {@link #setProperty}<\/li> <li>bindFoo(c) - (only if property was defined to be 'bindable'): convenience function that wraps {@link #bindProperty}<\/li> <li>unbindFoo() - (only if property was defined to be 'bindable'): convenience function that wraps {@link #unbindProperty}<\/li> <\/ul> For hidden properties, no methods are generated.\n\n<b>'defaultProperty'<\/b> : <i>string<\/i><br> When specified, the default property must match the name of one of the properties defined for the new subclass (either own or inherited). The named property can be used to identify the main property to be used for bound data. E.g. the value property of a field control.\n\n<b>'aggregations'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new aggregation in the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new aggregation or it can be an object literal with the following properties <ul> <li><code>type: <i>string<\/i><\/code> type of the new aggregation. must be the full global name of a ManagedObject subclass or UI5 interface (in dot notation, e.g. 'sap.m.Button')<\/li> <li><code>[multiple]: <i>boolean<\/i><\/code> whether the aggregation is a 0..1 (false) or a 0..n aggregation (true), defaults to true <\/li> <li><code>[singularName]: <i>string<\/i><\/code>. Singular name for 0..n aggregations. For 0..n aggregations the name by convention should be the plural name. Methods affecting multiple objects in an aggregation will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine a singular name on its own. if that name is wrong, a singluarName can be specified with this property. <\/li> <li><code>[visibility]: <i>string<\/i><\/code> either 'hidden' or 'public', defaults to 'public'. Aggregations that belong to the API of a class must be 'public' whereas 'hidden' aggregations typically are used for the implementation of composite classes (e.g. composite controls). Only public aggregations are accepted by the constructor or by <code>applySettings<\/code> or in declarative representations like an <code>XMLView<\/code>. Equally, only public aggregations are cloned.<\/li> <li><code>bindable: <i>boolean|string<\/i><\/code> (either can be omitted or set to the boolean value <code>true<\/code> or the magic string 'bindable') If set to <code>true<\/code> or 'bindable', additional named methods <code>bind<i>Name<\/i><\/code> and <code>unbind<i>Name<\/i><\/code> are generated as convenience. Despite its name, setting this flag is not mandatory to make the managed aggregation bindable. The generic methods {@link #bindAggregation} and {@link #unbindAggregation} can always be used. <\/li> <li><code>forwarding: <i>object<\/i><\/code> If set, this defines a forwarding of objects added to this aggregation into an aggregation of another ManagedObject - typically to an inner control within a composite control. This means that all adding, removal, or other operations happening on the source aggregation are actually called on the target instance. All elements added to the source aggregation will be located at the target aggregation (this means the target instance is their parent). Both, source and target element will return the added elements when asked for the content of the respective aggregation. If present, the named (non-generic) aggregation methods will be called for the target aggregation. Aggregations can only be forwarded to non-hidden aggregations of the same or higher multiplicity (i.e. an aggregation with multiplicity \"0..n\" cannot be forwarded to an aggregation with multiplicity \"0..1\"). The target aggregation must also be \"compatible\" to the source aggregation in the sense that any items given to the source aggregation must also be valid in the target aggregation (otherwise the target element will throw a validation error). If the forwarded elements use data binding, the target element must be properly aggregated by the source element to make sure all models are available there as well. The aggregation target must remain the same instance across the entire lifetime of the source control. Aggregation forwarding will behave unexpectedly when the content in the target aggregation is modified by other actors (e.g. by the target element or by another forwarding from a different source aggregation). Hence, this is not allowed. The forwarding configuration object defines the target of the forwarding. The available settings are: <ul> <li><code>idSuffix: <i>string<\/i><\/code>A string which is appended to the ID of <i>this<\/i> ManagedObject to construct the ID of the target ManagedObject. This is one of the two options to specify the target. This option requires the target instance to be created in the init() method of this ManagedObject and to be always available.<\/li> <li><code>getter: <i>string<\/i><\/code>The name of the function on instances of this ManagedObject which returns the target instance. This second option to specify the target can be used for lazy instantiation of the target. Note that either idSuffix or getter must be given. Also note that the target instance returned by the getter must remain the same over the entire lifetime of this ManagedObject and the implementation assumes that all instances return the same type of object (at least the target aggregation must always be defined in the same class).<\/li> <li><code>aggregation: <i>string<\/i><\/code>The name of the aggregation on the target into which the objects shall be forwarded. The multiplicity of the target aggregation must be the same as the one of the source aggregation for which forwarding is defined.<\/li> <li><code>[forwardBinding]: <i>boolean<\/i><\/code>Whether any binding should happen on the forwarding target or not. Default if omitted is <code>false<\/code>, which means any bindings happen on the outer ManagedObject. When the binding is forwarded, all binding methods like updateAggregation, getBindingInfo, refreshAggregation etc. are called on the target element of the forwarding instead of being called on this element. The basic aggregation mutator methods (add/remove etc.) are only called on the forwarding target element. Without forwardBinding, they are called on this element, but forwarded to the forwarding target, where they actually modify the aggregation. <\/li> <\/ul> <\/li> <li><code>selector: <i>string<\/i><\/code> Optional; can be set to a valid CSS selector (as accepted by the {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector Element.prototype.querySelector} method). When set, it locates the DOM element that surrounds the aggregation's content. It should only be set for aggregations that have a visual representation in the DOM. A DOM element surrounding the aggregation's rendered content should be available in the DOM, even if the aggregation is empty or not rendered for some reason. In cases where this is not possible or not intended, <code>getDomRefForSetting<\/code> can be overridden, see below.\n\nThe purpose of the selector is to allow other framework parts like drag and drop or design time tooling to identify those DOM parts of a control or element that represent a specific aggregation without knowing the control or element implementation in detail.\n\nAs an extension to the standard CSS selector syntax, the selector string can contain the placeholder <code>{id}<\/code> (multiple times). Before evaluating the selector in the context of an element or control, all occurrences of the placeholder have to be replaced by the (potentially escaped) ID of that element or control. In fact, any selector should start with <code>#{id}<\/code> to ensure that the query result is limited to the desired element or control.\n\n<b>Note<\/b>: there is a convenience method {@link sap.ui.core.Element#getDomRefForSetting} that evaluates the selector in the context of a concrete element or control instance. It also handles the placeholder <code>{id}<\/code>. Only selected framework features may use that private method, it is not yet a public API and might be changed or removed in future versions of UI5. However, instead of maintaining the <code>selector<\/code> in the metadata, element and control classes can overwrite <code>getDomRefForSetting<\/code> to calculate or add the appropriate DOM Element dynamically.<\/li> <\/li> <\/ul> Aggregation names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. The name for a hidden aggregations might start with an underscore. If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the aggregation.\n\nFor each public aggregation 'item' of cardinality 0..1, the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>getItem() - returns the current value of aggregation 'item'. Internally calls {@link #getAggregation} with a default value of <code>undefined<\/code><\/li> <li>setItem(o) - sets 'o' as the new aggregated object in aggregation 'item'. Internally calls {@link #setAggregation}<\/li> <li>destroyItem(o) - destroy a currently aggregated object in aggregation 'item' and clears the aggregation. Internally calls {@link #destroyAggregation}<\/li> <li>bindItem(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}<\/li> <li>unbindItem() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}<\/li> <\/ul> For a public aggregation 'items' of cardinality 0..n, the following methods will be created: <ul> <li>getItems() - returns an array with the objects contained in aggregation 'items'. Internally calls {@link #getAggregation} with a default value of <code>[]<\/code><\/li> <li>addItem(o) - adds an object as last element in the aggregation 'items'. Internally calls {@link #addAggregation}<\/li> <li>insertItem(o,p) - inserts an object into the aggregation 'items'. Internally calls {@link #insertAggregation}<\/li> <li>indexOfItem(o) - returns the position of the given object within the aggregation 'items'. Internally calls {@link #indexOfAggregation}<\/li> <li>removeItem(v) - removes an object from the aggregation 'items'. Internally calls {@link #removeAggregation}<\/li> <li>removeItems() - removes all objects from the aggregation 'items'. Internally calls {@link #removeAllAggregation}<\/li> <li>destroyItems() - destroy all currently aggregated objects in aggregation 'items' and clears the aggregation. Internally calls {@link #destroyAggregation}<\/li> <li>bindItems(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}<\/li> <li>unbindItems() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}<\/li> <\/ul> For hidden aggregations, no methods are generated.\n\n<b>'defaultAggregation'<\/b> : <i>string<\/i><br> When specified, the default aggregation must match the name of one of the aggregations defined for the new subclass (either own or inherited). The named aggregation will be used in contexts where no aggregation is specified. E,g. when an object in an XMLView embeds other objects without naming an aggregation, as in the following example: <pre>\n &lt;!-- assuming the defaultAggregation for Dialog is 'content' -->\n &lt;Dialog>\n   &lt;Text/>\n   &lt;Button/>\n &lt;/Dialog>\n<\/pre>\n\n<b>'associations'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new association of the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new association or it can be an object literal with the following properties <ul> <li><code>type: <i>string<\/i><\/code> type of the new association<\/li> <li><code>multiple: <i>boolean<\/i><\/code> whether the association is a 0..1 (false) or a 0..n association (true), defaults to false(1) for associations<\/li> <li><code>[singularName]: <i>string<\/i><\/code>. Singular name for 0..n associations. For 0..n associations the name by convention should be the plural name. Methods affecting multiple objects in an association will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine a singular name on its own. if that name is wrong, a singluarName can be specified with this property.<\/li> <li><code>visibility: <i>string<\/i><\/code> either 'hidden' or 'public', defaults to 'public'. Associations that belong to the API of a class must be 'public' whereas 'hidden' associations can only be used internally. Only public associations are accepted by the constructor or by <code>applySettings<\/code> or in declarative representations like an <code>XMLView<\/code>. Equally, only public associations are cloned.<\/li> <\/ul> Association names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. If an association in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the association.\n\nFor each association 'ref' of cardinality 0..1, the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>getRef() - returns the current value of association 'item'. Internally calls {@link #getAssociation} with a default value of <code>undefined<\/code><\/li> <li>setRef(o) - sets 'o' as the new associated object in association 'item'. Internally calls {@link #setAssociation}<\/li> <\/ul> For a public association 'refs' of cardinality 0..n, the following methods will be created: <ul> <li>getRefs() - returns an array with the objects contained in association 'items'. Internally calls {@link #getAssociation} with a default value of <code>[]<\/code><\/li> <li>addRef(o) - adds an object as last element in the association 'items'. Internally calls {@link #addAssociation}<\/li> <li>removeRef(v) - removes an object from the association 'items'. Internally calls {@link #removeAssociation}<\/li> <li>removeAllRefs() - removes all objects from the association 'items'. Internally calls {@link #removeAllAssociation}<\/li> <\/ul> For hidden associations, no methods are generated.\n\n<b>'events'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new event of the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new association or it can be an object literal with the following properties <ul> <li><code>allowPreventDefault: <i>boolean<\/i><\/code> whether the event allows to prevented the default behavior of the event source<\/li> <li><code>parameters: <i>object<\/i><\/code> an object literal that describes the parameters of this event. <\/li> <\/ul> Event names should use camelCase notation, start with a lower-case letter and only use characters from the set [a-zA-Z0-9_$]. If an event in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the event.\n\nFor each event 'Some' the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>attachSome(fn,o) - registers a listener for the event. Internally calls {@link #attachEvent}<\/li> <li>detachSome(fn,o) - deregisters a listener for the event. Internally calls {@link #detachEvent}<\/li> <li>fireSome() - fire the event. Internally calls {@link #fireEvent}<\/li> <\/ul>\n\n<b>'specialSettings'<\/b> : <i>object<\/i><br> Special settings are an experimental feature and MUST NOT BE DEFINED in controls or applications outside of the <code>sap.ui.core<\/code> library. There's no generic or general way how to set or get the values for special settings. For the same reason, they cannot be bound against a model. If there's a way for consumers to define a value for a special setting, it must be documented in the class that introduces the setting.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: object literal with information about the class","FNMetaImpl":"type: function, description: constructor function for the metadata object. If not given, it defaults to <code>sap.ui.base.ManagedObjectMetadata<\/code>.","sClassName":"type: string, description: name of the class to be created"}},"getObjectBinding":{"!description":"Get the object binding object for a specific model.\n\n<b>Note:<\/b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null<\/code><\/li> <li>empty string <code>\"\"<\/code><\/li> <li>string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code><\/li> <\/ul> Omitting the model name (or using the value <code>undefined<\/code>) is explicitly allowed and refers to the default model.","!static":false,"!category":"function","!type":"fn(sModelName?: String) -> sap.ui.model.ContextBinding","parameters":{"sModelName":"type: string, description: Non-empty name of the model or <code>undefined<\/code>"}},"attachModelContextChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:modelContextChange modelContextChange} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject<\/code> itself.\n\nFired when models or contexts are changed on this object (either by calling setModel/setBindingContext or due to propagation)","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachParseError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:parseError parseError} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!module":"sap/ui/base/ManagedObject","!helpDescription":"Base Class that introduces some basic concepts, such as, state management and data binding.\n\nNew subclasses of ManagedObject are created with a call to {@link #.extend ManagedObject.extend} and can make use of the following managed features:\n\n<h3>Properties<\/h3> Managed properties represent the state of a ManagedObject. They can store a single value of a simple data type (like 'string' or 'int'). They have a <i>name<\/i> (e.g. 'size') and methods to get the current value (<code>getSize<\/code>), or to set a new value (<code>setSize<\/code>). When a property is modified by calling the setter, the ManagedObject is marked as invalidated. A managed property can be bound against a property in a {@link sap.ui.model.Model} by using the {@link #bindProperty} method. Updates to the model property will be automatically reflected in the managed property and - if TwoWay databinding is active, changes to the managed property will be reflected in the model. An existing binding can be removed by calling {@link #unbindProperty}.\n\nIf a ManagedObject is cloned, the clone will have the same values for its managed properties as the source of the clone - if the property wasn't bound. If it is bound, the property in the clone will be bound to the same model property as in the source.\n\nDetails about the declaration of a managed property, the metadata that describes it and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend } method.\n\n<h3>Aggregations<\/h3> Managed aggregations can store one or more references to other ManagedObjects. They are a mean to control the lifecycle of the aggregated objects: one ManagedObject can be aggregated by at most one parent ManagedObject at any time. When a ManagedObject is destroyed, all aggregated objects are destroyed as well and the object itself is removed from its parent. That is, aggregations won't contain destroyed objects or null/undefined.\n\nAggregations have a <i>name<\/i> ('e.g 'header' or 'items'), a <i>cardinality<\/i> ('0..1' or '0..n') and are of a specific <i>type<\/i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get the aggregated object for a specific aggregation of cardinality 0..1 (e.g. <code>setHeader<\/code>, <code>getHeader<\/code> for an aggregation named 'header'). For an aggregation of cardinality 0..n, there are methods to get all aggregated objects (<code>getItems<\/code>), to locate an object in the aggregation (e.g. <code>indexOfItem<\/code>), to add, insert or remove a single aggregated object (<code>addItem<\/code>, <code>insertItem<\/code>, <code>removeItem<\/code>) or to remove or destroy all objects from an aggregation (<code>removeAllItems<\/code>, <code>destroyItems<\/code>).\n\nDetails about the declaration of a managed aggregation, the metadata that describes the aggregation, and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.\n\nAggregations of cardinality 0..n can be bound to a collection in a model by using {@link #bindAggregation} (and unbound again using {@link #unbindAggregation}). For each context in the model collection, a corresponding object will be created in the managed aggregation, either by cloning a template object or by calling a factory function.\n\nAggregations also control the databinding context of bound objects: by default, aggregated objects inherit all models and binding contexts from their parent object.\n\nWhen a ManagedObject is cloned, all aggregated objects will be cloned as well - but only if they haven't been added by databinding. In that case, the aggregation in the clone will be bound to the same model collection.\n\n<h3>Associations<\/h3> Managed associations also form a relationship between objects, but they don't define a lifecycle for the associated objects. They even can 'break' in the sense that an associated object might have been destroyed already although it is still referenced in an association. For the same reason, the internal storage for associations are not direct object references but only the IDs of the associated target objects.\n\nAssociations have a <i>name<\/i> ('e.g 'initialFocus'), a <i>cardinality<\/i> ('0..1' or '0..n') and are of a specific <i>type<\/i> (which must be a subclass of ManagedObject as well or a UI5 interface). A ManagedObject will provide methods to set or get the associated object for a specific association of cardinality 0..1 (e.g. <code>setInitialFocus<\/code>, <code>getInitialFocus<\/code>). For an association of cardinality 0..n, there are methods to get all associated objects (<code>getRefItems<\/code>), to add, insert or remove a single associated object (<code>addRefItem<\/code>, <code>insertRefItem<\/code>, <code>removeRefItem<\/code>) or to remove all objects from an association (<code>removeAllRefItems<\/code>).\n\nDetails about the declaration of a managed association, the metadata that describes it and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.\n\nAssociations can't be bound to the model.\n\nWhen a ManagedObject is cloned, the result for an association depends on the relationship between the associated target object and the root of the clone operation. If the associated object is part of the to-be-cloned object tree (reachable via aggregations from the root of the clone operation), then the cloned association will reference the clone of the associated object. Otherwise the association will reference the same object as in the original tree. When a ManagedObject is destroyed, other objects that are only associated, are not affected by the destroy operation.\n\n<h3>Events<\/h3> Managed events provide a mean for communicating important state changes to an arbitrary number of 'interested' listeners. Events have a <i>name<\/i> and (optionally) a set of <i>parameters<\/i>. For each event there will be methods to add or remove an event listener as well as a method to fire the event. (e.g. <code>attachChange<\/code>, <code>detachChange<\/code>, <code>fireChange<\/code> for an event named 'change').\n\nDetails about the declaration of managed events, the metadata that describes the event, and the set of methods that are automatically generated to access it, can be found in the documentation of the {@link sap.ui.base.ManagedObject.extend extend} method.\n\nWhen a ManagedObject is cloned, all listeners registered for any event in the clone source are also registered to the clone. Later changes are not reflected in any direction (neither from source to clone, nor vice versa).\n\n<a name=\"lowlevelapi\"><h3>Low Level APIs:<\/h3><\/a> The prototype of ManagedObject provides several generic, low level APIs to manage properties, aggregations, associations, and events. These generic methods are solely intended for implementing higher level, non-generic methods that manage a single managed property etc. (e.g. a function <code>setSize(value)<\/code> that sets a new value for property 'size'). {@link sap.ui.base.ManagedObject.extend} creates default implementations of those higher level APIs for all managed aspects. The implementation of a subclass then can override those default implementations with a more specific implementation, e.g. to implement a side effect when a specific property is set or retrieved. It is therefore important to understand that the generic low-level methods ARE NOT SUITABLE FOR GENERIC ACCESS to the state of a managed object, as that would bypass the overriding higher level methods and their side effects.","runWithPreprocessors":{"!description":"Activates the given ID and settings preprocessors, executes the given function and restores the previously active preprocessors.\n\nWhen a preprocessor is not defined in <code>oPreprocessors<\/code>, then the currently active preprocessor is temporarily deactivated while <code>fn<\/code> is executed.\n\nSee the <code>_fnIdPreprocessor<\/code> and <code>_fnSettingsPreprocessor<\/code> members in this class for a detailed description of the preprocessors.\n\nThis method is intended for internal use in the sap/ui/base and sap/ui/core packages only.","!static":true,"!category":"function","!type":"fn(fn: fn(), oPreprocessors?: Object, oThisArg?: Object) -> Object","parameters":{"fn":"type: function, description: Function to execute","oPreprocessors":"type: object, description: Preprocessors to use while executing <code>fn<\/code>","oThisArg":"type: Object, description: Value to use as <code>this<\/code> when executing <code>fn<\/code>"}},"setProperty":{"!description":"Sets the given value for the given property after validating and normalizing it, marks this object as changed.\n\nIf the value is not valid with regard to the declared data type of the property, an Error is thrown. In case <code>null<\/code> or <code>undefined<\/code> is passed, the default value for this property is used (see {@link #validateProperty}). To fully reset the property to initial state, use {@link #resetProperty} instead. If the validated and normalized <code>oValue<\/code> equals the current value of the property, the internal state of this object is not changed (apart from the result of {@link #isPropertyInitial}). If the value changes, it is stored internally and the {@link #invalidate} method is called on this object. In the case of TwoWay databinding, the bound model is informed about the property change.\n\nNote that ManagedObject only implements a single level of change tracking: if a first call to setProperty recognizes a change, 'invalidate' is called. If another call to setProperty reverts that change, invalidate() will be called again, the new status is not recognized as being 'clean' again.\n\n<b>Note:<\/b> This method is a low level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically set a property. Use the concrete method set<i>XYZ<\/i> for property 'XYZ' or the generic {@link #applySettings} instead.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, oValue: Object, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"oValue":"type: any, description: value to set the property to","bSuppressInvalidate":"type: boolean, description: if true, the managed object is not marked as changed","sPropertyName":"type: string, description: name of the property to set"}},"setModel":{"!description":"Sets or unsets a model for the given model name for this ManagedObject.\n\nThe <code>sName<\/code> must either be <code>undefined<\/code> (or omitted) or a non-empty string. When the name is omitted, the default model is set/unset. To be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null<\/code><\/li> <li>empty string <code>\"\"<\/code><\/li> <li>string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code><\/li> <\/ul>\n\nWhen <code>oModel<\/code> is <code>null<\/code> or <code>undefined<\/code>, a previously set model with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model with that name, this ManagedObject will immediately inherit that model from its ancestor.\n\nAll local bindings that depend on the given model name are updated (created if the model references became complete now; updated, if any model reference has changed; removed if the model references became incomplete now).\n\nAny change (new model, removed model, inherited model) is also applied to all aggregated descendants as long as a descendant doesn't have its own model set for the given name.\n\n<b>Note:<\/b> By design, it is not possible to hide an inherited model by setting a <code>null<\/code> or <code>undefined<\/code> model. Applications can set an empty model to achieve the same.\n\n<b>Note:<\/b> A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.","!static":false,"!category":"function","!type":"fn(oModel: sap.ui.model.Model, sName?: String) -> sap.ui.base.ManagedObject","parameters":{"oModel":"type: sap.ui.model.Model, description: the model to be set or <code>null<\/code> or <code>undefined<\/code>","sName":"type: string, description: the name of the model or <code>undefined<\/code>"}},"setAssociation":{"!description":"Sets the associated object for the given managed association of cardinality '0..1' and marks this ManagedObject as changed.\n\nThe associated object can either be given by itself or by its id. If <code>null<\/code> or <code>undefined<\/code> is given, the association is cleared.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically set an object in an association. Use the concrete method set<i>XYZ<\/i> for association 'XYZ' or the generic {@link #applySettings} instead.","!static":false,"!category":"function","!type":"fn(sAssociationName: String, sId: String | sap.ui.base.ManagedObject, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"sAssociationName":"type: string, description: name of the association","bSuppressInvalidate":"type: boolean, description: if true, the managed objects invalidate method is not called","sId":"type: string|sap.ui.base.ManagedObject, description: the ID of the managed object that is set as an association, or the managed object itself or null"}},"insertAggregation":{"!description":"Inserts managed object <code>oObject<\/code> to the aggregation named <code>sAggregationName<\/code> at position <code>iIndex<\/code>.\n\nIf the given object is not valid with regard to the aggregation (if it is not an instance of the type specified for that aggregation) or when the method is called for an aggregation of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.\n\nIf the given index is out of range with respect to the current content of the aggregation, it is clipped to that range (0 for iIndex < 0, n for iIndex > n).\n\nPlease note that this method does not work as expected when an object is added that is already part of the aggregation. In order to change the index of an object inside an aggregation, first remove it, then insert it again.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically insert an object into an aggregation. Use the concrete method insert<i>XYZ<\/i> for aggregation 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oObject: sap.ui.base.ManagedObject, iIndex: Number, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: the ManagedObject to add; if empty, nothing is inserted.","bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject as well as the added child are not marked as changed","iIndex":"type: int, description: the <code>0<\/code>-based index the managed object should be inserted at; for a negative value <code>iIndex<\/code>, <code>oObject<\/code> is inserted at position 0; for a value greater than the current size of the aggregation, <code>oObject<\/code> is inserted at the last position","sAggregationName":"type: string, description: the string identifying the aggregation the managed object <code>oObject<\/code> should be inserted into."}},"getBindingPath":{"!description":"Get the binding path for a specific aggregation/property","!static":false,"!category":"function","!type":"fn(sName: String) -> String","parameters":{"sName":"type: string, description: the name of the property or aggregation"}},"setAggregation":{"!description":"Sets a new object in the named 0..1 aggregation of this ManagedObject and marks this ManagedObject as changed.\n\nIf the given object is not valid with regard to the aggregation (if it is not an instance of the type specified for that aggregation) or when the method is called for an aggregation of cardinality 0..n, then an Error is thrown (see {@link #validateAggregation}.\n\nIf the new object is the same as the currently aggregated object, then the internal state is not modified and this ManagedObject is not marked as changed.\n\nIf the given object is different, the parent of a previously aggregated object is cleared (it must have been this ManagedObject before), the parent of the given object is set to this ManagedObject and {@link #invalidate} is called for this object.\n\nNote that this method does neither return nor destroy the previously aggregated object. This behavior is inherited by named set methods (see below) in subclasses. To avoid memory leaks, applications therefore should first get the aggregated object, keep a reference to it or destroy it, depending on their needs, and only then set a new object.\n\nNote that ManagedObject only implements a single level of change tracking: if a first call to setAggregation recognizes a change, 'invalidate' is called. If another call to setAggregation reverts that change, invalidate() will be called again, the new status is not recognized as being 'clean' again.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically set an object in an aggregation. Use the concrete method set<i>XYZ<\/i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oObject: Object, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"oObject":"type: object, description: the managed object that is set as aggregated object","bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed","sAggregationName":"type: string, description: name of an 0..1 aggregation"}},"escapeSettingsValue":{"!description":"Escapes the given value so it can be used in the constructor's settings object. Should be used when property values are initialized with static string values which could contain binding characters (curly braces).","!static":true,"!category":"function","!type":"fn(vValue: Object) -> Object","parameters":{"vValue":"type: any, description: Value to escape; only needs to be done for string values, but the call will work for all types"}},"addPropagationListener":{"!description":"Adds a listener function that will be called during each propagation step on every control","!static":false,"!category":"function","!type":"fn(listener: fn()) -> sap.ui.base.ManagedObject","parameters":{"listener":"type: function, description: function"}},"indexOfAggregation":{"!description":"Searches for the provided ManagedObject in the named aggregation and returns its 0-based index if found, or -1 otherwise. Returns -2 if the given named aggregation is of cardinality 0..1 and doesn't reference the given object.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically determine the position of an object in an aggregation. Use the concrete method indexOf<i>XYZ<\/i> for aggregation 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oObject: sap.ui.base.ManagedObject) -> Number","parameters":{"oObject":"type: sap.ui.base.ManagedObject, description: the ManagedObject whose index is looked for.","sAggregationName":"type: string, description: the name of the aggregation"}},"!proto":"sap.ui.base.EventProvider","!category":"class","bindContext":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11.1 please use {@link #bindObject} instead.<br>Bind the object to the referenced entity in the model, which is used as the binding context to resolve bound properties or aggregations of the object itself and all of its children relatively to the given path.","!static":false,"!category":"function","!type":"fn(sPath: String) -> sap.ui.base.ManagedObject","parameters":{"sPath":"type: string, description: the binding path"}},"getId":{"!description":"Returns the object's ID.\n\nThere is no guarantee or check or requirement for the ID of a <code>ManagedObject<\/code> to be unique. Only some subclasses of <code>ManagedObject<\/code> introduce this as a requirement, e.g. <code>Component<\/code> or <code>Element<\/code>. All elements existing in the same window at the same time must have different IDs. A new element will fail during construction when the given ID is already used by another element. But there might be a component with the same ID as an element or another <code>ManagedObject<\/code>.\n\nFor the same reason, there is no general lookup for <code>ManagedObject<\/code>s via their ID. Only for subclasses that enforce unique IDs, there might be lookup mechanisms (e.g. {@link sap.ui.core.Core#byId sap.ui.getCore().byId()} for elements).","!static":false,"!category":"function","!type":"fn() -> String"},"hasModel":{"!description":"Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).\n\n<b>Note:<\/b> A ManagedObject inherits models from the Core only when it is a descendant of a UIArea.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isInvalidateSuppressed":{"!description":"Returns whether rerendering is currently suppressed on this ManagedObject","!static":false,"!category":"function","!type":"fn()"},"getBindingInfo":{"!description":"Returns the binding info for the given property or aggregation.\n\nThe binding info contains information about path, binding object, format options, sorter, filter etc. for the property or aggregation. As the binding object is only created when the model becomes available, the <code>binding<\/code> property may be undefined.","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: Name of the property or aggregation"}},"getAggregation":{"!description":"Returns the aggregated object(s) for the named aggregation of this ManagedObject.\n\nIf the aggregation does not contain any objects(s), the given <code>oDefaultForCreation<\/code> (or <code>null<\/code>) is set as new value of the aggregation and returned to the caller.\n\n<b>Note:<\/b> the need to specify a default value and the fact that it is stored as new value of a so far empty aggregation is recognized as a shortcoming of this API but can no longer be changed for compatibility reasons.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically read the content of an aggregation. Use the concrete method get<i>XYZ<\/i> for aggregation 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oDefaultForCreation: sap.ui.base.ManagedObject | Array) -> sap.ui.base.ManagedObject | Array","parameters":{"oDefaultForCreation":"type: sap.ui.base.ManagedObject|Array, description: the object that is used in case the current aggregation is empty","sAggregationName":"type: string, description: the name of the aggregation"}},"removeAllAssociation":{"!description":"Removes all the objects in the 0..n-association named <code>sAssociationName<\/code> and returns an array with their IDs. This ManagedObject is marked as changed, if the association contained any objects.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically remove all object from an association. Use the concrete method removeAll<i>XYZ<\/i> for association 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAssociationName: String, bSuppressInvalidate?: Boolean) -> Array","parameters":{"sAssociationName":"type: string, description: the name of the association","bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed"}},"!constructorDescription":"Constructs and initializes a managed object with the given <code>sId<\/code> and settings.\n\nIf the optional <code>mSettings<\/code> are given, they must be a simple object\nthat defines values for properties, aggregations, associations or events keyed by their name.\n\n<b>Valid Names and Value Ranges:<\/b>\n\nThe property (key) names supported in the object literal are exactly the (case sensitive)\nnames documented in the JSDoc for the properties, aggregations, associations and events\nof the current class and its base classes. Note that for 0..n aggregations and associations this\nname usually is the plural name, whereas it is the singular name in case of 0..1 relations.\n\nIf a key name is ambiguous for a specific managed object class (e.g. a property has the same\nname as an event), then this method prefers property, aggregation, association and\nevent in that order. To resolve such ambiguities, the keys can be prefixed with\n<code>aggregation:<\/code>, <code>association:<\/code> or <code>event:<\/code>\n(such keys containing a colon (':') must be quoted to be valid Javascript).\n\nThe possible values for a setting depend on its kind:\n<ul>\n<li>for simple properties, the value has to match the documented type of the property (no type conversion occurs)<\/li>\n<li>for 0..1 aggregations, the value has to be an instance of the aggregated type<\/li>\n<li>for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single instance<\/li>\n<li>for 0..1 associations, an instance of the associated type or an id (string) is accepted<\/li>\n<li>for 0..n associations, an array of instances of the associated type or of IDs is accepted<\/li>\n<li>for events, either a function (event handler) is accepted or an array of length 2\n    where the first element is a function and the 2nd element is an object to invoke the method on;\n    or an array of length 3, where the first element is an arbitrary payload object, the\n    second one is a function and the 3rd one is an object to invoke the method on;\n    or an array of arrays where each nested array has the 2 or 3 element structure\n    described before (multiple listeners).<\/li>\n<\/ul>\n\nEach subclass should document the name and type of its supported settings in its constructor documentation.\n\nExample usage:\n<pre>\nnew Dialog({\n   title: \"Some title text\",            // property of type \"string\"\n   showHeader: true,                    // property of type \"boolean\"\n   endButton: new Button(...),          // 0..1 aggregation\n   content: [                           // 0..n aggregation\n      new Input(...),\n      new Input(...)\n   ],\n   afterClose: function(oEvent) { ... } // event handler function\n});\n<\/pre>\n\nInstead of static values and object instances, data binding expressions can be used, either embedded in\na string or as a binding info object as described in {@link #bindProperty} or {@link #bindAggregation}.\n\nExample usage:\n<pre>\nnew Dialog({\n   title: \"{/title}\",       // embedded binding expression, points to a string property in the data model\n   ...\n   content: {               // binding info object\n      path : \"/inputItems\", // points to a collection in the data model\n      template : new Input(...)\n   }\n});\n<\/pre>\n\nNote that when setting string values, any curly braces in those values need to be escaped, so they are not\ninterpreted as binding expressions. Use {@link #escapeSettingsValue} to do so.\n\nBesides the settings documented below, ManagedObject itself supports the following special settings:\n<ul>\n<li><code>id : <i>sap.ui.core.ID<\/i><\/code> an ID for the new instance. Some subclasses (Element, Component) require the id\n  to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component id must\n  be unique across all Components).\n<li><code>models : <i>object<\/i><\/code> a map of {@link sap.ui.model.Model} instances keyed by their model name (alias).\n  Each entry with key <i>k<\/i> in this object has the same effect as a call <code>this.setModel(models[k], k);<\/code>.<\/li>\n<li><code>bindingContexts : <i>object<\/i><\/code> a map of {@link sap.ui.model.Context} instances keyed by their model name.\n  Each entry with key <i>k<\/i> in this object has the same effect as a call <code>this.setBindingContext(bindingContexts[k], k);<\/code><\/li>\n<li><code>objectBindings : <i>object<\/i><\/code>  a map of binding paths keyed by the corresponding model name.\n  Each entry with key <i>k<\/i> in this object has the same effect as a call <code>this.bindObject(objectBindings[k], k);<\/code><\/li>\n<li><code>metadataContexts : <i>object<\/i><\/code>  an array of single binding contexts keyed by the corresponding model or context name.\n  The purpose of the <code>metadataContexts<\/code> special setting is to deduce as much information as possible from the binding context of the control in order\n  to be able to predefine certain standard properties like e.g. <i>visible, enabled, tooltip,...<\/i>\n\n  The structure is an array of single contexts, where a single context is a map containing the following keys:\n  <ul>\n  <li><code>path: <i>string (mandatory)<\/i><\/code> The path to the corresponding model property or object, e.g. '/Customers/Name'. A path can also be relative, e.g. 'Name'<\/li>\n  <li><code>model: <i>string (optional)<\/i><\/code> The name of the model, in case there is no name then the undefined model is taken<\/li>\n  <li><code>name: <i>string (optional)<\/i><\/code> A name for the context to used in templating phase<\/li>\n  <li><code>kind: <i>string (optional)<\/i><\/code> The kind of the adapter, either <code>field<\/code> for single properties or <code>object<\/code> for structured contexts.\n  <li><code>adapter: <i>string (optional)<\/i><\/code> The path to an interpretion class that dilivers control relevant data depending on the context, e.g. enabled, visible.\n  If not supplied the OData meta data is interpreted.<\/li>\n  <\/ul>\n  The syntax for providing the <code>metadataContexts<\/code> is as follows:\n  <code>{SINGLE_CONTEXT1},...,{SINGLE_CONTEXTn}<\/code> or for simplicity in case there is only one context <code>{SINGLE_CONTEXT}<\/code>.\n\n  Examples for such metadataContexts are:\n  <ul>\n  <li><code>{/Customers/Name}<\/code> a single part with an absolute path to the property <i>Name<\/i> of the <i>Customers<\/i> entity set in the default model<\/li>\n  <li><code>{path: 'Customers/Name', model:'json'}<\/code> a single part with an absolute path to the property <i>Name<\/i> of the <i>Customers<\/i> entity set in a named model<\/li>\n  <li><code>{parts: [{path: 'Customers/Name'},{path: 'editable', model: 'viewModel'}]}<\/code> a combination of single binding contexts, one context from the default model and one from the viewModel<\/li>\n  <\/ul><\/li>\n<\/ul>\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Events\n<ul>\n<li>{@link #event:validationSuccess validationSuccess} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:validationError validationError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:parseError parseError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:formatError formatError} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:modelContextChange modelContextChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>","removeAllAggregation":{"!description":"Removes all objects from the 0..n-aggregation named <code>sAggregationName<\/code>.\n\nThe removed objects are not destroyed nor are they marked as changed.\n\nAdditionally, it clears the parent relationship of all removed objects, marks this ManagedObject as changed and returns an array with the removed objects.\n\nIf the aggregation did not contain any objects, an empty array is returned and this ManagedObject is not marked as changed.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically remove all objects from an aggregation. Use the concrete method removeAll<i>XYZ<\/i> for aggregation 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, bSuppressInvalidate?: Boolean) -> Array","parameters":{"bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed","sAggregationName":"type: string, description: the name of the aggregation"}},"getAssociation":{"!description":"Returns the content of the association with the given name.\n\nFor associations of cardinality 0..1, a single string with the ID of an associated object is returned (if any). For cardinality 0..n, an array with the IDs of the associated objects is returned.\n\nIf the association does not contain any objects(s), the given <code>oDefaultForCreation<\/code> is set as new value of the association and returned to the caller. The only supported values for <code>oDefaultForCreation<\/code> are <code>null<\/code> and <code>undefined<\/code> in the case of cardinality 0..1 and <code>null<\/code>, <code>undefined<\/code> or an empty array (<code>[]<\/code>) in case of cardinality 0..n. If the argument is omitted, <code>null<\/code> is used independently from the cardinality.\n\n<b>Note:<\/b> the need to specify a default value and the fact that it is stored as new value of a so far empty association is recognized as a shortcoming of this API but can no longer be changed for compatibility reasons.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically retrieve the content of an association. Use the concrete method get<i>XYZ<\/i> for association 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAssociationName: String, oDefaultForCreation: Object) -> [String | String]","parameters":{"oDefaultForCreation":"type: object, description: the object that is used in case the current aggregation is empty (only null or empty array allowed)","sAssociationName":"type: string, description: the name of the association"}},"unbindContext":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.11.1 please use {@link #unbindObject} instead.<br>Removes the defined binding context of this object, all bindings will now resolve relative to the parent context again.","!static":false,"!category":"function","!type":"fn(sModelName?: String) -> sap.ui.base.ManagedObject","parameters":{"sModelName":"type: string, description: name of the model to remove the context for."}},"attachParseError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:parseError parseError} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject<\/code> itself.\n\nFired when a new value for a bound property should have been propagated to the model, but parsing the value failed with an exception.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"propagateMessages":{"!description":"Generic method which is called, whenever messages for this object exist.","!static":false,"!category":"function","!type":"fn(sName: String, aMessages: Array)","parameters":{"aMessages":"type: array, description: The messages","sName":"type: string, description: The property name"}},"bindAggregation":{"!description":"Bind an aggregation to the model.\n\nWhenever the corresponding model becomes available or changes (either via a call to {@link #setModel setModel} or propagated from a {@link #getParent parent}), its {@link sap.ui.model.Model#bindList bindList} method will be called to create a new {@link sap.ui.model.ListBinding ListBinding} with the configured binding options.\n\nThe bound aggregation will use the given template, clone it for each item which exists in the bound list and set the appropriate binding context.\n\nThis is a generic method which can be used to bind any aggregation to the model. A class may flag aggregations in its metadata with <code>bindable: \"bindable\"<\/code> to get typed <code>bind<i>Something<\/i><\/code> and <code>unbind<i>Something<\/i><\/code> methods for those aggregations.\n\nAlso see {@link topic:91f057786f4d1014b6dd926db0e91070 List Binding (Aggregation Binding)} in the documentation.\n\nFor more information on the <code>oBindingInfo.key<\/code> property and its usage, see {@link topic:7cdff73f308b4b10bdf7d83b7aba72e7 Extended Change Detection}.","!static":false,"!category":"function","!type":"fn(sName: String, oBindingInfo: Object) -> sap.ui.base.ManagedObject","parameters":{"sName":"type: string, description: Name of a public aggregation to bind","oBindingInfo":"type: object, description: Binding info"}},"attachFormatError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:formatError formatError} event of this <code>sap.ui.base.ManagedObject<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.base.ManagedObject<\/code> itself.\n\nFired when a new value for a bound property should have been propagated from the model, but formatting the value failed with an exception.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.ManagedObject","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"updateAggregation":{"!description":"Generic method which is called whenever an aggregation binding has changed.\n\nDepending on the type of the list binding and on additional configuration, this method either destroys all elements in the aggregation <code>sName<\/code> and recreates them anew or tries to reuse as many existing objects as possible. It is up to the method which strategy it uses.\n\nIn case a managed object needs special handling for an aggregation binding, it can create a named update method (e.g. <code>update<i>Rows<\/i><\/code> for an aggregation <code>rows<\/code>) which then will be called by the framework instead of this generic method.\n\nSubclasses should call this method only in the implementation of such a named update method and for no other purposes. The framework might change the conditions under which the method is called and the method implementation might rely on those conditions.","!static":false,"!category":"function","!type":"fn(sName: String)","parameters":{"sName":"type: string, description: name of the aggregation to update"}},"getParent":{"!description":"Returns the parent managed object or <code>null<\/code> if this object hasn't been added to a parent yet.\n\nThe parent returned by this method is the technical parent used for data binding, invalidation, rendering etc. It might differ from the object on which the application originally added this object (the so called 'API parent'): some composite controls internally use hidden controls or containers to store their children. This method will return the innermost container that technically contains this object as a child.\n\n<b>Example:<\/b>\n\nAssume that a <code>Dialog<\/code> internally uses a (hidden) <code>VerticalLayout<\/code> to store its content:\n\n<pre>\n  Dialog (API parent)\n   \\__ VerticalLayout (hidden composite part)\n      \\__ Text (API child)\n<\/pre>\n\nIf you add some content by calling the <code>Dialog.prototype.addContent<\/code> API, this will lead to the following observations:\n\n<pre>\n  oDialog.addContent(oText);\n  console.log(oText.getParent() === oDialog);  // false\n  console.log(oText.getParent() instanceof VerticalLayout); // true\n  console.log(oText.getParent().getParent() === oDialog); // true now, but might fail with later versions\n<\/pre>\n\nTechnically, from API perspective, <code>oText<\/code> is added as a child to <code>Dialog<\/code>. But internally, the <code>Dialog<\/code> adds the child to the hidden <code>VerticalLayout<\/code> container. If you now call the <code>getParent<\/code> method of the child, you will get the internal <code>VerticalLayout<\/code> object and not the <code>Dialog<\/code> API parent.\n\n<b>Note: <\/b> The internal (hidden) structure of a composite control is not fixed and may be changed (see also our \"Compatibility Rules\"). Therefore, you should <b>never<\/b> rely on a specific structure or object being returned by <code>getParent<\/code>.\n\n<b>Note: <\/b> There is no API to determine the original API parent.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.ManagedObject"},"getProperty":{"!description":"Returns the value for the property with the given <code>sPropertyName<\/code>.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically retrieve the value of a property. Use the concrete method get<i>XYZ<\/i> for property 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Object","parameters":{"sPropertyName":"type: string, description: the name of the property"}},"invalidate":{"!description":"Marks this object and its aggregated children as 'invalid'.\n\nThe term 'invalid' originally was introduced by controls where a change to the object's state made the rendered DOM <i>invalid<\/i>. Later, the concept of invalidation was moved up in the inheritance hierarchy to <code>ManagedObject<\/code>, but the term was kept for compatibility reasons.\n\nManaged settings (properties, aggregations, associations) invalidate the corresponding object automatically. Changing the state via the standard mutators, therefore, does not require an explicit call to <code>invalidate<\/code>. The same applies to changes made via data binding, as it internally uses the standard mutators.\n\nBy default, a <code>ManagedObject<\/code> propagates any invalidation to its parent. Controls or UIAreas handle invalidation on their own by triggering a re-rendering.","!static":false,"!category":"function","!type":"fn()"},"removeAggregation":{"!description":"Removes an object from the aggregation named <code>sAggregationName<\/code> with cardinality 0..n.\n\nThe removed object is not destroyed nor is it marked as changed.\n\nIf the given object is found in the aggregation, it is removed, it's parent relationship is unset and this ManagedObject is marked as changed. The removed object is returned as result of this method. If the object could not be found, <code>undefined<\/code> is returned.\n\nThis method must only be called for aggregations of cardinality 0..n. The only way to remove objects from a 0..1 aggregation is to set a <code>null<\/code> value for them.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically remove an object from an aggregation. Use the concrete method remove<i>XYZ<\/i> for aggregation 'XYZ' instead.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, vObject: Number | String | sap.ui.base.ManagedObject, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"vObject":"type: int|string|sap.ui.base.ManagedObject, description: the position or ID of the ManagedObject that should be removed or that ManagedObject itself; if <code>vObject<\/code> is invalid, a negative value or a value greater or equal than the current size of the aggregation, nothing is removed.","bSuppressInvalidate":"type: boolean, description: if true, this ManagedObject is not marked as changed","sAggregationName":"type: string, description: the string identifying the aggregation that the given object should be removed from"}},"getEventingParent":{"!description":"Returns the parent managed object as new eventing parent to enable control event bubbling or <code>null<\/code> if this object hasn't been added to a parent yet.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.EventProvider"},"isPropertyInitial":{"!description":"Returns whether the given property value is initial and has not been explicitly set or bound. Even after setting the default value or setting null/undefined (which also causes the default value to be set), the property is no longer initial. A property can be reset to initial state by calling <code>resetProperty(sPropertyName)<\/code>.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Boolean","parameters":{"sPropertyName":"type: string, description: the name of the property"}},"addAssociation":{"!description":"Adds some object with the ID <code>sId<\/code> to the association identified by <code>sAssociationName<\/code> and marks this ManagedObject as changed.\n\nThis method does not avoid duplicates.\n\n<b>Note:<\/b> This method is a low-level API as described in <a href=\"#lowlevelapi\">the class documentation<\/a>. Applications or frameworks must not use this method to generically add an object to an association. Use the concrete method add<i>XYZ<\/i> for association 'XYZ' or the generic {@link #applySettings} instead.","!static":false,"!category":"function","!type":"fn(sAssociationName: String, sId: String | sap.ui.base.ManagedObject, bSuppressInvalidate?: Boolean) -> sap.ui.base.ManagedObject","parameters":{"sAssociationName":"type: string, description: the string identifying the association the object should be added to.","bSuppressInvalidate":"type: boolean, description: if true, this managed object as well as the newly associated object are not marked as changed","sId":"type: string|sap.ui.base.ManagedObject, description: the ID of the ManagedObject object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject<\/code> is given, its ID is added"}},"refreshAggregation":{"!description":"Generic method which can be called, when an aggregation needs to be refreshed. This method does not make any change on the aggregation, but just calls the <code>getContexts<\/code> method of the binding to trigger fetching of new data.\n\nSubclasses should call this method only in the implementation of a named refresh method and for no other purposes. The framework might change the conditions under which the method is called and the method implementation might rely on those conditions.","!static":false,"!category":"function","!type":"fn(sName: String, sChangeReason: sap.ui.model.ChangeReason)","parameters":{"sChangeReason":"type: sap.ui.model.ChangeReason, description: the change reason","sName":"type: string, description: name of the aggregation to refresh"}},"bindProperty":{"!description":"Binds a property to the model.\n\nWhenever the corresponding model becomes available or changes (either via a call to {@link #setModel setModel} or propagated from a {@link #getParent parent}), its {@link sap.ui.model.Model#bindProperty bindProperty} method will be called to create a new {@link sap.ui.model.PropertyBinding PropertyBinding} with the configured binding options.\n\nThe Setter for the given property will be called by the binding with the value retrieved from the data model. When the binding mode is <code>OneTime<\/code>, the property will be set only once. When it is <code>OneWay<\/code>, the property will be updated whenever the corresponding data in the model changes. In mode <code>TwoWay<\/code>, changes to the property (not originating in the model) will be reported back to the model (typical use case: user interaction changes the value of a control).\n\nThis is a generic method which can be used to bind any property to the model. A managed object may flag any property in its metadata with <code>bindable: \"bindable\"<\/code> to additionally provide named methods to bind and unbind the corresponding property.\n\n<b>Composite Binding<\/b><br> A composite property binding which combines data from multiple model paths can be declared using the <code>parts<\/code> parameter instead of <code>path<\/code>. The <code>formatter<\/code> function or a {@link sap.ui.model.CompositeType composite type} then can be used to combine the parts, Properties with a composite binding are also known as \"calculated fields\".\n\nExample: <pre>\n  oTxt.bindValue({\n    parts: [\n      {path: \"/firstName\", type: \"sap.ui.model.type.String\"},\n      {path: \"myModel2>/lastName\"}\n    ]\n  });\n<\/pre>\n\nNote that a composite binding will be forced into mode <code>OneWay<\/code> when one of the binding parts is not in mode <code>TwoWay<\/code>.\n\n<b>Formatter Functions<\/b><br> When a formatter function is specified for the binding or for a binding part, it will be called with the value of the bound model property. After setting the initial property value, the formatter function will only be called again when the bound model property changes (simple property binding) or when at least one of the bound model properties changes (formatter function of a composite binding). Note that a binding only monitors the bound model data for changes. Dependencies of the formatter implementation to other model data is not known to the binding and changes won't be detected.\n\nWhen the formatter for a property binding (simple or composite) is called, the managed object will be given as <code>this<\/code> context. For formatters of binding parts in a composite binding, this is not the case.\n\nAlso see {@link topic:91f0652b6f4d1014b6dd926db0e91070 Property Binding} in the documentation.","!static":false,"!category":"function","!type":"fn(sName: String, oBindingInfo: Object) -> sap.ui.base.ManagedObject","parameters":{"sName":"type: string, description: Name of a public property to bind; public aggregations of cardinality 0..1 that have an alternative, simple type (e.g. \"string\" or \"int\") can also be bound with this method","oBindingInfo":"type: object, description: Binding information"}},"isBound":{"!description":"Find out whether a property or aggregation is bound","!static":false,"!category":"function","!type":"fn(sName: String) -> Boolean","parameters":{"sName":"type: string, description: the name of the property or aggregation"}},"clone":{"!description":"Clones a tree of objects starting with the object on which clone is called first (root object).\n\nThe IDs within the newly created clone tree are derived from the original IDs by appending the given <code>sIdSuffix<\/code> (if no suffix is given, one will be created; it will be unique across multiple clone calls).\n\nThe <code>oOptions<\/code> configuration object can have the following properties: <ul> <li>The boolean value <code>cloneChildren<\/code> specifies whether associations/aggregations will be cloned<\/li> <li>The boolean value <code>cloneBindings<\/code> specifies if bindings will be cloned<\/li> <\/ul> Note: In case the configuration <code>oOptions<\/code> is specified, the default values <code>true<\/code> no longer apply, which means in case <code>cloneChildren<\/code> or <code>cloneBindings<\/code> is not specified, then this ia assumed to be <code>false<\/code> and associations/aggregations or bindings are not cloned.\n\nFor each cloned object, the following settings are cloned based on the metadata of the object and the defined options: <ul> <li>All properties that are not bound. If <code>cloneBindings<\/code> is <code>false<\/code>, also the bound properties will be cloned; in general, values are referenced 1:1, not cloned. For some property types, however, the getters or setters might clone the value (e.g. array types and properties using metadata option <code>byValue<\/code>)<\/li> <li>All aggregated objects that are not bound. If <code>cloneBindings<\/code> is <code>false<\/code>, also the ones that are bound will be cloned; they are all cloned recursively using the same <code>sIdSuffix<\/code><\/li> <li>All associated controls; when an association points to an object inside the cloned object tree, then the cloned association will be modified so that it points to the clone of the target object. When the association points to a managed object outside of the cloned object tree, then its target won't be changed.<\/li> <li>All models set via <code>setModel()<\/code>; used by reference.<\/li> <li>All property and aggregation bindings (if <code>cloneBindings<\/code> is <code>true<\/code>); the pure binding information (path, model name) is cloned, but all other information like template control or factory function, data type or formatter function are copied by reference. The bindings themselves are created anew as they are specific for the combination (object, property, model). As a result, any later changes to a binding of the original object are not reflected in the clone, but changes to e.g the type or template etc. are.<\/li> <\/ul>\n\nEach clone is created by first collecting the above mentioned settings and then creating a new instance with the normal constructor function. As a result, any side effects of mutator methods (<code>setProperty<\/code> etc.) or init hooks are repeated during clone creation. There is no need to override <code>clone()<\/code> just to reproduce these internal settings!\n\nCustom controls however can override <code>clone()<\/code> to implement additional clone steps. They usually will first call <code>clone()<\/code> on the super class and then modify the returned clone accordingly.\n\nApplications <b>must never provide<\/b> the second parameter <code>aLocaleIds<\/code>. It is determined automatically for the root object (and its non-existence also serves as an indicator for the root object). Specifying it will break the implementation of <code>clone()<\/code>.","!static":false,"!category":"function","!type":"fn(sIdSuffix?: String, aLocalIds?: [String], oOptions?: Object) -> sap.ui.base.ManagedObject","parameters":{"sIdSuffix":"type: string, description: a suffix to be appended to the cloned object ID","aLocalIds":"type: string[], description: an array of local IDs within the cloned hierarchy (internally used)","oOptions":"type: Object, description: Configuration object; when omitted, both properties default to <code>true<\/code>; when specified, undefined properties default to <code>false<\/code>"}},"toString":{"!description":"Returns a simple string representation of this managed object.\n\nMainly useful for tracing purposes.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"},"validateAggregation":{"!description":"Checks whether the given value is of the proper type for the given aggregation name.\n\nThis method is already called by {@link #setAggregation}, {@link #addAggregation} and {@link #insertAggregation}. In many cases, subclasses of ManagedObject don't need to call it again in their mutator methods.","!static":false,"!category":"function","!type":"fn(sAggregationName: String, oObject: sap.ui.base.ManagedObject | Object, bMultiple: Boolean) -> sap.ui.base.ManagedObject | Object","parameters":{"oObject":"type: sap.ui.base.ManagedObject|any, description: the aggregated object or a primitive value","bMultiple":"type: boolean, description: whether the caller assumes the aggregation to have cardinality 0..n","sAggregationName":"type: string, description: the name of the aggregation"}}},"sap.ui.core.Orientation":{"!description":"Orientation of a UI element.","Vertical":{"!description":"Arrange Vertically","!category":"enum","!type":"String"},"Horizontal":{"!description":"Arrange Horizontally","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","!category":"static class"},"jQuery.sap.storage":{"!description":"Returns a {@link jQuery.sap.storage.Storage Storage} object for a given HTML5 storage (type) and, as a convenience, provides static functions to access the default (session) storage.\n\nWhen called as a function, it returns an instance of {@link jQuery.sap.storage.Storage}, providing access to the storage of the given {@link jQuery.sap.storage.Type} or to the given HTML5 Storage object.\n\nThe default session storage can be easily accessed with methods {@link jQuery.sap.storage.get}, {@link jQuery.sap.storage.put}, {@link jQuery.sap.storage.remove}, {@link jQuery.sap.storage.clear}, {@link jQuery.sap.storage.getType} and {@link jQuery.sap.storage.removeAll}","clear":{"!description":"Deletes all the entries saved in the session (Independent of the current Storage instance!).\n\nCAUTION: This method should be called only in very particular situations, when a global erasing of data is required. Given that the method deletes the data saved under any ID, it should not be called when managing data for specific controls.","!static":"true","!category":"function","!type":"fn() -> Boolean"},"!category":"namespace","isSupported":{"!description":"Returns whether the given storage is suppported.","!static":"true","!category":"function","!type":"fn() -> Boolean"},"put":{"!description":"Stores the passed state string in the session, under the key sStorageKeyPrefix + sId.\n\nsStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)","!static":"true","!category":"function","!type":"fn(sId: String, sStateToStore: String) -> Boolean"},"remove":{"!description":"Deletes the state string stored in the session under the key sStorageKeyPrefix + sId.s\n\nsStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)","!static":"true","!category":"function","!type":"fn(sId: String) -> Boolean"},"removeAll":{"!description":"Deletes all state strings stored in the session under the key prefix sStorageKeyPrefix + sIdPrefix.\n\nsStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)","!static":"true","!category":"function","!type":"fn(sIdPrefix: String) -> Boolean"},"Type":"jQuery.sap.storage.Type","Storage":"jQuery.sap.storage.Storage","!module":"jquery.sap.storage","!helpDescription":"Returns a {@link jQuery.sap.storage.Storage Storage} object for a given HTML5 storage (type) and, as a convenience, provides static functions to access the default (session) storage.\n\nWhen called as a function, it returns an instance of {@link jQuery.sap.storage.Storage}, providing access to the storage of the given {@link jQuery.sap.storage.Type} or to the given HTML5 Storage object.\n\nThe default session storage can be easily accessed with methods {@link jQuery.sap.storage.get}, {@link jQuery.sap.storage.put}, {@link jQuery.sap.storage.remove}, {@link jQuery.sap.storage.clear}, {@link jQuery.sap.storage.getType} and {@link jQuery.sap.storage.removeAll}","getType":{"!description":"Returns the type of the storage.","!static":"true","!category":"function","!type":"fn() -> jQuery.sap.storage.Type | String"},"get":{"!description":"Retrieves the state string stored in the session under the key sStorageKeyPrefix + sId.\n\nsStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)","!static":"true","!category":"function","!type":"fn(sId: String) -> String"}},"sap.ui.core.util.serializer.Serializer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.Serializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oRootControl: sap.ui.core.Control | sap.ui.core.UIArea, serializeDelegate: Object, bSkipRoot: Boolean, fnSkipAggregations: fn(), fnSkipElement: fn())","prototype":"sap.ui.core.util.serializer.Serializer"},"sap.ui.model.TreeBindingAdapter":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","detachSelectionChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.model.TreeBindingAdapter<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.TreeBindingAdapter","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireSelectionChanged":{"!description":"Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.\n\nExpects following event parameters: <ul> <li>'leadIndex' of type <code>int<\/code> Lead selection index.<\/li> <li>'rowIndices' of type <code>int[]<\/code> Other selected indices (if available)<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.model.TreeBindingAdapter","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"!constructorDescription":"Adapter for TreeBindings to add the ListBinding functionality and use the\ntree structure in list based controls.","attachSelectionChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.model.TreeBindingAdapter<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.TreeBindingAdapter<\/code> itself.\n\nEvent is fired if the selection of tree nodes is changed in any way.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.TreeBindingAdapter","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>TreeBindingAdapter<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!module":"sap/ui/model/TreeBindingAdapter","getNodes":{"!description":"Retrieves the requested part from the tree and returns node objects.","!static":false,"!category":"function","!type":"fn(iStartIndex: Number, iLength: Number, iThreshold: Number) -> Object","parameters":{"iThreshold":"type: int, description: undefined","iStartIndex":"type: int, description: undefined","iLength":"type: int, description: undefined"}},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","!proto":"sap.ui.base.Object","!category":"class","_calculateRequestLength":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.52 This method is marked as 'protected' which was meant to be overwritten by its subclasses. It may be renamed or deleted and should only be called from this class or its subclasses.<br>Calculate the request length based on the given information","!static":false,"!category":"function","!type":"fn(iMaxGroupSize: Number, oSection: Object)","parameters":{"iMaxGroupSize":"type: int, description: the maximum group size","oSection":"type: object, description: the information of the current section"}}},"sap.ui.core.service.Service":{"!description":"A service provides a specific functionality. A service instance can be obtained by a {@link sap.ui.core.service.ServiceFactory ServiceFactory} or at a Component via {@link sap.ui.core.Component#getService getService} function.\n\nThis class is the abstract base class for services and needs to be extended: <pre>\nsap.ui.define(\"my/Service\", [\n  \"sap/ui/core/service/Service\"\n], function(Service) {\n\n  return Service.extend(\"my.Service\", {\n\n    init: function() {\n      // handle init lifecycle\n    },\n\n    exit: function() {\n      // handle exit lifecycle\n    },\n\n    doSomething: function() {\n      // some functionality\n    }\n\n });\n\n});\n<\/pre>\n\nA service instance will have a service context: <pre>\n{\n  \"scopeObject\": oComponent, // the Component instance\n  \"scopeType\": \"component\"   // the stereotype of the scopeObject\n}\n<\/pre>\n\nThe service context can be retrieved with the function <code>getContext<\/code>. This function is private to the service instance and will not be exposed via the service interface.\n\nFor consumers of the service it is recommended to provide the service instance only - as e.g. the {@link sap.ui.core.Component#getService getService} function of the Component does. The service interface can be accessed via the <code>getInterface<\/code> function.\n\nOther private functions of the service instance are the lifecycle functions. Currently there are two lifecycle functions: <code>init<\/code> and <code>exit<\/code>. In addition the <code>destroy<\/code> function will also by hidden to avoid the control of the service lifecycle for service interface consumers.","getInterface":{"!description":"Returns the public interface of the service. By default, this filters the internal functions like <code>getInterface<\/code>, <code>getContext<\/code> and all other functions starting with \"_\". Additionally the lifecycle functions <code>init<\/code>, <code>exit<\/code> and <code>destroy<\/code> will be filtered for the service interface. This function can be overridden in order to self-create a service interface.\n\nThis function is not available on the service interface.","!static":false,"!category":"function","!type":"fn() -> Object"},"init":{"!description":"Initializes the service instance after creation.\n\nApplications must not call this hook method directly, it is called by the framework while the constructor of a service is executed.\n\nSubclasses of service should override this hook to implement any necessary initialization.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.service.Service.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.Object","destroy":{"!description":"Lifecycle method to destroy the service instance.\n\nThis function is not available on the service interface.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.service.Service with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"exit":{"!description":"Cleans up the service instance before destruction.\n\nApplications must not call this hook method directly, it is called by the framework when the service is {@link #destroy destroyed}.\n\nSubclasses of service should override this hook to implement any necessary clean-up.","!static":false,"!category":"function","!type":"fn()"},"!constructorDescription":"Creates a service for the given context.","!module":"sap/ui/core/service/Service","!helpDescription":"A service provides a specific functionality. A service instance can be obtained by a {@link sap.ui.core.service.ServiceFactory ServiceFactory} or at a Component via {@link sap.ui.core.Component#getService getService} function.\n\nThis class is the abstract base class for services and needs to be extended: <pre>\nsap.ui.define(\"my/Service\", [\n  \"sap/ui/core/service/Service\"\n], function(Service) {\n\n  return Service.extend(\"my.Service\", {\n\n    init: function() {\n      // handle init lifecycle\n    },\n\n    exit: function() {\n      // handle exit lifecycle\n    },\n\n    doSomething: function() {\n      // some functionality\n    }\n\n });\n\n});\n<\/pre>\n\nA service instance will have a service context: <pre>\n{\n  \"scopeObject\": oComponent, // the Component instance\n  \"scopeType\": \"component\"   // the stereotype of the scopeObject\n}\n<\/pre>\n\nThe service context can be retrieved with the function <code>getContext<\/code>. This function is private to the service instance and will not be exposed via the service interface.\n\nFor consumers of the service it is recommended to provide the service instance only - as e.g. the {@link sap.ui.core.Component#getService getService} function of the Component does. The service interface can be accessed via the <code>getInterface<\/code> function.\n\nOther private functions of the service instance are the lifecycle functions. Currently there are two lifecycle functions: <code>init<\/code> and <code>exit<\/code>. In addition the <code>destroy<\/code> function will also by hidden to avoid the control of the service lifecycle for service interface consumers.","getContext":{"!description":"Returns the context of the service: <pre>\n{\n  \"scopeObject\": oComponent, // the Component instance\n  \"scopeType\": \"component\",   // the stereotype of the scopeObject\n  \"settings\": {} // the provided service settings\n}\n<\/pre>\n\nThis function is not available on the service interface.","!static":false,"!category":"function","!type":"fn() -> Object"}},"sap.ui.model.odata.type.Date_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Date with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Date"},"sap.ui.model.type.FileSize":{"!description":"This class represents file size simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.FileSize with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.FileSize.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a FileSize type.","!module":"sap/ui/model/type/FileSize","!helpDescription":"This class represents file size simple types.","!proto":"sap.ui.model.SimpleType","!category":"class"},"sap.ui.model.json.JSONModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oData?: Object | String, bObserve?: Boolean)","prototype":"sap.ui.model.json.JSONModel"},"sap.ui.test.OpaExtension":{"!description":"OPA extension interface.","extend":{"!description":"Creates a new subclass of class sap.ui.test.OpaExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.OpaExtension.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"OPA extension interface.","!module":"sap/ui/test/OpaExtension","!helpDescription":"OPA extension interface.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.odata.type.TimeOfDay_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.TimeOfDay with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.TimeOfDay"},"jQuery.sap":{"ownerWindow":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/getOwnerWindow} instead<br>Returns the window reference for a DomRef.","!static":"true","!category":"function","!type":"fn(oDomRef: Element) -> Window"},"validateUrl":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/URLWhitelist.validate} instead<br>Validates a URL. Check if it's not a script or other security issue.\n\nBy default the URL validation does only allow the http, https and ftp protocol. If other protocols are required, a whitelist of all allowed protocols needs to be defined.\n\nSplit URL into components and check for allowed characters according to RFC 3986:\n\n<pre>\nauthority     = [ userinfo \"@\" ] host [ \":\" port ]\nuserinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nhost          = IP-literal / IPv4address / reg-name\n\nIP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\nIPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\nIPv6address   =                            6( h16 \":\" ) ls32\n              /                       \"::\" 5( h16 \":\" ) ls32\n              / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n              / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n              / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n              / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n              / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n              / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n              / [ *6( h16 \":\" ) h16 ] \"::\"\nls32          = ( h16 \":\" h16 ) / IPv4address\n              ; least-significant 32 bits of address\nh16           = 1*4HEXDIG\n              ; 16 bits of address represented in hexadecimal\n\nIPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\ndec-octet     = DIGIT                 ; 0-9\n              / %x31-39 DIGIT         ; 10-99\n              / \"1\" 2DIGIT            ; 100-199\n              / \"2\" %x30-34 DIGIT     ; 200-249\n              / \"25\" %x30-35          ; 250-255\n\nreg-name      = *( unreserved / pct-encoded / sub-delims )\n\npct-encoded   = \"%\" HEXDIG HEXDIG\nreserved      = gen-delims / sub-delims\ngen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\nsub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\npchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\npath          = path-abempty    ; begins with \"/\" or is empty\n              / path-absolute   ; begins with \"/\" but not \"//\"\n              / path-noscheme   ; begins with a non-colon segment\n              / path-rootless   ; begins with a segment\n              / path-empty      ; zero characters\n\npath-abempty  = *( \"/\" segment )\npath-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath-noscheme = segment-nz-nc *( \"/\" segment )\npath-rootless = segment-nz *( \"/\" segment )\npath-empty    = 0<pchar>\nsegment       = *pchar\nsegment-nz    = 1*pchar\nsegment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n              ; non-zero-length segment without any colon \":\"\n\nquery         = *( pchar / \"/\" / \"?\" )\n\nfragment      = *( pchar / \"/\" / \"?\" )\n<\/pre>\n\nFor the hostname component, we are checking for valid DNS hostnames according to RFC 952 / RFC 1123:\n\n<pre>\nhname         = name *(\".\" name)\nname          = let-or-digit ( *( let-or-digit-or-hyphen ) let-or-digit )\n<\/pre>\n\nWhen the URI uses the protocol 'mailto:', the address part is additionally checked against the most commonly used parts of RFC 6068:\n\n<pre>\nmailtoURI     = \"mailto:\" [ to ] [ hfields ]\nto            = addr-spec *(\",\" addr-spec )\nhfields       = \"?\" hfield *( \"&\" hfield )\nhfield        = hfname \"=\" hfvalue\nhfname        = *qchar\nhfvalue       = *qchar\naddr-spec     = local-part \"@\" domain\nlocal-part    = dot-atom-text              // not accepted: quoted-string\ndomain        = dot-atom-text              // not accepted: \"[\" *dtext-no-obs \"]\"\ndtext-no-obs  = %d33-90 / ; Printable US-ASCII\n                %d94-126  ; characters not including\n                          ; \"[\", \"]\", or \"\\\"\nqchar         = unreserved / pct-encoded / some-delims\nsome-delims   = \"!\" / \"$\" / \"'\" / \"(\" / \")\" / \"*\"\n              / \"+\" / \",\" / \";\" / \":\" / \"@\"\n\nNote:\nA number of characters that can appear in &lt;addr-spec> MUST be\npercent-encoded.  These are the characters that cannot appear in\na URI according to [STD66] as well as \"%\" (because it is used for\npercent-encoding) and all the characters in gen-delims except \"@\"\nand \":\" (i.e., \"/\", \"?\", \"#\", \"[\", and \"]\").  Of the characters\nin sub-delims, at least the following also have to be percent-\nencoded: \"&\", \";\", and \"=\".  Care has to be taken both when\nencoding as well as when decoding to make sure these operations\nare applied only once.\n\n<\/pre>\n\nWhen a whitelist has been configured using {@link #.addUrlWhitelist addUrlWhitelist}, any URL that passes the syntactic checks above, additionally will be tested against the content of the whitelist.","!static":"true","!category":"function","!type":"fn(sUrl: String)"},"focus":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use <code>oDomRef.focus()<\/code> instead<br>Calls focus() on the given DOM element.","!static":"true","!category":"function","!type":"fn(oDomRef: Element) -> Boolean"},"KeyCodes":"jQuery.sap.KeyCodes","setObject":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/ObjectPath.set} instead<br>Sets an object property to a given value, where the property is identified by a sequence of names (path).\n\nWhen a <code>oContext<\/code> is given, the path starts in that object. Otherwise it starts in the <code>window<\/code> object that this plugin has been created for.\n\nNote: Although this method internally uses <code>object[\"key\"]<\/code> to address object properties, it does not support all possible characters in a name. Especially the dot ('.') is not supported in the individual name segments, as it is always interpreted as a name separator.","!static":"true","!category":"function","!type":"fn(sName: String, vValue: Object, oContext?: Object)"},"containsOrEquals":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/containsOrEquals} instead<br>Returns whether <code>oDomRefChild<\/code> is contained in or equal to <code>oDomRefContainer<\/code>.\n\nThis is a browser-independent version of the .contains method of Internet Explorer. For compatibility reasons it returns <code>true<\/code> if <code>oDomRefContainer<\/code> and <code>oDomRefChild<\/code> are equal.\n\nThis method intentionally does not operate on the jQuery object, as the original <code>jQuery.contains()<\/code> method also does not do so.","!static":"true","!category":"function","!type":"fn(oDomRefContainer: Element, oDomRefChild: Element) -> Boolean"},"globalEval":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Executes an 'eval' for its arguments in the global context (without closure variables).\n\nThis is a synchronous replacement for <code>jQuery.globalEval<\/code> which in some browsers (e.g. FireFox) behaves asynchronously.","!static":"true","!category":"function","!type":"fn()"},"isDeclared":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.require} instead<br>Check whether a given module has been loaded / declared already.\n\nReturns true as soon as a module has been required the first time, even when loading/executing it has not finished yet. So the main assertion of a return value of <code>true<\/code> is that the necessary actions have been taken to make the module available in the near future. It does not mean, that the content of the module is already available!\n\nThis fuzzy behavior is necessary to avoid multiple requests for the same module. As a consequence of the assertion above, a <i>preloaded<\/i> module does not count as <i>declared<\/i>. For preloaded modules, an explicit call to <code>jQuery.sap.require<\/code> is necessary to make them available.\n\nIf a caller wants to know whether a module needs to be loaded from the server, it can set <code>bIncludePreloaded<\/code> to true. Then, preloaded modules will be reported as 'declared' as well by this method.","!static":"true","!category":"function","!type":"fn(sModuleName: String, bIncludePreloaded?: Boolean) -> Boolean"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 To avoid usage of global variables in general, please do not use the jQuery.sap namespace any longer. Most of the jQuery.sap functionalities are replaced by alternative modules which can be found in the API doc.<br>Root Namespace for the jQuery plug-in provided by SAP SE.","encodeJS":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeJS} instead<br>Encode the string for inclusion into a JS string literal","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"PseudoEvents":"jQuery.sap.PseudoEvents","getObject":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/ObjectPath.get} or {@link module:sap/base/util/ObjectPath.set} instead<br>Returns a JavaScript object which is identified by a sequence of names.\n\nA call to <code>getObject(\"a.b.C\")<\/code> has essentially the same effect as accessing <code>window.a.b.C<\/code> but with the difference that missing intermediate objects (a or b in the example above) don't lead to an exception.\n\nWhen the addressed object exists, it is simply returned. If it doesn't exists, the behavior depends on the value of the second, optional parameter <code>iNoCreates<\/code> (assuming 'n' to be the number of names in the name sequence): <ul> <li>NaN: if iNoCreates is not a number and the addressed object doesn't exist, then <code>getObject()<\/code> returns <code>undefined<\/code>. <li>0 &lt; iNoCreates &lt; n: any non-existing intermediate object is created, except the <i>last<\/i> <code>iNoCreates<\/code> ones. <\/ul>\n\nExample: <pre>\n  getObject()            -- returns the context object (either param or window)\n  getObject(\"a.b.C\")     -- will only try to get a.b.C and return undefined if not found.\n  getObject(\"a.b.C\", 0)  -- will create a, b, and C in that order if they don't exists\n  getObject(\"a.b.c\", 1)  -- will create a and b, but not C.\n<\/pre>\n\nWhen a <code>oContext<\/code> is given, the search starts in that object. Otherwise it starts in the <code>window<\/code> object that this plugin has been created in.\n\nNote: Although this method internally uses <code>object[\"key\"]<\/code> to address object properties, it does not support all possible characters in a name. Especially the dot ('.') is not supported in the individual name segments, as it is always interpreted as a name separator.","!static":"true","!category":"function","!type":"fn(sName: String, iNoCreates?: Number, oContext?: Object) -> fn()"},"syncGetText":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 see {@link jQuery.sap.sjax}<br>Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'text'. If a fallback value is given, the function simply returns the response as a text or - if some error occurred - the fallback value. This is useful for applications that don't require detailed error diagnostics.\n\nIf applications need to know about occurring errors, they can either call <code>sjax()<\/code> directly or they can omit the fallback value (providing only two parameters to syncGetText()). They then receive the same complex result object as for the sjax() call.","!static":"true","!category":"function","!type":"fn(sUrl: String, data: String | Object, fallback?: String)"},"getResourceName":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Converts a UI5 module name to a unified resource name.\n\nUsed by View and Fragment APIs to convert a given module name into a unified resource name. When the <code>sSuffix<\/code> is not given, the suffix '.js' is added. This fits the most common use case of converting a module name to the Javascript resource that contains the module. Note that an empty <code>sSuffix<\/code> is not replaced by '.js'. This allows to convert UI5 module names to requireJS module names with a call to this method.","!static":"true","!category":"function","!type":"fn(sModuleName: String, sSuffix?: String)"},"require":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.52 UI5 modules and their dependencies should be defined using {@link sap.ui.define}. When additional modules have to be loaded dynamically at a later point in time, the asynchronous API {@link sap.ui.require} should be used. For more details, see {@link topic:91f23a736f4d1014b6dd926db0e91070 Modules and Dependencies} in the documentation.<br>Ensures that the given module is loaded and executed before execution of the current script continues.\n\nBy issuing a call to this method, the caller declares a dependency to the listed modules.\n\nAny required and not yet loaded script will be loaded and execute synchronously. Already loaded modules will be skipped.","!static":"true","!category":"function","!type":"fn(vModuleName: String | Object)"},"ControlEvents":"jQuery.sap.ControlEvents","util":"jQuery.sap.util","!module":"jquery.sap.global","escapeJS":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeJS} instead<br>Encode the string for inclusion into a JS string literal. Old name \"escapeJS\" kept for backward compatibility","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"includeStyleSheet":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/includeStylesheet} instead<br>Includes the specified stylesheet via a &lt;link&gt;-tag in the head of the current document. If there is call to <code>includeStylesheet<\/code> providing the sId of an already included stylesheet, the existing element will be replaced.","!static":"true","!category":"function","!type":"fn(vUrl: String | Object, vId?: String | Object, fnLoadCallback?: fn(), fnErrorCallback?: fn()) -> undefined | Promise"},"initMobile":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/Mobile.init} instead<br>Does some basic modifications to the HTML page that make it more suitable for mobile apps. Only the first call to this method is executed, subsequent calls are ignored. Note that this method is also called by the constructor of toplevel controls like sap.m.App, sap.m.SplitApp and sap.m.Shell. Exception: if no homeIcon was set, subsequent calls have the chance to set it.\n\nThe \"options\" parameter configures what exactly should be done.\n\nIt can have the following properties: <ul> <li>viewport: whether to set the viewport in a way that disables zooming (default: true)<\/li> <li>statusBar: the iOS status bar color, \"default\", \"black\" or \"black-translucent\" (default: \"default\")<\/li> <li>hideBrowser: whether the browser UI should be hidden as far as possible to make the app feel more native (default: true)<\/li> <li>preventScroll: whether native scrolling should be disabled in order to prevent the \"rubber-band\" effect where the whole window is moved (default: true)<\/li> <li>preventPhoneNumberDetection: whether Safari Mobile should be prevented from transforming any numbers that look like phone numbers into clickable links; this should be left as \"true\", otherwise it might break controls because Safari actually changes the DOM. This only affects all page content which is created after initMobile is called.<\/li> <li>rootId: the ID of the root element that should be made fullscreen; only used when hideBrowser is set (default: the document.body)<\/li> <li>useFullScreenHeight: a boolean that defines whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height (default: true)<\/li> <li>homeIcon: deprecated since 1.12, use {@link jQuery.sap.setIcons} instead. <\/ul>","!static":"true","!category":"function","!type":"fn(options?: Object)"},"unique":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/array/uniqueSort} instead<br>Sorts the given array in-place and removes any duplicates (identified by \"===\").\n\nUse <code>jQuery.unique()<\/code> for arrays of DOMElements.","!static":"true","!category":"function","!type":"fn(a: Array) -> Array"},"endsWith":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use the native solution <code>String#endsWith<\/code><br>Checks whether a given <code>sString<\/code> ends with <code>sEndString<\/code> respecting the case of the strings.","!static":"true","!category":"function","!type":"fn(sString: String, sEndString: String) -> Boolean"},"camelCase":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/strings/camelize} instead<br>Transforms a hyphen separated string to a camel case string.","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"registerModulePath":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 set path mappings via {@link sap.ui.loader.config} instead.<br>Registers a URL prefix for a module name prefix.\n\nBefore a module is loaded, the longest registered prefix of its module name is searched for and the associated URL prefix is used as a prefix for the request URL. The remainder of the module name is attached to the request URL by replacing dots ('.') with slashes ('/').\n\nThe registration and search operates on full name segments only. So when a prefix\n\n'sap.com' -> 'http://www.sap.com/ui5/resources/'\n\nis registered, then it will match the name\n\n'sap.com.Button'\n\nbut not\n\n'sap.commons.Button'\n\nNote that the empty prefix ('') will always match and thus serves as a fallback for any search.\n\nThe prefix can either be given as string or as object which contains the url and a 'final' property. If 'final' is set to true, overwriting a module prefix is not possible anymore.","!static":"true","!category":"function","!type":"fn(sModuleName: String, vUrlPrefix: String | Object)"},"disableTouchToMouseHandling":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/jquery/EventSimulation.disableTouchToMouseHandling} instead<br>Disable touch to mouse handling","!static":"true","!category":"function","!type":"fn()"},"endsWithIgnoreCase":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use the native solution <code>sString.toLowerCase().endsWith(sEndString.toLowerCase())<\/code><br>Checks whether a given <code>sString<\/code> ends with <code>sEndString<\/code> ignoring the case of the strings.","!static":"true","!category":"function","!type":"fn(sString: String, sEndString: String) -> Boolean"},"serializeXML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/XMLHelper.serialize} instead<br>Serializes the specified XML document into a string representation.","!static":"true","!category":"function","!type":"fn(oXMLDocument: String) -> Object"},"log":"jQuery.sap.log","denormalizeScrollBeginRTL":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/denormalizeScrollBeginRTL} instead<br>For the given scroll position measured from the \"beginning\" of a container (the right edge in RTL mode) this method returns the scrollLeft value as understood by the current browser in RTL mode. This value is specific to the given DOM element, as the computation may involve its dimensions.\n\nSo when oDomRef should be scrolled 2px from the beginning, the number \"2\" must be given as iNormalizedScrollBegin and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position. Low values make the right part of the content visible, high values the left part.\n\nThis method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).\n\nOnly use this method in RTL mode, as the behavior in LTR mode is undefined and may change!","!static":"true","!category":"function","!type":"fn(iNormalizedScrollBegin: Number, oDomRef: Element) -> Number"},"includeScript":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/includeScript} instead<br>Includes the script (via &lt;script&gt;-tag) into the head for the specified <code>sUrl<\/code> and optional <code>sId<\/code>.","!static":"true","!category":"function","!type":"fn(vUrl: String | Object, vId?: String | Object, fnLoadCallback?: fn(), fnErrorCallback?: fn()) -> undefined | Promise"},"domById":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use <code>document.getElementById<\/code> instead<br>Shortcut for document.getElementById().","!static":"true","!category":"function","!type":"fn(sId: String, oWindow?: Window) -> Element"},"padRight":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use the native <code>String#padEnd<\/code> instead<br>Pads a string on the right side until is has at least the given length.\n\nThe method always adds full copies of <code>sPadChar<\/code> to the given string. When <code>sPadChar<\/code> has a length > 1, the length of the returned string actually might be greater than <code>iLength<\/code>.","!static":"true","!category":"function","!type":"fn(sString: String, sPadChar: String, iLength: Number) -> String"},"registerModuleShims":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.loader.config} instead<br>Register information about third party modules that are not UI5 modules.\n\nThe information maps the name of the module (without extension '.js') to an info object. Instead of a complete info object, only the value of the <code>deps<\/code> property can be given as an array.","!static":"true","!category":"function","!type":"fn(mShims: Object)"},"uid":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/uid} instead<br>Creates and returns a pseudo-unique id.\n\nNo means for detection of overlap with already present or future UIDs.","!static":"true","!category":"function","!type":"fn() -> String"},"assert":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/assert} instead<br>A simple assertion mechanism that logs a message when a given condition is not met.\n\n<b>Note:<\/b> Calls to this method might be removed when the JavaScript code is optimized during build. Therefore, callers should not rely on any side effects of this method.","!static":"true","!category":"function","!type":"fn(bResult: Boolean, vMessage: String | fn())"},"newObject":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.45.0 use <code>Object.create(oPrototype)<\/code> instead.<br>Returns a new object which has the given <code>oPrototype<\/code> as its prototype.\n\nIf several objects with the same prototype are to be created, {@link jQuery.sap.factory} should be used instead.","!static":"true","!category":"function","!type":"fn(oPrototype: Object) -> Object"},"clearUrlWhitelist":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/URLWhitelist.clear} instead<br>Clears the whitelist for URL validation","!static":"true","!category":"function","!type":"fn()"},"encodeHTML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeXML} instead<br>Encode the string for inclusion into HTML content/attribute","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"isSpecialKey":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/isSpecialKey} instead<br>Detect whether the pressed key is: SHIFT, CONTROL, ALT, BREAK, CAPS_LOCK, PAGE_UP, PAGE_DOWN, END, HOME, ARROW_LEFT, ARROW_UP, ARROW_RIGHT, ARROW_DOWN, PRINT, INSERT, DELETE, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, BACKSPACE, TAB, ENTER, ESCAPE","!static":"true","!category":"function","!type":"fn(oEvent: jQuery.Event) -> Boolean"},"formatMessage":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/strings/formatMessage} instead<br>Creates a string from a pattern by replacing placeholders with concrete values.\n\nThe syntax of the pattern is inspired by (but not fully equivalent to) the java.util.MessageFormat.\n\nPlaceholders have the form <code>{ integer }<\/code>, where any occurrence of <code>{0}<\/code> is replaced by the value with index 0 in <code>aValues<\/code>, <code>{1}<\/code> by the value with index 1 in <code>aValues<\/code> etc.\n\nTo avoid interpretation of curly braces as placeholders, any non-placeholder fragment of the pattern can be enclosed in single quotes. The surrounding single quotes will be omitted from the result. Single quotes that are not meant to escape a fragment and that should appear in the result, need to be doubled. In the result, only a single single quote will occur.\n\nExample Pattern Strings: <pre>\n  jQuery.sap.formatMessage(\"Say {0}\",     [\"Hello\"]) -> \"Say Hello\"    // normal use case\n  jQuery.sap.formatMessage(\"Say '{0}'\",   [\"Hello\"]) -> \"Say {0}\"      // escaped placeholder\n  jQuery.sap.formatMessage(\"Say ''{0}''\", [\"Hello\"]) -> \"Say 'Hello'\"  // doubled single quote\n  jQuery.sap.formatMessage(\"Say '{0}'''\", [\"Hello\"]) -> \"Say {0}'\"     // doubled single quote in quoted fragment\n<\/pre>\n\nIn contrast to java.util.MessageFormat, format types or format styles are not supported. Everything after the argument index and up to the first closing curly brace is ignored. Nested placeholders (as supported by java.lang.MessageFormat for the format type choice) are not ignored but reported as a parse error.\n\nThis method throws an Error when the pattern syntax is not fulfilled (e.g. unbalanced curly braces, nested placeholders or a non-numerical argument index).\n\nThis method can also be used as a formatter within a binding. The first part of a composite binding will be used as pattern, the following parts as aValues. If there is only one value and this value is an array it will be handled like the default described above.","!static":"true","!category":"function","!type":"fn(sPattern: String, aValues?: [Object]) -> String"},"hyphen":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/strings/hyphenate} instead<br>Transforms a camel case string into a hyphen separated string.","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"resources.isBundle":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 Use the instanceof operator together with the class {@link module:sap/base/i18n/ResourceBundle} instead.<br>Checks if the given object is an instance of {@link jQuery.sap.util.ResourceBundle}.","!static":"true","!category":"function","!type":"fn(oBundle: jQuery.sap.util.ResourceBundle) -> Boolean"},"setMobileWebAppCapable":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/Mobile.setWebAppCapable} instead<br>Sets the \"apple-mobile-web-app-capable\" and \"mobile-web-app-capable\" meta information which defines whether the application is loaded in full screen mode (browser address bar and toolbar are hidden) after the user does \"add to home screen\" on mobile devices. Currently this meta tag is only supported by iOS Safari and mobile Chrome from version 31.\n\nIf the application opens new tabs because of attachments, url and so on, setting this to false will let the user be able to go from the new tab back to the application tab after the application is added to home screen.\n\nNote: this function only has effect when the application runs on iOS Safari and mobile Chrome from version 31.","!static":"true","!category":"function","!type":"fn(bValue: Boolean)"},"registerPreloadedModules":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Adds all resources from a preload bundle to the preload cache.\n\nWhen a resource exists already in the cache, the new content is ignored.","!static":"true","!category":"function","!type":"fn(oData: Object)"},"escapeHTML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeXML} instead<br>Encode the string for inclusion into HTML content/attribute. Old name \"escapeHTML\" kept for backward compatibility","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"scrollbarSize":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/getScrollbarSize} instead<br>Returns the size (width of the vertical / height of the horizontal) native browser scrollbars.\n\nThis function must only be used when the DOM is ready.","!static":"true","!category":"function","!type":"fn(sClasses?: String, bForce?: Boolean) -> Object"},"isResourceLoaded":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Whether the given resource has been loaded (or preloaded).","!static":"true","!category":"function","!type":"fn(sResourceName: String) -> Boolean"},"addUrlWhitelist":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/URLWhitelist.add} instead<br>Adds a whitelist entry for URL validation.","!static":"true","!category":"function","!type":"fn(protocol: String, host: String, port: String, path: String)"},"startsWithIgnoreCase":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use the native solution <code>sString.toLowerCase().startsWith(sEndString.toLowerCase())<\/code><br>Checks whether a given <code>sString<\/code> starts with <code>sStartString<\/code> ignoring the case of both strings.","!static":"true","!category":"function","!type":"fn(sString: String, sStartString: String) -> Boolean"},"getter":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Returns a new function that returns the given <code>oValue<\/code> (using its closure).\n\nAvoids the need for a dedicated member for the value.\n\nAs closures don't come for free, this function should only be used when polluting the enclosing object is an absolute \"must-not\" (as it is the case in public base classes).","!static":"true","!category":"function","!type":"fn(oValue: Object) -> fn()"},"declare":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.52 UI5 modules and their dependencies should be defined using {@link sap.ui.define}. For more details see {@link topic:91f23a736f4d1014b6dd926db0e91070 Modules and Dependencies} in the documentation.<br>Declares a module as existing.\n\nBy default, this function assumes that the module will create a JavaScript object with the same name as the module. As a convenience it ensures that the parent namespace for that object exists (by calling jQuery.sap.getObject). If such an object creation is not desired, <code>bCreateNamespace<\/code> must be set to false.","!static":"true","!category":"function","!type":"fn(sModuleName: String | Object, bCreateNamespace?: Boolean)"},"syncGetJSON":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 see {@link jQuery.sap.sjax}<br>Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'json'. If a fallback value is given, the function simply returns the response as an object or - if some error occurred - the fallback value. This is useful for applications that don't require detailed error diagnostics.\n\nIf applications need to know about occurring errors, they can either call <code>sjax()<\/code> directly or they can omit the fallback value (providing only two parameters to syncGetJSON()). They then receive the same complex result object as for the sjax() call.\n\nNote that providing \"undefined\" or \"null\" as a fallback is different from omitting the fallback (complex result).","!static":"true","!category":"function","!type":"fn(sUrl: String, data: String | Object, fallback?: Object)"},"NavType":"jQuery.sap.history.NavType","act":"jQuery.sap.act","checkMouseEnterOrLeave":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/checkMouseEnterOrLeave} instead<br>Checks a given mouseover or mouseout event whether it is equivalent to a mouseenter or mousleave event regarding the given DOM reference.","!static":"true","!category":"function","!type":"fn(oEvent: jQuery.Event, oDomRef: Element)"},"getUriParameters":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.68 use {@link module:sap/base/util/UriParameters.fromQuery UriParameters.fromQuery} or {@link module:sap/base/util/UriParameters.fromURL UriParameters.fromURL} instead.<br>Creates and returns a new instance of {@link jQuery.sap.util.UriParameters}.\n\nExample for reading a single URI parameter (or the value of the first occurrence of the URI parameter): <pre>\n\tvar sValue = jQuery.sap.getUriParameters().get(\"myUriParam\");\n<\/pre>\n\nExample for reading the values of the first of the URI parameter (with multiple occurrences): <pre>\n\tvar aValues = jQuery.sap.getUriParameters().get(\"myUriParam\", true);\n\tfor(i in aValues){\n\tvar sValue = aValues[i];\n\t}\n<\/pre>","!static":"true","!category":"function","!type":"fn(sUri: String) -> jQuery.sap.util.UriParameters"},"Version":"jQuery.sap.Version_obj","syncGet":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 see {@link jQuery.sap.sjax}<br>Convenience wrapper for {@link jQuery.sap.sjax} that enforeces the Http method GET and defaults the data type of the result to 'text'.","!static":"true","!category":"function","!type":"fn(sUrl: String, data: String | Object, sDataType?: String)"},"syncPost":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 see {@link jQuery.sap.sjax}<br>Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method POST and defaults the data type of the result to 'text'.","!static":"true","!category":"function","!type":"fn(sUrl: String, data: String | Object, sDataType?: String)"},"encodeURL":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeURL} instead<br>Encode the string for inclusion into a URL parameter","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"denormalizeScrollLeftRTL":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/dom/denormalizeScrollLeftRTL} instead<br>For the given scrollLeft value this method returns the scrollLeft value as understood by the current browser in RTL mode. This value is specific to the given DOM element, as the computation may involve its dimensions.\n\nSo when oDomRef should be scrolled 2px from the leftmost position, the number \"2\" must be given as iNormalizedScrollLeft and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.\n\nThis method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).","!static":"true","!category":"function","!type":"fn(iNormalizedScrollLeft: Number, oDomRef: Element) -> Number"},"clearDelayedCall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native <code>clearTimeout<\/code> instead<br>Stops the delayed call.\n\nThe function given when calling delayedCall is not called anymore.","!static":"true","!category":"function","!type":"fn(sDelayedCallId: String)"},"intervalCall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native <code>setInterval<\/code> instead<br>Calls a method after a given interval and returns an id for this interval.","!static":"true","!category":"function","!type":"fn(iInterval: Number, oObject: Object, method: String | Object, aParameters?: Array) -> String"},"parseXML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/XMLHelper.parse} instead<br>Parses the specified XML formatted string text using native parsing function of the browser and returns a valid XML document. If an error occurred during parsing a parse error object is returned as property (parseError) of the returned XML document object. The parse error object has the following error information parameters: errorCode, url, reason, srcText, line, linepos, filepos","!static":"true","!category":"function","!type":"fn(sXMLText: String) -> Object"},"history":"jQuery.sap.history_obj","delayedCall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native <code>setTimeout<\/code> instead<br>Calls a method after a given delay and returns an id for this timer","!static":"true","!category":"function","!type":"fn(iDelay: Number, oObject: Object, method: String | Object, aParameters?: Array) -> String"},"syncStyleClass":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/core/syncStyleClass} instead<br>Search ancestors of the given source DOM element for the specified CSS class name. If the class name is found, set it to the root DOM element of the target control. If the class name is not found, it is also removed from the target DOM element.","!static":"true","!category":"function","!type":"fn(sStyleClass: String, vSource: jQuery | sap.ui.core.Control | String, vDestination: jQuery | sap.ui.core.Control) -> jQuery | Element"},"measure":"jQuery.sap.measure","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 To avoid usage of global variables in general, please do not use the jQuery.sap namespace any longer. Most of the jQuery.sap functionalities are replaced by alternative modules which can be found in the API doc.<br>Root Namespace for the jQuery plug-in provided by SAP SE.","arraySymbolDiff":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/array/diff} instead<br>Calculate delta of old list and new list.\n\nThis function implements the algorithm described in \"A Technique for Isolating Differences Between Files\" (Commun. ACM, April 1978, Volume 21, Number 4, Pages 264-268).\n\nItems in the arrays are not compared directly. Instead, a substitute symbol is determined for each item by applying the provided function <code>fnSymbol<\/code> to it. Items with strictly equal symbols are assumed to represent the same logical item: <pre>\n  fnSymbol(a) === fnSymbol(b)   <=>   a 'is logically the same as' b\n<\/pre> As an additional constraint, casting the symbols to string should not modify the comparison result. If this second constraint is not met, this method might report more diffs than necessary.\n\nIf no symbol function is provided, a default implementation is used which applies <code>JSON.stringify<\/code> to non-string items and reduces the strings to a hash code. It is not guaranteed that this default implementation fulfills the above constraint in all cases, but it is a compromise between implementation effort, generality and performance. If items are known to be non-stringifiable (e.g. because they may contain cyclic references) or when hash collisions are likely, an own <code>fnSymbol<\/code> function must be provided.\n\nThe result of the diff is a sequence of update operations, each consisting of a <code>type<\/code> (either <code>\"insert\"<\/code> or <code>\"delete\"<\/code>) and an <code>index<\/code>. By applying the operations one after the other to the old array, it can be transformed to an array whose items are equal to the new array.\n\nSample implementation of the update <pre>\n\n function update(aOldArray, aNewArray) {\n\n   // calculate the diff\n   var aDiff = jQuery.sap.arraySymbolDiff(aOldArray, aNewArray, __provide_your_symbol_function_here__);\n\n   // apply update operations\n   aDiff.forEach( function(op) {\n\n     // invariant: aOldArray and aNewArray now are equal up to (excluding) op.index\n\n     switch ( op.type ) {\n     case 'insert':\n       // new array contains a new (or otherwise unmapped) item, add it here\n       aOldArray.splice(op.index, 0, aNewArray[op.index]);\n       break;\n     case 'delete':\n       // an item is no longer part of the array (or has been moved to another position), remove it\n       aOldArray.splice(op.index, 1);\n       break;\n     default:\n       throw new Error('unexpected diff operation type');\n     }\n\n   });\n }\n\n<\/pre>","!static":"true","!category":"function","!type":"fn(aOld: Array, aNew: Array, fnSymbol?: fn()) -> Array.<{type:string,index:int}>"},"registerResourcePath":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 set path mappings via {@link sap.ui.loader.config} instead.<br>Registers a URL prefix for a resource name prefix.\n\nBefore a resource is loaded, the longest registered prefix of its unified resource name is searched for and the associated URL prefix is used as a prefix for the request URL. The remainder of the resource name is attached to the request URL 1:1.\n\nThe registration and search operates on full name segments only. So when a prefix\n\n'sap/com' -> 'http://www.sap.com/ui5/resources/'\n\nis registered, then it will match the name\n\n'sap/com/Button'\n\nbut not\n\n'sap/commons/Button'\n\nNote that the empty prefix ('') will always match and thus serves as a fallback for any search.\n\nThe url prefix can either be given as string or as object which contains the url and a final flag. If final is set to true, overwriting a resource name prefix is not possible anymore.","!category":"enum","!type":"String"},"encodeXML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeXML} instead<br>Encode the string for inclusion into XML content/attribute","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"getModulePath":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.require.toUrl} instead<br>Constructs a URL to load the module with the given name and file type (suffix).\n\nSearches the longest prefix of the given module name for which a registration exists (see {@link jQuery.sap.registerModulePath}) and replaces that prefix by the registered URL prefix.\n\nThe remainder of the module name is appended to the URL, replacing any dot with a slash.\n\nFinally, the given suffix (typically a file name extension) is added (unconverted).\n\nThe returned name (without the suffix) doesn't end with a slash.","!static":"true","!category":"function","!type":"fn(sModuleName: String, sSuffix: String) -> String"},"encodeURLParameters":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeURLParameters} instead<br>Encode a map of parameters into a combined URL parameter string","!static":"true","!category":"function","!type":"fn(mParams: Object) -> String"},"!category":"namespace","storage":"jQuery.sap.storage","getResourcePath":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link sap.ui.require.toUrl} instead<br>Determines the URL for a resource given its unified resource name.\n\nSearches the longest prefix of the given resource name for which a registration exists (see {@link jQuery.sap.registerResourcePath}) and replaces that prefix by the registered URL prefix.\n\nThe remainder of the resource name is appended to the URL.\n\n<b>Unified Resource Names<\/b><br> Several UI5 APIs use <i>Unified Resource Names (URNs)<\/i> as naming scheme for resources that they deal with (e.h. Javascript, CSS, JSON, XML, ...). URNs are similar to the path component of a URL: <ul> <li>they consist of a non-empty sequence of name segments<\/li> <li>segments are separated by a forward slash '/'<\/li> <li>name segments consist of URL path segment characters only. It is recommended to use only ASCII letters (upper or lower case), digits and the special characters '$', '_', '-', '.')<\/li> <li>the empty name segment is not supported<\/li> <li>names consisting of dots only, are reserved and must not be used for resources<\/li> <li>names are case sensitive although the underlying server might be case-insensitive<\/li> <li>the behavior with regard to URL encoded characters is not specified, %ddd notation should be avoided<\/li> <li>the meaning of a leading slash is undefined, but might be defined in future. It therefore should be avoided<\/li> <\/ul>\n\nUI5 APIs that only deal with Javascript resources, use a slight variation of this scheme, where the extension '.js' is always omitted (see {@link sap.ui.define}, {@link sap.ui.require}).\n\n<b>Relationship to old Module Name Syntax<\/b><br>\n\nOlder UI5 APIs that deal with resources (like {@link jQuery.sap.registerModulePath}, {@link jQuery.sap.require} and {@link jQuery.sap.declare}) used a dot-separated naming scheme (called 'module names') which was motivated by object names in the global namespace in Javascript.\n\nThe new URN scheme better matches the names of the corresponding resources (files) as stored in a server and the dot ('.') is no longer a forbidden character in a resource name. This finally allows to handle resources with different types (extensions) with the same API, not only JS files.\n\nLast but not least does the URN scheme better match the naming conventions used by AMD loaders (like <code>requireJS<\/code>).","!static":"true","!category":"function","!type":"fn(sResourceName: String) -> String"},"charToUpperCase":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/strings/capitalize} instead<br>Converts one character of the string to upper case, at a given position.\n\nIf no position is given or when it is negative or beyond the last character of <code>sString<\/code>, then the first character will be converted to upper case. The first character position is 0.","!static":"true","!category":"function","!type":"fn(sString: String, iPos: Number) -> String"},"hashCode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/strings/hash} instead<br>This function generates a hash-code from a string","!static":"true","!category":"function","!type":"fn(sString: String) -> Number"},"now":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/now} instead<br>Returns a high resolution timestamp in microseconds if supported by the environment, otherwise in milliseconds. The timestamp is based on 01/01/1970 00:00:00 (UNIX epoch) as float with microsecond precision or with millisecond precision, if high resolution timestamps are not available. The fractional part of the timestamp represents fractions of a millisecond. Converting to a <code>Date<\/code> is possible by using <code>require([\"sap/base/util/now\"], function(now){new Date(now());}<\/code>","!static":"true","!category":"function","!type":"fn() -> Number"},"_loadJSResourceAsync":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Loads the given Javascript resource (URN) asynchronously via as script tag. Returns a promise that will be resolved when the load event is fired or reject when the error event is fired.\n\nNote: execution errors of the script are not reported as 'error'.\n\nThis method is not a full implementation of require. It is intended only for loading \"preload\" files that do not define an own module / module value.\n\nFunctionality might be removed/renamed in future, so no code outside the sap.ui.core library must use it.","!category":"enum","!type":"String"},"getUrlWhitelist":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/URLWhitelist.entries} instead<br>Gets the whitelist for URL validation.","!static":"true","!category":"function","!type":"fn() -> [Object]"},"bindAnyEvent":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/ControlEvents.bindAnyEvent} instead<br>Binds all events for listening with the given callback function.","!static":"true","!category":"function","!type":"fn(fnCallback: fn())"},"unbindAnyEvent":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/ControlEvents.unbindAnyEvent} instead<br>Unbinds all events for listening with the given callback function.","!static":"true","!category":"function","!type":"fn(fnCallback: fn())"},"padLeft":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use the native <code>String#padStart<\/code> instead<br>Pads a string on the left side until is has at least the given length.\n\nThe method always adds full copies of <code>sPadChar<\/code> to the given string. When <code>sPadChar<\/code> has a length > 1, the length of the returned string actually might be greater than <code>iLength<\/code>.","!static":"true","!category":"function","!type":"fn(sString: String, sPadChar: String, iLength: Number) -> String"},"factory":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.45.0 define your own function and assign <code>oPrototype<\/code> to its <code>prototype<\/code> property instead.<br>Returns a new constructor function that creates objects with the given prototype.\n\nAs of 1.45.0, this method has been deprecated. Use the following code pattern instead: <pre>\n  function MyFunction() {\n  };\n  MyFunction.prototype = oPrototype;\n<\/pre>","!static":"true","!category":"function","!type":"fn(oPrototype: Object) -> fn()"},"escapeRegExp":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/strings/escapeRegExp} instead<br>Escapes all characters that would have a special meaning in a regular expression.\n\nThis method can be used when a string with arbitrary content has to be integrated into a regular expression and when the whole string should match literally.\n\nExample: <pre>\n  var text = \"E=m*c^2\"; // text to search\n  var search = \"m*c\";   // text to search for\n\n  text.match( new RegExp(                         search  ) ); // [ \"c\" ]\n  text.match( new RegExp( jQuery.sap.escapeRegExp(search) ) ); // [ \"m*c\" ]\n<\/pre>","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"encodeCSS":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/encodeCSS} instead<br>Encode the string for inclusion into CSS string literals or identifiers","!static":"true","!category":"function","!type":"fn(sString: String) -> String"},"resources":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 Use {@link module:sap/base/i18n/ResourceBundle} instead.<br>Creates and returns a new instance of {@link jQuery.sap.util.ResourceBundle} using the given URL and locale to determine what to load.","!static":"true","!category":"function","!type":"fn(mParams?: Object) -> jQuery.sap.util.ResourceBundle | Promise"},"getAllDeclaredModules":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Returns the names of all declared modules.","!category":"enum","!type":"String"},"clearIntervalCall":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native <code>clearInterval<\/code> instead<br>Stops the interval call.\n\nThe function given when calling intervalCall is not called anymore.","!static":"true","!category":"function","!type":"fn(sIntervalCallId: String)"},"removeUrlWhitelist":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/security/URLWhitelist.delete} instead<br>Removes a whitelist entry for URL validation.","!static":"true","!category":"function","!type":"fn(iIndex: Number)"},"equal":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/deepEqual} instead<br>Compares the two given values for equality, especially takes care not to compare arrays and objects by reference, but compares their content. Note: function does not work with comparing XML objects","!static":"true","!category":"function","!type":"fn(a: Object, b: Object, maxDepth?: Number, contains?: Boolean) -> Boolean"},"arrayDiff":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 use {@link module:sap/base/util/array/diff} instead if applicable<br>Calculate delta of old list and new list.\n\nThis partly implements the algorithm described in \"A Technique for Isolating Differences Between Files\" but instead of working with hashes, it does compare each entry of the old list with each entry of the new list, which causes terrible performance on large datasets.","!static":"true","!category":"function","!type":"fn(aOld: Array, aNew: Array, fnCompare?: fn(), bUniqueEntries?: Boolean) -> Array"},"interaction":"jQuery.sap.interaction","setIcons":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/Mobile.setIcons} instead<br>Sets the bookmark icon for desktop browsers and the icon to be displayed on the home screen of iOS devices after the user does \"add to home screen\".\n\nOnly call this method once and call it early when the page is loading: browsers behave differently when the favicon is modified while the page is alive. Some update the displayed icon inside the browser but use an old icon for bookmarks. When a favicon is given, any other existing favicon in the document will be removed. When at least one home icon is given, all existing home icons will be removed and new home icon tags for all four resolutions will be created.\n\nThe home icons must be in PNG format and given in different sizes for iPad/iPhone with and without retina display. The favicon is used in the browser and for desktop shortcuts and should optimally be in ICO format: PNG does not seem to be supported by Internet Explorer and ICO files can contain different image sizes for different usage locations. E.g. a 16x16px version is used inside browsers.\n\nAll icons are given in an an object holding icon URLs and other settings. The properties of this object are: <ul> <li>phone: a 60x60 pixel version for non-retina iPhones<\/li> <li>tablet: a 76x76 pixel version for non-retina iPads<\/li> <li>phone@2: a 120x120 pixel version for retina iPhones<\/li> <li>tablet@2: a 152x152 pixel version for retina iPads<\/li> <li>precomposed: whether the home icons already have some glare effect (otherwise iOS will add it) (default: false)<\/li> <li>favicon: the ICO file to be used inside the browser and for desktop shortcuts<\/li> <\/ul>\n\nOne example is: <pre>\n{\n   'phone':'phone-icon_60x60.png',\n   'phone@2':'phone-retina_120x120.png',\n   'tablet':'tablet-icon_76x76.png',\n   'tablet@2':'tablet-retina_152x152.png',\n   'precomposed':true,\n   'favicon':'desktop.ico'\n}\n<\/pre> If one of the sizes is not given, the largest available alternative image will be used instead for this size. On Android these icons may or may not be used by the device. Apparently chances can be improved by using icons with glare effect, so the \"precomposed\" property can be set to \"true\". Some Android devices may also use the favicon for bookmarks instead of the home icons.<\/li>","!static":"true","!category":"function","!type":"fn(oIcons: Object)"},"sjax":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 It is no longer recommended to use synchronous calls at all. There are alternatives like native <code>XMLHttpRequest<\/code> or <code>jQuery.ajax<\/code> but try to avoid the sync flag. There will be no replacement for <code>jQuery.sap.sjax<\/code>.<br>Convenience wrapper around <code>jQuery.ajax()<\/code> that avoids the need for callback functions when synchronous calls are made. If the setting <code>complexResult<\/code> is true (default), then the return value is an object with the following properties <ul> <li><code>success<\/code> boolean whether the call succeeded or not <li><code>data<\/code> any the data returned by the call. For dataType 'text' this is a string, for JSON it is an object, for XML it is a document. When the call failed, then data is not defined <li><code>status<\/code> string a textual status ('success,', 'error', 'timeout',...) <li><code>statusCode<\/code> string the HTTP status code of the request <li><code>error<\/code> Error an error object (exception) in case an error occurred <li><code>errorText<\/code> string an error message in case an error occurred <\/ul>\n\nWhen <code>complexResult<\/code> is false, then in the case of success, only 'data' is returned, in case of an error the 'fallback' setting is returned (defaults to undefined).\n\nNote that async=false is always enforced by this method.","!static":"true","!category":"function","!type":"fn(oOrigSettings: String)"},"byId":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use <code>jQuery(document.getElementById(sId))<\/code> instead<br>Shortcut for jQuery(\"#\" + id) with additionally the id being escaped properly. I.e.: returns the jQuery object for the DOM element with the given id\n\nUse this method instead of jQuery(...) if you know the argument is exactly one id and the id is not known in advance because it is in a variable (as opposed to a string constant with known content).","!static":"true","!category":"function","!type":"fn(sId: String, oContext: Element) -> Object"},"properties":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/Properties.create} instead<br>Creates and returns a new instance of {@link jQuery.sap.util.Properties}.\n\nIf option 'url' is passed, immediately a load request for the given target is triggered. A property file that is loaded can contain comments with a leading ! or #. The loaded property list does not contain any comments.\n\n<b>Example for loading a property file:<\/b> <pre>\n jQuery.sap.properties({url : \"../myProperty.properties\"});\n<\/pre>\n\n<b>Example for creating an empty properties instance:<\/b> <pre>\n jQuery.sap.properties();\n<\/pre>\n\n<b>Examples for getting and setting properties:<\/b> <pre>\n\tvar oProperties = jQuery.sap.properties();\n\toProperties.setProperty(\"KEY_1\",\"Test Key\");\n\tvar sValue1 = oProperties.getProperty(\"KEY_1\");\n\tvar sValue2 = oProperties.getProperty(\"KEY_2\",\"Default\");\n<\/pre>","!static":"true","!category":"function","!type":"fn(mParams?: Object) -> jQuery.sap.util.Properties | null | Promise"},"startsWith":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use the native <code>String#startsWith<\/code><br>Checks whether a given <code>sString<\/code> starts with <code>sStartString<\/code> respecting the case of the strings.","!static":"true","!category":"function","!type":"fn(sString: String, sStartString: String) -> Boolean"}},"module:sap/ui/dom/jquery/rectContains":{"!description":"This module provides the {@link jQuery#rectContains} API.","!module":"sap/ui/dom/jquery/rectContains","!helpDescription":"This module provides the {@link jQuery#rectContains} API.","module:sap/ui/dom/jquery/rectContains":"module:sap/ui/dom/jquery/rectContains","!category":"namespace"},"sap.ui.core.DeclarativeSupport":{"!description":"Static class for enabling declarative UI support.","!module":"sap/ui/core/DeclarativeSupport","compile":{"!description":"Enhances the given DOM element by parsing the Control and Elements info and creating the SAPUI5 controls for them.","!static":true,"!category":"function","!type":"fn(oElement: Element, oView?: sap.ui.core.mvc.HTMLView, isRecursive?: Boolean)","parameters":{"oView":"type: sap.ui.core.mvc.HTMLView, description: The view instance to use","isRecursive":"type: boolean, description: Whether the call of the function is recursive.","oElement":"type: Element, description: the DOM element to compile"}},"!helpDescription":"Static class for enabling declarative UI support.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.message.MessageModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.message.MessageModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oMessageManager: sap.ui.core.message.MessageManager)","prototype":"sap.ui.model.message.MessageModel"},"sap.ui.core.routing.History_obj":{"!type":"fn(oHashChanger: sap.ui.core.routing.HashChanger)","prototype":"sap.ui.core.routing.History"},"sap.ui.model.analytics.AnalyticalBinding":{"hasChildren":{"!description":"Determines if the contexts in a specified group have further children. If so, any of these group contexts can be a parent context of a nested sub-group in a subsequent aggregation level.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context, mParameters: Object) -> Boolean","parameters":{"oContext":"type: sap.ui.model.Context, description: the parent context identifying the requested group of child contexts.","mParameters":"type: object, description: The only supported parameter is level as the level number of oContext (because the context might occur at multiple levels)"}},"getRootContexts":{"!description":"Gets the context for the root aggregation level representing the grand total for all bound measure properties.\n\nThe context is assigned to parent group ID <code>null<\/code>. If the binding is configured not to provide a grand total, this context is empty. If data for this context is not locally available yet, an OData request will be triggered to load it.\n\nThis function must be called whenever the bound set of OData entities changes, e.g., by changing selected dimensions, modifying filter conditions, etc.","!static":false,"!category":"function","!type":"fn(mParameters: Object) -> Array","parameters":{"mParameters":"type: object, description: specifying how the top-most aggregation level shall be fetched. Supported parameters are: <ul> <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically<\/li> <li>startIndex: index of first entry to return from parent group ID <code>\"/\"<\/code> (zero-based)<\/li> <li>length: number of entries to return at and after the given start index<\/li> <li>threshold: number of additional entries that shall be locally available in the binding for subsequent accesses to contexts of parent group ID <code>\"/\"<\/code> or below, if auto-expanding is selected<\/li> <\/ul>"}},"!proto":"sap.ui.model.TreeBinding","providesGrandTotal":{"!description":"Determines if the binding has been configured to provide a grand total for the selected measure properties.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!category":"class","isMeasure":{"!description":"Determines if a given name refers to a measure property","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Boolean","parameters":{"sPropertyName":"type: string, description: The property name."}},"updateAnalyticalInfo":{"!description":"Updates the binding's structure with new analytical information.\n\nAnalytical information is the mapping of UI columns to properties in the bound OData entity set. Every column object contains the name of the bound property and in addition: <ol> <li>A column bound to a dimension property has further boolean properties: <ul> <li>grouped: dimension will be used for building groups<\/li> <li>visible: if the column is visible, values for the related property will be fetched from the OData service<\/li> <li>inResult: if the column is not visible, but declared to be part of the result, values for the related property will also be fetched from the OData service<\/li> <\/ul> <\/li> <li>A column bound to a measure property has further boolean properties: <ul> <li>total: totals and sub-totals will be provided for the measure at all aggregation levels<\/li> <\/ul> <\/li> <li>A column bound to a hierarchy property has further properties: <ul> <li>grouped: boolean value; indicates whether the hierarchy will be used for building groups<\/li> <li>level: integer value; the hierarchy level is mandatory for at least one of those columns that represent the same hierarchy.<\/li> <\/ul> <\/li> <\/ol>\n\nInvoking this function resets the state of the binding and subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with this analytical information.\n\nPlease be aware that a call of this function might lead to additional back-end requests, as well as a control re-rendering later on. Whenever possible use the API of the analytical control, instead of relying on the binding.","!static":false,"!category":"function","!type":"fn(aColumns: Array)","parameters":{"aColumns":"type: array, description: an array with objects holding the analytical information for every column, from left to right."}},"getMeasureDetails":{"!description":"Gets details about the measure properties included in the bound OData entity set.","!static":false,"!category":"function","!type":"fn() -> Object"},"getAnalyticalQueryResult":{"!description":"Gets analytical metadata for the bound OData entity set.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.QueryResult"},"getPropertyQuickInfo":{"!description":"Gets the quick info of a property with a given name.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> String","parameters":{"sPropertyName":"type: string, description: The property name."}},"loadGroups":{"!description":"Loads child contexts of multiple groups.","!static":false,"!category":"function","!type":"fn(mGroupIdRanges: Object.<string,array>)","parameters":{"mGroupIdRanges":"type: Object.<string,array>, description: specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group index range is given by an object consisting of startIndex, length, threshold. For every group ID, the map holds an array of such range objects."}},"getDimensionDetails":{"!description":"Gets details about the dimension properties included in the bound OData entity set.","!static":false,"!category":"function","!type":"fn() -> Object"},"hasMeasures":{"!description":"Determines if any of the properties included in the bound OData entity set is a measure property.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getFilterInfo":{"!description":"Returns the filter information as an abstract syntax tree. Consumers must not rely on the origin information to be available, future filter implementations will not provide this information.","!static":false,"!category":"function","!type":"fn(bIncludeOrigin?: Boolean) -> Object","parameters":{"bIncludeOrigin":"type: boolean, description: whether to include information about the filter objects from which the tree has been created"}},"getNodeContexts":{"!description":"Gets child contexts for a specified parent context.\n\nContexts are returned in a stable order imposed by the dimension property that defines this aggregation level beneath the parent context: Either a sort order has been specified for this property, or the entries are returned in ascending order of the values of this dimension property by default.\n\nIf any of the requested data is missing, an OData request will be triggered to load it.","!static":false,"!category":"function","!type":"fn(mParameters: Object) -> Array","parameters":{"mParameters":"type: object, description: specifying the aggregation level for which contexts shall be fetched. Supported parameters are: <ul> <li>oContext: parent context identifying the requested group of child contexts<\/li> <li>level: level number for oContext, because it might occur at multiple levels; context with group ID <code>\"/\"<\/code> has level 0<\/li> <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically<\/li> <li>startIndex: index of first child entry to return from the parent context (zero-based)<\/li> <li>length: number of entries to return; counting begins at the given start index<\/li> <li>threshold: number of additional entries that shall be locally available in the binding for subsequent accesses to child entries of the given parent context. <\/li> <\/ul>"}},"getSortablePropertyNames":{"!description":"Gets the names of the sortable properties in the bound OData entity set.","!static":false,"!category":"function","!type":"fn() -> Array"},"getFilterablePropertyNames":{"!description":"Gets the names of the filterable properties in the bound OData entity set.","!static":false,"!category":"function","!type":"fn() -> Array"},"getPropertyHeading":{"!description":"Gets the label of a property with a given name.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> String","parameters":{"sPropertyName":"type: string, description: The property name."}},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getPropertyLabel":{"!description":"Gets the label of a property with a given name.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> String","parameters":{"sPropertyName":"type: string, description: The property name."}},"getGroupSize":{"!description":"Gets the total number of contexts contained in a group, if known.\n\nFor a given group, be aware that the group size might vary over time. In principle, this can happen if the bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding recognizes situations where the OData service returns multiple entries for a single group entry due to the fact that a measure property cannot be aggregated properly, because an amount exists in multiple currencies or a quantity exists in multiple units. In such situations, the AnalyticalBinding substitutes these entries by a single representative, and the group size gets reduced by the count of duplicate entries. Finally, since the Binding does not always fetch all children of a group at once, but only a page with a certain range, such size changes might happen after every page access.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context, iLevel: Number) -> Number","parameters":{"iLevel":"type: int, description: the level number of oContext (because the context might occur at multiple levels)","oContext":"type: sap.ui.model.Context, description: the parent context identifying the requested group of child contexts."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.analytics.AnalyticalBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getProperty":{"!description":"Gets the metadata of a property with a given name.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Object","parameters":{"sPropertyName":"type: string, description: The property name."}},"refresh":{"!description":"Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter bForceUpdate.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: Update the bound control even if no data has been changed"}},"getTotalSize":{"!description":"Gets the total number of entities in the bound OData entity set.\n\nCounting takes place at the lowest aggregation level defined by the possible value combinations for the complete set of dimension properties included in the bound entity set. This means that intermediate aggregate entities with sub-totals at higher aggregation levels are not counted.","!static":false,"!category":"function","!type":"fn() -> Number"},"sort":{"!description":"Sets sorters for retrieving the entities in the bound OData entity set in a specific order.\n\nInvoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with these sorters.","!static":false,"!category":"function","!type":"fn(aSorter: sap.ui.model.Sorter | Array) -> sap.ui.model.analytics.AnalyticalBinding","parameters":{"aSorter":"type: sap.ui.model.Sorter|array, description: a sorter object or an array of sorter objects which define the sort order."}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Sets filters for matching only a subset of the entities in the bound OData entity set.\n\nInvoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will need to trigger OData requests in order to fetch the data that are in line with these filters.","!static":false,"!category":"function","!type":"fn(aFilter: [sap.ui.model.Filter], sFilterType?: sap.ui.model.FilterType) -> sap.ui.model.analytics.AnalyticalBinding","parameters":{"aFilter":"type: sap.ui.model.Filter[]|sap.ui.model.Filter, description: an Array of sap.ui.model.Filter objects or a single Filter instance.","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted."}},"getGroupName":{"!description":"Gets a printable name for a group.\n\nThe printable name follows the pattern is <code>&lt;label&gt;:&lt;key-value&gt;[-&lt;text-value&gt;]<\/code>, where <code>label<\/code> is the label of the dimension property used at the aggregation level for the group, <code>key-value<\/code> is the key value of that dimension for the group, and <code>text-value<\/code> is the value of the associated text property, if it is also used in the binding.\n\nWhenever a formatter function has been defined for a column displaying the key or text of this dimension, the return value of this function is applied for the group name instead of the respective key or text value.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context, iLevel: Number) -> String","parameters":{"iLevel":"type: int, description: the level number of oContext (because the context might occur at multiple levels)","oContext":"type: sap.ui.model.Context, description: the parent context identifying the requested group."}},"hasAvailableNodeContexts":{"!description":"Determines if the binding has the entries of a given aggregation level locally available.\n\nIf so, no further OData request is required to fetch any of them.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context, iLevel: Number) -> Boolean","parameters":{"iLevel":"type: int, description: the level number of oContext (because the context might occur at multiple levels).","oContext":"type: sap.ui.model.Context, description: the parent context identifying the aggregation level."}},"!module":"sap/ui/model/analytics/AnalyticalBinding","getDownloadUrl":{"!description":"Get a download URL with the specified format considering the sort/filter/custom parameters.\n\nThe download URL also takes into account the selected dimensions and measures, depending on the given column definitions of the AnalyticalTable. This is based on the visible/inResult flags of the columns, as well as integrity dependencies, e.g. for mandatory Unit properties.","!static":false,"!category":"function","!type":"fn(sFormat: String) -> String","parameters":{"sFormat":"type: string, description: Value for the $format Parameter"}},"!helpDescription":"<strong style=\"color: red;\">Experimental! <\/strong>","getAnalyticalInfoForColumn":{"!description":"Gets the analytical information for a column with a given name.","!static":false,"!category":"function","!type":"fn(sColumnName: String) -> Object","parameters":{"sColumnName":"type: string, description: the column name."}}},"sap.ui.model.type.DateInterval":{"!description":"This class represents the Date interval composite type.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.DateInterval with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.DateInterval.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a Date interval type.","formatValue":{"!description":"Format the given array containing two values to an output value of type string. Other internal types than 'string' and 'any' are not supported by the date interval type. If a source format has been defined for this type, the formatValue does also accept an array with string values as input. This will be parsed into an array of Dates using the source format.\n\nIf <code>aValues<\/code> isn't an array, a format exception is thrown. If one of the elements in <code>aValues<\/code> is not defined or null, empty string will be returned.","!static":false,"!category":"function","!type":"fn(aValues: Array, sInternalType: String) -> Object","parameters":{"aValues":"type: array, description: The array of values","sInternalType":"type: string, description: The target type"}},"!module":"sap/ui/model/type/DateInterval","!helpDescription":"This class represents the Date interval composite type.","!proto":"sap.ui.model.CompositeType","!category":"class","parseValue":{"!description":"Parse a string value to an array containing two values. Parsing of other internal types than 'string' is not supported by the DateInterval type. In case a source format has been defined, the two values are formatted using the source format after parsing the inteval string and an array which contains two string values is returned.","!static":false,"!category":"function","!type":"fn(sValue: Object, sInternalType: String, aCurrentValues: Array) -> Array","parameters":{"aCurrentValues":"type: array, description: The current values of all binding parts","sValue":"type: any, description: The value to be parsed","sInternalType":"type: string, description: The source type"}}},"module:sap/ui/dom/jquery/hasTabIndex":{"!description":"This module provides the {@link jQuery#hasTabIndex} API.","!module":"sap/ui/dom/jquery/hasTabIndex","!helpDescription":"This module provides the {@link jQuery#hasTabIndex} API.","!category":"namespace","module:sap/ui/dom/jquery/hasTabIndex":"module:sap/ui/dom/jquery/hasTabIndex"},"sap.ui.model.type.TimeInterval_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.TimeInterval with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.DateInterval.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.TimeInterval"},"sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest_obj":{"!type":"fn(oDimension: sap.ui.model.analytics.odata4analytics.Dimension, oParameterizationRequest: sap.ui.model.analytics.odata4analytics.ParameterizationRequest, bUseMasterData: Boolean)","prototype":"sap.ui.model.analytics.odata4analytics.DimensionMemberSetRequest"},"sap.ui.core.support.RuleEngineOpaAssertions":{"!description":"RuleEngineOpaAssertions represents a set of methods with which OPA test assertions can be enhanced. To use this functionality, {@link sap.ui.core.support.RuleEngineOpaExtension RuleEngineOpaExtension} should be provided in the OPA extensions list.","!module":"sap/ui/core/support/RuleEngineOpaExtension","getFinalReport":{"!description":"If there are issues found the assertion result will be false and a report with all the issues will be generated in the message of the test. If no issues were found the assertion result will be true and no report will be generated.\n\nIf \"sap-skip-rules-issues=true\" is set as an URI parameter, assertion result will be always positive.","!static":"true","!category":"function","!type":"fn() -> Promise"},"!helpDescription":"RuleEngineOpaAssertions represents a set of methods with which OPA test assertions can be enhanced. To use this functionality, {@link sap.ui.core.support.RuleEngineOpaExtension RuleEngineOpaExtension} should be provided in the OPA extensions list.","getReportAsFileInFormat":{"!description":"Stores analysis history (if such) as last element in window._$files array. Accessing this array gives an opportunity to store this history in a file.","!static":"true","!category":"function","!type":"fn(options?: Object) -> Promise"},"!category":"namespace","noRuleFailures":{"!description":"Run the Support Assistant and analyze against a specific state of the application. Depending on the options passed the assertion might either fail or not if any issues were found.\n\nIf \"sap-skip-rules-issues=true\" is set as an URI parameter, assertion result will be always positive.","!static":"true","!category":"function","!type":"fn(options?: Object) -> Promise"}},"sap.ui.model.ChangeReason":{"!description":"Change Reason for Model/ListBinding/TreeBinding.","Add":{"!description":"A context was added to a binding.","!category":"enum","!type":"String"},"Binding":{"!description":"Binding changes a model property value","!category":"enum","!type":"String"},"Collapse":{"!description":"The tree node was collapsed","!category":"enum","!type":"String"},"Context":{"!description":"The list context has changed","!category":"enum","!type":"String"},"!category":"static class","Change":{"!description":"The list has changed","!category":"enum","!type":"String"},"Remove":{"!category":"enum","!type":"String"},"Refresh":{"!description":"The list was refreshed","!category":"enum","!type":"String"},"!module":"sap/ui/model/ChangeReason","Filter":{"!description":"The List was filtered","!category":"enum","!type":"String"},"Expand":{"!description":"The tree node was expanded","!category":"enum","!type":"String"},"Sort":{"!description":"The list was sorted","!category":"enum","!type":"String"}},"sap.ui.core.Title":{"!description":"Represents a title element that can be used for aggregation with other controls.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Title.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nDefines the title text","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Element","!category":"class","getEmphasized":{"!description":"Gets current value of property {@link #getEmphasized emphasized}.\n\nIf set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getIcon":{"!description":"Gets current value of property {@link #getIcon icon}.\n\nDefines the URL for icon display","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"setLevel":{"!description":"Sets a new value for property {@link #getLevel level}.\n\nDefines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.\n\nCurrently not all controls using the Title.control supporting this property.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Auto<\/code>.","!static":false,"!category":"function","!type":"fn(sLevel: sap.ui.core.TitleLevel) -> sap.ui.core.Title","parameters":{"sLevel":"type: sap.ui.core.TitleLevel, description: New value for property <code>level<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Title with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setIcon":{"!description":"Sets a new value for property {@link #getIcon icon}.\n\nDefines the URL for icon display\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIcon: sap.ui.core.URI) -> sap.ui.core.Title","parameters":{"sIcon":"type: sap.ui.core.URI, description: New value for property <code>icon<\/code>"}},"getLevel":{"!description":"Gets current value of property {@link #getLevel level}.\n\nDefines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.\n\nCurrently not all controls using the Title.control supporting this property.\n\nDefault value is <code>Auto<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.TitleLevel"},"!constructorDescription":"Constructor for a new Title.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string<\/li>\n<li>{@link #getIcon icon} : sap.ui.core.URI<\/li>\n<li>{@link #getLevel level} : sap.ui.core.TitleLevel (default: Auto)<\/li>\n<li>{@link #getEmphasized emphasized} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/Title","!helpDescription":"Represents a title element that can be used for aggregation with other controls.","setEmphasized":{"!description":"Sets a new value for property {@link #getEmphasized emphasized}.\n\nIf set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bEmphasized: Boolean) -> sap.ui.core.Title","parameters":{"bEmphasized":"type: boolean, description: New value for property <code>emphasized<\/code>"}},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nDefines the title text\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.Title","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.model.Type":{"!description":"This is an abstract base class for type objects.","extend":{"!description":"Creates a new subclass of class sap.ui.model.Type with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getInterface":{"!description":"Overrides the {@link sap.ui.base.Object#getInterface} to avoid creating an <code>Interface<\/code> object for types.","!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.Type.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new Type.","getName":{"!description":"Returns the name of this type.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/Type","!helpDescription":"This is an abstract base class for type objects.","!proto":"sap.ui.base.Object","!category":"class","toString":{"!description":"Returns a simple string representation of this type. Mainly useful for tracing purposes.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"}},"module:sap/ui/performance/Measurement":{"!description":"Performance Measurement API.","add":{"!description":"Adds a performance measurement with all data.\n\nThis is useful to add external measurements (e.g. from a backend) to the common measurement UI","!category":"function","!type":"fn(sId: String, sInfo: String, iStart: Number, iEnd: Number, iTime: Number, iDuration: Number, aCategories?: [String | String]) -> Object"},"filterMeasurements":{"!description":"Gets all performance measurements where a provided filter function returns a truthy value.\n\nIf neither a filter function nor a category is provided an empty array is returned. To filter for certain properties of measurements a fnFilter can be implemented like this <code> function(oMeasurement) { return oMeasurement.duration > 50; }<\/code>","!category":"function","!type":"fn(fnFilter?: fn(), bCompleted?: Boolean | undefined, aCategories?: [String], fnFilter?: fn(), bCompleted?: Boolean | undefined, aCategories?: [String]) -> [module:sap/ui/performance/Measurement.Entry]"},"registerMethod":{"!description":"Registers an average measurement for a given objects method.","!category":"function","!type":"fn(sId: String, oObject: Object, sMethod: String, aCategories?: [String]) -> Boolean"},"resume":{"!description":"Resumes a performance measure.","!category":"function","!type":"fn(sId: String) -> Object"},"average":{"!description":"Starts an average performance measure.\n\nThe duration of this measure is an avarage of durations measured for each call. Optionally a category or list of categories can be passed to allow filtering of measurements.","!category":"function","!type":"fn(sId: String, sInfo: String, aCategories?: [String | String]) -> Object"},"clear":{"!description":"Clears all performance measurements.","!category":"function","!type":"fn()"},"start":{"!description":"Starts a performance measure.\n\nOptionally a category or list of categories can be passed to allow filtering of measurements.","!category":"function","!type":"fn(sId: String, sInfo: String, aCategories?: [String | String]) -> Object"},"!category":"namespace","unregisterMethod":{"!description":"Unregisters an average measurement for a given objects method.","!category":"function","!type":"fn(sId: String, oObject: Object, sMethod: String) -> Boolean"},"pause":{"!description":"Pauses a performance measure.","!category":"function","!type":"fn(sId: String) -> Object"},"remove":{"!description":"Removes a performance measure.","!category":"function","!type":"fn(sId: String)"},"getMeasurement":{"!description":"Gets a performance measure.","!category":"function","!type":"fn(sId: String) -> module:sap/ui/performance/Measurement.Entry"},"getAllMeasurements":{"!description":"Gets all performance measurements.","!category":"function","!type":"fn(bCompleted?: Boolean, bCompleted?: Boolean) -> module:sap/ui/performance/Measurement.Entry"},"setActive":{"!description":"Activates or deactivates the performance measure functionality.\n\nOptionally a category or list of categories can be passed to restrict measurements to certain categories like \"javascript\", \"require\", \"xmlhttprequest\", \"render\"","!category":"function","!type":"fn(bOn: Boolean, aCategories: [String | String]) -> Boolean"},"!module":"sap/ui/performance/Measurement","!helpDescription":"Performance Measurement API.","unregisterAllMethods":{"!description":"Unregisters all average measurements.","!category":"function","!type":"fn()"},"module:sap/ui/performance/Measurement":"module:sap/ui/performance/Measurement","end":{"!description":"Ends a performance measure.","!category":"function","!type":"fn(sId: String) -> Object"},"getActive":{"!description":"Gets the current state of the performance measurement functionality.","!category":"function","!type":"fn() -> Boolean"}},"jQuery.sap.PseudoEvents":{"sapright":{"!description":"Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapnext":{"!description":"Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapexpandmodifiers":{"!description":"Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"saptabnext":{"!description":"Pseudo event for keyboard tab (TAB + no modifier)","!category":"enum","!type":"String"},"sapnextmodifiers":{"!description":"Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapincrease":{"!description":"Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"saphome":{"!description":"Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapdownmodifiers":{"!description":"Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapshow":{"!description":"Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)","!category":"enum","!type":"String"},"sapexpand":{"!description":"Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapleftmodifiers":{"!description":"Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapselect":{"!description":"Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapdeletemodifiers":{"!description":"Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapbackspace":{"!description":"Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/PseudoEvents.events} instead<br>Enumeration of all so called \"pseudo events\", a useful classification of standard browser events as implied by SAP product standards.\n\nWhenever a browser event is recognized as one or more pseudo events, then this classification is attached to the original {@link jQuery.Event} object and thereby delivered to any jQuery-style listeners registered for that browser event.\n\nPure JavaScript listeners can evaluate the classification information using the {@link jQuery.Event#isPseudoType} method.\n\nInstead of using the procedure as described above, the SAPUI5 controls and elements should simply implement an <code>on<i>pseudo-event<\/i>(oEvent)<\/code> method. It will be invoked only when that specific pseudo event has been recognized. This simplifies event dispatching even further.","sappageup":{"!description":"Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapcollapsemodifiers":{"!description":"Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"saphomemodifiers":{"!description":"Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapleft":{"!description":"Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapincreasemodifiers":{"!description":"Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapplus":{"!description":"Pseudo event for pressing the '+' (plus) sign.","!category":"enum","!type":"String"},"saprightmodifiers":{"!description":"Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapskipback":{"!description":"Pseudo event for pseudo skip back (F6 + shift modifier)","!category":"enum","!type":"String"},"sapdecrease":{"!description":"Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"!module":"jquery.sap.events","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/PseudoEvents.events} instead<br>Enumeration of all so called \"pseudo events\", a useful classification of standard browser events as implied by SAP product standards.\n\nWhenever a browser event is recognized as one or more pseudo events, then this classification is attached to the original {@link jQuery.Event} object and thereby delivered to any jQuery-style listeners registered for that browser event.\n\nPure JavaScript listeners can evaluate the classification information using the {@link jQuery.Event#isPseudoType} method.\n\nInstead of using the procedure as described above, the SAPUI5 controls and elements should simply implement an <code>on<i>pseudo-event<\/i>(oEvent)<\/code> method. It will be invoked only when that specific pseudo event has been recognized. This simplifies event dispatching even further.","sapcollapseall":{"!description":"Pseudo event for pseudo collapse event (keyboard numpad *)","!category":"enum","!type":"String"},"sapdelete":{"!description":"Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapescape":{"!description":"Pseudo event for keyboard escape","!category":"enum","!type":"String"},"sapdown":{"!description":"Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapupmodifiers":{"!description":"Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"!category":"namespace","sapendmodifiers":{"!description":"Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapprevious":{"!description":"Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"saptabprevious":{"!description":"Pseudo event for keyboard tab (TAB + shift modifier)","!category":"enum","!type":"String"},"sappagedown":{"!description":"Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapselectmodifiers":{"!description":"Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sappageupmodifiers":{"!description":"Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapbottom":{"!description":"Pseudo event for pseudo bottom event","!category":"enum","!type":"String"},"sapcollapse":{"!description":"Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sappreviousmodifiers":{"!description":"Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapskipforward":{"!description":"Pseudo event for pseudo skip forward (F6 + no modifier)","!category":"enum","!type":"String"},"sapdelayeddoubleclick":{"!description":"Pseudo event indicating delayed double click (e.g. for inline edit)","!category":"enum","!type":"String"},"saphide":{"!description":"Pseudo event for pseudo 'hide' event (Alt + up-Arrow)","!category":"enum","!type":"String"},"sapspacemodifiers":{"!description":"Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapspace":{"!description":"Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapend":{"!description":"Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapenter":{"!description":"Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapbackspacemodifiers":{"!description":"Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapentermodifiers":{"!description":"Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"saptop":{"!description":"Pseudo event for pseudo top event","!category":"enum","!type":"String"},"sapdecreasemodifiers":{"!description":"Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapminus":{"!description":"Pseudo event for pressing the '-' (minus) sign.","!category":"enum","!type":"String"},"sappagedownmodifiers":{"!description":"Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"},"sapup":{"!description":"Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)","!category":"enum","!type":"String"}},"sap.ui.model.ClientTreeBinding":{"!description":"Tree binding implementation for client models.\n\nPlease Note that a hierarchy's \"state\" (i.e. the information about expanded, collapsed, selected, and deselected nodes) may become inconsistent when the structure of the model data is changed at runtime. This is because each node is identified internally by its index position relative to its parent, plus its parent's ID. Therefore, inserting or removing a node in the model data will likely lead to a shift in the index positions of other nodes, causing them to lose their state and/or to gain the state of another node.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ClientTreeBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"hasChildren":{"!description":"Returns if the node has child nodes.","!static":false,"!category":"function","!type":"fn(oContext: Object) -> Boolean","parameters":{"oContext":"type: object, description: the context element of the node"}},"getRootContexts":{"!description":"Return root contexts for the tree","!static":false,"!category":"function","!type":"fn(iStartIndex: Number, iLength: Number) -> [Object]","parameters":{"iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index."}},"!proto":"sap.ui.model.TreeBinding","!category":"class","sort":{"!description":"Sorts the contexts of this ClientTreeBinding. The tree will be sorted level by level. So the nodes are NOT sorted absolute, but relative to their parent node, to keep the hierarchy untouched.","!static":false,"!category":"function","!type":"fn(an: [sap.ui.model.Sorter]) -> sap.ui.model.ClientTreeBinding","parameters":{"an":"type: sap.ui.model.Sorter[], description: array of Sorter instances which will be applied"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientTreeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Filters the tree according to the filter definitions.\n\nThe filtering is applied recursively through the tree. The parent nodes of filtered child nodes will also be displayed if they don't match the filter conditions. All filters belonging to a group (=have the same path) are ORed and after that the results of all groups are ANDed.","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter | sap.ui.model.Filter], sFilterType: sap.ui.model.FilterType) -> sap.ui.model.ClientTreeBinding","parameters":{"aFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Single filter object or an array of filter objects","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted, if it is not given, the standard behaviour applies"}},"!constructorDescription":"Creates a new ClientTreeBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.Model#bindTree Model#bindTree} on the corresponding model implementation instead.","!module":"sap/ui/model/ClientTreeBinding","!helpDescription":"Tree binding implementation for client models.\n\nPlease Note that a hierarchy's \"state\" (i.e. the information about expanded, collapsed, selected, and deselected nodes) may become inconsistent when the structure of the model data is changed at runtime. This is because each node is identified internally by its index position relative to its parent, plus its parent's ID. Therefore, inserting or removing a node in the model data will likely lead to a shift in the index positions of other nodes, causing them to lose their state and/or to gain the state of another node.","getNodeContexts":{"!description":"Return node contexts for the tree","!static":false,"!category":"function","!type":"fn(oContext: Object, iStartIndex: Number, iLength: Number) -> [Object]","parameters":{"oContext":"type: object, description: to use for retrieving the node contexts","iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index."}}},"sap.ui.core.hyphenation":{"Hyphenation":"sap.ui.core.hyphenation.Hyphenation_obj","!category":"namespace"},"sap.ui.test.RecordReplay":{"!description":"Record-and-replay implementation for OPA5.","extend":{"!description":"Creates a new subclass of class sap.ui.test.RecordReplay with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"findControlSelectorByDOMElement":{"!description":"Find the best control selector for a DOM element. A selector uniquely represents a single element. The 'best' selector is the one with which it is most likely to uniquely identify a control with the least possible inspection of the control tree.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<(sap.ui.test.RecordReplay.ControlSelector | Error)>","parameters":{"oOptions":"type: object, description: Options to influence the generation of the selector"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.RecordReplay.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"findDOMElementByControlSelector":{"!description":"Find DOM element representation of a control specified by a selector object.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<(Element | Error)>","parameters":{"oOptions":"type: object, description: Options for the search"}},"!module":"sap/ui/test/RecordReplay","!helpDescription":"Record-and-replay implementation for OPA5.","interactWithControl":{"!description":"Interact with specific control.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<(undefined | Error)>","parameters":{"oOptions":"type: object, description: Options for the interaction"}},"!proto":"sap.ui.base.Object","waitForUI5":{"!description":"Wait for UI5 to complete processing, poll until all asynchronous work is finished, or timeout.","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<(undefined | Error)>","parameters":{"oOptions":"type: object, description: Override default wait options like polling timeout and interval"}},"!category":"class"},"sap.ui.model.odata.type.SByte":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.SByte<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.SByte with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.SByte.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.SByte<\/code>.","getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/SByte","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.SByte<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","getRange":{"!description":"Returns the type's supported range as object with properties <code>minimum<\/code> and <code>maximum<\/code>.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.model.odata.type.Int","!category":"class"},"sap.ui.model.odata.v4.ODataUtils":{"!description":"A collection of methods which help to consume OData V4 services.","compare":{"!description":"Compares the given OData values.","!static":"true","!category":"function","!type":"fn(vValue1: Object, vValue2: Object, vEdmType?: Boolean | String) -> Number"},"parseDateTimeOffset":{"!description":"Parses an \"Edm.DateTimeOffset\" value and returns the corresponding JavaScript <code>Date<\/code> value.","!static":"true","!category":"function","!type":"fn(sDateTimeOffset: String) -> Date"},"!module":"sap/ui/model/odata/v4/ODataUtils","parseDate":{"!description":"Parses an \"Edm.Date\" value and returns the corresponding JavaScript <code>Date<\/code> value (UTC with a time value of \"00:00:00\").","!static":"true","!category":"function","!type":"fn(sDate: String) -> Date"},"!helpDescription":"A collection of methods which help to consume OData V4 services.","!category":"namespace","parseTimeOfDay":{"!description":"Parses an \"Edm.TimeOfDay\" value and returns the corresponding JavaScript <code>Date<\/code> value (UTC with a date value of \"1970-01-01\").","!static":"true","!category":"function","!type":"fn(sTimeOfDay: String) -> Date"},"formatLiteral":{"!description":"Formats the given OData value into a literal suitable for usage in data binding paths and URLs.","!static":"true","!category":"function","!type":"fn(vValue: Object, sType: String) -> String"}},"sap.ui.model.odata.v4.ODataMetaModel":{"bindList":{"!description":"Creates a list binding for this metadata model which iterates content from the given path (relative to the given context), sorted and filtered as indicated.\n\nBy default, OData names are iterated and a trailing slash is implicitly added to the path (see {@link #requestObject} for the effects this has); technical properties and inline annotations are filtered out.\n\nA path which ends with an \"@\" segment can be used to iterate all inline or external targeting annotations; no trailing slash is added implicitly; technical properties and OData names are filtered out.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter]) -> sap.ui.model.ListBinding","parameters":{"aFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: Initial application filter(s), see {@link sap.ui.model.ListBinding#filter}; filters with filter operators \"All\" or \"Any\" are not supported","sPath":"type: string, description: A relative or absolute path within the metadata model, for example \"/EMPLOYEES\"","oContext":"type: sap.ui.model.Context, description: The context to be used as a starting point in case of a relative path","aSorters":"type: sap.ui.model.Sorter|sap.ui.model.Sorter[], description: Initial sort order, see {@link sap.ui.model.ListBinding#sort}"}},"getMetaContext":{"!description":"Returns the OData metadata model context corresponding to the given OData data model path.","!static":false,"!category":"function","!type":"fn(sPath: String) -> sap.ui.model.Context","parameters":{"sPath":"type: string, description: An absolute data path within the OData data model, for example \"/EMPLOYEES/0/ENTRYDATE\""}},"getLastModified":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.51.0 use {@link #getETags} instead because modifications to old files may be shadowed by a new file in certain scenarios.<br>Returns the maximum value of all \"Last-Modified\" response headers seen so far.","!static":false,"!category":"function","!type":"fn() -> Date"},"bindTree":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"getOriginalProperty":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.model.MetaModel","setLegacySyntax":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"!category":"class","getUI5Type":{"!description":"Returns the UI5 type for the given property path that formats and parses corresponding to the property's EDM type and constraints. The property's type must be a primitive type. Use {@link #requestUI5Type} for asynchronous access.","!static":false,"!category":"function","!type":"fn(sPath: String) -> sap.ui.model.odata.type.ODataType","parameters":{"sPath":"type: string, description: An absolute path to an OData property within the OData data model"}},"!constructorDescription":"Do <strong>NOT<\/strong> call this private constructor, but rather use\n{@link sap.ui.model.odata.v4.ODataModel#getMetaModel} instead.","requestCurrencyCodes":{"!description":"Request currency customizing based on the code list reference given in the entity container's <code>com.sap.vocabularies.CodeList.v1.CurrencyCodes<\/code> annotation. The corresponding HTTP request uses the HTTP headers obtained via {@link sap.ui.model.odata.v4.ODataModel#getHttpHeaders} from this meta model's data model.","!static":false,"!category":"function","!type":"fn(vRawValue?: Object, oDetails?: Object) -> Promise","parameters":{"oDetails":"type: object, description: The details object","vRawValue":"type: any, description: If present, it must be this meta model's root entity container"}},"requestData":{"!description":"Requests a snapshot of each $metadata or annotation file loaded so far, combined into a single \"JSON\" object according to the streamlined OData V4 Metadata JSON Format. It is a map from all currently known qualified names to their values, with the special key \"$EntityContainer\" mapped to the root entity container's qualified name as a starting point. See {@link topic:87aac894a40640f89920d7b2a414499b OData V4 Metadata JSON Format}.\n\nNote that this snapshot may change due to load-on-demand of \"cross-service references\" (see parameter <code>supportReferences<\/code> of {@link sap.ui.model.odata.v4.ODataModel#constructor}).","!static":false,"!category":"function","!type":"fn() -> Promise"},"getData":{"!description":"Returns a snapshot of each $metadata or annotation file loaded so far, combined into a single \"JSON\" object according to the streamlined OData V4 Metadata JSON Format.","!static":false,"!category":"function","!type":"fn() -> Object"},"!description":"Implementation of an OData metadata model which offers access to OData V4 metadata. The meta model does not support any public events; attaching an event handler leads to an error.\n\nThis model is read-only.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v4.ODataMetaModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getObject":{"!description":"Returns the metadata object for the given path relative to the given context. Returns <code>undefined<\/code> in case the metadata is not (yet) available. Use {@link #requestObject} for asynchronous access.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, mParameters?: Object) -> Object","parameters":{"sPath":"type: string, description: A relative or absolute path within the metadata model","oContext":"type: sap.ui.model.Context, description: The context to be used as a starting point in case of a relative path","mParameters":"type: object, description: Optional (binding) parameters; if they are given, <code>oContext<\/code> cannot be omitted"}},"getProperty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.37.0 use {@link #getObject}.<br>undefined","!static":false,"!category":"function","!type":"fn()"},"requestValueListType":{"!description":"Determines which type of value list exists for the given property.","!static":false,"!category":"function","!type":"fn(sPropertyPath: String) -> Promise","parameters":{"sPropertyPath":"type: string, description: An absolute path to an OData property within the OData data model"}},"refresh":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataMetaModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"bindProperty":{"!description":"Creates a property binding for this meta data model which refers to the content from the given path (relative to the given context).","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, mParameters?: Object) -> sap.ui.model.PropertyBinding","parameters":{"sPath":"type: string, description: A relative or absolute path within the meta data model, for example \"/EMPLOYEES/ENTRYDATE\"","oContext":"type: sap.ui.model.Context, description: The context to be used as a starting point in case of a relative path","mParameters":"type: object, description: Optional binding parameters that are passed to {@link #getObject} to compute the binding's value; if they are given, <code>oContext<\/code> cannot be omitted"}},"!module":"sap/ui/model/odata/v4/ODataMetaModel","!helpDescription":"Implementation of an OData metadata model which offers access to OData V4 metadata. The meta model does not support any public events; attaching an event handler leads to an error.\n\nThis model is read-only.","requestValueListInfo":{"!description":"Requests information to retrieve a value list for the property given by <code>sPropertyPath<\/code>.","!static":false,"!category":"function","!type":"fn(sPropertyPath: String, bAutoExpandSelect?: Boolean) -> Promise","parameters":{"sPropertyPath":"type: string, description: An absolute path to an OData property within the OData data model or a (meta) path to an operation parameter, for example \"/TEAMS(1)/acme.NewAction/Team_ID\"","bAutoExpandSelect":"type: boolean, description: The value of the parameter <code>autoExpandSelect<\/code> for value list models created by this method. If the value list model is the data model associated with this meta model, this flag has no effect. Supported since 1.68.0"}},"requestUI5Type":{"!description":"Requests the UI5 type for the given property path that formats and parses corresponding to the property's EDM type and constraints. The property's type must be a primitive type. Use {@link #getUI5Type} for synchronous access.","!static":false,"!category":"function","!type":"fn(sPath: String) -> Promise","parameters":{"sPath":"type: string, description: An absolute path to an OData property within the OData data model"}},"toString":{"!description":"Returns a string representation of this object including the URL to the $metadata document of the service.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"},"getETags":{"!description":"Returns a map of entity tags for each $metadata or annotation file loaded so far.","!static":false,"!category":"function","!type":"fn() -> Object"},"getValueListType":{"!description":"Determines which type of value list exists for the given property.","!static":false,"!category":"function","!type":"fn(sPropertyPath: String) -> sap.ui.model.odata.v4.ValueListType","parameters":{"sPropertyPath":"type: string, description: An absolute path to an OData property within the OData data model"}},"requestObject":{"!description":"Requests the metadata value for the given path relative to the given context. Returns a <code>Promise<\/code> which is resolved with the requested metadata value or rejected with an error (only in case metadata cannot be loaded). An invalid path leads to an <code>undefined<\/code> result and a warning is logged. Use {@link #getObject} for synchronous access.\n\nA relative path is appended to the context's path separated by a forward slash(\"/\"). A relative path starting with \"@\" (that is, an annotation) is appended without a separator. Use \"./\" as a prefix for such a relative path to enforce a separator.\n\nExample: <pre>\n&lt;template:with path=\"/EMPLOYEES/ENTRYDATE\" var=\"property\">\n  &lt;!-- /EMPLOYEES/ENTRYDATE/$Type -->\n  \"{property>$Type}\"\n\n  &lt;!-- /EMPLOYEES/ENTRYDATE@com.sap.vocabularies.Common.v1.Text -->\n  \"{property>@com.sap.vocabularies.Common.v1.Text}\"\n\n  &lt;!-- /EMPLOYEES/ENTRYDATE/@com.sap.vocabularies.Common.v1.Text -->\n  \"{property>./@com.sap.vocabularies.Common.v1.Text}\"\n&lt;/template:with>\n<\/pre>\n\nThe basic idea is that every path described in \"14.2.1 Attribute Target\" in specification \"OData Version 4.0 Part 3: Common Schema Definition Language\" is a valid absolute path within the metadata model if a leading slash is added; for example \"/\" + \"MySchema.MyEntityContainer/MyEntitySet/MyComplexProperty/MyNavigationProperty\". Also, every path described in \"14.5.2 Expression edm:AnnotationPath\", \"14.5.11 Expression edm:NavigationPropertyPath\", \"14.5.12 Expression edm:Path\", and \"14.5.13 Expression edm:PropertyPath\" is a valid relative path within the metadata model if a suitable prefix is added which addresses an entity container, entity set, singleton, complex type, entity type, or property; for example \"/MySchema.MyEntityType/MyProperty\" + \"@vCard.Address#work/FullName\".\n\nThe absolute path is split into segments and followed step-by-step, starting at the global scope of all known qualified OData names. There are two technical properties there: \"$Version\" (typically \"4.0\") and \"$EntityContainer\" with the name of the single entity container for this metadata model's service.\n\nAn empty segment in between is invalid, except to force return type lookup for operation overloads (see below). An empty segment at the end caused by a trailing slash differentiates between a name and the object it refers to. This way, \"/$EntityContainer\" refers to the name of the single entity container and \"/$EntityContainer/\" refers to the single entity container as an object.\n\nThe segment \"@sapui.name\" refers back to the last OData name (simple identifier or qualified name) or annotation name encountered during path traversal immediately before \"@sapui.name\": <ul> <li> \"/EMPLOYEES@sapui.name\" results in \"EMPLOYEES\" and \"/EMPLOYEES/@sapui.name\" results in the same as \"/EMPLOYEES/$Type\", that is, the qualified name of the entity set's type (see below how \"$Type\" is inserted implicitly). Note how the separating slash again makes a difference here. <li> \"/EMPLOYEES/@com.sap.vocabularies.Common.v1.Label@sapui.name\" results in \"@com.sap.vocabularies.Common.v1.Label\" and a slash does not make any difference as long as the annotation does not have a \"$Type\" property. <li> A technical property (that is, a numerical segment or one starting with a \"$\") immediately before \"@sapui.name\" is invalid, for example \"/$EntityContainer@sapui.name\". <\/ul> The path must not continue after \"@sapui.name\".\n\nIf the current object is a string value, that string value is treated as a relative path and followed step-by-step before the next segment is processed. Except for this, a path must not continue if it comes across a non-object value. Such a string value can be a qualified name (example path \"/$EntityContainer/...\"), a simple identifier (example path \"/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/...\") including the special name \"$ReturnType\" (since 1.71.0), or even a path according to \"14.5.12 Expression edm:Path\" etc. (example path \"/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/...\".\n\nSegments starting with an \"@\" character, for example \"@com.sap.vocabularies.Common.v1.Label\", address annotations at the current object. As the first segment, they refer to the single entity container. For objects which can only be annotated inline (see \"14.3 Element edm:Annotation\" minus \"14.2.1 Attribute Target\"), the object already contains the annotations as a property. For objects which can (only or also) be annotated via external targeting, the object does not contain any annotation as a property. Such annotations MUST be accessed via a path. Such objects include operations (that is, actions and functions) and their parameters, which can be annotated for a single overload or for all overloads at the same time.\n\nSegments starting with an OData name followed by an \"@\" character, for example \"/TEAMS@Org.OData.Capabilities.V1.TopSupported\", address annotations at an entity set, singleton, or property, not at the corresponding type. In contrast, \"/TEAMS/@com.sap.vocabularies.Common.v1.Deletable\" (note the separating slash) addresses an annotation at the entity set's type. This is in line with the special rule of \"14.5.12 Expression edm:Path\" regarding annotations at a navigation property itself.\n\n\"@\" can be used as a segment to address a map of all annotations of the current object. This is useful for iteration, for example via <code>&lt;template:repeat list=\"{entityType>@}\" ...><\/code>.\n\nAnnotations of an annotation are addressed not by two separate segments, but by a single segment like \"@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.Common.v1.TextArrangement\". Each annotation can have a qualifier, for example \"@first#foo@second#bar\". Note: If the first annotation's value is a record, a separate segment addresses an annotation of that record, not an annotation of the first annotation itself. In a similar way, annotations of \"7.2 Element edm:ReferentialConstraint\", \"7.3 Element edm:OnDelete\", \"10.2 Element edm:Member\" and \"14.5.14.2 Element edm:PropertyValue\" are addressed by segments like \"&lt;7.2.1 Attribute Property>@...\", \"$OnDelete@...\", \"&lt;10.2.1 Attribute Name>@...\" and \"&lt;14.5.14.2.1 Attribute Property>@...\" (where angle brackets denote a variable part and sections refer to specification \"OData Version 4.0 Part 3: Common Schema Definition Language\").\n\nAnnotations starting with \"@@\", for example \"@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple\" or \"@@.AH.isMultiple\" or \"@@.isMultiple\", represent computed annotations. Their name without the \"@@\" prefix must refer to a function in <code>mParameters.scope<\/code> in case of a relative name starting with a dot, which is stripped before lookup; see the <code>&lt;template:alias><\/code> instruction for XML Templating. In case of an absolute name, it is searched in <code>mParameters.scope<\/code> first and then in the global namespace. The names \"requestCurrencyCodes\" and \"requestUnitsOfMeasure\" default to {@link #requestCurrencyCodes} and {@link #requestUnitsOfMeasure} resp. if not present in <code>mParameters.scope<\/code>. This function is called with the current object (or primitive value) and additional details and returns the result of this {@link #requestObject} call. The additional details are given as an object with the following properties: <ul> <li><code>{boolean} $$valueAsPromise<\/code> Whether the computed annotation may return a <code>Promise<\/code> resolving with its value (since 1.57.0) <li><code>{@link sap.ui.model.Context} context<\/code> Points to the current object <li><code>{object} overload<\/code> In case of annotations of an operation or a parameter, if filtering by binding parameter determines a single operation overload, that overload is passed (since 1.71.0), else <code>undefined<\/code> <li><code>{string} schemaChildName<\/code> The qualified name of the schema child where the computed annotation has been found <\/ul> Computed annotations cannot be iterated by \"@\". The path must not continue after a computed annotation.\n\nA segment which represents an OData qualified name is looked up in the global scope (\"scope lookup\") and thus determines a schema child which is used later on. Unknown qualified names are invalid. This way, \"/acme.DefaultContainer/EMPLOYEES\" addresses the \"EMPLOYEES\" child of the schema child named \"acme.DefaultContainer\". This also works indirectly (\"/$EntityContainer/EMPLOYEES\") and implicitly (\"/EMPLOYEES\", see below).\n\nA segment which represents an OData simple identifier (or the special names \"$ReturnType\", since 1.71.0, or \"$Parameter\", since 1.73.0) needs special preparations. The same applies to the empty segment after a trailing slash. <ol> <li> If the current object has a \"$Action\", \"$Function\" or \"$Type\" property, it is used for scope lookup first. This way, \"/EMPLOYEES/ENTRYDATE\" addresses the same object as \"/EMPLOYEES/$Type/ENTRYDATE\", namely the \"ENTRYDATE\" child of the entity type corresponding to the \"EMPLOYEES\" child of the entity container. The other cases jump from an operation import to the corresponding operation overloads. <li> Else if the segment is the first one within its path, the last schema child addressed via scope lookup is used instead of the current object. This can only happen indirectly as in \"/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/...\" where the schema child is the entity container and the navigation property binding can contain the simple identifier of another entity set within the same container.\n\nIf the segment is the first one overall, \"$EntityContainer\" is inserted into the path implicitly. In other words, the entity container is used as the initial schema child. This way, \"/EMPLOYEES\" addresses the same object as \"/$EntityContainer/EMPLOYEES\", namely the \"EMPLOYEES\" child of the entity container. <li> Afterwards, if the current object is an array, it represents overloads for an operation. Annotations of an operation (since 1.71.0) or a parameter (since 1.66.0) can be immediately addressed, no matter if they apply for a single overload or for all overloads at the same time, for example \"/TEAMS/acme.NewAction@\" or \"/TEAMS/acme.NewAction/Team_ID@\". Annotations of an unbound operation overload can be addressed like \"/OperationImport/@$ui5.overload@\", while \"/OperationImport/@\" addresses annotations of the operation import itself. The special name \"$ReturnType\" can be used (since 1.71.0) like a parameter to address annotations of the return type instead, for example \"/TEAMS/acme.NewAction/$ReturnType@\".\n\nOperation overloads are then filtered by binding parameter; multiple overloads after filtering are invalid except if addressing all overloads via the segment \"@$ui5.overload\", for example \"/acme.NewAction/@$ui5.overload\".\n\nOnce a single overload has been determined, its parameters can be immediately addressed, for example \"/TEAMS/acme.NewAction/Team_ID\", or the special name \"$Parameter\" can be used (since 1.73.0), for example \"/TEAMS/acme.NewAction/$Parameter/Team_ID\". The special name \"$ReturnType\" can be used (since 1.71.0) like a parameter to address the return type instead, for example \"/TEAMS/acme.NewAction/$ReturnType\". For all other names, the overload's \"$ReturnType/$Type\" is used for scope lookup. This way, \"/GetOldestWorker/AGE\" addresses the same object as \"/GetOldestWorker/$ReturnType/AGE\" or \"/GetOldestWorker/$Function/0/$ReturnType/$Type/AGE\", and \"/TEAMS/acme.NewAction/MemberCount\" (assuming \"MemberCount\" is not a parameter in this example) addresses the same object as \"/TEAMS/acme.NewAction/$ReturnType/MemberCount\" or \"/TEAMS/acme.NewAction/@$ui5.overload/0/$ReturnType/$Type/MemberCount\". In case a name can refer both to a parameter and to a property of the return type, an empty segment can be used instead of \"@$ui5.overload/0/$ReturnType/$Type\" or \"$ReturnType\" to force return type lookup, for example \"/TEAMS/acme.NewAction//Team_ID\".\n\nFor primitive return types, the special segment \"value\" can be used to refer to the return type itself (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}). This way, \"/GetOldestAge/value\" addresses the same object as \"/GetOldestAge/$ReturnType\" or \"/GetOldestAge/$Function/0/$ReturnType\" or \"/GetOldestAge/@$ui5.overload/0/$ReturnType\" (which is needed for automatic type determination, see {@link #requestUI5Type}). <\/ol>\n\nA trailing slash can be used to continue a path and thus force scope lookup or OData simple identifier preparations, but then stay at the current object. This way, \"/EMPLOYEES/$Type/\" addresses the entity type itself corresponding to the \"EMPLOYEES\" child of the entity container. Although the empty segment is not an OData simple identifier, it can be used as a placeholder for one. In this way, \"/EMPLOYEES/\" addresses the same entity type as \"/EMPLOYEES/$Type/\". That entity type in turn is a map of all its OData children (that is, structural and navigation properties) and determines the set of possible child names that might be used after the trailing slash.\n\n\"$\" can be used as the last segment to continue a path and thus force scope lookup, but no OData simple identifier preparations. In this way, it serves as a placeholder for a technical property. The path must not continue after \"$\", except for a computed annotation. Example: \"/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/$\" addresses the referenced property itself, not the corresponding type like \"/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/\" does. \"/TEAMS/@com.sap.vocabularies.UI.v1.LineItem/0/Target/$NavigationPropertyPath/$@@.isMultiple\" calls a computed annotation on the navigation property itself, not on the corresponding type.\n\nAny other segment, including an OData simple identifier, is looked up as a property of the current object.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, mParameters?: Object) -> Promise","parameters":{"sPath":"type: string, description: A relative or absolute path within the metadata model","oContext":"type: sap.ui.model.Context, description: The context to be used as a starting point in case of a relative path","mParameters":"type: object, description: Optional (binding) parameters; if they are given, <code>oContext<\/code> cannot be omitted"}},"requestUnitsOfMeasure":{"!description":"Request unit customizing based on the code list reference given in the entity container's <code>com.sap.vocabularies.CodeList.v1.UnitOfMeasure<\/code> annotation. The corresponding HTTP request uses the HTTP headers obtained via {@link sap.ui.model.odata.v4.ODataModel#getHttpHeaders} from this meta model's data model.","!static":false,"!category":"function","!type":"fn(vRawValue?: Object, oDetails?: Object) -> Promise","parameters":{"oDetails":"type: object, description: The details object","vRawValue":"type: any, description: If present, it must be this meta model's root entity container"}}},"sap.ui.model.odata.type.Currency":{"!description":"This class represents the <code>Currency<\/code> composite type with the parts amount, currency, and currency customizing. The amount part is formatted according to the customizing for the currency. Use the result of the promise returned by {@link sap.ui.model.odata.v4.ODataMetaModel#requestCurrencyCodes} as currency customizing part. If no currency customizing is available, UI5's default formatting applies. The type may only be used for amount and currency parts from a {@link sap.ui.model.odata.v4.ODataModel}.","getInterface":{"!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Currency.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.model.type.Currency","validateValue":{"!description":"Does nothing as the type does not support constraints.","!static":false,"!category":"function","!type":"fn(vValue: String)","parameters":{"vValue":"type: string, description: The value to be validated"}},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Currency with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Currency.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a <code>Currency<\/code> composite type.","formatValue":{"!description":"Formats the given values of the parts of the <code>Currency<\/code> composite type to the given target type.","!static":false,"!category":"function","!type":"fn(aValues: [Object], sTargetType: String) -> String","parameters":{"sTargetType":"type: string, description: The target type; must be \"string\" or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","aValues":"type: any[], description: Array of part values to be formatted; contains in the following order: amount, currency, currency customizing. The first call to this method where all parts are set determines the currency customizing; subsequent calls use this customizing, so that the corresponding part may be omitted. Changes to the currency customizing part after this first method call are not considered: The currency customizing for this <code>Currency<\/code> instance remains unchanged."}},"!module":"sap/ui/model/odata/type/Currency","!helpDescription":"This class represents the <code>Currency<\/code> composite type with the parts amount, currency, and currency customizing. The amount part is formatted according to the customizing for the currency. Use the result of the promise returned by {@link sap.ui.model.odata.v4.ODataMetaModel#requestCurrencyCodes} as currency customizing part. If no currency customizing is available, UI5's default formatting applies. The type may only be used for amount and currency parts from a {@link sap.ui.model.odata.v4.ODataModel}.","parseValue":{"!description":"Parses the given string value to an array containing amount and currency.","!static":false,"!category":"function","!type":"fn(vValue: String, sSourceType: String, aCurrentValues: [Object]) -> [Object]","parameters":{"aCurrentValues":"type: any[], description: The current values of all binding parts","sSourceType":"type: string, description: The source type (the expected type of <code>vValue<\/code>); must be \"string\", or a type with \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string, description: The value to be parsed"}}},"sap.ui.core.util.Export_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.Export with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.util.Export"},"sap.ui.core.IconColor":{"!description":"Semantic Colors of an icon.","Neutral":{"!description":"Neutral color.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Negative":{"!description":"Negative color","!category":"enum","!type":"String"},"Positive":{"!description":"Positive color","!category":"enum","!type":"String"},"NonInteractive":{"!description":"Color that indicates an icon which isn't interactive","!category":"enum","!type":"String"},"Tile":{"!description":"Color for icon used in a Tile","!category":"enum","!type":"String"},"!category":"static class","Critical":{"!description":"Critical color","!category":"enum","!type":"String"},"Marker":{"!description":"Color for icon used as a marker","!category":"enum","!type":"String"},"Contrast":{"!description":"Contrast color.","!category":"enum","!type":"String"},"Default":{"!description":"Default color (brand color)","!category":"enum","!type":"String"}},"sap.ui.Device.browser.BROWSER":{"!description":"Enumeration containing the names of known browsers.","FIREFOX":{"!description":"Firefox browser name.","!category":"enum","!type":"String"},"!module":"sap/ui/Device","!helpDescription":"Enumeration containing the names of known browsers.","SAFARI":{"!description":"Safari browser name.","!category":"enum","!type":"String"},"!category":"namespace","CHROME":{"!description":"Chrome browser name, used for Google Chrome browser and Microsoft Edge (Chromium) browser.","!category":"enum","!type":"String"},"ANDROID":{"!description":"Android stock browser name.","!category":"enum","!type":"String"},"EDGE":{"!description":"Edge browser name, used for Microsoft Edge (EdgeHTML) browser.","!category":"enum","!type":"String"},"INTERNET_EXPLORER":{"!description":"Internet Explorer browser name.","!category":"enum","!type":"String"}},"sap.ui.core.support.RuleEngineOpaExtension_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.support.RuleEngineOpaExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.support.RuleEngineOpaExtension"},"sap.ui.model.odata.type.Int64_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int64 with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints: Object)","prototype":"sap.ui.model.odata.type.Int64"},"sap.ui.model.odata.v4.ODataPropertyBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataPropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.odata.v4.ODataPropertyBinding"},"sap.ui.core.mvc.View_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.mvc.View"},"sap.ui.model.xml.XMLModel":{"!description":"Model implementation for XML format","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.xml.XMLModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getObject":{"!description":"Returns the object for the given <code>path<\/code>","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object) -> Object","parameters":{"sPath":"type: string, description: the path to the object","oContext":"type: object, description: the context which will be used to retrieve the object"}},"getProperty":{"!description":"Returns the value for the property with the given <code>sPropertyName<\/code>","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object) -> Object","parameters":{"sPath":"type: string, description: the path to the property","oContext":"type: object, description: the context which will be used to retrieve the property"}},"setData":{"!description":"Sets the provided XML encoded data object to the model","!static":false,"!category":"function","!type":"fn(oData: Object)","parameters":{"oData":"type: object, description: the data to set to the model"}},"!proto":"sap.ui.model.ClientModel","getXML":{"!description":"Serializes the current XML data of the model into a string.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","loadData":{"!description":"Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model. Note: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy, the request can not successfully retrieve data from a different domain, subdomain, or protocol.","!static":false,"!category":"function","!type":"fn(sURL: String, oParameters?: Object | String, bAsync?: Boolean, sType?: String, bCache?: String, mHeaders?: Object)","parameters":{"sType":"type: string, description: HTTP method of request","bCache":"type: string, description: Force no caching if false","sURL":"type: string, description: A string containing the URL to which the request is sent","mHeaders":"type: object, description: An object of additional header key/value pairs to send along with the request","oParameters":"type: object|string, description: A map of parameters or a single parameter string that is sent to the server with the request","bAsync":"type: boolean, description: Whether the request should be asynchronous or not"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.xml.XMLModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new XMLModel.","!module":"sap/ui/model/xml/XMLModel","!helpDescription":"Model implementation for XML format","setProperty":{"!description":"Sets a new value for the given property <code>sPropertyName<\/code> in the model. If the model value changed all interested parties are informed.","!static":false,"!category":"function","!type":"fn(sPath: String, oValue: Object, oContext?: Object, bAsyncUpdate?: Boolean) -> Boolean","parameters":{"oValue":"type: any, description: value to set the property to","sPath":"type: string, description: path of the property to set","oContext":"type: object, description: the context which will be used to set the property","bAsyncUpdate":"type: boolean, description: whether to update other bindings dependent on this property asynchronously"}},"setXML":{"!description":"Sets the specified XML formatted string text to the model","!static":false,"!category":"function","!type":"fn(sXMLText: String)","parameters":{"sXMLText":"type: string, description: the XML data as string"}},"setNameSpace":{"!description":"Sets an XML namespace to use in the binding path","!static":false,"!category":"function","!type":"fn(sNameSpace: String, sPrefix?: String)","parameters":{"sPrefix":"type: string, description: the prefix for the namespace (optional)","sNameSpace":"type: string, description: the namespace URI"}}},"sap.ui.core.IntervalTrigger_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.IntervalTrigger with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(iInterval: Number)","prototype":"sap.ui.core.IntervalTrigger"},"sap.ui.Device.orientation":{"!description":"Common API for orientation change notifications across all platforms.\n\nFor browsers or devices that do not provide native support for orientation change events the API simulates them based on the ratio of the document's width and height.","!module":"sap/ui/Device","!helpDescription":"Common API for orientation change notifications across all platforms.\n\nFor browsers or devices that do not provide native support for orientation change events the API simulates them based on the ratio of the document's width and height.","detachHandler":{"!description":"Removes a previously attached event handler from the orientation change events.\n\nThe passed parameters must match those used for registration with {@link #.attachHandler} beforehand.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)"},"!category":"namespace","attachHandler":{"!description":"Registers the given event handler to orientation change events of the document's window.\n\nThe event is fired whenever the screen orientation changes and the width of the document's window becomes greater than its height or the other way round.\n\nThe event handler is called with a single argument: a map <code>mParams<\/code> which provides the following information: <ul> <li><code>mParams.landscape<\/code>: If this flag is set to <code>true<\/code>, the screen is currently in landscape mode, otherwise in portrait mode.<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)"},"portrait":{"!description":"If this flag is set to <code>true<\/code>, the screen is currently in portrait mode (the height is greater than the width).","!category":"enum","!type":"Boolean"},"landscape":{"!description":"If this flag is set to <code>true<\/code>, the screen is currently in landscape mode (the width is greater than the height).","!category":"enum","!type":"Boolean"}},"sap.ui.core.format.ListFormat":{"!description":"The ListFormat is a static class for formatting and parsing an array of strings in a locale-sensitive manner according to a set of format options.","!constructorDescription":"Constructor for ListFormat - must not be used: To get a ListFormat instance, please use <code>ListFormat.getInstance()<\/code>.","!module":"sap/ui/core/format/ListFormat","!helpDescription":"The ListFormat is a static class for formatting and parsing an array of strings in a locale-sensitive manner according to a set of format options.","!proto":"sap.ui.base.Object","format":{"!description":"Formats a list according to the given format options.","!static":false,"!category":"function","!type":"fn(aList: Array) -> String","parameters":{"aList":"type: array, description: The value to format"}},"!category":"class","getInstance":{"!description":"Get an instance of the ListFormat which can be used for formatting.","!static":true,"!category":"function","!type":"fn(oFormatOptions?: Object, oLocale?: sap.ui.core.Locale) -> sap.ui.core.format.ListFormat","parameters":{"oLocale":"type: sap.ui.core.Locale, description: Locale to get the formatter for","oFormatOptions":"type: object, description: Object which defines the format options"}},"parse":{"!description":"Parses a given list string into an array.","!static":false,"!category":"function","!type":"fn(sValue: String) -> Array","parameters":{"sValue":"type: string, description: String value to be parsed"}}},"sap.ui.test.matchers":{"AggregationFilled":"sap.ui.test.matchers.AggregationFilled_obj","AggregationLengthEquals":"sap.ui.test.matchers.AggregationLengthEquals_obj","Matcher":"sap.ui.test.matchers.Matcher_obj","Interactable":"sap.ui.test.matchers.Interactable_obj","LabelFor":"sap.ui.test.matchers.LabelFor_obj","!category":"namespace","Properties":"sap.ui.test.matchers.Properties_obj","BindingPath":"sap.ui.test.matchers.BindingPath_obj","AggregationEmpty":"sap.ui.test.matchers.AggregationEmpty_obj","path":{"!description":"The value of the binding context path that is used for matching.","!category":"enum","!type":"String"},"Descendant":"sap.ui.test.matchers.Descendant_obj","text":{"!description":"The text of the {@link sap.m.Label} which have the labelFor property.","!category":"enum","!type":"String"},"value":{"!description":"The value of the property that is used for matching.","!category":"enum","!type":"Object"},"key":{"!description":"The key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.","!category":"enum","!type":"String"},"I18NText":"sap.ui.test.matchers.I18NText_obj","length":{"!description":"The length that aggregation <code>name<\/code> should have.","!category":"enum","!type":"Number"},"propertyValue":{"!description":"The value of the Property that is used for matching.","!category":"enum","!type":"Object"},"propertyPath":{"!description":"The value of the binding property path that is used for matching. If (context) path is also set, propertyPath will be assumed to be relative to the binding context path","!category":"enum","!type":"String"},"AggregationContainsPropertyEqual":"sap.ui.test.matchers.AggregationContainsPropertyEqual_obj","modelName":{"!description":"The name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.","!category":"enum","!type":"String"},"PropertyStrictEquals":"sap.ui.test.matchers.PropertyStrictEquals_obj","propertyName":{"!description":"The name of the control property to match the I18N text with.","!category":"enum","!type":"String"},"aggregationName":{"!description":"The Name of the aggregation that is used for matching.","!category":"enum","!type":"String"},"name":{"!description":"The Name of the property that is used for matching.","!category":"enum","!type":"String"},"Ancestor":"sap.ui.test.matchers.Ancestor_obj","parameters":{"!description":"The parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.","!category":"enum","!type":"Object"}},"sap.ui.model.analytics.odata4analytics.Parameterization_obj":{"!type":"fn(oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet: sap.ui.model.analytics.odata4analytics.EntitySet)","prototype":"sap.ui.model.analytics.odata4analytics.Parameterization"},"sap.ui.model.odata.OperationMode":{"!description":"Different modes for executing service operations (filtering, sorting)","Auto":{"!description":"With operation mode <code>Auto<\/code>, operations are either processed on the client or on the server. The exact behavior depends on the configured {@link sap.ui.model.odata.CountMode CountMode}, on the <code>threshold<\/code> and on the size of the data: <ol> <li>Count Modes <code>Request<\/code> and <code>Both<\/code><br> Initially the binding will issue a <code>$count<\/code> request without any filters/sorters. <ol type=\"a\"> <li>If the count is lower or equal to the threshold, the binding will behave like in operation mode <code>Client<\/code>, and a data request for all entries is issued.<\/li> <li>If the count exceeds the threshold, the binding will behave like in operation mode <code>Server<\/code>.<\/li> <\/ol> <\/li>\n\n<li>Count Modes <code>Inline<\/code> or <code>InlineRepeat<\/code><br> The initial request tries to fetch as many entries as configured with the <code>threshold<\/code> parameter, without specifying any filters/sorters. In addition, the query parameter <code>$inlinecount<\/code> is added. The binding assumes, that the threshold given by the application can be met, but it adapts its behavior depending on the response: <ol type=\"a\"> <li>If the response returns fewer (or just as many) entries as the threshold, the binding will behave exactly like when using the operation mode <code>Client<\/code>. Initially configured filters/sorters will be applied afterwards on the client.<\/li> <li>If the <code>$inlinecount<\/code> is higher than the threshold, the binding will behave like in operation mode <code>Server<\/code>. In this case a new data request containing the initially set filters/sorters will be issued.<\/li> <\/ol> It is up to the application to chose an appropriate threshold value. Ideally, it should be high enough to fetch all data in the most common scenarios (to avoid a fallback to operation mode <code>Server<\/code>, requiring an additional request), but it also should be low enough to ensure a fast response in case there is much more data than expected. <\/li> <li>Count mode <code>None<\/code> is not supported together with operation mode <code>Auto<\/code><\/li> <\/ol>","!category":"enum","!type":"String"},"!module":"sap/ui/model/odata/OperationMode","Server":{"!description":"Operations are executed on the server in the OData service request, by appending corresponding URL parameters (<code>$filter<\/code>, <code>$orderby<\/code>). Each change in filtering or sorting triggers a new request to the server.","!category":"enum","!type":"String"},"!category":"static class","Client":{"!description":"Operations are executed on the client. This only works if all entries are loaded on the client. The initial request fetches the complete collection, filtering and sorting does not trigger further requests.","!category":"enum","!type":"String"},"Default":{"!description":"By default, all operations are executed on the server in the OData service request (<code>Server<\/code> mode). Only if the collection is already expanded and all entries are available on the client, all operations are executed on the client (<code>Client<\/code> mode).","!category":"enum","!type":"String"}},"sap.ui.model.odata.type.Raw_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Raw with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Raw"},"module:sap/base/security/URLWhitelist":{"!description":"Registry to add whitelisted URLs and validate against them.","add":{"!description":"Adds a whitelist entry","!category":"function","!type":"fn(sId: String, sInfo: String, iStart: Number, iEnd: Number, iTime: Number, iDuration: Number, aCategories?: [String | String], protocol: String, host: String, port: String, path: String)"},"module:sap/base/security/URLWhitelist":"module:sap/base/security/URLWhitelist","entries":{"!description":"Gets an array with the whitelist entries","!category":"function","!type":"fn() -> [module:sap/base/security/URLWhitelist.Entry]"},"!module":"sap/base/security/URLWhitelist","!helpDescription":"Registry to add whitelisted URLs and validate against them.","clear":{"!description":"Clears the whitelist for URL validation","!category":"function","!type":"fn()"},"!category":"namespace","delete":{"!description":"Deletes an entry from the whitelist entry","!category":"function","!type":"fn(oEntry: module:sap/base/security/URLWhitelist.Entry)"},"validate":{"!description":"Validates a URL. Check if it's not a script or other security issue.\n\nSplit URL into components and check for allowed characters according to RFC 3986:\n\n<pre>\nauthority     = [ userinfo \"@\" ] host [ \":\" port ]\nuserinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nhost          = IP-literal / IPv4address / reg-name\n\nIP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\nIPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\nIPv6address   =                            6( h16 \":\" ) ls32\n              /                       \"::\" 5( h16 \":\" ) ls32\n              / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n              / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n              / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n              / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n              / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n              / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n              / [ *6( h16 \":\" ) h16 ] \"::\"\nls32          = ( h16 \":\" h16 ) / IPv4address\n              ; least-significant 32 bits of address\nh16           = 1*4HEXDIG\n              ; 16 bits of address represented in hexadecimal\n\nIPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\ndec-octet     = DIGIT                 ; 0-9\n              / %x31-39 DIGIT         ; 10-99\n              / \"1\" 2DIGIT            ; 100-199\n              / \"2\" %x30-34 DIGIT     ; 200-249\n              / \"25\" %x30-35          ; 250-255\n\nreg-name      = *( unreserved / pct-encoded / sub-delims )\n\npct-encoded   = \"%\" HEXDIG HEXDIG\nreserved      = gen-delims / sub-delims\ngen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\nsub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\npchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\npath          = path-abempty    ; begins with \"/\" or is empty\n              / path-absolute   ; begins with \"/\" but not \"//\"\n              / path-noscheme   ; begins with a non-colon segment\n              / path-rootless   ; begins with a segment\n              / path-empty      ; zero characters\n\npath-abempty  = *( \"/\" segment )\npath-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath-noscheme = segment-nz-nc *( \"/\" segment )\npath-rootless = segment-nz *( \"/\" segment )\npath-empty    = 0<pchar>\nsegment       = *pchar\nsegment-nz    = 1*pchar\nsegment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / \"@\" )\n              ; non-zero-length segment without any colon \":\"\n\nquery         = *( pchar / \"/\" / \"?\" )\n\nfragment      = *( pchar / \"/\" / \"?\" )\n<\/pre>\n\nFor the hostname component, we are checking for valid DNS hostnames according to RFC 952 / RFC 1123:\n\n<pre>\nhname         = name *(\".\" name)\nname          = let-or-digit ( *( let-or-digit-or-hyphen ) let-or-digit )\n<\/pre>\n\nWhen the URI uses the protocol 'mailto:', the address part is additionally checked against the most commonly used parts of RFC 6068:\n\n<pre>\nmailtoURI     = \"mailto:\" [ to ] [ hfields ]\nto            = addr-spec *(\",\" addr-spec )\nhfields       = \"?\" hfield *( \"&\" hfield )\nhfield        = hfname \"=\" hfvalue\nhfname        = *qchar\nhfvalue       = *qchar\naddr-spec     = local-part \"@\" domain\nlocal-part    = dot-atom-text              // not accepted: quoted-string\ndomain        = dot-atom-text              // not accepted: \"[\" *dtext-no-obs \"]\"\ndtext-no-obs  = %d33-90 / ; Printable US-ASCII\n                %d94-126  ; characters not including\n                          ; \"[\", \"]\", or \"\\\"\nqchar         = unreserved / pct-encoded / some-delims\nsome-delims   = \"!\" / \"$\" / \"'\" / \"(\" / \")\" / \"*\"\n              / \"+\" / \",\" / \";\" / \":\" / \"@\"\n\nNote:\nA number of characters that can appear in &lt;addr-spec> MUST be\npercent-encoded.  These are the characters that cannot appear in\na URI according to [STD66] as well as \"%\" (because it is used for\npercent-encoding) and all the characters in gen-delims except \"@\"\nand \":\" (i.e., \"/\", \"?\", \"#\", \"[\", and \"]\").  Of the characters\nin sub-delims, at least the following also have to be percent-\nencoded: \"&\", \";\", and \"=\".  Care has to be taken both when\nencoding as well as when decoding to make sure these operations\nare applied only once.\n\n<\/pre>\n\nWhen a whitelist has been configured using {@link #.addUrlWhitelist addUrlWhitelist}, any URL that passes the syntactic checks above, additionally will be tested against the content of the whitelist.","!category":"function","!type":"fn(sUrl: String) -> Boolean"}},"sap.ui.loader":{"!description":"Provides access to UI5 loader configuration.\n\nThe configuration is used by {@link sap.ui.require} and {@link sap.ui.define}.","!module":"ui5loader","!helpDescription":"Provides access to UI5 loader configuration.\n\nThe configuration is used by {@link sap.ui.require} and {@link sap.ui.define}.","!category":"namespace","config":{"!description":"Sets the configuration for the UI5 loader. The configuration can be updated multiple times. Later changes do not impact modules that have been loaded before.\n\nIf no parameter is given, a partial copy of UI5 loader configuration in use is returned.\n\nThe configuration options are aligned with the \"Common Config\" draft of the AMD spec (https://github.com/amdjs/amdjs-api/blob/master/CommonConfig.md).\n\nThe following code shows an example of what a UI5 loader configuration might look like: <pre>\n\n  sap.ui.loader.config({\n\n    // location from where to load all modules by default\n    baseUrl: '../../resources/',\n\n    paths: {\n      // load modules whose ID equals to or starts with 'my/module' from example.com\n      'my/module': 'https://example.com/resources/my/module'\n    },\n\n    map: {\n      // if any module requires 'sinon', load module 'sap/ui/thirdparty/sinon-4'\n      '*': {\n        'sinon': 'sap/ui/thirdparty/sinon-4'\n      },\n      // but if a module whose ID equals to or starts with 'app' requires 'sinon'\n      // then load a legacy version instead\n      \"app\": {\n        'sinon': 'sap/ui/legacy/sinon'\n      }\n    },\n\n    // define two bundles that consists of JS modules only\n    bundles: {\n      bundle1: ['module1', 'module2'],\n      bundle2: ['moduleX', 'moduleY']\n    },\n\n    // define a bundle that also contains non-JS resources\n    bundlesUI5: {\n      'all.js': ['Component.js', 'manifest.json',\n                 'App.controller.js', 'App.view.xml']\n    },\n\n    // activate real async loading and module definitions\n    async: true,\n\n    // provide dependency and export metadata for non-UI5 modules\n    shim: {\n      'sap/ui/thirdparty/blanket': {\n        amd: true,\n        exports: 'blanket'\n      }\n    }\n\n  });\n\n<\/pre>","!static":"true","!category":"function","!type":"fn(cfg?: Object | undefined) -> Object | undefined"}},"sap.ui.test.matchers.Ancestor":{"!description":"Checks if a control has a defined ancestor.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    ancestor: \"object\" // where \"object\" is a declarative matcher for the ancestor\n}\n<\/code><\/pre>","!module":"sap/ui/test/matchers/Ancestor","!helpDescription":"Checks if a control has a defined ancestor.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    ancestor: \"object\" // where \"object\" is a declarative matcher for the ancestor\n}\n<\/code><\/pre>","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.odata.type.TimeOfDay":{"!description":"This class represents the OData V4 primitive type {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element <code>Edm.TimeOfDay<\/code>}. In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.TimeOfDay with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.TimeOfDay.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.TimeOfDay<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> Date | String","parameters":{"sTargetType":"type: string, description: The target type, may be \"any\", \"object\" (since 1.69.0), \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information","sValue":"type: string, description: The value to be formatted, which is represented as a string in the model"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/TimeOfDay","!helpDescription":"This class represents the OData V4 primitive type {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element <code>Edm.TimeOfDay<\/code>}. In {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates the given value in model representation and meets the type's constraints.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: The value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to a string with an OData V4 Edm.TimeOfDay value.","!static":false,"!category":"function","!type":"fn(vValue: Date | String, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: The source type (the expected type of <code>sValue<\/code>), must be \"string\", \"object\" (since 1.69.0) or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: Date|string, description: The value to be parsed, maps <code>\"\"<\/code> to <code>null<\/code>; <code>Date<\/code> objects are expected to represent local time and are supported if and only if source type is \"object\"."}}},"jQuery.sap.ControlEvents":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/ControlEvents.events} instead<br>List of DOM events that a UIArea automatically takes care of.\n\nA control/element doesn't have to bind listeners for these events. It instead can implement an <code>on<i>event<\/i>(oEvent)<\/code> method for any of the following events that it wants to be notified about:\n\nclick, dblclick, contextmenu, focusin, focusout, keydown, keypress, keyup, mousedown, mouseout, mouseover, mouseup, select, selectstart, dragstart, dragenter, dragover, dragleave, dragend, drop, paste, cut, input, touchstart, touchend, touchmove, touchcancel, tap, swipe, swipeleft, swiperight, scrollstart, scrollstop\n\nThe mouse events and touch events are supported simultaneously on both desktop and mobile browsers. Do NOT create both onmouse* and ontouch* functions to avoid one event being handled twice on the same control.","!module":"jquery.sap.events","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/ControlEvents.events} instead<br>List of DOM events that a UIArea automatically takes care of.\n\nA control/element doesn't have to bind listeners for these events. It instead can implement an <code>on<i>event<\/i>(oEvent)<\/code> method for any of the following events that it wants to be notified about:\n\nclick, dblclick, contextmenu, focusin, focusout, keydown, keypress, keyup, mousedown, mouseout, mouseover, mouseup, select, selectstart, dragstart, dragenter, dragover, dragleave, dragend, drop, paste, cut, input, touchstart, touchend, touchmove, touchcancel, tap, swipe, swipeleft, swiperight, scrollstart, scrollstop\n\nThe mouse events and touch events are supported simultaneously on both desktop and mobile browsers. Do NOT create both onmouse* and ontouch* functions to avoid one event being handled twice on the same control.","!category":"namespace"},"sap.ui.core.CustomData":{"!description":"Contains a single key/value pair of custom data attached to an <code>Element<\/code>.\n\nSee method {@link sap.ui.core.Element#data Element.prototype.data} and the chapter {@link topic:91f0c3ee6f4d1014b6dd926db0e91070 Custom Data - Attaching Data Objects to Controls} in the documentation.","getKey":{"!description":"Gets current value of property {@link #getKey key}.\n\nThe key of the data in this CustomData object. When the data is just stored, it can be any string, but when it is to be written to HTML (<code>writeToDom == true<\/code>) then it must also be a valid HTML attribute name. It must conform to the {@link sap.ui.core.ID} type and may contain no colon. To avoid collisions, it also may not start with \"sap-ui\". When written to HTML, the key is prefixed with \"data-\". If any restriction is violated, a warning will be logged and nothing will be written to the DOM.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class <code>sap.ui.core.CustomData<\/code>.","!static":true,"!category":"function","!type":"fn() -> sap.ui.core.ElementMetadata"},"getWriteToDom":{"!description":"Gets current value of property {@link #getWriteToDom writeToDom}.\n\nIf set to \"true\" and the value is of type \"string\" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a \"data-*\" attribute. If the key is \"abc\" and the value is \"cde\", the HTML will look as follows:\n\n<pre>\n  &lt;SomeTag ... data-abc=\"cde\" ... &gt;\n<\/pre>\n\nThus the application can provide stable attributes by data binding which can be used for styling or identification purposes.\n\n<b>ATTENTION:<\/b> use carefully to not create huge attributes or a large number of them.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.core.Element","!category":"class","extend":{"!description":"Creates a new subclass of <code>CustomData<\/code> with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata<\/code>","sClassName":"type: string, description: Name of the class being created"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nThe data stored in this CustomData object. When the data is just stored, it can be any JS type, but when it is to be written to HTML (<code>writeToDom == true<\/code>) then it must be a string. If this restriction is violated, a warning will be logged and nothing will be written to the DOM.","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Constructor for a new <code>CustomData<\/code> element.","!module":"sap/ui/core/CustomData","!helpDescription":"Contains a single key/value pair of custom data attached to an <code>Element<\/code>.\n\nSee method {@link sap.ui.core.Element#data Element.prototype.data} and the chapter {@link topic:91f0c3ee6f4d1014b6dd926db0e91070 Custom Data - Attaching Data Objects to Controls} in the documentation.","setWriteToDom":{"!description":"Sets a new value for property {@link #getWriteToDom writeToDom}.\n\nIf set to \"true\" and the value is of type \"string\" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a \"data-*\" attribute. If the key is \"abc\" and the value is \"cde\", the HTML will look as follows:\n\n<pre>\n  &lt;SomeTag ... data-abc=\"cde\" ... &gt;\n<\/pre>\n\nThus the application can provide stable attributes by data binding which can be used for styling or identification purposes.\n\n<b>ATTENTION:<\/b> use carefully to not create huge attributes or a large number of them.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bWriteToDom: Boolean) -> sap.ui.core.CustomData","parameters":{"bWriteToDom":"type: boolean, description: New value for property <code>writeToDom<\/code>"}},"setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nThe data stored in this CustomData object. When the data is just stored, it can be any JS type, but when it is to be written to HTML (<code>writeToDom == true<\/code>) then it must be a string. If this restriction is violated, a warning will be logged and nothing will be written to the DOM.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oValue: Object) -> sap.ui.core.CustomData","parameters":{"oValue":"type: any, description: New value for property <code>value<\/code>"}},"setKey":{"!description":"Sets a new value for property {@link #getKey key}.\n\nThe key of the data in this CustomData object. When the data is just stored, it can be any string, but when it is to be written to HTML (<code>writeToDom == true<\/code>) then it must also be a valid HTML attribute name. It must conform to the {@link sap.ui.core.ID} type and may contain no colon. To avoid collisions, it also may not start with \"sap-ui\". When written to HTML, the key is prefixed with \"data-\". If any restriction is violated, a warning will be logged and nothing will be written to the DOM.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sKey: String) -> sap.ui.core.CustomData","parameters":{"sKey":"type: string, description: New value for property <code>key<\/code>"}}},"sap.ui.base.Object":{"!description":"Base class for all SAPUI5 Objects.","extend":{"!description":"Creates a subclass of class sap.ui.base.Object with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain three kinds of information: <ul> <li><code>metadata:<\/code> an (optional) object literal with metadata about the class. The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata} and might contain the following information <ul> <li><code>interfaces:<\/code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)<\/li> <li><code>publicMethods:<\/code> {string[]} (optional) list of methods that should be part of the public facade of the class<\/li> <li><code>abstract:<\/code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)<\/li> <li><code>final:<\/code> {boolean} (optional) flag that marks the class as final (defaults to false)<\/li> <\/ul> Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}). <\/li>\n\n<li><code>constructor:<\/code> a function that serves as a constructor function for the new class. If no constructor function is given, the framework creates a default implementation that delegates all its arguments to the constructor function of the base class. <\/li>\n\n<li><i>any-other-name:<\/i> any other property in the <code>oClassInfo<\/code> is copied into the prototype object of the newly created class. Callers can thereby add methods or properties to all instances of the class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't make sense to use primitive values here other than to declare public constants.\n\nIf such a property has a function as its value, and if the property name does not start with an underscore or with the prefix \"on\", the property name will be automatically added to the list of public methods of the class (see property <code>publicMethods<\/code> in the <code>metadata<\/code> section). If a method's name matches that pattern, but is not meant to be public, it shouldn't be included in the class info object, but be assigned to the prototype instead. <\/li>\n\n<\/ul>\n\nThe prototype object of the newly created class uses the same prototype as instances of the base class (prototype chaining).\n\nA metadata object is always created, even if there is no <code>metadata<\/code> entry in the <code>oClassInfo<\/code> object. A getter for the metadata is always attached to the prototype and to the class (constructor function) itself.\n\nLast but not least, with the third argument <code>FNMetaImpl<\/code> the constructor of a metadata class can be specified. Instances of that class will be used to represent metadata for the newly created class and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: structured object with information about the class","FNMetaImpl":"type: function, description: constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.","sClassName":"type: string, description: name of the class to be created"}},"getInterface":{"!description":"Returns the public facade of this object.\n\nBy default, the public facade is implemented as an instance of {@link sap.ui.base.Interface}, exposing the <code>publicMethods<\/code> as defined in the metadata of the class of this object.\n\nSee the documentation of the {@link #.extend extend} method for an explanation of <code>publicMethods<\/code>.\n\nThe facade is created on the first call of <code>getInterface<\/code> and reused for all later calls.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns the metadata for the class that this object belongs to.\n\nThis method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass} or {@link sap.ui.base.Object.extend}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an <code>sap.ui.base.Object<\/code>.\n\nSubclasses of this class should always call the constructor of their base class.","!module":"sap/ui/base/Object","!helpDescription":"Base class for all SAPUI5 Objects.","defineClass":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.3.1 Use the static <code>extend<\/code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})<br>Creates metadata for a given class and attaches it to the constructor and prototype of that class.\n\nAfter creation, metadata can be retrieved with getMetadata().\n\nThe static info can at least contain the following entries: <ul> <li>baseType: {string} fully qualified name of a base class or empty<\/li> <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn(sClassName: String, oStaticInfo: Object, FNMetaImpl?: fn()) -> sap.ui.base.Metadata","parameters":{"FNMetaImpl":"type: function, description: constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.","oStaticInfo":"type: object, description: static info used to create the metadata object","sClassName":"type: string, description: name of an (already declared) constructor function"}},"isA":{"!description":"Checks whether the given object is an instance of the named type. This function is a short-hand convenience for {@link sap.ui.base.Object#isA}.\n\nPlease see the API documentation of {@link sap.ui.base.Object#isA} for more details.","!static":true,"!category":"function","!type":"fn(vTypeName: [String | String]) -> Boolean","parameters":{"oObject":"type: object, description: Object which will be checked whether it is an instance of the given type","vTypeName":"type: string|string[], description: Type or types to check for"}},"!proto":"Object","destroy":{"!description":"Destructor method for objects.","!static":false,"!category":"function","!type":"fn()"},"!category":"class"},"sap.ui.model.odata.v2.BatchMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since undefined Use {@link sap.ui.model.odata.CountMode} to specify how the count of collections is retrieved. Use the <code>useBatch<\/code> parameter of the {@link sap.ui.model.odata.v2.ODataModel} constructor to specify whether requests are sent in $batch.<br>Different modes for retrieving the count of collections.","Group":{"!description":"Batch grouping enabled","!category":"enum","!type":"String"},"!module":"sap/ui/model/odata/v2/BatchMode","!category":"static class","None":{"!description":"No batch requests","!category":"enum","!type":"String"}},"sap.ui.model.analytics.odata4analytics.SortExpression":{"!description":"Representation of a $orderby expression for an OData entity type.","getExpressionsAsUI5SorterArray":{"!description":"Get an array of SAPUI5 Sorter objects corresponding to this expression.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.model.Sorter]"},"!proto":"sap.ui.base.Object","clear":{"!description":"Clear expression from any sort conditions that may have been set previously","!static":false,"!category":"function","!type":"fn()"},"getEntityType":{"!description":"Get description for this entity type","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntityType"},"!category":"class","addSorter":{"!description":"Add a condition to the order by expression. It replaces any previously specified sort order for the property.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, sSortOrder: sap.ui.model.analytics.odata4analytics.SortOrder) -> sap.ui.model.analytics.odata4analytics.SortExpression","parameters":{"sSortOrder":"type: sap.ui.model.analytics.odata4analytics.SortOrder, description: sorting order used for the condition","sPropertyName":"type: string, description: The name of the property bound in the condition"}},"getURIOrderByOptionValue":{"!description":"Get the value for the OData system query option $orderby corresponding to this expression.","!static":false,"!category":"function","!type":"fn(oSelectedPropertyNames: Object) -> String","parameters":{"oSelectedPropertyNames":"type: object, description: Object with properties requested for $select"}},"!constructorDescription":"Create a representation of an order by expression for a given entity type. It\ncan be rendered as value for the $orderby system query option.","!module":"sap/ui/model/analytics/odata4analytics","removeSorter":{"!description":"Removes the order by expression for the given property name from the list of order by expression. If no order by expression with this property name exists the method does nothing.","!static":false,"!category":"function","!type":"fn(sPropertyName: String)","parameters":{"sPropertyName":"type: string, description: The name of the property to be removed from the condition"}},"!helpDescription":"Representation of a $orderby expression for an OData entity type.","getExpressionAsUI5Sorter":{"!description":"Get the first SAPUI5 Sorter object.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Sorter"}},"sap.ui.test.OpaBuilder_obj":{"!type":"fn(oOpaInstance?: sap.ui.test.Opa5, oOptions?: Object)","prototype":"sap.ui.test.OpaBuilder"},"sap.ui.test.matchers.AggregationEmpty_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationEmpty with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.AggregationEmpty"},"sap.ui.core.message.ControlMessageProcessor_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.ControlMessageProcessor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.message.ControlMessageProcessor"},"sap.ui.model.odata.v4.ODataModel":{"bindList":{"!description":"Creates a new list binding for the given path and optional context which must resolve to an absolute OData path for an entity set.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, vSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], vFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object) -> sap.ui.model.odata.v4.ODataListBinding","parameters":{"sPath":"type: string, description: The binding path in the model; must not be empty or end with a slash","oContext":"type: sap.ui.model.Context, description: The context which is required as base for a relative path","vSorters":"type: sap.ui.model.Sorter|sap.ui.model.Sorter[], description: The dynamic sorters to be used initially. Call {@link sap.ui.model.odata.v4.ODataListBinding#sort} to replace them. Static sorters, as defined in the '$orderby' binding parameter, are always executed after the dynamic sorters. Supported since 1.39.0.","vFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: The dynamic application filters to be used initially. Call {@link sap.ui.model.odata.v4.ODataListBinding#filter} to replace them. Static filters, as defined in the '$filter' binding parameter, are always combined with the dynamic filters using a logical <code>AND<\/code>. Supported since 1.39.0.","mParameters":"type: object, description: Map of binding parameters which can be OData query options as specified in \"OData Version 4.0 Part 2: URL Conventions\" or binding-specific parameters as specified below. Note: The binding creates its own data service request if it is absolute or if it has any parameters or if it is relative and has a context created via {@link #createBindingContext} or if it has sorters or filters. The following OData query options are allowed: <ul> <li> All \"5.2 Custom Query Options\" except for those with a name starting with \"sap-\" <li> The $apply, $count, $expand, $filter, $levels, $orderby, $search, and $select \"5.1 System Query Options\" <\/ul> All other query options lead to an error. Query options specified for the binding overwrite model query options."}},"hasPendingChanges":{"!description":"Returns <code>true<\/code> if there are pending changes, meaning updates or created entities (see {@link sap.ui.model.odata.v4.ODataListBinding#create}) that have not yet been successfully sent to the server.","!static":false,"!category":"function","!type":"fn(sGroupId?: String) -> Boolean","parameters":{"sGroupId":"type: string, description: A group ID as specified in {@link sap.ui.model.odata.v4.ODataModel}, except group IDs having {@link sap.ui.model.odata.v4.SubmitMode.Direct}; if specified, only pending changes related to that group ID are considered (since 1.70.0)"}},"bindTree":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"getHttpHeaders":{"!description":"Returns a map of HTTP headers used for data and metadata requests.","!static":false,"!category":"function","!type":"fn() -> Object"},"getOriginalProperty":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.model.Model","getUpdateGroupId":{"!description":"Returns the model's update group ID.","!static":false,"!category":"function","!type":"fn() -> String"},"setLegacySyntax":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"!category":"class","bindContext":{"!description":"Creates a new context binding for the given path, context and parameters.\n\nThis binding is inactive and will not know the bound context initially. You have to call {@link sap.ui.model.Binding#initialize} to get it updated asynchronously and register a change listener at the binding to be informed when the bound context is available.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.odata.v4.Context, mParameters?: Object) -> sap.ui.model.odata.v4.ODataContextBinding","parameters":{"sPath":"type: string, description: The binding path in the model; must not end with a slash","oContext":"type: sap.ui.model.odata.v4.Context, description: The context which is required as base for a relative path","mParameters":"type: object, description: Map of binding parameters which can be OData query options as specified in \"OData Version 4.0 Part 2: URL Conventions\" or the binding-specific parameters as specified below. Note: The binding creates its own data service request if it is absolute or if it has any parameters or if it is relative and has a context created via {@link #createBindingContext}. The following OData query options are allowed: <ul> <li> All \"5.2 Custom Query Options\" except for those with a name starting with \"sap-\" <li> The $count, $expand, $filter, $levels, $orderby, $search and $select \"5.1 System Query Options\"; OData V4 only allows $count, $filter, $levels, $orderby and $search inside resource paths that identify a collection. In our case here, this means you can only use them inside $expand. <\/ul> All other query options lead to an error. Query options specified for the binding overwrite model query options."}},"submitBatch":{"!description":"Submits the requests associated with the given group ID in one batch request. Requests from subsequent calls to this method for the same group ID may be combined in one batch request using separate change sets. For group IDs with {@link sap.ui.model.odata.v4.SubmitMode.Auto}, only a single change set is used; this method is useful to repeat failed updates or creates (see {@link sap.ui.model.odata.v4.ODataListBinding#create}) together with all other requests for the given group ID in one batch request.","!static":false,"!category":"function","!type":"fn(sGroupId: String) -> Promise","parameters":{"sGroupId":"type: string, description: A valid group ID as specified in {@link sap.ui.model.odata.v4.ODataModel}."}},"getGroupId":{"!description":"Returns the model's group ID.","!static":false,"!category":"function","!type":"fn() -> String"},"detachSessionTimeout":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'sessionTimeout' event of this model.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v4.ODataModel","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"!constructorDescription":"Constructor for a new ODataModel.","resetChanges":{"!description":"Resets all property changes and created entities associated with the given group ID which have not been successfully submitted via {@link #submitBatch}. Resets also invalid user input for the same group ID. This function does not reset the deletion of entities (see {@link sap.ui.model.odata.v4.Context#delete}) and the execution of OData operations (see {@link sap.ui.model.odata.v4.ODataContextBinding#execute}).","!static":false,"!category":"function","!type":"fn(sGroupId?: String)","parameters":{"sGroupId":"type: string, description: A valid group ID as specified in {@link sap.ui.model.odata.v4.ODataModel}. If it is <code>undefined<\/code>, the model's <code>updateGroupId<\/code> is used. Note that the default <code>updateGroupId<\/code> is '$auto', which is valid here since 1.67.0."}},"getODataVersion":{"!description":"Returns the version of the OData service.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetaModel":{"!description":"Returns the meta model for this ODataModel.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.ODataMetaModel"},"!description":"Model implementation for OData V4.\n\nEvery resource path (relative to the service root URL, no query options) according to \"4 Resource Path\" in specification \"OData Version 4.0 Part 2: URL Conventions\" is a valid data binding path within this model if a leading slash is added; for example \"/\" + \"SalesOrderList('A%2FB%26C')\" to access an entity instance with key \"A/B&C\". Note that appropriate URI encoding is necessary, see the example of {@link sap.ui.model.odata.v4.ODataUtils.formatLiteral}. \"4.5.1 Addressing Actions\" needs an operation binding, see {@link sap.ui.model.odata.v4.ODataContextBinding}.\n\nNote that the OData V4 model has its own {@link sap.ui.model.odata.v4.Context} class. Bindings which are relative to such a V4 context depend on their corresponding parent binding and do not access data with their own service requests unless parameters are provided.\n\n<b>Group IDs<\/b> control the model's use of batch requests. Valid group IDs are: <ul> <li><b>$auto<\/b> and <b>$auto.*<\/b>: Bundles requests from the model in a batch request which is sent automatically before rendering. You can use different '$auto.*' group IDs to use different batch requests. The suffix may be any non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. The submit mode for these group IDs is always {@link sap.ui.model.odata.v4.SubmitMode#Auto}. <\/li> <li><b>$direct<\/b>: Sends requests directly without batch. The submit mode for this group ID is always {@link sap.ui.model.odata.v4.SubmitMode#Direct}. <\/li> <li>An application group ID, which is a non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. By default, an application group has the submit mode {@link sap.ui.model.odata.v4.SubmitMode#API}. It is possible to use a different submit mode; for details see <code>mParameters.groupProperties<\/code>. <\/li> <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v4.ODataModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getObject":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"getProperty":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"getAllBindings":{"!description":"Returns the model's bindings.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.model.Binding]"},"requestCanonicalPath":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.39.0 Use {@link sap.ui.model.odata.v4.Context#requestCanonicalPath} instead.<br>Returns a promise for the \"canonical path\" of the entity for the given context. According to \"4.3.1 Canonical URL\" of the specification \"OData Version 4.0 Part 2: URL Conventions\", this is the \"name of the entity set associated with the entity followed by the key predicate identifying the entity within the collection\". Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element binding.","!static":false,"!category":"function","!type":"fn(oEntityContext: sap.ui.model.odata.v4.Context) -> Promise","parameters":{"oEntityContext":"type: sap.ui.model.odata.v4.Context, description: A context in this model which must point to a non-contained OData entity"}},"destroy":{"!description":"Destroys this model, its requestor and its meta model.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes the model by calling refresh on all bindings which have a change event handler attached.\n\nNote: When calling {@link #refresh} multiple times, the result of the request triggered by the last call determines the model's data; it is <b>independent<\/b> of the order of calls to {@link #submitBatch} with the given group ID.\n\nIf there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link #submitBatch} to submit the changes or {@link #resetChanges} to reset the changes before calling {@link #refresh}.","!static":false,"!category":"function","!type":"fn(sGroupId?: String)","parameters":{"sGroupId":"type: string, description: The group ID to be used for refresh; valid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}. It is ignored for suspended bindings, because resume uses the binding's group ID"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachSessionTimeout":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'sessionTimeout' event of this model.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.v4.ODataModel","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"bindProperty":{"!description":"Creates a new property binding for the given path. This binding is inactive and will not know the property value initially. You have to call {@link sap.ui.model.Binding#initialize} to get it updated asynchronously and register a change listener at the binding to be informed when the value is available.\n\nIt is possible to create a property binding pointing to metadata. A '##' in the binding's path is recognized as a separator and splits it into two parts. The part before the separator is resolved with the binding's context and the result is transformed into a metadata context (see {@link sap.ui.model.odata.v4.ODataMetaModel#getMetaContext}). The part following the separator is then interpreted relative to this metadata context, even if it starts with a '/'; a trailing '/' is allowed here, see {@link sap.ui.model.odata.v4.ODataMetaModel#requestObject} for the effect it has.\n\nIf the target type specified in the corresponding control property's binding info is \"any\" and the binding is relative or points to metadata, the binding may have an object value; in this case and unless the binding refers to an action advertisement the binding's mode must be {@link sap.ui.model.BindingMode.OneTime}.","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context, mParameters?: Object) -> sap.ui.model.odata.v4.ODataPropertyBinding","parameters":{"sPath":"type: string, description: The binding path in the model; must not be empty. Must not end with a '/' unless the binding points to metadata.","oContext":"type: sap.ui.model.Context, description: The context which is required as base for a relative path","mParameters":"type: object, description: Map of binding parameters which can be OData query options as specified in \"OData Version 4.0 Part 2: URL Conventions\" or the binding-specific parameter \"$$groupId\". All \"5.2 Custom Query Options\" are allowed except for those with a name starting with \"sap-\". All other query options lead to an error. Query options specified for the binding overwrite model query options. Note: The binding only creates its own data service request if it is absolute or if it is relative to a context created via {@link #createBindingContext}. The binding parameters are ignored in case the binding creates no own data service request or in case the binding points to metadata."}},"!module":"sap/ui/model/odata/v4/ODataModel","!helpDescription":"Model implementation for OData V4.\n\nEvery resource path (relative to the service root URL, no query options) according to \"4 Resource Path\" in specification \"OData Version 4.0 Part 2: URL Conventions\" is a valid data binding path within this model if a leading slash is added; for example \"/\" + \"SalesOrderList('A%2FB%26C')\" to access an entity instance with key \"A/B&C\". Note that appropriate URI encoding is necessary, see the example of {@link sap.ui.model.odata.v4.ODataUtils.formatLiteral}. \"4.5.1 Addressing Actions\" needs an operation binding, see {@link sap.ui.model.odata.v4.ODataContextBinding}.\n\nNote that the OData V4 model has its own {@link sap.ui.model.odata.v4.Context} class. Bindings which are relative to such a V4 context depend on their corresponding parent binding and do not access data with their own service requests unless parameters are provided.\n\n<b>Group IDs<\/b> control the model's use of batch requests. Valid group IDs are: <ul> <li><b>$auto<\/b> and <b>$auto.*<\/b>: Bundles requests from the model in a batch request which is sent automatically before rendering. You can use different '$auto.*' group IDs to use different batch requests. The suffix may be any non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. The submit mode for these group IDs is always {@link sap.ui.model.odata.v4.SubmitMode#Auto}. <\/li> <li><b>$direct<\/b>: Sends requests directly without batch. The submit mode for this group ID is always {@link sap.ui.model.odata.v4.SubmitMode#Direct}. <\/li> <li>An application group ID, which is a non-empty string consisting of alphanumeric characters from the basic Latin alphabet, including the underscore. By default, an application group has the submit mode {@link sap.ui.model.odata.v4.SubmitMode#API}. It is possible to use a different submit mode; for details see <code>mParameters.groupProperties<\/code>. <\/li> <\/ul>","createBindingContext":{"!description":"Creates a binding context for the given path. A relative path can only be resolved if a context is provided. Note: The parameters <code>mParameters<\/code>, <code>fnCallBack<\/code>, and <code>bReload<\/code> from {@link sap.ui.model.Model#createBindingContext} are not supported.\n\nIt is possible to create binding contexts pointing to metadata. A '##' is recognized as separator in the resolved path and splits it into two parts; note that '#' may also be used as separator but is deprecated since 1.51. The part before the separator is transformed into a metadata context (see {@link sap.ui.model.odata.v4.ODataMetaModel#getMetaContext}). The part following the separator is then interpreted relative to this metadata context, even if it starts with a '/'; a trailing '/' is allowed here, see {@link sap.ui.model.odata.v4.ODataMetaModel#requestObject} for the effect it has.\n\nA binding path may also point to an operation advertisement which is addressed with '#<namespace>.<operation>' and is part of the data payload, not the metadata. The metadata of an operation can be addressed via '##' as described above.\n\nExamples: <ul> <li><code>/Products('42')/Name##@com.sap.vocabularies.Common.v1.Label<\/code> points to the \"Label\" annotation of the \"Name\" property of the entity set \"Products\". <li><code>/##Products/Name@com.sap.vocabularies.Common.v1.Label<\/code> has no data path part and thus starts at the metadata root. It also points to the \"Label\" annotation of the \"Name\" property of the entity set \"Products\". <li><code>/Products##/<\/code> points to the entity type (note the trailing '/') of the entity set \"Products\". <li><code>/EMPLOYEES('1')/##com.sap.Action<\/code> points to the metadata of an action bound to the entity set \"EMPLOYEES\". <li><code>/EMPLOYEES('1')/#com.sap.Action<\/code> does not point to metadata, but to the action advertisement. <\/ul>","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context) -> sap.ui.model.Context","parameters":{"sPath":"type: string, description: The binding path, may be relative to the provided context","oContext":"type: sap.ui.model.Context, description: The context which is required as base for a relative path"}},"destroyBindingContext":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"toString":{"!description":"Returns a string representation of this object including the service URL.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"},"changeHttpHeaders":{"!description":"Changes the HTTP headers used for data and metadata requests sent by this model.\n\nIf batch requests are used, the headers will be set for the batch itself, as well as for the individual requests within the batch. The headers are changed according to the given map of headers: Headers with an <code>undefined<\/code> value are removed, the other headers are set, and missing headers remain unchanged. The following headers must not be used: <ul> <li> OData V4 requests headers as specified in \"8.1 Common Headers\" and \"8.2 Request Headers\" of the specification \"OData Version 4.0 Part 1: Protocol\" <li> OData V2 request headers as specified in \"2.2.5 HTTP Header Fields\" of the specification \"OData Version 2 v10.1\" <li> The headers \"Content-Id\" and \"Content-Transfer-Encoding\" <li> The header \"SAP-ContextId\" <\/ul> Note: The \"X-CSRF-Token\" header will not be used for metadata requests.\n\nIf not <code>undefined<\/code>, a header value must conform to the following rules: <ul> <li> It must be a non-empty string. <li> It must be completely in the US-ASCII character set. <li> It must not contain control characters. <\/ul>","!static":false,"!category":"function","!type":"fn(mHeaders?: Object)","parameters":{"mHeaders":"type: object, description: Map of HTTP header names to their values"}}},"sap.ui.core.Fragment_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Fragment with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.Fragment"},"sap.ui.core.SeparatorItem_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.SeparatorItem"},"sap.ui.core.ComponentContainer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.ComponentContainer"},"sap.ui.core.BusyIndicator":{"!description":"Provides methods to show or hide a waiting animation covering the whole page and blocking user interaction.","detachClose":{"!description":"Unregisters a handler from the {@link #event:Close Close} event.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.BusyIndicator"},"hide":{"!description":"Removes the BusyIndicator from the screen.","!static":"true","!category":"function","!type":"fn()"},"!module":"sap/ui/core/BusyIndicator","attachClose":{"!description":"Registers a handler for the {@link #event:Close Close} event.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to <code>sap.ui.core.BusyIndicator<\/code>.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.BusyIndicator"},"!helpDescription":"Provides methods to show or hide a waiting animation covering the whole page and blocking user interaction.","attachOpen":{"!description":"Registers a handler for the {@link #event:Open Open} event.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to <code>sap.ui.core.BusyIndicator<\/code>.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.BusyIndicator"},"show":{"!description":"Displays the <code>BusyIndicator<\/code> and starts blocking all user input. This only happens after some delay, and if, after that delay, the <code>BusyIndicator.hide()<\/code> has not yet been called in the meantime.\n\nThere is a certain default value for the delay, which can be overridden.","!static":"true","!category":"function","!type":"fn(iDelay?: Number)"},"!category":"namespace","detachOpen":{"!description":"Unregisters a handler from the {@link #event:Open Open} event.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.BusyIndicator"}},"sap.ui.model.analytics.odata4analytics.Parameterization":{"!description":"Representation of an entity type annotated with sap:semantics=\"parameters\".","getEntitySet":{"!description":"Get the entity set representing this query result in the OData model","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntitySet"},"getName":{"!description":"Get the name of the parameter","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.Object","findParameterByName":{"!description":"Find parameter by name","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.Parameter","parameters":{"sName":"type: string, description: Parameter name"}},"getEntityType":{"!description":"Get the entity type defining the type of this query result in the OData model","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntityType"},"!category":"class","getNavigationPropertyToQueryResult":{"!description":"Get navigation property to query result","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.QueryResult"},"getAllParameterNames":{"!description":"Get the names of all parameters part of the parameterization","!static":false,"!category":"function","!type":"fn() -> [String]"},"getAllParameters":{"!description":"Get all parameters included in this parameterization","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Create a representation of a parameterization for an analytic query. Do not create your own instances.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of an entity type annotated with sap:semantics=\"parameters\"."},"sap.ui.core":{"TooltipBase":"sap.ui.core.TooltipBase_obj","tmpl":"sap.ui.core.tmpl","Configuration":"sap.ui.core.Configuration_obj","IndicationColorSupport":"sap.ui.core.IndicationColorSupport","ExtensionPoint":"sap.ui.core.ExtensionPoint","busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"additionalText":{"!description":"Some additional text of type string, optionally to be displayed along with this item.","!category":"enum","!type":"String"},"usage":{"!description":"The component usage. If the ComponentContainer is used inside a Component, this Component can define a usage which will be used for creating the Component. This property can only be applied initially.","!category":"enum","!type":"String"},"hoverColor":{"!description":"This color is shown when icon is hovered. This property has no visual effect when run on mobile device.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!category":"enum","!type":"String"},"LocalBusyIndicator":"sap.ui.core.LocalBusyIndicator_obj","AbsoluteCSSSize":"sap.ui.core.AbsoluteCSSSize","ComponentMetadata":"sap.ui.core.ComponentMetadata_obj","History":"sap.ui.core.History_obj","type":{"!description":"type : String","!category":"enum","!type":"String"},"Fragment":"sap.ui.core.Fragment_obj","Design":"sap.ui.core.Design","Item":"sap.ui.core.Item_obj","TextDirection":"sap.ui.core.TextDirection","setAutoCloseAreas":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.75 please use {@link #setExtraContent} instead.<br>undefined","!category":"enum","!type":"String"},"AppCacheBuster":"sap.ui.core.AppCacheBuster","CommandExecution":"sap.ui.core.CommandExecution_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"Popup":"sap.ui.core.Popup_obj","CSSSize":"sap.ui.core.CSSSize","_fnOnInstanceInitialized":{"!description":"Callback handler which will be executed once a new Component instance is initialized.\n\nExample usage: <pre>\nsap.ui.require(['sap/ui/core/UIComponent'], function(UIComponent) {\n  UIComponent._fnOnInstanceInitialized = function(oComponent) {\n    // do some logic with the Component\n  }\n});\n<\/pre>\n\n<b>ATTENTION:<\/b> This hook must only be used by Fiori 2.0 adapter.","!category":"enum","!type":"String"},"ID":"sap.ui.core.ID","dnd":"sap.ui.core.dnd","text":{"!description":"The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.","!category":"enum","!type":"String"},"SeparatorItem":"sap.ui.core.SeparatorItem_obj","height":{"!description":"The height","!category":"enum","!type":"sap.ui.core.CSSSize"},"Toolbar":"sap.ui.core.Toolbar","!description":"The SAPUI5 Core Runtime.\n\nContains the UI5 jQuery plugins (jQuery.sap.*), the Core and all its components, base classes for Controls, Components and the Model View Controller classes.","InvisibleText":"sap.ui.core.InvisibleText_obj","TitleLevel":"sap.ui.core.TitleLevel","hyphenation":"sap.ui.core.hyphenation","UIComponent":"sap.ui.core.UIComponent_obj","readOnly":{"!description":"Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.","!category":"enum","!type":"Boolean"},"Orientation":"sap.ui.core.Orientation","Wrapping":"sap.ui.core.Wrapping","decorative":{"!description":"A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.","!category":"enum","!type":"Boolean"},"LayoutData":"sap.ui.core.LayoutData_obj","ValueState":"sap.ui.core.ValueState","util":"sap.ui.core.util","!module":"sap/ui/core/library","size":{"!description":"Size of the Scrollbar (in pixels).","!category":"enum","!type":"sap.ui.core.CSSSize"},"activeColor":{"!description":"This color is shown when icon is pressed/activated by the user.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!category":"enum","!type":"String"},"ResizeHandler":"sap.ui.core.ResizeHandler","sanitizeContent":{"!description":"Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.\n\nTo configure the set of allowed URLs, you can use the {@link jQuery.sap.addUrlWhitelist whitelist API}.","!category":"enum","!type":"Boolean"},"atPosition":{"!description":"Optional. At position defines which position on the target control to align the positioned tooltip.","!category":"enum","!type":"sap.ui.core.Dock"},"displayBlock":{"!description":"Whether the CSS display should be set to \"block\".","!category":"enum","!type":"Boolean"},"IShrinkable":"sap.ui.core.IShrinkable","AccessibleRole":"sap.ui.core.AccessibleRole","icon":{"!description":"Defines the URL for icon display","!category":"enum","!type":"sap.ui.core.URI"},"IContextMenu":"sap.ui.core.IContextMenu","URI":"sap.ui.core.URI","enabled":{"!description":"Enabled items can be selected.","!category":"enum","!type":"Boolean"},"IconColor":"sap.ui.core.IconColor","closeDuration":{"!description":"Optional. Close Duration in milliseconds.","!category":"enum","!type":"Number"},"delegate":"sap.ui.core.delegate","routing":"sap.ui.core.routing","search":"sap.ui.core.search","CustomStyleClassSupport":{"!description":"Applies the support for custom style classes on the prototype of a <code>sap.ui.core.Element<\/code>.\n\nAll controls (subclasses of <code>sap.ui.core.Control<\/code>) provide the support custom style classes. The control API provides functions to the application which allow it to add, remove or change style classes for the control. In general, this option is not available for elements because elements do not necessarily have a representation in the DOM.\n\nThis function can be used by a control developer to explicitly enrich the API of his/her element implementation with the API functions for the custom style class support. It must be called on the prototype of the element.\n\n<b>Usage Example:<\/b> <pre>\nsap.ui.define(['sap/ui/core/Element', 'sap/ui/core/CustomStyleClassSupport'], function(Element, CustomStyleClassSupport) {\n   \"use strict\";\n   var MyElement = Element.extend(\"my.MyElement\", {\n      metadata : {\n         //...\n      }\n      //...\n   });\n\n   CustomStyleClassSupport.apply(MyElement.prototype);\n\n   return MyElement;\n}, true);\n<\/pre>\n\nFurthermore, the function <code>oRenderManager.writeClasses(oElement);<\/code> ({@link sap.ui.core.RenderManager#writeClasses}) must be called within the renderer of the control to which the element belongs, when writing the root tag of the element. This ensures the classes are written to the HTML.\n\nThis function adds the following functions to the elements prototype: <ul> <li><code>addStyleClass<\/code>: {@link sap.ui.core.Control#addStyleClass}<\/li> <li><code>removeStyleClass<\/code>: {@link sap.ui.core.Control#removeStyleClass}<\/li> <li><code>toggleStyleClass<\/code>: {@link sap.ui.core.Control#toggleStyleClass}<\/li> <li><code>hasStyleClass<\/code>: {@link sap.ui.core.Control#hasStyleClass}<\/li> <\/ul> In addition the clone function of the element is extended to ensure that the custom style classes are also available on the cloned element.\n\n<b>Note:<\/b> This function can only be used <i>within<\/i> control development. An application cannot add style class support on existing elements by calling this function.","!static":"true","!category":"function","!type":"fn()"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"emphasized":{"!description":"If set the title is displayed emphasized. This feature is nor supported by all controls using the Title.control.","!category":"enum","!type":"Boolean"},"TextAlign":"sap.ui.core.TextAlign","activeBackgroundColor":{"!description":"Background color for Icon in active state.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!category":"enum","!type":"String"},"CustomData":"sap.ui.core.CustomData_obj","CSSColor":"sap.ui.core.CSSColor","RenderManager":"sap.ui.core.RenderManager_obj","key":{"!description":"Can be used as input for subsequent actions.","!category":"enum","!type":"String"},"IFormContent":"sap.ui.core.IFormContent","writeToDom":{"!description":"If set to \"true\" and the value is of type \"string\" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a \"data-*\" attribute. If the key is \"abc\" and the value is \"cde\", the HTML will look as follows:\n\n<pre>\n  &lt;SomeTag ... data-abc=\"cde\" ... &gt;\n<\/pre>\n\nThus the application can provide stable attributes by data binding which can be used for styling or identification purposes.\n\n<b>ATTENTION:<\/b> use carefully to not create huge attributes or a large number of them.","!category":"enum","!type":"Boolean"},"timestamp":{"!description":"Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.","!category":"enum","!type":"String"},"backgroundColor":{"!description":"Background color of the Icon in normal state.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!category":"enum","!type":"String"},"DropEffect":"sap.ui.core.dnd.DropEffect","Percentage":"sap.ui.core.Percentage","DropPosition":"sap.ui.core.dnd.DropPosition","_fnLoadComponentCallback":{"!description":"Callback handler which will be executed once the component is loaded. A copy of the configuration object together with a copy of the manifest object will be passed into the registered function. Also a return value is not expected from the callback handler. It will only be called for asynchronous manifest first scenarios. <p> Example usage: <pre>\nsap.ui.require(['sap/ui/core/Component'], function(Component) {\n  Component._fnLoadComponentCallback = function(oConfig, oManifest) {\n    // do some logic with the config\n  };\n});\n<\/pre> <p> <b>ATTENTION:<\/b> This hook must only be used by UI flexibility (library: sap.ui.fl) and will be replaced with a more generic solution!","!category":"enum","!type":"String"},"ValueStateSupport":"sap.ui.core.ValueStateSupport","openDuration":{"!description":"Optional. Open Duration in milliseconds.","!category":"enum","!type":"Number"},"ScrollBarAction":"sap.ui.core.ScrollBarAction","UIArea":"sap.ui.core.UIArea_obj","url":{"!description":"The URL of the component. This property can only be applied initially.","!category":"enum","!type":"sap.ui.core.URI"},"Dock":"sap.ui.core.Popup.Dock","DeclarativeSupport":"sap.ui.core.DeclarativeSupport_obj","ComponentLifecycle":"sap.ui.core.ComponentLifecycle","width":{"!description":"The width","!category":"enum","!type":"sap.ui.core.CSSSize"},"FormatSettings":"sap.ui.core.Configuration.FormatSettings_obj","CalendarType":"sap.ui.core.CalendarType","Locale":"sap.ui.core.Locale_obj","date":"sap.ui.core.date","LocaleData":"sap.ui.core.LocaleData_obj","BarColor":"sap.ui.core.BarColor","handleValidation":{"!description":"Enable/disable validation handling by MessageManager for this component. The resulting Messages will be propagated to the controls. This property can only be applied initially.","!category":"enum","!type":"Boolean"},"HorizontalAlign":"sap.ui.core.HorizontalAlign","Label":"sap.ui.core.Label","IconPool":"sap.ui.core.IconPool","IDScope":"sap.ui.core.IDScope","HTML":"sap.ui.core.HTML_obj","AnimationMode":"sap.ui.core.Configuration.AnimationMode","BlockLayerUtils":{"!description":"BlockLayerUtils : String","!module":"sap/ui/core/BlockLayerUtils","!category":"enum","!type":"String"},"Scrolling":"sap.ui.core.Scrolling","BusyIndicatorUtils":"sap.ui.core.BusyIndicatorUtils","DropLayout":"sap.ui.core.dnd.DropLayout","lifecycle":{"!description":"Lifecycle behavior for the Component associated by the <code>ComponentContainer<\/code>. The default behavior is <code>Legacy<\/code>. This means that the <code>ComponentContainer<\/code> takes care that the Component is destroyed when the <code>ComponentContainer<\/code> is destroyed, but it is <b>not<\/b> destroyed when a new Component is associated. If you use the <code>usage<\/code> property to create the Component, the default behavior is <code>Container<\/code>. This means that the Component is destroyed when the <code>ComponentContainer<\/code> is destroyed or a new Component is associated. This property must only be applied before a component instance is created.","!category":"enum","!type":"sap.ui.core.ComponentLifecycle"},"_fnPreprocessManifest":{"!description":"Callback handler which will be executed once the manifest.json was loaded for a component, but before the manifest is interpreted. The loaded manifest will be passed into the registered function.\n\nThe callback may modify the parsed manifest object and must return a Promise which resolves with the manifest object. If the Promise is rejected, the component creation fails with the rejection reason.","!category":"enum","!type":"String"},"BusyIndicator":"sap.ui.core.BusyIndicator","_fnOnInstanceDestroy":{"!description":"Callback handler which will be executed when a Component instance is destroyed.\n\nExample usage: <pre>\nsap.ui.require(['sap/ui/core/UIComponent'], function(UIComponent) {\n  UIComponent._fnOnInstanceDestroy = function(oComponent) {\n    // do some logic with the Component\n  }\n});\n<\/pre>\n\n<b>ATTENTION:<\/b> This hook must only be used by Fiori 2.0 adapter.","!category":"enum","!type":"String"},"MessageType":"sap.ui.core.MessageType","noTabStop":{"!description":"Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached. If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.","!category":"enum","!type":"Boolean"},"Core":"sap.ui.core.Core_obj","settings":{"!description":"The settings object passed to the component when created. This property can only be applied initially.","!category":"enum","!type":"Object"},"VerticalAlign":"sap.ui.core.VerticalAlign","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"offset":{"!description":"Optional. Offset adds these left-top values to the calculated position. Example: \"10 3\".","!category":"enum","!type":"String"},"level":{"!description":"Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.\n\nCurrently not all controls using the Title.control supporting this property.","!category":"enum","!type":"sap.ui.core.TitleLevel"},"Priority":"sap.ui.core.Priority","format":"sap.ui.core.format","alt":{"!description":"This defines the alternative text which is used for outputting the aria-label attribute on the DOM.","!category":"enum","!type":"String"},"steps":{"!description":"Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.","!category":"enum","!type":"Number"},"collision":{"!description":"Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.","!category":"enum","!type":"sap.ui.core.Collision"},"OpenState":"sap.ui.core.OpenState","!helpDescription":"The SAPUI5 Core Runtime.\n\nContains the UI5 jQuery plugins (jQuery.sap.*), the Core and all its components, base classes for Controls, Components and the Model View Controller classes.","Renderer":"sap.ui.core.Renderer","name":{"!description":"Component name, the package where the component is contained. This property can only be applied initially.","!category":"enum","!type":"String"},"Icon":"sap.ui.core.Icon_obj","support":"sap.ui.core.support","ScrollBar":"sap.ui.core.ScrollBar_obj","IndicationColor":"sap.ui.core.IndicationColor","ViewType":"sap.ui.core.mvc.ViewType","ImeMode":"sap.ui.core.ImeMode","propagateModel":{"!description":"Defines whether binding information is propagated to the component.","!category":"enum","!type":"Boolean"},"Message":"sap.ui.core.Message_obj","color":{"!description":"The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!category":"enum","!type":"String"},"Element":"sap.ui.core.Element_obj","HistoryDirection":"sap.ui.core.routing.HistoryDirection","LabelEnablement":"sap.ui.core.LabelEnablement","autoPrefixId":{"!description":"Flag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash. This property can only be applied initially.","!category":"enum","!type":"Boolean"},"!category":"namespace","vertical":{"!description":"Orientation. Defines if the Scrollbar is vertical or horizontal.","!category":"enum","!type":"Boolean"},"EventBus":"sap.ui.core.EventBus_obj","theming":"sap.ui.core.theming","preferDOM":{"!description":"Whether existing DOM content is preferred over the given content string.\n\nThere are two scenarios where this flag is relevant (when set to true): <ul> <li>for the initial rendering: when an HTML control is added to a UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content<\/li> <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content<\/li> <\/ul>\n\nAs preserving the existing DOM is the most common use case of the HTML control, the default value is true.","!category":"enum","!type":"Boolean"},"content":{"!description":"HTML content to be displayed, defined as a string.\n\nThe content is converted to DOM nodes with a call to <code>new jQuery(content)<\/code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.\n\nSome of these restrictions (there might be others!) are: <ul> <li>the content must be enclosed in tags, pure text is not supported. <\/li> <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.<\/li> <\/ul>\n\nPlease consider to consult the jQuery documentation as well.\n\nThe HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. <code>setContent(\"&lt;div/>&lt;div/>\")<\/code>), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.\n\nWhen changing the content dynamically, ensure that the ID of the root node remains the same as the HTML control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.","!category":"enum","!type":"String"},"scrollPosition":{"!description":"Scroll position in steps or pixels.","!category":"enum","!type":"Number"},"textDirection":{"!description":"Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.","!category":"enum","!type":"sap.ui.core.TextDirection"},"Control":"sap.ui.core.Control_obj","busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"contentSize":{"!description":"Size of the scrollable content (in pixels).","!category":"enum","!type":"sap.ui.core.CSSSize"},"ComponentContainer":"sap.ui.core.ComponentContainer_obj","fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"hoverBackgroundColor":{"!description":"Background color for Icon in hover state. This property has no visual effect when run on mobile device.\n\nThe property can be set with {@link sap.ui.core.CSSColor CSS Color} or {@link sap.ui.core.IconColor Semantic Icon Color}.","!category":"enum","!type":"String"},"mvc":"sap.ui.core.mvc","Component":"sap.ui.core.Component_obj","Patcher":"sap.ui.core.Patcher","ws":"sap.ui.core.ws","value":{"!description":"The data stored in this CustomData object. When the data is just stored, it can be any JS type, but when it is to be written to HTML (<code>writeToDom == true<\/code>) then it must be a string. If this restriction is violated, a warning will be logged and nothing will be written to the DOM.","!category":"enum","!type":"Object"},"useIconTooltip":{"!description":"Decides whether a default Icon tooltip should be used if no tooltip is set.","!category":"enum","!type":"Boolean"},"registry":"sap.ui.core.Element.registry","BusyIndicatorSize":"sap.ui.core.BusyIndicatorSize","src":{"!description":"This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with an Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.","!category":"enum","!type":"sap.ui.core.URI"},"manifest":{"!description":"Controls when and from where to load the manifest for the Component. When set to any truthy value, the manifest will be loaded asynchronously by default and evaluated before the Component controller, if it is set to a falsy value other than <code>undefined<\/code>, the manifest will be loaded after the controller. A non-empty string value will be interpreted as the URL location from where to load the manifest. A non-null object value will be interpreted as manifest content. This property can only be applied initially.","!category":"enum","!type":"Object"},"Collision":"sap.ui.core.Collision","PopupInterface":"sap.ui.core.PopupInterface","Title":"sap.ui.core.Title_obj","SortOrder":"sap.ui.core.SortOrder","Manifest":"sap.ui.core.Manifest_obj","message":"sap.ui.core.message","IntervalTrigger":"sap.ui.core.IntervalTrigger_obj","command":{"!description":"The command's name, that has to be defined in the manifest. This property can only be applied initially.","!category":"enum","!type":"String"},"postmessage":"sap.ui.core.postmessage","AccessibleLandmarkRole":"sap.ui.core.AccessibleLandmarkRole","_fnOnInstanceCreated":{"!description":"Callback handler which will be executed once a component instance has been created by {#link sap.ui.component}. The component instance and the configuration object will be passed into the registered function. For async scenarios (<code>vConfig.async = true<\/code>) a Promise can be provided as return value from the callback handler to delay resolving the Promise returned by {@link sap.ui.component}. In synchronous scenarios the return value will be ignored.\n\nExample usage: <pre>\nsap.ui.require(['sap/ui/core/Component'], function(Component) {\n  Component._fnOnInstanceCreated = function(oComponent, oConfig) {\n    // do some logic with the config\n\n    // optionally return a Promise\n    return doAsyncStuff();\n  };\n});\n<\/pre> <b>ATTENTION:<\/b> This hook must only be used by UI flexibility (library: sap.ui.fl) and will be replaced with a more generic solution!","!category":"enum","!type":"String"},"closeDelay":{"!description":"Closing delay of the tooltip in milliseconds","!category":"enum","!type":"Number"},"async":{"!description":"Flag whether the component should be created sync (default) or async. The default will be async when initially the property <code>manifest<\/code> is set to a truthy value and for the property <code>async<\/code> no value has been specified. This property can only be applied initially.","!category":"enum","!type":"Boolean"},"openDelay":{"!description":"Opening delay of the tooltip in milliseconds","!category":"enum","!type":"Number"},"CSSSizeShortHand":"sap.ui.core.CSSSizeShortHand","service":"sap.ui.core.service","ElementMetadata":"sap.ui.core.ElementMetadata_obj","EnabledPropagator":"sap.ui.core.EnabledPropagator_obj","ListItem":"sap.ui.core.ListItem_obj","XMLComposite":"sap.ui.core.XMLComposite_obj","VariantLayoutData":"sap.ui.core.VariantLayoutData_obj","myPosition":{"!description":"Optional. My position defines which position on the extended tooltip being positioned to align with the target control.","!category":"enum","!type":"sap.ui.core.Dock"}},"sap.ui.core.Configuration.FormatSettings":{"getLegacyDateCalendarCustomizing":{"!description":"Returns the currently set customizing data for Islamic calendar support","!static":false,"!category":"function","!type":"fn() -> [Object]"},"setTimePattern":{"!description":"Defines the preferred format pattern for the given time format style.\n\nCalling this method with a null or undefined pattern removes a previously set pattern.\n\nIf a pattern is defined, it will be preferred over patterns derived from the current locale.\n\nSee class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.\n\nAfter changing the time pattern, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sStyle: String, sPattern: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sPattern":"type: string, description: the format pattern to be used in LDML syntax.","sStyle":"type: string, description: must be one of short, medium, long or full."}},"getLegacyTimeFormat":{"!description":"Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.base.Object","!category":"class","setCustomCurrencies":{"!description":"Sets custom currencies and replaces existing entries.\n\nThere is a special currency code named \"DEFAULT\" that is optional. In case it is set it will be used for all currencies not contained in the list, otherwise currency digits as defined by the CLDR will be used as a fallback.\n\nExample: To use CLDR, but override single currencies <code> { \"KWD\": {\"digits\": 3}, \"TND\" : {\"digits\": 3} } <\/code>\n\nTo replace the CLDR currency digits completely <code> { \"DEFAULT\": {\"digits\": 2}, \"ADP\": {\"digits\": 0}, ... \"XPF\": {\"digits\": 0} } <\/code>\n\nNote: To unset the custom currencies: call with <code>undefined<\/code>","!static":false,"!category":"function","!type":"fn(mCurrencies: Object) -> sap.ui.core.Configuration.FormatSettings","parameters":{"mCurrencies":"type: object, description: currency map which is set"}},"getLegacyNumberFormat":{"!description":"Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.","!static":false,"!category":"function","!type":"fn()"},"setLegacyTimeFormat":{"!description":"Allows to specify one of the legacy ABAP time formats.\n\nThis method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP formats and sets the day period texts to \"AM\"/\"PM\" or \"am\"/\"pm\" respectively. When called with a null or undefined format id, any previously applied format will be removed.\n\nAfter changing the legacy time format, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sFormatId: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sFormatId":"type: string, description: id of the ABAP time format (one of '0','1','2','3','4')"}},"setDatePattern":{"!description":"Defines the preferred format pattern for the given date format style.\n\nCalling this method with a null or undefined pattern removes a previously set pattern.\n\nIf a pattern is defined, it will be preferred over patterns derived from the current locale.\n\nSee class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.\n\nAfter changing the date pattern, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sStyle: String, sPattern: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sPattern":"type: string, description: the format pattern to be used in LDML syntax.","sStyle":"type: string, description: must be one of short, medium, long or full."}},"setLegacyDateCalendarCustomizing":{"!description":"Allows to specify the customizing data for Islamic calendar support","!static":false,"!category":"function","!type":"fn(aMappings: [Object]) -> sap.ui.core.Configuration.FormatSettings","parameters":{"aMappings":"type: object[], description: contains the customizing data for the support of Islamic calendar."}},"!constructorDescription":"Creates a new Configuration object.","setLegacyNumberFormat":{"!description":"Allows to specify one of the legacy ABAP number format.\n\nThis method will modify the 'group' and 'decimal' symbols. When called with a null or undefined format id, any previously applied format will be removed.\n\nAfter changing the legacy number format, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sFormatId: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sFormatId":"type: string, description: id of the ABAP number format set (one of ' ','X','Y')"}},"getLegacyDateFormat":{"!description":"Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.","!static":false,"!category":"function","!type":"fn()"},"getNumberSymbol":{"!description":"Returns the currently set number symbol of the given type or undefined if no symbol has been defined.","!static":false,"!category":"function","!type":"fn()"},"setTrailingCurrencyCode":{"!description":"Define whether the NumberFormatter shall always place the currency code after the numeric value, with the only exception of right-to-left locales, where the currency code shall be placed before the numeric value. Default configuration setting is <code>true<\/code>.\n\nWhen set to <code>false<\/code> the placement of the currency code is done dynamically, depending on the configured locale using data provided by the Unicode Common Locale Data Repository (CLDR).\n\nEach currency instance ({@link sap.ui.core.format.NumberFormat#getCurrencyInstance}) will be created with this setting unless overwritten on instance level.","!static":false,"!category":"function","!type":"fn(bTrailingCurrencyCode: Boolean) -> sap.ui.core.Configuration.FormatSettings","parameters":{"bTrailingCurrencyCode":"type: boolean, description: Whether currency codes shall always be placed after the numeric value"}},"setLegacyDateFormat":{"!description":"Allows to specify one of the legacy ABAP date formats.\n\nThis method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP format. When called with a null or undefined format id, any previously applied format will be removed.\n\nAfter changing the legacy date format, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sFormatId: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sFormatId":"type: string, description: id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')"}},"!description":"Collects and stores the configuration of the current environment.\n\nThe Configuration is initialized once when the {@link sap.ui.core.Core} is created. There are different ways to set the environment configuration (in ascending priority): <ol> <li>System defined defaults<\/li> <li>Server wide defaults, read from /sap-ui-config.json<\/li> <li>Properties of the global configuration object window[\"sap-ui-config\"]<\/li> <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag.<\/li> <li>Individual data-sap-ui-<i>xyz<\/i> attributes of the bootstrap tag<\/li> <li>Using URL parameters<\/li> <li>Setters in this Configuration object (only for some parameters)<\/li> <\/ol>\n\nThat is, attributes of the DOM reference override the system defaults, URL parameters override the DOM attributes (where empty URL parameters set the parameter back to its system default). Calling setters at runtime will override any previous settings calculated during object creation.\n\nThe naming convention for parameters is: <ul> <li>in the URL : sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <\/ul> where <i>PARAMETER-NAME<\/i> is the name of the parameter in lower case.\n\nValues of boolean parameters are case insensitive where \"true\" and \"x\" are interpreted as true.","addCustomCurrencies":{"!description":"Adds custom currencies to the existing entries. E.g. <code> { \"KWD\": {\"digits\": 3}, \"TND\" : {\"digits\": 3} } <\/code>","!static":false,"!category":"function","!type":"fn(mCurrencies: Object) -> sap.ui.core.Configuration.FormatSettings","parameters":{"mCurrencies":"type: object, description: adds to the currency map"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Configuration.FormatSettings.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getDatePattern":{"!description":"Returns the currently set date pattern or undefined if no pattern has been defined.","!static":false,"!category":"function","!type":"fn()"},"getCustomCurrencies":{"!description":"Retrieves the custom currencies. E.g. <code> { \"KWD\": {\"digits\": 3}, \"TND\" : {\"digits\": 3} } <\/code>","!static":false,"!category":"function","!type":"fn() -> Object"},"setFirstDayOfWeek":{"!description":"Defines the day used as the first day of the week.\n\nThe day is set as an integer value between 0 (Sunday) and 6 (Saturday). Calling this method with a null or undefined symbol removes a previously set value.\n\nIf a value is defined, it will be preferred over values derived from the current locale.\n\nUsually in the US the week starts on Sunday while in most European countries on Monday. There are special cases where you want to have the first day of week set independent of the user locale.\n\nAfter changing the first day of week, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(iValue: Number) -> sap.ui.core.Configuration.FormatSettings","parameters":{"iValue":"type: int, description: must be an integer value between 0 and 6"}},"setNumberSymbol":{"!description":"Defines the string to be used for the given number symbol.\n\nCalling this method with a null or undefined symbol removes a previously set symbol string. Note that an empty string is explicitly allowed.\n\nIf a symbol is defined, it will be preferred over symbols derived from the current locale.\n\nSee class {@link sap.ui.core.format.NumberFormat} for details about the symbols.\n\nAfter changing the number symbol, the framework tries to update localization specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} for details and restrictions.","!static":false,"!category":"function","!type":"fn(sStyle: String, sSymbol: String) -> sap.ui.core.Configuration.FormatSettings","parameters":{"sSymbol":"type: string, description: will be used to represent the given symbol type","sStyle":"type: string, description: must be one of decimal, group, plusSign, minusSign."}},"getTimePattern":{"!description":"Returns the currently set time pattern or undefined if no pattern has been defined.","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!module":"sap/ui/core/Configuration","!helpDescription":"Collects and stores the configuration of the current environment.\n\nThe Configuration is initialized once when the {@link sap.ui.core.Core} is created. There are different ways to set the environment configuration (in ascending priority): <ol> <li>System defined defaults<\/li> <li>Server wide defaults, read from /sap-ui-config.json<\/li> <li>Properties of the global configuration object window[\"sap-ui-config\"]<\/li> <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag.<\/li> <li>Individual data-sap-ui-<i>xyz<\/i> attributes of the bootstrap tag<\/li> <li>Using URL parameters<\/li> <li>Setters in this Configuration object (only for some parameters)<\/li> <\/ol>\n\nThat is, attributes of the DOM reference override the system defaults, URL parameters override the DOM attributes (where empty URL parameters set the parameter back to its system default). Calling setters at runtime will override any previous settings calculated during object creation.\n\nThe naming convention for parameters is: <ul> <li>in the URL : sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME<\/i>=\"value\"<\/li> <\/ul> where <i>PARAMETER-NAME<\/i> is the name of the parameter in lower case.\n\nValues of boolean parameters are case insensitive where \"true\" and \"x\" are interpreted as true.","getFormatLocale":{"!description":"Returns the locale to be used for formatting.\n\nIf no such locale has been defined, this method falls back to the language, see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.\n\nIf any user preferences for date, time or number formatting have been set, and if no format locale has been specified, then a special private use subtag is added to the locale, indicating to the framework that these user preferences should be applied.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Locale"},"getTrailingCurrencyCode":{"!description":"Returns current trailingCurrencyCode configuration for new NumberFormatter instances","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.model.resource":{"!description":"ResourceBundle-based DataBinding","!module":"sap/ui/model/resource/ResourceModel","!helpDescription":"ResourceBundle-based DataBinding","ResourceModel":"sap.ui.model.resource.ResourceModel_obj","!category":"namespace"},"sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround":{"!description":"Representation of an OData model with analytical annotations defined by OData4SAP.","!constructorDescription":"Create a representation of the analytical semantics of OData service metadata","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of an OData model with analytical annotations defined by OData4SAP.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.routing.Target":{"!description":"Provides a convenient way for placing views into the correct containers of your application.\n\nThe main benefit of Targets is lazy loading: you do not have to create the views until you really need them.","fireDisplay":{"!description":"Fires event {@link #event:created created} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Target","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"_beforePlacingViewIntoContainer":{"!description":"This function is called between the target view is loaded and the view is added to the container.\n\nThis function can be used for applying modification on the view or the container to make the rerendering occur together with the later aggregation change.","!static":false,"!category":"function","!type":"fn(mArguments: Object)","parameters":{"mArguments":"type: object, description: the object containing the arguments"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.Target.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"detachDisplay":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:display display} event of this <code>sap.ui.core.routing.Target<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Target","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"display":{"!description":"Creates a view and puts it in an aggregation of a control that has been defined in the {@link sap.ui.core.routing.Target#constructor}.","!static":false,"!category":"function","!type":"fn(vData?: *) -> Promise","parameters":{"vData":"type: *, description: an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them."}},"!proto":"sap.ui.base.EventProvider","destroy":{"!description":"Destroys the target, will be called by {@link sap.m.routing.Targets} don't call this directly.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Target"},"!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Target with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"<b>Don't call this constructor directly<\/b>, use {@link sap.ui.core.routing.Targets} instead, it will create instances of a Target.<br/>\nIf you are using the mobile library, please use the {@link sap.m.routing.Targets} constructor, please read the documentation there.<br/>","!module":"sap/ui/core/routing/Target","!helpDescription":"Provides a convenient way for placing views into the correct containers of your application.\n\nThe main benefit of Targets is lazy loading: you do not have to create the views until you really need them.","attachDisplay":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:display display} event of this <code>sap.ui.core.routing.Target<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Target<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Target","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.routing.Target<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.model.analytics.odata4analytics.QueryResultRequest_obj":{"!type":"fn(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oParameterizationRequest?: sap.ui.model.analytics.odata4analytics.ParameterizationRequest)","prototype":"sap.ui.model.analytics.odata4analytics.QueryResultRequest"},"sap.ui.model.odata.type.DateTimeBase_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.DateTimeBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.DateTimeBase"},"sap.ui.model.odata.UpdateMethod":{"!description":"Different methods for update operations.","!module":"sap/ui/model/odata/UpdateMethod","Merge":{"!description":"Update requests will be send with HTTP method <code>MERGE<\/code>.","!category":"enum","!type":"String"},"!category":"static class","Put":{"!description":"Update requests will be send with HTTP method <code>PUT<\/code>.","!category":"enum","!type":"String"}},"sap.ui.model.TreeAutoExpandMode":{"!description":"Different modes for setting the auto expand mode on tree or analytical bindings.","!module":"sap/ui/model/TreeAutoExpandMode","Sequential":{"!description":"Tree nodes will be expanded in sequence, level by level (Single requests are sent).","!category":"enum","!type":"String"},"!category":"static class","Bundled":{"!description":"If supported by a backend provider with analytical capabilities, the requests needed for an automatic node expansion are bundled.","!category":"enum","!type":"String"}},"module:sap/ui/events/TouchToMouseMapping":{"!module":"sap/ui/events/TouchToMouseMapping","!category":"namespace","module:sap/ui/events/TouchToMouseMapping":"module:sap/ui/events/TouchToMouseMapping","disableTouchToMouseHandling":{"!description":"Disable touch to mouse handling","!category":"function","!type":"fn()"}},"sap.ui.model.odata.ODataModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sServiceUrl?: String, mParameters?: Object)","prototype":"sap.ui.model.odata.ODataModel"},"sap.ui.core.Design":{"!description":"Font design for texts.","!module":"sap/ui/core/library","!category":"static class","Standard":{"!description":"Standard font","!category":"enum","!type":"String"},"Monospace":{"!description":"Mono space font","!category":"enum","!type":"String"}},"module:sap/base/util/LoaderExtensions":{"!description":"Utilities extending the <code>sap.ui.loader<\/code> functionalities.","registerResourcePath":{"!description":"Registers a URL prefix for a resource name prefix.\n\nBefore a resource is loaded, the longest registered prefix of its unified resource name is searched for and the associated URL prefix is used as a prefix for the request URL. The remainder of the resource name is attached to the request URL 1:1.\n\nThe registration and search operates on full name segments only. So when a prefix\n\n<pre>\n   'sap/com'  ->  'http://www.sap.com/ui5/resources/'\n<\/pre>\n\nis registered, then it will match the name\n\n<pre>\n   'sap/com/Button'\n<\/pre>\n\nbut not\n\n<pre>\n   'sap/commons/Button'\n<\/pre>\n\nNote that the empty prefix ('') will always match and thus serves as a fallback for any search.\n\nThe URL prefix can either be given as string or as an object which contains a <code>url<\/code> property and optionally a <code>final<\/code> flag. If <code>final<\/code> is set to true, overwriting the path for the given resource name prefix is not possible anymore.","!category":"function","!type":"fn(sResourceNamePrefix: String, vUrlPrefix: String | Object)"},"getAllRequiredModules":{"!description":"Returns the names of all required modules in the legacy syntax for module names (dot-separated).","!category":"function","!type":"fn() -> [String]"},"!module":"sap/base/util/LoaderExtensions","loadResource":{"!description":"Retrieves the resource with the given name, either from the preload cache or from the server. The expected data type of the resource can either be specified in the options (<code>dataType<\/code>) or it will be derived from the suffix of the <code>sResourceName<\/code>. The only supported data types so far are <code>'xml'<\/code>, <code>'html'<\/code>, <code>'json'<\/code> and <code>'text'<\/code>. If the resource name extension doesn't match any of these extensions, the <code>dataType<\/code> property must be specified as option.\n\nIf the resource is found in the preload cache, it will be converted from text format to the requested <code>dataType<\/code> using conversions similar to: <pre>\n  dataType | conversion\n  ---------+-------------------------------------------------------------\n    html   | text (no conversion)\n    json   | JSON.parse(text)\n    xml    | DOMParser.prototype.parseFromString(text, \"application/xml\")\n<\/pre>\n\nIf it is not found, the resource name will be converted to a resource URL (using {@link #getResourcePath}) and the resulting URL will be requested from the server with an XMLHttpRequest.\n\nIf the resource was found in the local preload cache and any necessary conversion succeeded or when the resource was retrieved from the backend successfully, the content of the resource will be returned. In any other case, an exception will be thrown, or if option <code>failOnError<\/code> is set, <code>null<\/code> will be returned.\n\nFor asynchronous calls, the return value of this method is a Promise which resolves with the content of the resource on success or rejects with an error in case of errors. If <code>failOnError<\/code> is <code>false<\/code> and an error occurs, the promise won't be rejected, but resolved with <code>null<\/code>.\n\nFuture implementations of this API might add more options. Generic implementations that accept an <code>mOptions<\/code> object and propagate it to this function should limit the options to the currently defined set of options or they might fail for unknown options.","!category":"function","!type":"fn(sResourceName?: String, mOptions?: Object) -> String | Document | Object | Promise"},"!helpDescription":"Utilities extending the <code>sap.ui.loader<\/code> functionalities.","getKnownSubtypes":{"!description":"Returns all known subtypes.","!category":"function","!type":"fn() -> [Object.<string,string]"},"notifyResourceLoading":{"!description":"Hook to notify interaction tracking about the loading of a resource.\n\nWhen set, the hook will be called when loading a resource starts. The hook can return a callback function which will be called when loading the resource finishes (no matter whether loading succeeds or fails). No further data is provided to the hook nor to the callback.\n\nOnly a single implementation of the hook is supported.","!category":"enum","!type":"fn()"},"!category":"namespace","module:sap/base/util/LoaderExtensions":"module:sap/base/util/LoaderExtensions"},"sap.ui.core.Collision":{"!description":"Collision behavior: horizontal/vertical.\n\nDefines how the position of an element should be adjusted in case it overflows the window in some direction. For both directions this can be \"flip\", \"fit\" or \"none\". If only one behavior is provided it is applied to both directions. Examples: \"flip\", \"fit none\".","!module":"sap/ui/core/library","!helpDescription":"Collision behavior: horizontal/vertical.\n\nDefines how the position of an element should be adjusted in case it overflows the window in some direction. For both directions this can be \"flip\", \"fit\" or \"none\". If only one behavior is provided it is applied to both directions. Examples: \"flip\", \"fit none\".","!category":"namespace"},"sap.ui.core.mvc.JSView":{"!description":"A View defined/constructed by JavaScript code.","extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.JSView.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new mvc/JSView.","createContent":{"!description":"A method to be implemented by JSViews, returning the View UI. While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file, JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement. The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"!module":"sap/ui/core/mvc/JSView","!helpDescription":"A View defined/constructed by JavaScript code.","!proto":"sap.ui.core.mvc.View","create":{"!description":"Creates an instance of the view with the given name (and id).","!static":true,"!category":"function","!type":"fn(oOptions: Object) -> Promise.<sap.ui.core.mvc.JSView>","parameters":{"oOptions":"type: object, description: An object containing the view configuration options."}},"!category":"class","getAutoPrefixId":{"!description":"A method to be implemented by JSViews, returning the flag whether to prefix the IDs of controls automatically or not if the controls are created inside the {@link sap.ui.core.mvc.JSView#createContent} function. By default this feature is not activated.\n\nYou can overwrite this function and return true to activate the automatic prefixing.","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.core.XMLComposite_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.XMLComposite with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.XMLComposite"},"sap.ui.core.util.XMLPreprocessor":{"!description":"The XML pre-processor for template instructions in XML views.","IContext":"sap.ui.core.util.XMLPreprocessor.IContext","!module":"sap/ui/core/util/XMLPreprocessor","!helpDescription":"The XML pre-processor for template instructions in XML views.","!category":"namespace"},"sap.ui.model.odata.v4.ODataListBinding":{"hasPendingChanges":{"!description":"Returns <code>true<\/code> if this binding or its dependent bindings have pending changes, meaning updates that have not yet been successfully sent to the server.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"requestDownloadUrl":{"!description":"Returns a URL by which the complete content of the list can be downloaded in JSON format. The request delivers all entities considering the binding's query options (such as filters or sorters).\n\nThe returned URL does not specify <code>$skip<\/code> and <code>$top<\/code> and leaves it up to the server how many rows it delivers. Many servers tend to choose a small limit without <code>$skip<\/code> and <code>$top<\/code>, so it might be wise to add an appropriate value for <code>$top<\/code> at least.\n\nAdditionally, you must be aware of server-driven paging and be ready to send a follow-up request if the response contains <code>@odata.nextlink<\/code>.","!static":false,"!category":"function","!type":"fn() -> Promise.<string>"},"setAggregation":{"!description":"Sets a new data aggregation object and derives the system query option <code>$apply<\/code> implicitly from it.","!static":false,"!category":"function","!type":"fn(oAggregation?: Object)","parameters":{"oAggregation":"type: object, description: An object holding the information needed for data aggregation; see also <a href=\"http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/\">OData Extension for Data Aggregation Version 4.0<\/a>. Since 1.76.0, <code>undefined<\/code> can be used to remove the data aggregation object, which allows to set <code>$apply<\/code> explicitly afterwards. <code>null<\/code> is not supported."}},"changeParameters":{"!description":"Changes this binding's parameters and refreshes the binding.\n\nIf there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #changeParameters}.\n\nThe parameters are changed according to the given map of parameters: Parameters with an <code>undefined<\/code> value are removed, the other parameters are set, and missing parameters remain unchanged.","!static":false,"!category":"function","!type":"fn(mParameters: Object)","parameters":{"mParameters":"type: object, description: Map of binding parameters, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}"}},"attachCreateSent":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'createSent' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"!proto":"sap.ui.model.ListBinding","!category":"class","attachPatchSent":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'patchSent' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"updateAnalyticalInfo":{"!description":"Updates the binding's system query option <code>$apply<\/code> based on the given data aggregation information. Its value is \"groupby((&lt;dimension_1,...,dimension_N,unit_or_text_1,...,unit_or_text_K>), aggregate(&lt;measure> with &lt;method> as &lt;alias>, ...))\" where the \"aggregate\" part is only present if measures are given and both \"with\" and \"as\" are optional.","!static":false,"!category":"function","!type":"fn(aAggregation: [Object]) -> Object","parameters":{"aAggregation":"type: object[], description: An array with objects holding the information needed for data aggregation; see also <a href=\"http://docs.oasis-open.org/odata/odata-data-aggregation-ext/v4.0/\">OData Extension for Data Aggregation Version 4.0<\/a>"}},"getHeaderContext":{"!description":"Returns the header context which allows binding to <code>$count<\/code>. If known, the value of such a binding is the sum of the element count of the collection on the server and the number of transient entities created on the client. Otherwise it is <code>undefined<\/code>. The value is a number and its type is <code>Edm.Int64<\/code>.\n\nThe count is known to the binding in the following situations: <ul> <li>The server-side count has been requested via the system query option <code>$count<\/code>. <li>A \"short read\" in a paged collection (the server delivered less elements than requested) indicated that the server has no more unread elements. <li>It has been read completely in one request, for example an embedded collection via <code>$expand<\/code>. <\/ul>\n\nThe <code>$count<\/code> is unknown, if the binding is relative, but has no context.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.Context"},"!constructorDescription":"Do <strong>NOT<\/strong> call this private constructor, but rather use\n{@link sap.ui.model.odata.v4.ODataModel#bindList} instead!","getContexts":{"!description":"Returns already created binding contexts for all entities in this list binding for the range determined by the given start index <code>iStart<\/code> and <code>iLength<\/code>. If at least one of the entities in the given range has not yet been loaded, fires a {@link #event:change} event on this list binding once these entities have been loaded <b>asynchronously<\/b>. A further call to this method in the 'change' event handler with the same index range then yields the updated array of contexts.","!static":false,"!category":"function","!type":"fn(iStart?: Number, iLength?: Number, iMaximumPrefetchSize?: Number) -> [sap.ui.model.odata.v4.Context]","parameters":{"iStart":"type: number, description: The index where to start the retrieval of contexts","iLength":"type: number, description: The number of contexts to retrieve beginning from the start index; defaults to the model's size limit, see {@link sap.ui.model.Model#setSizeLimit}; <code>Infinity<\/code> may be used since 1.53.0 to retrieve all data","iMaximumPrefetchSize":"type: number, description: The maximum number of contexts to read before and after the given range; with this, controls can prefetch data that is likely to be needed soon, e.g. when scrolling down in a table. Negative values will be treated as 0. Supported since 1.39.0; <code>Infinity<\/code> may be used since 1.53.0 to prefetch all data and thus disable paging."}},"requestContexts":{"!description":"Requests the entities for the given index range of the binding's collection and resolves with the corresponding contexts.","!static":false,"!category":"function","!type":"fn(iStart?: Number, iLength?: Number, sGroupId?: String) -> [Promise.<sap.ui.model.odata.v4.Context]","parameters":{"sGroupId":"type: string, description: The group ID to be used for the request; if not specified, the group ID for this binding is used, see {@link sap.ui.model.odata.v4.ODataListBinding#constructor}. Valid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}.","iStart":"type: number, description: The index where to start the retrieval of contexts; must be greater than or equal to 0","iLength":"type: number, description: The number of contexts to retrieve beginning from the start index; defaults to the model's size limit, see {@link sap.ui.model.Model#setSizeLimit}; must be greater than 0, <code>Infinity<\/code> may be used to retrieve all data"}},"resetChanges":{"!description":"Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also invalid user input.","!static":false,"!category":"function","!type":"fn() -> Promise"},"getFilterInfo":{"!description":"Returns the filter information as an abstract syntax tree. Consumers must not rely on the origin information to be available, future filter implementations will not provide this information.\n\nIf the system query option <code>$filter<\/code> is present, it will be added to the AST as a node with the following structure: <ul> <li><code>expression<\/code>: the value of the system query option <code>$filter<\/code> <li><code>syntax<\/code>: the OData version of this bindings model, e.g. \"OData 4.0\" <li><code>type<\/code>: \"Custom\" <\/ul>","!static":false,"!category":"function","!type":"fn(bIncludeOrigin?: Boolean) -> Object","parameters":{"bIncludeOrigin":"type: boolean, description: whether to include information about the filter objects from which the tree has been created"}},"detachPatchCompleted":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'patchCompleted' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"create":{"!description":"Creates a new entity and inserts it at the start or the end of the list.\n\nFor creating the new entity, the binding's update group ID is used, see binding parameter $$updateGroupId of {@link sap.ui.model.odata.v4.ODataModel#bindList}.\n\nYou can call {@link sap.ui.model.odata.v4.Context#delete} to delete the created context again. As long as the context is transient (see {@link sap.ui.model.odata.v4.Context#isTransient}), {@link #resetChanges} and a call to {@link sap.ui.model.odata.v4.ODataModel#resetChanges} with the update group ID as parameter also delete the created context together with other changes.\n\nIf the creation of the entity on the server failed, the creation is repeated automatically. If the binding's update group ID has {@link sap.ui.model.odata.v4.SubmitMode.API}, it is repeated with the next call of {@link sap.ui.model.odata.v4.ODataModel#submitBatch}. Otherwise it is repeated with the next update for the entity. Since 1.67.0, {@link sap.ui.model.odata.v4.ODataModel#submitBatch} can also be used for group IDs with {@link sap.ui.model.odata.v4.SubmitMode.Auto} in order to repeat the creation even if there is no update for the entity.\n\nEach time the data for the created entity is sent to the server, a {@link #event:createSent} event is fired and each time the client receives a response for the creation, a {@link #event:createCompleted} event is fired, independent of whether the creation was successful or not.\n\nThe initial data for the created entity can be supplied via the parameter <code>oInitialData<\/code> and modified via property bindings. Properties that are not part of the initial data show the default value from the service metadata on the UI, but they are not sent to the server. If there is no default value, <code>null<\/code> is used instead, even if the property is not <code>Nullable<\/code>.\n\nNote: If a server requires a property in the request, you must supply this property in the initial data, for example if the server requires a unit for an amount. This also applies if this property has a default value.\n\nNote: After creation, the created entity is refreshed to ensure that the data specified in this list binding's $expand is available; to skip this refresh, set <code>bSkipRefresh<\/code> to <code>true<\/code>.\n\nNote: A deep create is not supported. The dependent entity has to be created using a second list binding. Note that it is not supported to bind relative to a transient context.\n\nNote: The binding must have the parameter <code>$count : true<\/code> when creating an entity at the end. Otherwise the collection length may be unknown and there is no clear position to place this entity at.","!static":false,"!category":"function","!type":"fn(oInitialData?: Object, bSkipRefresh?: Boolean, bAtEnd?: Boolean) -> sap.ui.model.odata.v4.Context","parameters":{"bAtEnd":"type: boolean, description: Whether the entity is inserted at the end of the list. When creating multiple entities, this parameter must have the same value for each entity. Supported since 1.66.0","oInitialData":"type: object, description: The initial data for the created entity","bSkipRefresh":"type: boolean, description: Whether an automatic refresh of the created entity will be skipped"}},"detachCreateSent":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'createSent' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"attachPatchCompleted":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'patchCompleted' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"!description":"List binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', 'DataStateChange' and 'refresh'. For other events, an error is thrown.","resume":{"!description":"Resumes this binding. The binding can then again fire change events and trigger data service requests. Before 1.53.0, this method was not supported and threw an error.","!static":false,"!category":"function","!type":"fn()"},"suspend":{"!description":"Suspends this binding. A suspended binding does not fire change events nor does it trigger data service requests. Call {@link #resume} to resume the binding. Before 1.53.0, this method was not supported and threw an error.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v4.ODataListBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getCurrentContexts":{"!description":"Returns the contexts that were requested by a control last time. Does not trigger a data request. In the time between the {@link #event:dataRequested} event and the {@link #event:dataReceived} event, the resulting array contains <code>undefined<\/code> at those indexes where the data is not yet available.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.model.odata.v4.Context]"},"isLengthFinal":{"!description":"Returns <code>true<\/code> if the length has been determined by the data returned from server. If the length is a client side estimation <code>false<\/code> is returned.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"isInitial":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"destroy":{"!description":"Destroys the object. The object must not be used anymore after this function was called.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and notifies the control that new data is available.\n\nRefresh is supported for bindings which are not relative to a {@link sap.ui.model.odata.v4.Context}.\n\nNote: When calling {@link #refresh} multiple times, the result of the request triggered by the last call determines the binding's data; it is <b>independent<\/b> of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given group ID.\n\nIf there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #refresh}.","!static":false,"!category":"function","!type":"fn(sGroupId?: String)","parameters":{"sGroupId":"type: string, description: The group ID to be used for refresh; if not specified, the binding's group ID is used. For suspended bindings, only the binding's group ID is supported because {@link #resume} uses the binding's group ID.\n\nValid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}."}},"getDistinctValues":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"sort":{"!description":"Sort the entries represented by this list binding according to the given sorters. The sorters are stored at this list binding and they are used for each following data request.\n\nIf there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #sort}.","!static":false,"!category":"function","!type":"fn(vSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter]) -> sap.ui.model.odata.v4.ODataListBinding","parameters":{"vSorters":"type: sap.ui.model.Sorter|sap.ui.model.Sorter[], description: The dynamic sorters to be used; they replace the dynamic sorters given in {@link sap.ui.model.odata.v4.ODataModel#bindList}. Static sorters, as defined in the '$orderby' binding parameter, are always executed after the dynamic sorters."}},"detachPatchSent":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'patchSent' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"getQueryOptions":{"!description":"Returns the query options of the binding.","!static":false,"!category":"function","!type":"fn(bWithSystemQueryOptions?: Boolean) -> Object","parameters":{"bWithSystemQueryOptions":"type: boolean, description: Whether system query options should be returned as well. The parameter value <code>true<\/code> is not supported."}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Filters the list with the given filters.\n\nIf there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #filter}.\n\nFilters are case sensitive unless the property <code>caseSensitive<\/code> is set to <code>false<\/code>. This property has to be set on each filter, it is not inherited from a multi-filter.","!static":false,"!category":"function","!type":"fn(vFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], sFilterType?: sap.ui.model.FilterType) -> sap.ui.model.odata.v4.ODataListBinding","parameters":{"vFilters":"type: sap.ui.model.Filter|sap.ui.model.Filter[], description: The dynamic filters to be used; replaces the dynamic filters given in {@link sap.ui.model.odata.v4.ODataModel#bindList}. The filter executed on the list is created from the following parts, which are combined with a logical 'and': <ul> <li> Dynamic filters of type {@link sap.ui.model.FilterType.Application} <li> Dynamic filters of type {@link sap.ui.model.FilterType.Control} <li> The static filters, as defined in the '$filter' binding parameter <\/ul>","sFilterType":"type: sap.ui.model.FilterType, description: The filter type to be used"}},"getRootBinding":{"!description":"Returns the root binding of this binding's hierarchy, see binding {@link topic:54e0ddf695af4a6c978472cecb01c64d Initialization and Read Requests}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding | sap.ui.model.odata.v4.ODataPropertyBinding"},"!module":"sap/ui/model/odata/v4/ODataListBinding","getDownloadUrl":{"!description":"Returns a URL by which the complete content of the list can be downloaded in JSON format. The request delivers all entities considering the binding's query options (such as filters or sorters).\n\nThe returned URL does not specify <code>$skip<\/code> and <code>$top<\/code> and leaves it up to the server how many rows it delivers. Many servers tend to choose a small limit without <code>$skip<\/code> and <code>$top<\/code>, so it might be wise to add an appropriate value for <code>$top<\/code> at least.\n\nAdditionally, you must be aware of server-driven paging and be ready to send a follow-up request if the response contains <code>@odata.nextlink<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!helpDescription":"List binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', 'DataStateChange' and 'refresh'. For other events, an error is thrown.","getLength":{"!description":"Returns the number of entries in the list. As long as the client does not know the size on the server, an estimated length is returned.","!static":false,"!category":"function","!type":"fn() -> Number"},"detachCreateCompleted":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'createCompleted' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"initialize":{"!description":"Initializes the OData list binding: Fires an event in case the binding has a resolved path and its root binding is not suspended. If the model's parameter <code>autoExpandSelect<\/code> is used (see {@link sap.ui.model.odata.v4.ODataModel#constructor}), it fires a 'change' event, else it fires a 'refresh' event (since 1.67.0).","!static":false,"!category":"function","!type":"fn()"},"attachCreateCompleted":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'createCompleted' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}}},"sap.ui.model.type.Integer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.Integer"},"sap.ui.test.matchers.Descendant_obj":{"!type":"fn(vDescendantControl: Object | String, bDirect?: Boolean)","prototype":"sap.ui.test.matchers.Descendant"},"jQuery.Event_obj":{"!type":"fn()","prototype":"jQuery.Event"},"sap.ui.core.ws.WebSocket_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sUrl: String, aProtocols?: Array)","prototype":"sap.ui.core.ws.WebSocket"},"sap.ui.model.CompositeType_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.CompositeType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.CompositeType"},"sap.ui.model.SelectionModel":{"fireSelectionChanged":{"!description":"Fires event {@link #event:selectionChanged selectionChanged} to attached listeners.\n\nExpects following event parameters: <ul> <li>'leadIndex' of type <code>int<\/code> Lead selection index.<\/li> <li>'rowIndices' of type <code>int[]<\/code> Other selected indices (if available)<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.model.SelectionModel","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.SelectionModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachSelectionChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.model.SelectionModel<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.SelectionModel<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.SelectionModel","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>SelectionModel<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"moveSelectionInterval":{"!description":"Moves all selected indices starting at the position <code>iStartIndex<\/code> <code>iMove<\/code> items.\n\nThis can be used if new items are inserted to the item set and you want to keep the selection. To handle a deletion of items use <code>sliceSelectionInterval<\/code>.\n\nIf this call results in a change to the current selection or lead selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(iStartIndex: Number, iMove: Number) -> sap.ui.model.SelectionModel","parameters":{"iMove":"type: int, description: undefined","iStartIndex":"type: int, description: start at this position"}},"setSelectionInterval":{"!description":"Changes the selection to be equal to the range <code>iFromIndex<\/code> and <code>iToIndex<\/code> inclusive. If <code>iFromIndex<\/code> is smaller than <code>iToIndex<\/code>, both parameters are swapped.\n\nIn <code>SINGLE_SELECTION<\/code> selection mode, only <code>iToIndex<\/code> is used.\n\nIf this call results in a change to the current selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.model.SelectionModel","parameters":{"iToIndex":"type: int, description: other end of the interval","iFromIndex":"type: int, description: one end of the interval."}},"!proto":"sap.ui.base.EventProvider","getSelectionMode":{"!description":"Returns the current selection mode.","!static":false,"!category":"function","!type":"fn() -> Number"},"!category":"class","setSelectionMode":{"!description":"Sets the selection mode. The following list describes the accepted selection modes: <ul> <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION<\/code> - Only one list index can be selected at a time. In this mode, <code>setSelectionInterval<\/code> and <code>addSelectionInterval<\/code> are equivalent, both replacing the current selection with the index represented by the second argument (the \"lead\"). <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION<\/code> - In this mode, there's no restriction on what can be selected. <\/ul>","!static":false,"!category":"function","!type":"fn(iSelectionMode: Number)","parameters":{"iSelectionMode":"type: int, description: selection mode"}},"getLeadSelectedIndex":{"!description":"Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().","!static":false,"!category":"function","!type":"fn() -> Number"},"addSelectionInterval":{"!description":"Changes the selection to be the union of the current selection and the range between <code>iFromIndex<\/code> and <code>iToIndex<\/code> inclusive. If <code>iFromIndex<\/code> is smaller than <code>iToIndex<\/code>, both parameters are swapped.\n\nIn <code>SINGLE_SELECTION<\/code> selection mode, this is equivalent to calling <code>setSelectionInterval<\/code>, and only the second index is used.\n\nIf this call results in a change to the current selection or lead selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.model.SelectionModel","parameters":{"iToIndex":"type: int, description: other end of the interval","iFromIndex":"type: int, description: one end of the interval."}},"sliceSelectionInterval":{"!description":"Slices a the indices between the two indices from the selection. If <code>iFromIndex<\/code> is smaller than <code>iToIndex<\/code>, both parameters are swapped.\n\nIf the range of removed selection indices includes the current lead selection, then the lead selection will be unset (set to -1).\n\nIf this call results in a change to the current selection or lead selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.model.SelectionModel","parameters":{"iToIndex":"type: int, description: other end of the interval","iFromIndex":"type: int, description: one end of the interval."}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.SelectionModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"detachSelectionChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:selectionChanged selectionChanged} event of this <code>sap.ui.model.SelectionModel<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.SelectionModel","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"removeSelectionInterval":{"!description":"Changes the selection to be the set difference of the current selection and the indices between <code>iFromIndex<\/code> and <code>iToIndex<\/code> inclusive. If <code>iFromIndex<\/code> is smaller than <code>iToIndex<\/code>, both parameters are swapped.\n\nIf the range of removed selection indices includes the current lead selection, then the lead selection will be unset (set to -1).\n\nIf this call results in a change to the current selection or lead selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.model.SelectionModel","parameters":{"iToIndex":"type: int, description: other end of the interval","iFromIndex":"type: int, description: one end of the interval."}},"selectAll":{"!description":"Selects all rows up to the <code>iToIndex<\/code>.\n\nIf this call results in a change to the current selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn(iToIndex: Number) -> sap.ui.model.SelectionModel","parameters":{"iToIndex":"type: int, description: end of the interval"}},"!constructorDescription":"Constructs an instance of an sap.ui.model.SelectionModel.","!module":"sap/ui/model/SelectionModel","isSelectedIndex":{"!description":"Returns true if the specified index is selected.","!static":false,"!category":"function","!type":"fn(iIndex: Number) -> Boolean","parameters":{"iIndex":"type: int, description: undefined"}},"clearSelection":{"!description":"Change the selection to the empty set and clears the lead selection.\n\nIf this call results in a change to the current selection or lead selection, then a <code>SelectionChanged<\/code> event is fired.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.SelectionModel"},"getSelectedIndices":{"!description":"Returns the selected indices as array.","!static":false,"!category":"function","!type":"fn() -> [Number]"}},"sap.ui.core.TooltipBase":{"getOffset":{"!description":"Gets current value of property {@link #getOffset offset}.\n\nOptional. Offset adds these left-top values to the calculated position. Example: \"10 3\".\n\nDefault value is <code>10 3<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Control","!category":"class","getCollision":{"!description":"Gets current value of property {@link #getCollision collision}.\n\nOptional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.\n\nDefault value is <code>flip<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Collision"},"setOpenDuration":{"!description":"Sets a new value for property {@link #getOpenDuration openDuration}.\n\nOptional. Open Duration in milliseconds.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>200<\/code>.","!static":false,"!category":"function","!type":"fn(iOpenDuration: Number) -> sap.ui.core.TooltipBase","parameters":{"iOpenDuration":"type: int, description: New value for property <code>openDuration<\/code>"}},"!constructorDescription":"Constructor for a new TooltipBase.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string (default: )<\/li>\n<li>{@link #getOpenDuration openDuration} : int (default: 200)<\/li>\n<li>{@link #getCloseDuration closeDuration} : int (default: 200)<\/li>\n<li>{@link #getMyPosition myPosition} : sap.ui.core.Dock (default: begin top)<\/li>\n<li>{@link #getAtPosition atPosition} : sap.ui.core.Dock (default: begin bottom)<\/li>\n<li>{@link #getOffset offset} : string (default: 10 3)<\/li>\n<li>{@link #getCollision collision} : sap.ui.core.Collision (default: flip)<\/li>\n<li>{@link #getOpenDelay openDelay} : int (default: 500)<\/li>\n<li>{@link #getCloseDelay closeDelay} : int (default: 100)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setAtPosition":{"!description":"Sets a new value for property {@link #getAtPosition atPosition}.\n\nOptional. At position defines which position on the target control to align the positioned tooltip.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>begin bottom<\/code>.","!static":false,"!category":"function","!type":"fn(sAtPosition: sap.ui.core.Dock) -> sap.ui.core.TooltipBase","parameters":{"sAtPosition":"type: sap.ui.core.Dock, description: New value for property <code>atPosition<\/code>"}},"setOffset":{"!description":"Sets a new value for property {@link #getOffset offset}.\n\nOptional. Offset adds these left-top values to the calculated position. Example: \"10 3\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>10 3<\/code>.","!static":false,"!category":"function","!type":"fn(sOffset: String) -> sap.ui.core.TooltipBase","parameters":{"sOffset":"type: string, description: New value for property <code>offset<\/code>"}},"setMyPosition":{"!description":"Sets a new value for property {@link #getMyPosition myPosition}.\n\nOptional. My position defines which position on the extended tooltip being positioned to align with the target control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>begin top<\/code>.","!static":false,"!category":"function","!type":"fn(sMyPosition: sap.ui.core.Dock) -> sap.ui.core.TooltipBase","parameters":{"sMyPosition":"type: sap.ui.core.Dock, description: New value for property <code>myPosition<\/code>"}},"!description":"Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip Control is based on it. It provides the opening/closing behavior and the main \"text\" property.","getMyPosition":{"!description":"Gets current value of property {@link #getMyPosition myPosition}.\n\nOptional. My position defines which position on the extended tooltip being positioned to align with the target control.\n\nDefault value is <code>begin top<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Dock"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.TooltipBase.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"fireClosed":{"!description":"Fires event {@link #event:closed closed} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.TooltipBase","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"attachClosed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:closed closed} event of this <code>sap.ui.core.TooltipBase<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.TooltipBase<\/code> itself.\n\nThis event is fired when the Tooltip has been closed","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.TooltipBase","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.TooltipBase<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setCloseDelay":{"!description":"Sets a new value for property {@link #getCloseDelay closeDelay}.\n\nClosing delay of the tooltip in milliseconds\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100<\/code>.","!static":false,"!category":"function","!type":"fn(iCloseDelay: Number) -> sap.ui.core.TooltipBase","parameters":{"iCloseDelay":"type: int, description: New value for property <code>closeDelay<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getAtPosition":{"!description":"Gets current value of property {@link #getAtPosition atPosition}.\n\nOptional. At position defines which position on the target control to align the positioned tooltip.\n\nDefault value is <code>begin bottom<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Dock"},"getOpenDuration":{"!description":"Gets current value of property {@link #getOpenDuration openDuration}.\n\nOptional. Open Duration in milliseconds.\n\nDefault value is <code>200<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setCloseDuration":{"!description":"Sets a new value for property {@link #getCloseDuration closeDuration}.\n\nOptional. Close Duration in milliseconds.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>200<\/code>.","!static":false,"!category":"function","!type":"fn(iCloseDuration: Number) -> sap.ui.core.TooltipBase","parameters":{"iCloseDuration":"type: int, description: New value for property <code>closeDuration<\/code>"}},"!module":"sap/ui/core/TooltipBase","detachClosed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:closed closed} event of this <code>sap.ui.core.TooltipBase<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.TooltipBase","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getCloseDuration":{"!description":"Gets current value of property {@link #getCloseDuration closeDuration}.\n\nOptional. Close Duration in milliseconds.\n\nDefault value is <code>200<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setCollision":{"!description":"Sets a new value for property {@link #getCollision collision}.\n\nOptional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>flip<\/code>.","!static":false,"!category":"function","!type":"fn(sCollision: sap.ui.core.Collision) -> sap.ui.core.TooltipBase","parameters":{"sCollision":"type: sap.ui.core.Collision, description: New value for property <code>collision<\/code>"}},"!helpDescription":"Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip Control is based on it. It provides the opening/closing behavior and the main \"text\" property.","getOpenDelay":{"!description":"Gets current value of property {@link #getOpenDelay openDelay}.\n\nOpening delay of the tooltip in milliseconds\n\nDefault value is <code>500<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"getCloseDelay":{"!description":"Gets current value of property {@link #getCloseDelay closeDelay}.\n\nClosing delay of the tooltip in milliseconds\n\nDefault value is <code>100<\/code>.","!static":false,"!category":"function","!type":"fn() -> Number"},"setOpenDelay":{"!description":"Sets a new value for property {@link #getOpenDelay openDelay}.\n\nOpening delay of the tooltip in milliseconds\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>500<\/code>.","!static":false,"!category":"function","!type":"fn(iOpenDelay: Number) -> sap.ui.core.TooltipBase","parameters":{"iOpenDelay":"type: int, description: New value for property <code>openDelay<\/code>"}},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>empty string<\/code>.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.TooltipBase","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.test.matchers.Matcher":{"!description":"Matchers for Opa5 - needs to implement an isMatching function that returns a boolean and will get a control instance as parameter","extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.Matcher with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.Matcher.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject} can be used.","!module":"sap/ui/test/matchers/Matcher","!helpDescription":"Matchers for Opa5 - needs to implement an isMatching function that returns a boolean and will get a control instance as parameter","!proto":"sap.ui.base.ManagedObject","!category":"class","isMatching":{"!description":"Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter.\n\nShould be overwritten by subclasses","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}}},"sap.ui.model.odata.type.Int16_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int16 with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Int16"},"sap.ui.model.analytics.odata4analytics.Measure_obj":{"!type":"fn(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: Object)","prototype":"sap.ui.model.analytics.odata4analytics.Measure"},"sap.ui.model.type.Integer":{"!description":"This class represents integer simple types.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.Integer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an Integer type.","!module":"sap/ui/model/type/Integer","!helpDescription":"This class represents integer simple types.","!proto":"sap.ui.model.SimpleType","!category":"class"},"sap.ui.core.ListItem":{"!description":"An item that is used in list controls, such as <code>DropdownBox<\/code>.\n\nThe element foresees the usage of additional texts displayed in a second column.","extend":{"!description":"Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getAdditionalText":{"!description":"Gets current value of property {@link #getAdditionalText additionalText}.\n\nSome additional text of type string, optionally to be displayed along with this item.","!static":false,"!category":"function","!type":"fn() -> String"},"setIcon":{"!description":"Sets a new value for property {@link #getIcon icon}.\n\nThe icon belonging to this list item instance. This can be a URI to an image or an icon font URI.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIcon: String) -> sap.ui.core.ListItem","parameters":{"sIcon":"type: string, description: New value for property <code>icon<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.ListItem.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new ListItem.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getIcon icon} : string<\/li>\n<li>{@link #getAdditionalText additionalText} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}\ncan be used as well.","!module":"sap/ui/core/ListItem","!helpDescription":"An item that is used in list controls, such as <code>DropdownBox<\/code>.\n\nThe element foresees the usage of additional texts displayed in a second column.","setAdditionalText":{"!description":"Sets a new value for property {@link #getAdditionalText additionalText}.\n\nSome additional text of type string, optionally to be displayed along with this item.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sAdditionalText: String) -> sap.ui.core.ListItem","parameters":{"sAdditionalText":"type: string, description: New value for property <code>additionalText<\/code>"}},"!proto":"sap.ui.core.Item","!category":"class","getIcon":{"!description":"Gets current value of property {@link #getIcon icon}.\n\nThe icon belonging to this list item instance. This can be a URI to an image or an icon font URI.","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.Message":{"!description":"This element is used to provide messages.\n\nRendering must be done within the control that uses this kind of element. Its default level is none.","getDefaultIcon":{"!description":"Returns the icon's default URI depending on given size.\n\nThere are default icons for messages available that can be used this way. If no parameter is given, the size will be 16x16 per default. If larger icons are needed, the parameter \"32x32\" might be given.","!static":false,"!category":"function","!type":"fn(sSize: String) -> sap.ui.core.URI","parameters":{"sSize":"type: string, description: If parameter is not set the default icon's size will be 16x16. If parameter is set to \"32x32\" the icon size will be 32x32."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Message.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nMessage text","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Element","!category":"class","getIcon":{"!description":"Gets current value of property {@link #getIcon icon}.\n\nA possible icon URI of the message","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"setLevel":{"!description":"Sets a new value for property {@link #getLevel level}.\n\nSetting the message's level.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>None<\/code>.","!static":false,"!category":"function","!type":"fn(sLevel: sap.ui.core.MessageType) -> sap.ui.core.Message","parameters":{"sLevel":"type: sap.ui.core.MessageType, description: New value for property <code>level<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Message with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setIcon":{"!description":"Sets a new value for property {@link #getIcon icon}.\n\nA possible icon URI of the message\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIcon: sap.ui.core.URI) -> sap.ui.core.Message","parameters":{"sIcon":"type: sap.ui.core.URI, description: New value for property <code>icon<\/code>"}},"getLevel":{"!description":"Gets current value of property {@link #getLevel level}.\n\nSetting the message's level.\n\nDefault value is <code>None<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.MessageType"},"!constructorDescription":"Constructor for a new Message.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string<\/li>\n<li>{@link #getTimestamp timestamp} : string<\/li>\n<li>{@link #getIcon icon} : sap.ui.core.URI<\/li>\n<li>{@link #getLevel level} : sap.ui.core.MessageType (default: None)<\/li>\n<li>{@link #getReadOnly readOnly} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/Message","!helpDescription":"This element is used to provide messages.\n\nRendering must be done within the control that uses this kind of element. Its default level is none.","getTimestamp":{"!description":"Gets current value of property {@link #getTimestamp timestamp}.\n\nMessage's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.","!static":false,"!category":"function","!type":"fn() -> String"},"compareByType":{"!description":"Compares two given messages with each other.\n\nThe types of {@link sap.ui.core.MessageType} are ordered from \"Error\" > \"Warning\" > \"Success\" > \"Information\" > \"None\".","!static":true,"!category":"function","!type":"fn(oOther: sap.ui.core.Message, oMessage1: sap.ui.core.Message, oMessage2: sap.ui.core.Message) -> Number","parameters":{"oMessage2":"type: sap.ui.core.Message, description: second message to compare","oMessage1":"type: sap.ui.core.Message, description: first message to compare"}},"getReadOnly":{"!description":"Gets current value of property {@link #getReadOnly readOnly}.\n\nDetermines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setReadOnly":{"!description":"Sets a new value for property {@link #getReadOnly readOnly}.\n\nDetermines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bReadOnly: Boolean) -> sap.ui.core.Message","parameters":{"bReadOnly":"type: boolean, description: New value for property <code>readOnly<\/code>"}},"setTimestamp":{"!description":"Sets a new value for property {@link #getTimestamp timestamp}.\n\nMessage's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sTimestamp: String) -> sap.ui.core.Message","parameters":{"sTimestamp":"type: string, description: New value for property <code>timestamp<\/code>"}},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nMessage text\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.Message","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.model.type.String":{"!description":"This class represents the string simple type.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.String.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a <code>String<\/code> type.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> String | Number | Boolean","parameters":{"sTargetType":"type: string, description: The target type; may be \"any\", \"boolean\", \"float\", \"int\" or \"string\", or a type with \"any\", \"boolean\", \"float\", \"int\" or \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}","sValue":"type: string, description: The value to be formatted"}},"!module":"sap/ui/model/type/String","!helpDescription":"This class represents the string simple type.","!proto":"sap.ui.model.SimpleType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints, see {@link #constructor}.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: The value to be validated; <code>null<\/code> is treated like an empty string"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to a string.","!static":false,"!category":"function","!type":"fn(vValue: String | Number | Boolean, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: The source type (the expected type of <code>vValue<\/code>); may be \"boolean\", \"float\", \"int\" or \"string\", or a type with \"boolean\", \"float\", \"int\" or \"string\" as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}","vValue":"type: string|number|boolean, description: The value to be parsed"}}},"sap.ui.model.FilterType":{"!description":"Enumeration of the possible filter types.\n\nEach {@link sap.ui.model.ListBinding list binding} maintains two separate lists of filters: one for filters defined by the control that owns the binding, and another list for filters that an application can define in addition. When executing the filter operation, both sets of filters are combined.\n\nSee method {@link sap.ui.model.ListBinding#filter ListBinding#filter} on how to specify the filter type. When no filter type is given to that method, the behavior depends on the specific model implementation and should be documented in the API reference for that model.","Control":{"!description":"Filters which are set by a control itself.\n\nSome controls implement filter capabilities as part of their behavior, e.g. table columns or facet filters. When such controls define filters for a binding, they should use filter type <code>Control<\/code> to keep their filters separated from filters that the application might define in addition.","!category":"enum","!type":"String"},"!module":"sap/ui/model/FilterType","!category":"static class","Application":{"!description":"Filters which are provided by the application.","!category":"enum","!type":"String"}},"sap.ui.core.ScrollBar_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.ScrollBar"},"sap.ui.model.ContextBinding":{"!description":"The ContextBinding is a specific binding for a setting context for the model","extend":{"!description":"Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ContextBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for ContextBinding","!module":"sap/ui/model/ContextBinding","!helpDescription":"The ContextBinding is a specific binding for a setting context for the model","!proto":"sap.ui.model.Binding","!category":"class","getBoundContext":{"!description":"Return the bound context.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Context"}},"sap.ui.Device.os.OS":{"!description":"Enumeration containing the names of known operating systems.","MACINTOSH":{"!description":"MAC operating system name.","!category":"enum","!type":"String"},"!module":"sap/ui/Device","!helpDescription":"Enumeration containing the names of known operating systems.","LINUX":{"!description":"Linux operating system name.","!category":"enum","!type":"String"},"WINDOWS":{"!description":"Windows operating system name.","!category":"enum","!type":"String"},"!category":"namespace","BLACKBERRY":{"!description":"Blackberry operating system name.","!category":"enum","!type":"String"},"ANDROID":{"!description":"Android operating system name.","!category":"enum","!type":"String"},"IOS":{"!description":"iOS operating system name.","!category":"enum","!type":"String"},"WINDOWS_PHONE":{"!description":"Windows Phone operating system name.","!category":"enum","!type":"String"}},"sap.ui.core.BarColor":{"!description":"Configuration options for the colors of a progress bar.","POSITIVE":{"!description":"Color: green (#b5e7a8)","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","NEGATIVE":{"!description":"Color: red (#ff9a90)","!category":"enum","!type":"String"},"!category":"static class","CRITICAL":{"!description":"Color: yellow (#faf2b0)","!category":"enum","!type":"String"},"NEUTRAL":{"!description":"Color: blue (#b8d0e8)","!category":"enum","!type":"String"}},"sap.ui.model.json.JSONPropertyBinding":{"!description":"Property binding implementation for JSON format.","!constructorDescription":"Creates a new JSONListBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.json.JSONModel#bindProperty JSONModel#bindProperty} on the corresponding model instance instead.","!module":"sap/ui/model/json/JSONPropertyBinding","!helpDescription":"Property binding implementation for JSON format.","!proto":"sap.ui.model.ClientPropertyBinding","!category":"class"},"sap.ui.core.dnd.DragSession":{"!description":"When a user requests to drag some controls that can be dragged, a drag session is started. The drag session can be used to transfer data between applications or between dragged and dropped controls. Please see provided APIs for more details.\n\n<b>Note:<\/b> An implementation of this interface is provided by the framework during drag-and-drop operations and is exposed as <code>dragSession<\/code> parameter of the different drag and drop events.\n\n<b>Note:<\/b> This interface is not intended to be implemented by controls, applications or test code. Extending it with additional methods in future versions will be regarded as a compatible change.","!module":"sap/ui/core/dnd/DragAndDrop","!category":"static class"},"module:sap/ui/dom/jquery/parentByAttribute":{"!description":"This module provides the {@link jQuery#parentByAttribute} API.","!module":"sap/ui/dom/jquery/parentByAttribute","!helpDescription":"This module provides the {@link jQuery#parentByAttribute} API.","!category":"namespace","module:sap/ui/dom/jquery/parentByAttribute":"module:sap/ui/dom/jquery/parentByAttribute"},"sap.ui.app":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 use a {@link sap.ui.core.Component} instead.<br>Provides a specialization of <code>sap.ui.core.Component<\/code> which represents a central application.","MockServer":"sap.ui.app.MockServer_obj","!module":"sap/ui/app/Application","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 use a {@link sap.ui.core.Component} instead.<br>Provides a specialization of <code>sap.ui.core.Component<\/code> which represents a central application.","root":{"!description":"root : String","!category":"enum","!type":"String"},"!category":"namespace","Application":"sap.ui.app.Application_obj","config":{"!description":"config : Object","!category":"enum","!type":"Object"}},"sap.ui.model.xml":{"!description":"XML-based DataBinding","!module":"sap/ui/model/xml/XMLModel","!helpDescription":"XML-based DataBinding","XMLModel":"sap.ui.model.xml.XMLModel_obj","!category":"namespace","XMLTreeBinding":"sap.ui.model.xml.XMLTreeBinding_obj"},"sap.ui.model.odata.v4.ODataContextBinding":{"hasPendingChanges":{"!description":"Returns <code>true<\/code> if this binding or its dependent bindings have pending changes, meaning updates that have not yet been successfully sent to the server.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"changeParameters":{"!description":"Changes this binding's parameters and refreshes the binding.\n\nIf there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #changeParameters}.\n\nThe parameters are changed according to the given map of parameters: Parameters with an <code>undefined<\/code> value are removed, the other parameters are set, and missing parameters remain unchanged.","!static":false,"!category":"function","!type":"fn(mParameters: Object)","parameters":{"mParameters":"type: object, description: Map of binding parameters, see {@link sap.ui.model.odata.v4.ODataModel#bindList} and {@link sap.ui.model.odata.v4.ODataModel#bindContext}"}},"!proto":"sap.ui.model.ContextBinding","!category":"class","attachPatchSent":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'patchSent' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"!constructorDescription":"Do <strong>NOT<\/strong> call this private constructor, but rather use\n{@link sap.ui.model.odata.v4.ODataModel#bindContext} instead!","resetChanges":{"!description":"Resets all pending changes of this binding, see {@link #hasPendingChanges}. Resets also invalid user input.","!static":false,"!category":"function","!type":"fn() -> Promise"},"detachPatchCompleted":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'patchCompleted' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"setParameter":{"!description":"Sets a parameter for an operation call.","!static":false,"!category":"function","!type":"fn(sParameterName: String, vValue: Object) -> sap.ui.model.odata.v4.ODataContextBinding","parameters":{"sParameterName":"type: string, description: The parameter name","vValue":"type: any, description: The parameter value"}},"attachPatchCompleted":{"!description":"Attach event handler <code>fnFunction<\/code> to the 'patchCompleted' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"!description":"Context binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', and 'DataStateChange'. For other events, an error is thrown.\n\nA context binding can also be used as an <i>operation binding<\/i> to support bound actions, action imports, bound functions and function imports. If you want to control the execution time of an operation, for example a function import named \"GetNumberOfAvailableItems\", create a context binding for the path \"/GetNumberOfAvailableItems(...)\" (as specified here, including the three dots). Such an operation binding is <i>deferred<\/i>, meaning that it does not request automatically, but only when you call {@link #execute}. {@link #refresh} is always ignored for actions and action imports. For bound functions and function imports, it is ignored if {@link #execute} has not yet been called. Afterwards it results in another call of the function with the parameter values of the last execute.\n\nThe binding parameter for bound actions or bound functions may be given in the binding path, for example \"/SalesOrderList('42')/name.space.SalesOrder_Confirm\". This can be used if the exact entity for the binding parameter is known in advance. If you use a relative binding instead, the operation path is a concatenation of the parent context's canonical path and the deferred binding's path.\n\n<b>Example<\/b>: You have a table with a list binding to \"/SalesOrderList\". In each row you have a button to confirm the sales order, with the relative binding \"name.space.SalesOrder_Confirm(...)\". Then the parent context for such a button refers to an entity in \"SalesOrderList\", so its canonical path is \"/SalesOrderList('<i>SalesOrderID<\/i>')\" and the resulting path for the action is \"/SalesOrderList('<i>SalesOrderID<\/i>')/name.space.SalesOrder_Confirm\".\n\nThis also works if the relative path of the deferred operation binding starts with a navigation property. Then this navigation property will be part of the operation's resource path, which is still valid.\n\nA deferred operation binding is not allowed to have another deferred operation binding as parent.","resume":{"!description":"Resumes this binding. The binding can then again fire change events and trigger data service requests. Before 1.53.0, this method was not supported and threw an error.","!static":false,"!category":"function","!type":"fn()"},"suspend":{"!description":"Suspends this binding. A suspended binding does not fire change events nor does it trigger data service requests. Call {@link #resume} to resume the binding. Before 1.53.0, this method was not supported and threw an error.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v4.ODataContextBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"isInitial":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"destroy":{"!description":"Destroys the object. The object must not be used anymore after this function was called.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes the binding. Prompts the model to retrieve data from the server using the given group ID and notifies the control that new data is available.\n\nRefresh is supported for bindings which are not relative to a {@link sap.ui.model.odata.v4.Context}.\n\nNote: When calling {@link #refresh} multiple times, the result of the request triggered by the last call determines the binding's data; it is <b>independent<\/b> of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given group ID.\n\nIf there are pending changes, an error is thrown. Use {@link #hasPendingChanges} to check if there are pending changes. If there are changes, call {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling {@link #refresh}.","!static":false,"!category":"function","!type":"fn(sGroupId?: String)","parameters":{"sGroupId":"type: string, description: The group ID to be used for refresh; if not specified, the binding's group ID is used. For suspended bindings, only the binding's group ID is supported because {@link #resume} uses the binding's group ID.\n\nValid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}."}},"getParameterContext":{"!description":"Returns the context pointing to the parameters of a deferred operation binding.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.Context"},"execute":{"!description":"Calls the OData operation that corresponds to this operation binding.\n\nParameters for the operation must be set via {@link #setParameter} beforehand.\n\nThe value of this binding is the result of the operation. To access a result of primitive type, bind a control to the path \"value\", for example <code>&lt;Text text=\"{value}\"/><\/code>. If the result has a complex or entity type, you can bind properties as usual, for example <code>&lt;Text text=\"{street}\"/><\/code>.","!static":false,"!category":"function","!type":"fn(sGroupId?: String) -> Promise","parameters":{"sGroupId":"type: string, description: The group ID to be used for the request; if not specified, the group ID for this binding is used, see {@link sap.ui.model.odata.v4.ODataContextBinding#constructor}. Valid values are <code>undefined<\/code>, '$auto', '$auto.*', '$direct' or application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel}."}},"detachPatchSent":{"!description":"Detach event handler <code>fnFunction<\/code> from the 'patchSent' event of this binding.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which to call the given function","fnFunction":"type: function, description: The function to call when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getRootBinding":{"!description":"Returns the root binding of this binding's hierarchy, see binding {@link topic:54e0ddf695af4a6c978472cecb01c64d Initialization and Read Requests}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.ODataContextBinding | sap.ui.model.odata.v4.ODataListBinding | sap.ui.model.odata.v4.ODataPropertyBinding"},"!module":"sap/ui/model/odata/v4/ODataContextBinding","!helpDescription":"Context binding for an OData V4 model. An event handler can only be attached to this binding for the following events: 'AggregatedDataStateChange', 'change', 'dataReceived', 'dataRequested', and 'DataStateChange'. For other events, an error is thrown.\n\nA context binding can also be used as an <i>operation binding<\/i> to support bound actions, action imports, bound functions and function imports. If you want to control the execution time of an operation, for example a function import named \"GetNumberOfAvailableItems\", create a context binding for the path \"/GetNumberOfAvailableItems(...)\" (as specified here, including the three dots). Such an operation binding is <i>deferred<\/i>, meaning that it does not request automatically, but only when you call {@link #execute}. {@link #refresh} is always ignored for actions and action imports. For bound functions and function imports, it is ignored if {@link #execute} has not yet been called. Afterwards it results in another call of the function with the parameter values of the last execute.\n\nThe binding parameter for bound actions or bound functions may be given in the binding path, for example \"/SalesOrderList('42')/name.space.SalesOrder_Confirm\". This can be used if the exact entity for the binding parameter is known in advance. If you use a relative binding instead, the operation path is a concatenation of the parent context's canonical path and the deferred binding's path.\n\n<b>Example<\/b>: You have a table with a list binding to \"/SalesOrderList\". In each row you have a button to confirm the sales order, with the relative binding \"name.space.SalesOrder_Confirm(...)\". Then the parent context for such a button refers to an entity in \"SalesOrderList\", so its canonical path is \"/SalesOrderList('<i>SalesOrderID<\/i>')\" and the resulting path for the action is \"/SalesOrderList('<i>SalesOrderID<\/i>')/name.space.SalesOrder_Confirm\".\n\nThis also works if the relative path of the deferred operation binding starts with a navigation property. Then this navigation property will be part of the operation's resource path, which is still valid.\n\nA deferred operation binding is not allowed to have another deferred operation binding as parent.","initialize":{"!description":"Initializes the OData context binding: Fires a 'change' event in case the binding has a resolved path and its root binding is not suspended.","!static":false,"!category":"function","!type":"fn()"},"getBoundContext":{"!description":"Returns the bound context.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v4.Context"},"requestObject":{"!description":"Returns a promise on the value for the given path relative to this binding. The function allows access to the complete data the binding points to (if <code>sPath<\/code> is \"\") or any part thereof. The data is a JSON structure as described in <a href=\"http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html\"> \"OData JSON Format Version 4.0\"<\/a>. Note that the function clones the result. Modify values via {@link sap.ui.model.odata.v4.Context#setProperty}.\n\nIf you want {@link #requestObject} to read fresh data, call <code>oBinding.refresh()<\/code> first.","!static":false,"!category":"function","!type":"fn(sPath?: String) -> Promise","parameters":{"sPath":"type: string, description: A relative path within the JSON structure"}}},"module:sap/ui/events/ControlEvents":{"!module":"sap/ui/events/ControlEvents","module:sap/ui/events/ControlEvents":"module:sap/ui/events/ControlEvents","!category":"namespace","bindAnyEvent":{"!description":"Binds all events for listening with the given callback function.","!category":"function","!type":"fn(fnCallback: fn())"},"unbindAnyEvent":{"!description":"Unbinds all events for listening with the given callback function.","!category":"function","!type":"fn(fnCallback: fn())"},"events":{"!description":"List of DOM events that a UIArea automatically takes care of.\n\nA control/element doesn't have to bind listeners for these events. It instead can implement an <code>on<i>event<\/i>(oEvent)<\/code> method for any of the following events that it wants to be notified about:\n\nclick, dblclick, contextmenu, focusin, focusout, keydown, keypress, keyup, mousedown, mouseout, mouseover, mouseup, select, selectstart, dragstart, dragenter, dragover, dragleave, dragend, drop, paste, cut, input, touchstart, touchend, touchmove, touchcancel, tap, swipe, swipeleft, swiperight, scrollstart, scrollstop\n\nThe mouse events and touch events are supported simultaneously on both desktop and mobile browsers. Do NOT create both onmouse* and ontouch* functions to avoid one event being handled twice on the same control.","!category":"enum","!type":"String"}},"sap.ui.core.ComponentContainer":{"setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nComponent name, the package where the component is contained. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.ComponentContainer","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"setAsync":{"!description":"Sets a new value for property {@link #getAsync async}.\n\nFlag whether the component should be created sync (default) or async. The default will be async when initially the property <code>manifest<\/code> is set to a truthy value and for the property <code>async<\/code> no value has been specified. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAsync: Boolean) -> sap.ui.core.ComponentContainer","parameters":{"bAsync":"type: boolean, description: New value for property <code>async<\/code>"}},"getName":{"!description":"Gets current value of property {@link #getName name}.\n\nComponent name, the package where the component is contained. This property can only be applied initially.","!static":false,"!category":"function","!type":"fn() -> String"},"getSettings":{"!description":"Gets current value of property {@link #getSettings settings}.\n\nThe settings object passed to the component when created. This property can only be applied initially.","!static":false,"!category":"function","!type":"fn() -> Object"},"getManifest":{"!description":"Gets current value of property {@link #getManifest manifest}.\n\nControls when and from where to load the manifest for the Component. When set to any truthy value, the manifest will be loaded asynchronously by default and evaluated before the Component controller, if it is set to a falsy value other than <code>undefined<\/code>, the manifest will be loaded after the controller. A non-empty string value will be interpreted as the URL location from where to load the manifest. A non-null object value will be interpreted as manifest content. This property can only be applied initially.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.core.Control","attachComponentCreated":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:componentCreated componentCreated} event of this <code>sap.ui.core.ComponentContainer<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ComponentContainer<\/code> itself.\n\nFired when the component instance has been created by the ComponentContainer.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ComponentContainer","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.ComponentContainer<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nContainer width in CSS size","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"attachComponentFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:componentFailed componentFailed} event of this <code>sap.ui.core.ComponentContainer<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ComponentContainer<\/code> itself.\n\nFired when the creation of the component instance has failed.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ComponentContainer","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.ComponentContainer<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setUsage":{"!description":"Sets a new value for property {@link #getUsage usage}.\n\nThe component usage. If the ComponentContainer is used inside a Component, this Component can define a usage which will be used for creating the Component. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sUsage: String) -> sap.ui.core.ComponentContainer","parameters":{"sUsage":"type: string, description: New value for property <code>usage<\/code>"}},"fireComponentFailed":{"!description":"Fires event {@link #event:componentFailed componentFailed} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.ComponentContainer","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setAutoPrefixId":{"!description":"Sets a new value for property {@link #getAutoPrefixId autoPrefixId}.\n\nFlag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bAutoPrefixId: Boolean) -> sap.ui.core.ComponentContainer","parameters":{"bAutoPrefixId":"type: boolean, description: New value for property <code>autoPrefixId<\/code>"}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nContainer height in CSS size","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setPropagateModel":{"!description":"Sets a new value for property {@link #getPropagateModel propagateModel}.\n\nDefines whether binding information is propagated to the component.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bPropagateModel: Boolean) -> sap.ui.core.ComponentContainer","parameters":{"bPropagateModel":"type: boolean, description: New value for property <code>propagateModel<\/code>"}},"!constructorDescription":"Constructor for a new ComponentContainer.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getUrl url} : sap.ui.core.URI<\/li>\n<li>{@link #getAsync async} : boolean (default: false)<\/li>\n<li>{@link #getHandleValidation handleValidation} : boolean (default: false)<\/li>\n<li>{@link #getSettings settings} : object<\/li>\n<li>{@link #getPropagateModel propagateModel} : boolean (default: false)<\/li>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getLifecycle lifecycle} : sap.ui.core.ComponentLifecycle (default: Legacy)<\/li>\n<li>{@link #getAutoPrefixId autoPrefixId} : boolean (default: false)<\/li>\n<li>{@link #getUsage usage} : string<\/li>\n<li>{@link #getManifest manifest} : any<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getComponent component} : (sap.ui.core.ID | sap.ui.core.UIComponent)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:componentCreated componentCreated} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:componentFailed componentFailed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","setLifecycle":{"!description":"Sets a new value for property {@link #getLifecycle lifecycle}.\n\nLifecycle behavior for the Component associated by the <code>ComponentContainer<\/code>. The default behavior is <code>Legacy<\/code>. This means that the <code>ComponentContainer<\/code> takes care that the Component is destroyed when the <code>ComponentContainer<\/code> is destroyed, but it is <b>not<\/b> destroyed when a new Component is associated. If you use the <code>usage<\/code> property to create the Component, the default behavior is <code>Container<\/code>. This means that the Component is destroyed when the <code>ComponentContainer<\/code> is destroyed or a new Component is associated. This property must only be applied before a component instance is created.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Legacy<\/code>.","!static":false,"!category":"function","!type":"fn(sLifecycle: sap.ui.core.ComponentLifecycle) -> sap.ui.core.ComponentContainer","parameters":{"sLifecycle":"type: sap.ui.core.ComponentLifecycle, description: New value for property <code>lifecycle<\/code>"}},"setHandleValidation":{"!description":"Sets a new value for property {@link #getHandleValidation handleValidation}.\n\nEnable/disable validation handling by MessageManager for this component. The resulting Messages will be propagated to the controls. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bHandleValidation: Boolean) -> sap.ui.core.ComponentContainer","parameters":{"bHandleValidation":"type: boolean, description: New value for property <code>handleValidation<\/code>"}},"getAutoPrefixId":{"!description":"Gets current value of property {@link #getAutoPrefixId autoPrefixId}.\n\nFlag, whether to auto-prefix the ID of the nested Component or not. If this property is set to true the ID of the Component will be prefixed with the ID of the ComponentContainer followed by a single dash. This property can only be applied initially.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getLifecycle":{"!description":"Gets current value of property {@link #getLifecycle lifecycle}.\n\nLifecycle behavior for the Component associated by the <code>ComponentContainer<\/code>. The default behavior is <code>Legacy<\/code>. This means that the <code>ComponentContainer<\/code> takes care that the Component is destroyed when the <code>ComponentContainer<\/code> is destroyed, but it is <b>not<\/b> destroyed when a new Component is associated. If you use the <code>usage<\/code> property to create the Component, the default behavior is <code>Container<\/code>. This means that the Component is destroyed when the <code>ComponentContainer<\/code> is destroyed or a new Component is associated. This property must only be applied before a component instance is created.\n\nDefault value is <code>Legacy<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ComponentLifecycle"},"!description":"Container that embeds a <code>sap/ui/core/UIComponent<\/code> in a control tree.\n\n<b>Concerning asynchronous component loading:<\/b>\n\nTo activate a fully asynchronous loading behavior of components and their dependencies, the property <code>async<\/code> needs to be set to <code>true<\/code> and the <code>manifest<\/code> property needs to be set to a 'truthy' value, e.g. <code>true<\/code> or a URL to the manifest location. If both options are correctly set, the component factory will load and evaluate the component manifest first. In this way, the additional dependencies of the Component are already known before the Component preload/controller is loaded. Both the component preload/controller and the additional dependencies can thus be loaded asynchronously and in parallel.\n\nSample usage of the ComponentContainer:\n\n<pre>\n    &lt;!-- inside XML view -->\n    ...\n    &lt;core:ComponentContainer\n        usage=\"someComponent\"\n        manifest=\"true\"\n        async=\"true\"\n    />\n<\/pre>\n\nSee also {@link sap.ui.core.ComponentSupport}.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.ComponentContainer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"fireComponentCreated":{"!description":"Fires event {@link #event:componentCreated componentCreated} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.ComponentContainer","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getHandleValidation":{"!description":"Gets current value of property {@link #getHandleValidation handleValidation}.\n\nEnable/disable validation handling by MessageManager for this component. The resulting Messages will be propagated to the controls. This property can only be applied initially.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"detachComponentCreated":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:componentCreated componentCreated} event of this <code>sap.ui.core.ComponentContainer<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ComponentContainer","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setManifest":{"!description":"Sets a new value for property {@link #getManifest manifest}.\n\nControls when and from where to load the manifest for the Component. When set to any truthy value, the manifest will be loaded asynchronously by default and evaluated before the Component controller, if it is set to a falsy value other than <code>undefined<\/code>, the manifest will be loaded after the controller. A non-empty string value will be interpreted as the URL location from where to load the manifest. A non-null object value will be interpreted as manifest content. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oManifest: Object) -> sap.ui.core.ComponentContainer","parameters":{"oManifest":"type: any, description: New value for property <code>manifest<\/code>"}},"setComponent":{"!description":"Sets the component of the container. Depending on the ComponentContainer's lifecycle this might destroy the old associated Component.\n\nOnce the component is associated with the container the cross connection to the component will be set and the models will be propagated if defined. If the <code>usage<\/code> property is set the ComponentLifecycle is processed like a \"Container\" lifecycle.","!static":false,"!category":"function","!type":"fn(vComponent: String | sap.ui.core.UIComponent) -> sap.ui.core.ComponentContainer","parameters":{"vComponent":"type: string|sap.ui.core.UIComponent, description: ID of an element which becomes the new target of this component association. Alternatively, an element instance may be given."}},"getAsync":{"!description":"Gets current value of property {@link #getAsync async}.\n\nFlag whether the component should be created sync (default) or async. The default will be async when initially the property <code>manifest<\/code> is set to a truthy value and for the property <code>async<\/code> no value has been specified. This property can only be applied initially.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nContainer height in CSS size\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.core.ComponentContainer","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nContainer width in CSS size\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.core.ComponentContainer","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"detachComponentFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:componentFailed componentFailed} event of this <code>sap.ui.core.ComponentContainer<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ComponentContainer","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getPropagateModel":{"!description":"Gets current value of property {@link #getPropagateModel propagateModel}.\n\nDefines whether binding information is propagated to the component.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getUsage":{"!description":"Gets current value of property {@link #getUsage usage}.\n\nThe component usage. If the ComponentContainer is used inside a Component, this Component can define a usage which will be used for creating the Component. This property can only be applied initially.","!static":false,"!category":"function","!type":"fn() -> String"},"setUrl":{"!description":"Sets a new value for property {@link #getUrl url}.\n\nThe URL of the component. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sUrl: sap.ui.core.URI) -> sap.ui.core.ComponentContainer","parameters":{"sUrl":"type: sap.ui.core.URI, description: New value for property <code>url<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setSettings":{"!description":"Sets a new value for property {@link #getSettings settings}.\n\nThe settings object passed to the component when created. This property can only be applied initially.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oSettings: Object) -> sap.ui.core.ComponentContainer","parameters":{"oSettings":"type: object, description: New value for property <code>settings<\/code>"}},"getUrl":{"!description":"Gets current value of property {@link #getUrl url}.\n\nThe URL of the component. This property can only be applied initially.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"!module":"sap/ui/core/ComponentContainer","!helpDescription":"Container that embeds a <code>sap/ui/core/UIComponent<\/code> in a control tree.\n\n<b>Concerning asynchronous component loading:<\/b>\n\nTo activate a fully asynchronous loading behavior of components and their dependencies, the property <code>async<\/code> needs to be set to <code>true<\/code> and the <code>manifest<\/code> property needs to be set to a 'truthy' value, e.g. <code>true<\/code> or a URL to the manifest location. If both options are correctly set, the component factory will load and evaluate the component manifest first. In this way, the additional dependencies of the Component are already known before the Component preload/controller is loaded. Both the component preload/controller and the additional dependencies can thus be loaded asynchronously and in parallel.\n\nSample usage of the ComponentContainer:\n\n<pre>\n    &lt;!-- inside XML view -->\n    ...\n    &lt;core:ComponentContainer\n        usage=\"someComponent\"\n        manifest=\"true\"\n        async=\"true\"\n    />\n<\/pre>\n\nSee also {@link sap.ui.core.ComponentSupport}.","getComponent":{"!description":"ID of the element which is the current target of the association {@link #getComponent component}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"}},"sap.ui.core.delegate.ScrollEnablement_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oControl: sap.ui.core.Control, sScrollContentDom: String, oConfig: Object)","prototype":"sap.ui.core.delegate.ScrollEnablement"},"sap.ui.model.SimpleType_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.SimpleType"},"sap.ui.model.Binding":{"fireDataReceived":{"!description":"Fires event {@link #event:dataReceived dataReceived} to attached listeners.\n\nThis event may also be fired when an error occurred.","!static":false,"!category":"function","!type":"fn(oParameters: Object)","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"!proto":"sap.ui.base.EventProvider","!category":"class","detachChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:change change} event of this <code>sap.ui.model.Binding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: Function to be called, when the event occurs"}},"attachEvents":{"!description":"Attach multiple events.","!static":false,"!category":"function","!type":"fn(oEvents: Object.<string,function()>)","parameters":{"oEvents":"type: Object.<string,function()>, description: undefined"}},"detachEvents":{"!description":"Detach multiple events.","!static":false,"!category":"function","!type":"fn(oEvents: Object.<string,function()>)","parameters":{"oEvents":"type: Object.<string,function()>, description: undefined"}},"!constructorDescription":"Constructor for Binding class.","fireDataRequested":{"!description":"Fires event {@link #event:dataRequested dataRequested} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters: Object)","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"getPath":{"!description":"Returns the model path to which this binding binds.\n\nMight be a relative or absolute path. If it is relative, it will be resolved relative to the context as returned by {@link getContext()}.","!static":false,"!category":"function","!type":"fn() -> String"},"detachRefresh":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:refresh refresh} event of this <code>sap.ui.model.Binding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: object on which to call the given function.","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!description":"The Binding is the object, which holds the necessary information for a data binding, like the binding path and the binding context, and acts like an interface to the model for the control, so it is the event provider for changes in the data model and provides getters for accessing properties or lists.","resume":{"!description":"Resumes the binding update. Change events will be fired again.\n\nWhen the binding is resumed, a change event will be fired immediately, if the data has changed while the binding was suspended. For server-side models, a request to the server will be triggered, if a refresh was requested while the binding was suspended.","!static":false,"!category":"function","!type":"fn()"},"suspend":{"!description":"Suspends the binding update. No change events will be fired.\n\nA refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode. Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings) will also update and cause a change event although the binding is suspended.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.Binding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getModel":{"!description":"Returns the model to which this binding belongs.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Model"},"attachDataRequested":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dataRequested dataRequested} event of this <code>sap.ui.model.Binding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Binding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.model.Binding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachRefresh":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:refresh refresh} event of this <code>sap.ui.model.Binding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Binding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.model.Binding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"isSuspended":{"!description":"Returns true if the binding is suspended or false if not.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"updateRequired":{"!description":"Determines if the binding should be updated by comparing the current model against a specified model.","!static":false,"!category":"function","!type":"fn(oModel: Object) -> Boolean","parameters":{"oModel":"type: object, description: The model instance to compare against"}},"isInitial":{"!description":"Returns whether the binding is initial, which means it did not get an initial value yet","!static":false,"!category":"function","!type":"fn() -> Boolean"},"destroy":{"!description":"Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.","!static":false,"!category":"function","!type":"fn()"},"refresh":{"!description":"Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter <code>bForceUpdate<\/code>.","!static":false,"!category":"function","!type":"fn(bForceUpdate: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: Update the bound control even if no data has been changed"}},"attachChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:change change} event of this <code>sap.ui.model.Model<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Binding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.model.Binding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"detachAggregatedDataStateChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:AggregatedDataStateChange AggregatedDataStateChange} event of this <code>sap.ui.model.Binding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"detachDataReceived":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.model.Binding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: Function to be called, when the event occurs"}},"!module":"sap/ui/model/Binding","!helpDescription":"The Binding is the object, which holds the necessary information for a data binding, like the binding path and the binding context, and acts like an interface to the model for the control, so it is the event provider for changes in the data model and provides getters for accessing properties or lists.","detachDataStateChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:DataStateChange DataStateChange} event of this <code>sap.ui.model.Binding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachAggregatedDataStateChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:AggregatedDataStateChange AggregatedDataStateChange} event of this <code>sap.ui.model.Binding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Binding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.model.Binding<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"initialize":{"!description":"Initialize the binding. The message should be called when creating a binding. The default implementation calls checkUpdate(true).","!static":false,"!category":"function","!type":"fn()"},"attachDataReceived":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dataReceived dataReceived} event of this <code>sap.ui.model.Binding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Binding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.model.Binding<\/code> itself","fnFunction":"type: function, description: Function to be called, when the event occurs"}},"getContext":{"!description":"Returns the model context in which this binding will be resolved.\n\nIf the binding path is absolute, the context is not relevant.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Context"},"isRelative":{"!description":"Returns whether the binding is relative, which means its path does not start with a slash ('/')","!static":false,"!category":"function","!type":"fn() -> Boolean"},"detachDataRequested":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dataRequested dataRequested} event of this <code>sap.ui.model.Binding<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachDataStateChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:DataStateChange DataStateChange} event of this <code>sap.ui.model.Binding<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.model.Binding<\/code> itself.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.model.Binding<\/code> itself","fnFunction":"type: function, description: Function to be called, when the event occurs"}}},"sap.ui.core.mvc.Controller_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sName: [String | Object])","prototype":"sap.ui.core.mvc.Controller"},"sap.ui.model.type.Currency_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Currency with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.Currency"},"module:sap/base/util/ObjectPath":{"!description":"Manages an object path.\n\nThe object path can be just created with {@link #.create}, then an empty nested object path will be created from the provided string. If a value is set for an object path {@link #.set} it is also created if it not already exists. Values can be retrieved from the objectpath with {@link #get}.","set":{"!description":"Sets a value located in the provided path.\n\nThe provided path is used to navigate through the nested objects, starting with the root context.\n\n<b>Note:<\/b> Ensures that the object path exists.","!category":"function","!type":"fn(vObjectPath: [String | String], vValue: Object, oRootContext?: Object)"},"!module":"sap/base/util/ObjectPath","!helpDescription":"Manages an object path.\n\nThe object path can be just created with {@link #.create}, then an empty nested object path will be created from the provided string. If a value is set for an object path {@link #.set} it is also created if it not already exists. Values can be retrieved from the objectpath with {@link #get}.","get":{"!description":"Returns a value located in the provided path. If the provided path cannot be resolved completely, <code>undefined<\/code> is returned.\n\nThe provided object path is used to navigate through the nested objects, starting with the root context. If no root context is provided, the object path begins with <code>window<\/code>.","!category":"function","!type":"fn(sId: String, sUri: String, vObjectPath: [String | String], oRootContext?: Object) -> Object"},"create":{"!description":"Creates a object path from the provided path in the provided root context.\n\nThe provided path is used to navigate through the nested objects, starting with the root context.","!category":"function","!type":"fn(vObjectPath: [String | String], oRootContext?: Object) -> Object"},"!category":"namespace","module:sap/base/util/ObjectPath":"module:sap/base/util/ObjectPath"},"sap.ui.Device.system":{"!description":"Provides a basic categorization of the used device based on various indicators.\n\nThese indicators are for example the support of touch events, the screen size, the used operation system or the user agent of the browser.\n\n<b>Note:<\/b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true<\/code>.","tablet":{"!description":"If this flag is set to <code>true<\/code>, the device is recognized as a tablet.\n\nFurthermore, a CSS class <code>sap-tablet<\/code> is added to the document root element.\n\n<b>Note:<\/b> This flag is also true for some browsers on desktop devices running on Windows 8 or higher. Also see the documentation for {@link sap.ui.Device.system.combi} devices. You can use the following logic to ensure that the current device is a tablet device:\n\n<pre>\nif(sap.ui.Device.system.tablet && !sap.ui.Device.system.desktop){\n\t...tablet related commands...\n}\n<\/pre>","!category":"enum","!type":"Boolean"},"desktop":{"!description":"If this flag is set to <code>true<\/code>, the device is recognized as a desktop system.\n\nFurthermore, a CSS class <code>sap-desktop<\/code> is added to the document root element.","!category":"enum","!type":"Boolean"},"!module":"sap/ui/Device","!helpDescription":"Provides a basic categorization of the used device based on various indicators.\n\nThese indicators are for example the support of touch events, the screen size, the used operation system or the user agent of the browser.\n\n<b>Note:<\/b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true<\/code>.","phone":{"!description":"If this flag is set to <code>true<\/code>, the device is recognized as a phone.\n\nFurthermore, a CSS class <code>sap-phone<\/code> is added to the document root element.","!category":"enum","!type":"Boolean"},"!category":"namespace","combi":{"!description":"If this flag is set to <code>true<\/code>, the device is recognized as a combination of a desktop system and tablet.\n\nFurthermore, a CSS class <code>sap-combi<\/code> is added to the document root element.\n\n<b>Note:<\/b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported natively by the browser being used. This property is set to <code>true<\/code> only when both mouse and touch event are natively supported.","!category":"enum","!type":"Boolean"}},"sap.ui.test.actions.Action":{"!description":"Actions for Opa5 - needs to implement an executeOn function that should simulate a user interaction on a control","extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Action with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.actions.Action.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getIdSuffix idSuffix} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/test/actions/Action","!helpDescription":"Actions for Opa5 - needs to implement an executeOn function that should simulate a user interaction on a control","getIdSuffix":{"!description":"Gets current value of property {@link #getIdSuffix idSuffix}.\n\nUse this only if the target property or the default of the action does not work for your control. The id suffix of the DOM Element the press action will be executed on. For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element. But some controls have multiple DOM elements that could be target of your Action. Then you should set this property. For a detailed documentation of the suffix see {@link sap.ui.core.Element#$}","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.ManagedObject","!category":"class","executeOn":{"!description":"Checks if the matcher is matching - will get an instance of sap.ui.core.Control as parameter Should be overwritten by subclasses","!static":false,"!category":"function","!type":"fn(element: sap.ui.core.Control)","parameters":{"element":"type: sap.ui.core.Control, description: the {@link sap.ui.core.Element} or a control (extends element) the action will be executed on"}},"setIdSuffix":{"!description":"Sets a new value for property {@link #getIdSuffix idSuffix}.\n\nUse this only if the target property or the default of the action does not work for your control. The id suffix of the DOM Element the press action will be executed on. For most of the controls you do not have to specify this, since the Control Adapters will find the correct DOM Element. But some controls have multiple DOM elements that could be target of your Action. Then you should set this property. For a detailed documentation of the suffix see {@link sap.ui.core.Element#$}\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sIdSuffix: String) -> sap.ui.test.actions.Action","parameters":{"sIdSuffix":"type: string, description: New value for property <code>idSuffix<\/code>"}}},"sap.ui.core.routing.Target_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Target with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oOptions: Object, oCache: sap.ui.core.routing.TargetCache, oParent?: sap.ui.core.routing.Target)","prototype":"sap.ui.core.routing.Target"},"sap.ui.core.search":{"suggestType":{"!description":"The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.","!category":"enum","!type":"String"},"icon":{"!description":"Icon of the Search Provider","!category":"enum","!type":"String"},"suggestUrl":{"!description":"The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.","!category":"enum","!type":"sap.ui.core.URI"},"SearchProvider":"sap.ui.core.search.SearchProvider_obj","!category":"namespace","OpenSearchProvider":"sap.ui.core.search.OpenSearchProvider_obj"},"sap.ui.model.analytics.odata4analytics.QueryResult":{"!description":"Representation of an entity type annotated with sap:semantics=\"aggregate\".","getEntitySet":{"!description":"Get the entity set representing this query result in the OData model","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntitySet"},"getModel":{"!description":"Get the analytical model containing the entity set for this query result","!static":false,"!category":"function","!type":"fn() -> Object"},"getName":{"!description":"Get the name of the query result","!static":false,"!category":"function","!type":"fn() -> String"},"findMeasureByName":{"!description":"Find measure by name","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.Measure","parameters":{"sName":"type: string, description: Measure name"}},"!proto":"sap.ui.base.Object","getEntityType":{"!description":"Get the entity type defining the type of this query result in the OData model","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.EntityType"},"!category":"class","findDimensionByName":{"!description":"Find dimension by name","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.Dimension","parameters":{"sName":"type: string, description: Dimension name"}},"getAllDimensions":{"!description":"Get all dimensions included in this query result","!static":false,"!category":"function","!type":"fn() -> Object"},"getAllMeasureNames":{"!description":"Get the names of all measures included in the query result","!static":false,"!category":"function","!type":"fn() -> [String]"},"getTotaledPropertiesListProperty":{"!description":"Get property holding the totaled property list","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Create a representation of an analytic query. Do not create your own instances.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of an entity type annotated with sap:semantics=\"aggregate\".","getAllDimensionNames":{"!description":"Get the names of all dimensions included in the query result","!static":false,"!category":"function","!type":"fn() -> [String]"},"getAllMeasures":{"!description":"Get all measures included in this query result","!static":false,"!category":"function","!type":"fn() -> Object"},"getParameterization":{"!description":"Get the parameterization of this query result","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.Parameterization"},"findMeasureByPropertyName":{"!description":"Find measure by property name","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.Measure","parameters":{"sName":"type: string, description: Property name"}},"findDimensionByPropertyName":{"!description":"Find dimension by property name","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.Dimension","parameters":{"sName":"type: string, description: Property name"}}},"sap.ui.model.analytics.AnalyticalTreeBindingAdapter_obj":{"!type":"fn()","prototype":"sap.ui.model.analytics.AnalyticalTreeBindingAdapter"},"sap.ui.model.odata.type.Unit_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Unit with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Unit.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object, aDynamicFormatOptionNames?: [String])","prototype":"sap.ui.model.odata.type.Unit"},"sap.ui.model.type.DateTimeInterval":{"!description":"This class represents the DateTime interval composite type.","extend":{"!description":"Creates a new subclass of class sap.ui.model.type.DateTimeInterval with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.DateInterval.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.type.DateTimeInterval.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a DateTime interval type.","!module":"sap/ui/model/type/DateTimeInterval","!helpDescription":"This class represents the DateTime interval composite type.","!proto":"sap.ui.model.type.DateInterval","!category":"class"},"sap.ui.VersionInfo":{"_getTransitiveDependencyForLibraries":{"!description":"Gets all additional transitive dependencies for the given list of libraries. Returns a new array.","!static":"true","!category":"function","!type":"fn(aLibraries: [String]) -> [String]"},"!module":"sap/ui/VersionInfo","load":{"!description":"Loads the version info file (resources/sap-ui-version.json) asynchronously and returns a Promise. The returned Promise resolves with the version info files content.\n\nIf a library name is specified then the version info of the individual library will be retrieved.\n\nIn case of the version info file is not available an error will occur when calling this function.","!static":"true","!category":"function","!type":"fn(mOptions: Object) -> Promise"},"!category":"namespace","_getTransitiveDependencyForComponent":{"!description":"If the given component is part of the version-info, an array with all transitive dependencies is returned. The dependency list includes the library in which the component itself is contained.","!static":"true","!category":"function","!type":"fn(sComponentName: String) -> [Array.<{library:string,dependencies:string]"}},"sap.ui.core.XMLComposite":{"!description":"Base Class for XMLComposite controls.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.XMLComposite.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.core.Control","!category":"class","getWidth":{"!description":"Gets current value of property {@link #getWidth width}.\n\nThe width\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"setDisplayBlock":{"!description":"Sets a new value for property {@link #getDisplayBlock displayBlock}.\n\nWhether the CSS display should be set to \"block\".\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bDisplayBlock: Boolean) -> sap.ui.core.XMLComposite","parameters":{"bDisplayBlock":"type: boolean, description: New value for property <code>displayBlock<\/code>"}},"setHeight":{"!description":"Sets a new value for property {@link #getHeight height}.\n\nThe height\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sHeight: sap.ui.core.CSSSize) -> sap.ui.core.XMLComposite","parameters":{"sHeight":"type: sap.ui.core.CSSSize, description: New value for property <code>height<\/code>"}},"setWidth":{"!description":"Sets a new value for property {@link #getWidth width}.\n\nThe width\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>100%<\/code>.","!static":false,"!category":"function","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.core.XMLComposite","parameters":{"sWidth":"type: sap.ui.core.CSSSize, description: New value for property <code>width<\/code>"}},"enhanceAccessibilityState":{"!description":"This method is a hook for the RenderManager that gets called during the rendering of child Controls. It allows to add, remove and update existing accessibility attributes (ARIA) of those controls.","!static":false,"!category":"function","!type":"fn(oElement: sap.ui.core.Control, mAriaProps: Object)","parameters":{"oElement":"type: sap.ui.core.Control, description: The Control that gets rendered by the RenderManager","mAriaProps":"type: Object, description: The mapping of \"aria-\" prefixed attributes"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.XMLComposite with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getHeight":{"!description":"Gets current value of property {@link #getHeight height}.\n\nThe height","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!constructorDescription":"XMLComposite is the base class for composite controls that use a XML fragment representation\nfor their visual parts. From a user perspective such controls appear as any other control, but internally the\nrendering part is added as a fragment.\nThe fragment that is used should appear in the same folder as the control's JS implementation with the file extension\n<code>.control.xml<\/code>.\nThe fragment's content can access the interface data from the XMLComposite control via bindings. Currently only aggregations and properties\ncan be used with bindings inside a fragment.\nThe exposed model that is used for internal bindings in the fragment has the default name <code>$this<\/code>. The name will always start\nwith an <code>$<\/code>. The metadata of the derived control can define the alias with its metadata. A code example can be found below.\n\nAs XMLComposites compose other controls, they are only invalidated and re-rendered if explicitly defined. Additional metadata\nfor invalidation can be given for properties and aggregation. The default invalidation is <code>\"none\"<\/code>.\nSetting invalidate to <code>true<\/code> for properties and aggregations sets the complete XMLComposite\nto invalidate and rerender.<\/code>\n\nExample:\n<pre>\nXMLComposite.extend(\"sap.mylib.MyXMLComposite\", {\n  metadata : {\n    library: \"sap.mylib\",\n    properties : {\n      text: { //changing this property will not re-render the XMLComposite\n         type: \"string\",\n         defaultValue: \"\"\n      },\n      title: { //changing this property will re-render the XMLComposite as it defines invalidate: true\n         type: \"string\",\n         defaultValue: \"\",\n         invalidate: true\n      },\n      value: { //changing this property will re-render the XMLComposite as it defines invalidate: true\n         type: \"string\",\n         defaultValue: \"\",\n         invalidate: true\n      }\n    },\n    defaultProperty : \"text\",\n    aggregations : {\n      items : {\n         type: \"sap.ui.core.Control\",\n         invalidate: true\n      },\n      header : {\n         type: \"sap.mylib.FancyHeader\",\n         multiple : false\n      }\n    },\n    defaultAggregation : \"items\"\n    events: {\n      outerEvent : {\n        parameters : {\n          opener : \"sap.ui.core.Control\"\n        }\n      }\n    }\n  },\n  //alias defaults to \"this\"\n  alias: \"mycontrolroot\" //inner bindings will use model name $mycontrolroot\n  //fragment defaults to {control name}.control.xml in this case sap.mylib.MyXMLComposite.control.xml\n  fragment: \"sap.mylib.MyXMLCompositeOther.control.xml\" //the name of the fragment\n});\n<\/pre>\n\nInternally the XMLComposite instantiates and initializes the given fragment and stores the resulting control in a hidden\naggregation named <code>_content<\/code>. The fragment should only include one root element.\n\nBindings of inner controls to the interface of the XMLComposite can be done with normal binding syntax.\nHere properties are used as property bindings and aggregations are used as list bindings.\nCurrently it is not possible to bind associations in a fragment.\n\nExample:\n<pre>\n   &lt;core:FragmentDefinition xmlns:m=\"sap.m\" xmlns:core=\"sap.ui.core\"&gt;\n      &lt;m:Text text=\"{$this&gt;text}\" visible=\"{= ${$this&gt;text} !== \"\"}\" /&gt;\n   &lt;/core:FragmentDefinition&gt;\n<\/pre>\n<pre>\n   &lt;core:FragmentDefinition xmlns:m=\"sap.m\" xmlns:core=\"sap.ui.core\"&gt;\n      &lt;m:VBox items=\"{path:\"$this&gt;texts\", filters:{path:\"text\", operator:\"Contains\", value1:\"Text\"}, sorter:{path:\"text\", descending:true}}\"&gt;\n          &lt;m:Text text=\"{$this&gt;text}\" /&gt;\n      &lt;/m:VBox&gt;\n   &lt;/core:FragmentDefinition&gt;\n<\/pre>\n<pre>\n   &lt;core:FragmentDefinition xmlns:m=\"sap.m\" xmlns:core=\"sap.ui.core\"&gt;\n      &lt;m:Button text=\"Press Me\" press=\"handlePress\"/&gt;\n   &lt;/core:FragmentDefinition&gt;\n<\/pre>\n\nAll events handled within the fragment will be dispatched to the XMLComposite control. It is recommended to follow this paradigm to allow\nreuse of a XMLComposite without any dependency to controller code of the current embedding view.\n\n<pre>\n   MyXMLComposite.prototype.handlePress = function() {\n       this.fireOuterEvent(); // passing on the event to the outer view\n   }\n<\/pre>\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 100%)<\/li>\n<li>{@link #getHeight height} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getDisplayBlock displayBlock} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","!module":"sap/ui/core/XMLComposite","!helpDescription":"Base Class for XMLComposite controls.","byId":{"!description":"Returns an element by its ID in the context of the XMLComposite.\n\nMay only be used by the implementation of a specific XMLComposite, not by an application using a XMLComposite.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: XMLComposite-local ID of the inner element"}},"getDisplayBlock":{"!description":"Gets current value of property {@link #getDisplayBlock displayBlock}.\n\nWhether the CSS display should be set to \"block\".\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getResourceBundle":{"!description":"Returns the resource bundle of the resource model\n\nSample: this.getResourceBundle().then(function(oBundle) {oBundle.getText(<messagebundle_key>)})","!static":false,"!category":"function","!type":"fn() -> jQuery.sap.util.ResourceBundle | Promise"}},"sap.ui.core.util.reflection.XmlTreeModifier":{"!description":"Static utility class to access XMLNodes like ManagedObjects, inside this classes oControl usually means XML node.","!module":"sap/ui/core/util/reflection/XmlTreeModifier","!helpDescription":"Static utility class to access XMLNodes like ManagedObjects, inside this classes oControl usually means XML node.","!category":"namespace"},"sap.ui.model.ParseException":{"!description":"Instances of this exception are thrown when converting a string value to its model representation fails.","!constructorDescription":"Creates a new ParseException.","!module":"sap/ui/model/ParseException","!helpDescription":"Instances of this exception are thrown when converting a string value to its model representation fails.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.base.DataType_obj":{"!type":"fn()","prototype":"sap.ui.base.DataType"},"sap.ui.core.ws.SapPcpWebSocket_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sUrl: String, aProtocols?: Array)","prototype":"sap.ui.core.ws.SapPcpWebSocket"},"sap.ui.model.json":{"JSONTreeBinding":"sap.ui.model.json.JSONTreeBinding_obj","!description":"JSON-based DataBinding","JSONModel":"sap.ui.model.json.JSONModel_obj","JSONPropertyBinding":"sap.ui.model.json.JSONPropertyBinding_obj","!module":"sap/ui/model/json/JSONModel","!helpDescription":"JSON-based DataBinding","!category":"namespace","JSONListBinding":"sap.ui.model.json.JSONListBinding_obj"},"sap.ui.model.message.MessageModel":{"!description":"Model implementation for Messages","extend":{"!description":"Creates a new subclass of class sap.ui.model.message.MessageModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.message.MessageModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new JSONModel.","getProperty":{"!description":"Returns the value for the property with the given <code>sPropertyName<\/code>","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: Object) -> Object","parameters":{"sPath":"type: string, description: the path to the property","oContext":"type: object, description: the context which will be used to retrieve the property"}},"!module":"sap/ui/model/message/MessageModel","!helpDescription":"Model implementation for Messages","setData":{"!description":"Sets the message data to the model.","!static":false,"!category":"function","!type":"fn(oData: Object)","parameters":{"oData":"type: object, description: the data to set on the model"}},"setProperty":{"!description":"Unsupported operation.\n\nOther models provide this method to set a new value for a specific property. <code>MessageModel<\/code> does not support it as it supports the <code>OneWay<\/code> mode only.","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.model.ClientModel","!category":"class"},"sap.ui.Device.media.RANGESETS":{"!description":"Enumeration containing the names and settings of predefined screen width media query range sets.","SAP_4STEPS":{"!description":"A 4-step range set (S-XL).\n\nThe ranges of this set are: <ul> <li><code>\"S\"<\/code>: For screens smaller than 520 pixels.<\/li> <li><code>\"M\"<\/code>: For screens greater than or equal to 520 pixels and smaller than 760 pixels.<\/li> <li><code>\"L\"<\/code>: For screens greater than or equal to 760 pixels and smaller than 960 pixels.<\/li> <li><code>\"XL\"<\/code>: For screens greater than or equal to 960 pixels.<\/li> <\/ul>\n\nTo use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).\n\nIf this range set is initialized, a CSS class is added to the page root (<code>html<\/code> tag) which indicates the current screen width range: <code>sapUiMedia-4Step-<i>NAME_OF_THE_INTERVAL<\/i><\/code>.","!category":"enum","!type":"String"},"SAP_6STEPS":{"!description":"A 6-step range set (XS-XXL).\n\nThe ranges of this set are: <ul> <li><code>\"XS\"<\/code>: For screens smaller than 241 pixels.<\/li> <li><code>\"S\"<\/code>: For screens greater than or equal to 241 pixels and smaller than 400 pixels.<\/li> <li><code>\"M\"<\/code>: For screens greater than or equal to 400 pixels and smaller than 541 pixels.<\/li> <li><code>\"L\"<\/code>: For screens greater than or equal to 541 pixels and smaller than 768 pixels.<\/li> <li><code>\"XL\"<\/code>: For screens greater than or equal to 768 pixels and smaller than 960 pixels.<\/li> <li><code>\"XXL\"<\/code>: For screens greater than or equal to 960 pixels.<\/li> <\/ul>\n\nTo use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).\n\nIf this range set is initialized, a CSS class is added to the page root (<code>html<\/code> tag) which indicates the current screen width range: <code>sapUiMedia-6Step-<i>NAME_OF_THE_INTERVAL<\/i><\/code>.","!category":"enum","!type":"String"},"!module":"sap/ui/Device","!helpDescription":"Enumeration containing the names and settings of predefined screen width media query range sets.","SAP_STANDARD_EXTENDED":{"!description":"A 4-step range set (Phone, Tablet, Desktop, LargeDesktop).\n\nThe ranges of this set are: <ul> <li><code>\"Phone\"<\/code>: For screens smaller than 600 pixels.<\/li> <li><code>\"Tablet\"<\/code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.<\/li> <li><code>\"Desktop\"<\/code>: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.<\/li> <li><code>\"LargeDesktop\"<\/code>: For screens greater than or equal to 1440 pixels.<\/li> <\/ul>\n\nThis range set is initialized by default. An initialization via {@link sap.ui.Device.media.initRangeSet} is not needed.\n\nA CSS class is added to the page root (<code>html<\/code> tag) which indicates the current screen width range: <code>sapUiMedia-StdExt-<i>NAME_OF_THE_INTERVAL<\/i><\/code>.","!category":"enum","!type":"String"},"!category":"namespace","SAP_3STEPS":{"!description":"A 3-step range set (S-L).\n\nThe ranges of this set are: <ul> <li><code>\"S\"<\/code>: For screens smaller than 520 pixels.<\/li> <li><code>\"M\"<\/code>: For screens greater than or equal to 520 pixels and smaller than 960 pixels.<\/li> <li><code>\"L\"<\/code>: For screens greater than or equal to 960 pixels.<\/li> <\/ul>\n\nTo use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.initRangeSet}).\n\nIf this range set is initialized, a CSS class is added to the page root (<code>html<\/code> tag) which indicates the current screen width range: <code>sapUiMedia-3Step-<i>NAME_OF_THE_INTERVAL<\/i><\/code>.","!category":"enum","!type":"String"},"SAP_STANDARD":{"!description":"A 3-step range set (Phone, Tablet, Desktop).\n\nThe ranges of this set are: <ul> <li><code>\"Phone\"<\/code>: For screens smaller than 600 pixels.<\/li> <li><code>\"Tablet\"<\/code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.<\/li> <li><code>\"Desktop\"<\/code>: For screens greater than or equal to 1024 pixels.<\/li> <\/ul>\n\nThis range set is initialized by default. An initialization via {@link sap.ui.Device.media.initRangeSet} is not needed.\n\nA CSS class is added to the page root (<code>html<\/code> tag) which indicates the current screen width range: <code>sapUiMedia-Std-<i>NAME_OF_THE_INTERVAL<\/i><\/code>. Furthermore there are 5 additional CSS classes to hide elements based on the width of the screen: <ul> <li><code>sapUiHideOnPhone<\/code>: Will be hidden if the screen has 600px or more<\/li> <li><code>sapUiHideOnTablet<\/code>: Will be hidden if the screen has less than 600px or more than 1023px<\/li> <li><code>sapUiHideOnDesktop<\/code>: Will be hidden if the screen is smaller than 1024px<\/li> <li><code>sapUiVisibleOnlyOnPhone<\/code>: Will be visible if the screen has less than 600px<\/li> <li><code>sapUiVisibleOnlyOnTablet<\/code>: Will be visible if the screen has 600px or more but less than 1024px<\/li> <li><code>sapUiVisibleOnlyOnDesktop<\/code>: Will be visible if the screen has 1024px or more<\/li> <\/ul>","!category":"enum","!type":"String"}},"sap.ui.core.search.OpenSearchProvider":{"!description":"A SearchProvider which uses the OpenSearch protocol (either JSON or XML).","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.search.OpenSearchProvider.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getSuggestUrl":{"!description":"Gets current value of property {@link #getSuggestUrl suggestUrl}.\n\nThe URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.URI"},"setSuggestUrl":{"!description":"Sets a new value for property {@link #getSuggestUrl suggestUrl}.\n\nThe URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSuggestUrl: sap.ui.core.URI) -> sap.ui.core.search.OpenSearchProvider","parameters":{"sSuggestUrl":"type: sap.ui.core.URI, description: New value for property <code>suggestUrl<\/code>"}},"!proto":"sap.ui.core.search.SearchProvider","!category":"class","getSuggestType":{"!description":"Gets current value of property {@link #getSuggestType suggestType}.\n\nThe type of data which is provided by the given suggestUrl: either 'json' or 'xml'.\n\nDefault value is <code>json<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"suggest":{"!description":"Call this function to get suggest values from the search provider. The given callback function is called with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]', 2nd parameter).","!static":false,"!category":"function","!type":"fn(sValue: String, fCallback: fn())","parameters":{"fCallback":"type: function, description: The callback function which is called when the suggestions are available.","sValue":"type: string, description: The value for which suggestions are requested."}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Constructor for a new search/OpenSearchProvider.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSuggestUrl suggestUrl} : sap.ui.core.URI<\/li>\n<li>{@link #getSuggestType suggestType} : string (default: json)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.search.SearchProvider#constructor sap.ui.core.search.SearchProvider}\ncan be used as well.","!module":"sap/ui/core/search/OpenSearchProvider","!helpDescription":"A SearchProvider which uses the OpenSearch protocol (either JSON or XML).","setSuggestType":{"!description":"Sets a new value for property {@link #getSuggestType suggestType}.\n\nThe type of data which is provided by the given suggestUrl: either 'json' or 'xml'.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>json<\/code>.","!static":false,"!category":"function","!type":"fn(sSuggestType: String) -> sap.ui.core.search.OpenSearchProvider","parameters":{"sSuggestType":"type: string, description: New value for property <code>suggestType<\/code>"}}},"sap.ui.core.Wrapping":{"!description":"Configuration options for text wrapping.","!module":"sap/ui/core/library","Hard":{"!description":"Inserts actual line breaks in the text at the wrap point.","!category":"enum","!type":"String"},"!category":"static class","None":{"!description":"The standard browser behavior is considered for wrapping.","!category":"enum","!type":"String"},"Soft":{"!description":"The text is actually on the same line but displayed within several lines.","!category":"enum","!type":"String"},"Off":{"!description":"Wrapping shall not be allowed.","!category":"enum","!type":"String"}},"jQuery.sap.KeyCodes":{"PRINT":{"!category":"enum","!type":"Number"},"SLEEP":{"!category":"enum","!type":"Number"},"ARROW_LEFT":{"!category":"enum","!type":"Number"},"MINUS":{"!category":"enum","!type":"Number"},"BACKSLASH":{"!category":"enum","!type":"Number"},"SEMICOLON":{"!category":"enum","!type":"Number"},"BREAK":{"!category":"enum","!type":"Number"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/events/KeyCodes} instead<br>Enumeration of key codes.","ARROW_RIGHT":{"!category":"enum","!type":"Number"},"DOT":{"!category":"enum","!type":"Number"},"!module":"jquery.sap.keycodes","TURN_OFF":{"!category":"enum","!type":"Number"},"NUMPAD_2":{"!category":"enum","!type":"Number"},"NUMPAD_3":{"!category":"enum","!type":"Number"},"NUMPAD_4":{"!category":"enum","!type":"Number"},"NUMPAD_5":{"!category":"enum","!type":"Number"},"NUMPAD_6":{"!category":"enum","!type":"Number"},"NUMPAD_7":{"!category":"enum","!type":"Number"},"NUMPAD_8":{"!category":"enum","!type":"Number"},"NUMPAD_9":{"!category":"enum","!type":"Number"},"DIGIT_6":{"!category":"enum","!type":"Number"},"A":{"!category":"enum","!type":"Number"},"DIGIT_7":{"!category":"enum","!type":"Number"},"B":{"!category":"enum","!type":"Number"},"DIGIT_8":{"!category":"enum","!type":"Number"},"C":{"!category":"enum","!type":"Number"},"DIGIT_9":{"!category":"enum","!type":"Number"},"D":{"!category":"enum","!type":"Number"},"DIGIT_2":{"!category":"enum","!type":"Number"},"NUMPAD_SLASH":{"!category":"enum","!type":"Number"},"DIGIT_3":{"!category":"enum","!type":"Number"},"E":{"!category":"enum","!type":"Number"},"DIGIT_4":{"!category":"enum","!type":"Number"},"F":{"!category":"enum","!type":"Number"},"NUMPAD_0":{"!category":"enum","!type":"Number"},"DIGIT_5":{"!category":"enum","!type":"Number"},"G":{"!category":"enum","!type":"Number"},"NUMPAD_1":{"!category":"enum","!type":"Number"},"H":{"!category":"enum","!type":"Number"},"ENTER":{"!category":"enum","!type":"Number"},"I":{"!category":"enum","!type":"Number"},"J":{"!category":"enum","!type":"Number"},"K":{"!category":"enum","!type":"Number"},"L":{"!category":"enum","!type":"Number"},"M":{"!category":"enum","!type":"Number"},"N":{"!category":"enum","!type":"Number"},"O":{"!category":"enum","!type":"Number"},"P":{"!category":"enum","!type":"Number"},"SPACE":{"!category":"enum","!type":"Number"},"Q":{"!category":"enum","!type":"Number"},"DELETE":{"!category":"enum","!type":"Number"},"R":{"!category":"enum","!type":"Number"},"S":{"!category":"enum","!type":"Number"},"T":{"!category":"enum","!type":"Number"},"U":{"!category":"enum","!type":"Number"},"V":{"!category":"enum","!type":"Number"},"W":{"!category":"enum","!type":"Number"},"WINDOWS":{"!category":"enum","!type":"Number"},"X":{"!category":"enum","!type":"Number"},"Y":{"!category":"enum","!type":"Number"},"NUMPAD_ASTERISK":{"!category":"enum","!type":"Number"},"Z":{"!category":"enum","!type":"Number"},"COMMA":{"!category":"enum","!type":"Number"},"GREAT_ACCENT":{"!category":"enum","!type":"Number"},"SINGLE_QUOTE":{"!category":"enum","!type":"Number"},"SCROLL_LOCK":{"!category":"enum","!type":"Number"},"TAB":{"!category":"enum","!type":"Number"},"CONTEXT_MENU":{"!category":"enum","!type":"Number"},"NUMPAD_MINUS":{"!category":"enum","!type":"Number"},"ALT":{"!category":"enum","!type":"Number"},"PIPE":{"!category":"enum","!type":"Number"},"NUMPAD_COMMA":{"!category":"enum","!type":"Number"},"BACKSPACE":{"!category":"enum","!type":"Number"},"F1":{"!category":"enum","!type":"Number"},"F2":{"!category":"enum","!type":"Number"},"F3":{"!category":"enum","!type":"Number"},"PAGE_UP":{"!category":"enum","!type":"Number"},"F4":{"!category":"enum","!type":"Number"},"F5":{"!category":"enum","!type":"Number"},"NUMPAD_PLUS":{"!category":"enum","!type":"Number"},"F6":{"!category":"enum","!type":"Number"},"F7":{"!category":"enum","!type":"Number"},"F8":{"!category":"enum","!type":"Number"},"F9":{"!category":"enum","!type":"Number"},"NUM_LOCK":{"!category":"enum","!type":"Number"},"ARROW_DOWN":{"!category":"enum","!type":"Number"},"DIGIT_0":{"!category":"enum","!type":"Number"},"END":{"!category":"enum","!type":"Number"},"INSERT":{"!category":"enum","!type":"Number"},"DIGIT_1":{"!category":"enum","!type":"Number"},"CONTROL":{"!category":"enum","!type":"Number"},"PLUS":{"!category":"enum","!type":"Number"},"CAPS_LOCK":{"!category":"enum","!type":"Number"},"!category":"static class","PAGE_DOWN":{"!category":"enum","!type":"Number"},"SHIFT":{"!category":"enum","!type":"Number"},"EQUALS":{"!category":"enum","!type":"Number"},"F10":{"!category":"enum","!type":"Number"},"F12":{"!category":"enum","!type":"Number"},"F11":{"!category":"enum","!type":"Number"},"OPEN_BRACKET":{"!category":"enum","!type":"Number"},"SLASH":{"!category":"enum","!type":"Number"},"ARROW_UP":{"!category":"enum","!type":"Number"},"ESCAPE":{"!category":"enum","!type":"Number"},"HOME":{"!category":"enum","!type":"Number"}},"sap.ui.core.util.ExportCell":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Contains content that can be used to export data. Used in {@link sap.ui.core.util.ExportColumn ExportColumn} / {@link sap.ui.core.util.Export Export}.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportCell with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.ExportCell.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setContent":{"!description":"Sets a new value for property {@link #getContent content}.\n\nCell content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sContent: String) -> sap.ui.core.util.ExportCell","parameters":{"sContent":"type: string, description: New value for property <code>content<\/code>"}},"!constructorDescription":"Constructor for a new ExportCell.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getContent content} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/util/ExportCell","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Contains content that can be used to export data. Used in {@link sap.ui.core.util.ExportColumn ExportColumn} / {@link sap.ui.core.util.Export Export}.","getContent":{"!description":"Gets current value of property {@link #getContent content}.\n\nCell content.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Element","!category":"class"},"sap.ui.model.odata.ODataAnnotations":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 please use {@link sap.ui.model.odata.v2.ODataAnnotations} instead.<br>Implementation to access OData Annotations","setHeaders":{"!description":"Set custom headers which are provided in a key/value map. These headers are used for all requests. The Accept-Language header cannot be modified and is set using the Core's language setting.\n\nTo remove these headers simply set the mHeaders parameter to {}. Please also note that when calling this method again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.","!static":false,"!category":"function","!type":"fn(mHeaders: Object.<string,string>)","parameters":{"mHeaders":"type: Object.<string,string>, description: the header name/value map."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.ODataAnnotations.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"isFailed":{"!description":"Checks whether annotations loading of at least one of the given URLs has already failed. Note: For asynchronous annotations {@link #attachFailed} has to be used.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!proto":"sap.ui.base.EventProvider","!category":"class","getAnnotationsData":{"!description":"returns the raw annotation data","!static":false,"!category":"function","!type":"fn() -> Object"},"isLoaded":{"!description":"Checks whether annotations from at least one source are available","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"fireLoaded":{"!description":"Fires event {@link #event:loaded loaded} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataAnnotations","parameters":{"oParameters":"type: object, description: Parameters that will be given as parameters to the event handler"}},"detachLoaded":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:loaded loaded} event of this <code>sap.ui.model.odata.ODataAnnotations<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"!module":"sap/ui/model/odata/ODataAnnotations","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.66 please use {@link sap.ui.model.odata.v2.ODataAnnotations} instead.<br>Implementation to access OData Annotations","attachLoaded":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:loaded loaded} event of this <code>sap.ui.model.odata.ODataAnnotations<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setXML":{"!description":"Sets an XML document.","!static":false,"!category":"function","!type":"fn(oXMLDocument: Object, sXMLContent: String, mOptions?: Object) -> Boolean","parameters":{"oXMLDocument":"type: object, description: The XML document to parse for annotations","sXMLContent":"type: string, description: The XML content as string to parse for annotations","mOptions":"type: object, description: Additional options"}},"addUrl":{"!description":"Adds either one URL or an array of URLs to be loaded and parsed. The result will be merged into the annotations data which can be retrieved using the getAnnotations-method.","!static":false,"!category":"function","!type":"fn(vUrl: [String | String]) -> Promise","parameters":{"vUrl":"type: string|string[], description: Either one URL as string or an array of URL strings"}},"fireFailed":{"!description":"Fires event {@link #event:failed failed} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.model.odata.ODataAnnotations","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"detachFailed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:failed failed} event of this <code>sap.ui.model.odata.ODataAnnotations<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachFailed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:failed failed} event of this <code>sap.ui.model.odata.ODataAnnotations<\/code>.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.model.odata.ODataAnnotations","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.model.odata.ODataAnnotations<\/code> itself","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}}},"sap.ui.core.AppCacheBuster":{"!description":"The AppCacheBuster is used to hook into URL relevant functions in jQuery and SAPUI5 and rewrite the URLs with a timestamp segment. The timestamp information is fetched from the server and used later on for the URL rewriting.","!module":"sap/ui/core/AppCacheBuster","!helpDescription":"The AppCacheBuster is used to hook into URL relevant functions in jQuery and SAPUI5 and rewrite the URLs with a timestamp segment. The timestamp information is fetched from the server and used later on for the URL rewriting.","convertURL":{"!description":"Converts the given URL if it matches a URL in the cachebuster index. If not then the same URL will be returned. To prevent URLs from being modified by the application cachebuster you can implement the function <code>sap.ui.core.AppCacheBuster.handleURL<\/code>.","!static":"true","!category":"function","!type":"fn(sUrl: String) -> String"},"handleURL":{"!description":"Callback function which can be overwritten to programmatically decide whether to rewrite the given URL or not.","!static":"true","!category":"function","!type":"fn(sUrl: String) -> Boolean"},"!category":"namespace","normalizeURL":{"!description":"Normalizes the given URL and make it absolute.","!static":"true","!category":"function","!type":"fn(sUrl: String) -> String"},"register":{"!description":"Registers an application. Loads the cachebuster index file from this locations. All registered files will be considered by the cachebuster and the URLs will be prefixed with the timestamp of the index file.","!static":"true","!category":"function","!type":"fn(sBaseUrl: String)"}},"sap.ui.core.RenderManager":{"attachPreserveContent":{"!description":"Attaches a listener which is called on {@link sap.ui.core.RenderManager.preserveContent} call","!static":true,"!category":"function","!type":"fn(fnListener: fn(), oContext?: Object)","parameters":{"oContext":"type: object, description: context for the listener function","fnListener":"type: function, description: listener function"}},"openEnd":{"!description":"Ends an open tag started with <code>openStart<\/code>.\n\nThis indicates that there are no more attributes to set to the open tag.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.RenderManager"},"!proto":"Object","icon":{"!description":"Writes either an &lt;img&gt; tag for normal URI or a &lt;span&gt; tag with needed properties for an icon URI.\n\nAdditional classes and attributes can be added to the tag with the second and third parameter. All of the given attributes are escaped for security consideration.\n\nWhen an &lt;img&gt; tag is rendered, the following two attributes are added by default and can be overwritten with corresponding values in the <code>mAttributes<\/code> parameter: <ul> <li><code>role: \"presentation\"<\/code><\/Li> <li><code>alt: \"\"<\/code><\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(sURI: sap.ui.core.URI, aClasses?: Array | String, mAttributes?: Object) -> sap.ui.core.RenderManager","parameters":{"mAttributes":"type: object, description: Additional attributes that will be added to the rendered tag","sURI":"type: sap.ui.core.URI, description: URI of an image or of an icon registered in {@link sap.ui.core.IconPool}","aClasses":"type: array|string, description: Additional classes that are added to the rendered tag"}},"cleanupControlWithoutRendering":{"!description":"Cleans up the rendering state of the given control without rendering it.\n\nA control is responsible for the rendering of all its child controls. But in some cases it makes sense that a control only renders a subset of its children based on some criterion. For example, a typical carousel control might, for performance reasons, only render the currently visible children (and maybe some child before and after the visible area to facilitate slide-in / slide-out animations), but not all children. This leads to situations where a child had been rendered before, but shouldn't be rendered anymore after an update of the carousel's position. The DOM related state of that child then must be cleaned up correctly, e.g. by de-registering resize handlers or native event handlers. <code>cleanupControlWithoutRendering<\/code> helps with that task by triggering the same activities that the normal rendering triggers before the rendering of a control (e.g. it fires the <code>BeforeRendering<\/code> event). It just doesn't call the renderer and the control will not receive an <code>AfterRendering<\/code> event.\n\nThe following example shows how <code>renderControl<\/code> and <code>cleanupControlWithoutRendering<\/code> should be used:\n\n<pre>\n  CarouselRenderer.render = function(rm, oCarousel){\n\n    ...\n\n    oCarousel.getPages().forEach( function( oPage ) {\n       if ( oCarousel.isPageToBeRendered( oPage ) ) {\n          rm.renderControl( oPage ); // onBeforeRendering, render, later onAfterRendering\n       } else {\n          rm.cleanupControlWithoutRendering( oPage ); // onBeforeRendering\n       }\n    });\n\n    ...\n\n  };\n<\/pre>\n\n<h3>DOM Removal<\/h3> The method does not remove the DOM of the given control. The caller of this method has to take care to remove it at some later point in time. It should indeed be <i>later<\/i>, not <i>before<\/i> as the <code>onBeforeRendering<\/code> hook of the control might need access to the old DOM for a proper cleanup.\n\nFor parents which are rendered with the normal mechanism as shown in the example above, the removal of the old child DOM is guaranteed. The whole DOM of the parent control (including the DOM of the no longer rendered child) will be replaced with new DOM (no longer containing the child) when the rendering cycle finishes.\n\n<b>Note:<\/b>: the functionality of this method is different from the default handling for invisible controls (controls with <code>visible == false<\/code>). The standard rendering for invisible controls still renders a placeholder DOM. This allows re-rendering of the invisible control once it becomes visible again without a need to render its parent, too. Children that are cleaned up with this method here, are supposed to have no more DOM at all. Rendering them later on therefore requires an involvement (typically: a rendering) of their parent.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control)","parameters":{"oControl":"type: sap.ui.core.Control, description: Control that should be cleaned up"}},"getPreserveAreaRef":{"!description":"Returns the hidden area reference belonging to the current window instance.","!static":true,"!category":"function","!type":"fn() -> Element"},"!category":"class","preserveContent":{"!description":"Collects descendants of the given root node that need to be preserved before the root node is wiped out. The \"to-be-preserved\" nodes are moved to a special, hidden 'preserve' area.\n\nA node is declared \"to-be-preserved\" when it has the <code>data-sap-ui-preserve<\/code> attribute set. When the optional parameter <code>bPreserveNodesWithId<\/code> is set to true, then nodes with an id are preserved as well and their <code>data-sap-ui-preserve<\/code> attribute is set automatically. This option is used by UIAreas when they render for the first time and simplifies the handling of predefined HTML content in a web page.\n\nThe \"to-be-preserved\" nodes are searched with a depth first search and moved to the 'preserve' area in the order that they are found. So for direct siblings the order should be stable.","!static":true,"!category":"function","!type":"fn(oRootNode: Element, bPreserveRoot?: Boolean, bPreserveNodesWithId?: Boolean)","parameters":{"oRootNode":"type: Element, description: to search for \"to-be-preserved\" nodes","bPreserveNodesWithId":"type: boolean, description: whether to preserve nodes with an id as well","bPreserveRoot":"type: boolean, description: whether to preserve the root itself"}},"translate":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 never has been implemented - DO NOT USE<br>undefined","!static":false,"!category":"function","!type":"fn(sKey: String)","parameters":{"sKey":"type: string, description: the key"}},"writeIcon":{"!description":"Writes either an &lt;img&gt; tag for normal URI or a &lt;span&gt; tag with needed properties for an icon URI.\n\nAdditional classes and attributes can be added to the tag with the second and third parameter. All of the given attributes are escaped for security consideration.\n\nWhen an &lt;img&gt; tag is rendered, the following two attributes are added by default and can be overwritten with corresponding values in the <code>mAttributes<\/code> parameter: <ul> <li><code>role: \"presentation\"<\/code><\/Li> <li><code>alt: \"\"<\/code><\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(sURI: sap.ui.core.URI, aClasses?: Array | String, mAttributes?: Object) -> sap.ui.core.RenderManager","parameters":{"mAttributes":"type: object, description: Additional attributes that will be added to the rendered tag","sURI":"type: sap.ui.core.URI, description: URI of an image or of an icon registered in {@link sap.ui.core.IconPool}","aClasses":"type: array|string, description: Additional classes that are added to the rendered tag"}},"writeStyles":{"!description":"Writes and flushes the style collection","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.RenderManager"},"writeAccessibilityState":{"!description":"Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML based on the element's properties and associations.\n\nThe ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.\n\nThe following properties/values to ARIA attribute mappings are done (if the element does have such properties): <ul> <li><code>editable===false<\/code> => <code>aria-readonly=\"true\"<\/code><\/li> <li><code>enabled===false<\/code> => <code>aria-disabled=\"true\"<\/code><\/li> <li><code>visible===false<\/code> => <code>aria-hidden=\"true\"<\/code><\/li> <li><code>required===true<\/code> => <code>aria-required=\"true\"<\/code><\/li> <li><code>selected===true<\/code> => <code>aria-selected=\"true\"<\/code><\/li> <li><code>checked===true<\/code> => <code>aria-checked=\"true\"<\/code><\/li> <\/ul>\n\nIn case of the required attribute also the Label controls which referencing the given element in their 'for' relation are taken into account to compute the <code>aria-required<\/code> attribute.\n\nAdditionally, the association <code>ariaDescribedBy<\/code> and <code>ariaLabelledBy<\/code> are used to write the ID lists of the ARIA attributes <code>aria-describedby<\/code> and <code>aria-labelledby<\/code>.\n\nLabel controls that reference the given element in their 'for' relation are automatically added to the <code>aria-labelledby<\/code> attributes.\n\nNote: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers have to check whether it fulfills their requirements. In case of problems (for example the RadioButton has a <code>selected<\/code> property but must provide an <code>aria-checked<\/code> attribute) the auto-generated result of this function can be influenced via the parameter <code>mProps<\/code> as described below.\n\nThe parameter <code>mProps<\/code> can be used to either provide additional attributes which should be added and/or to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys (Exception: Attribute 'role' does not get the prefix 'aria-').\n\nExamples: <code>{hidden : true}<\/code> results in <code>aria-hidden=\"true\"<\/code> independent of the presence or absence of the visibility property. <code>{hidden : null}<\/code> ensures that no <code>aria-hidden<\/code> attribute is written independent of the presence or absence of the visibility property. The function behaves in the same way for the associations <code>ariaDescribedBy<\/code> and <code>ariaLabelledBy<\/code>. To append additional values to the auto-generated <code>aria-describedby<\/code> and <code>aria-labelledby<\/code> attributes the following format can be used: <code>{describedby : {value: \"id1 id2\", append: true}}<\/code> => <code>aria-describedby=\"ida idb id1 id2\"<\/code> (assuming that \"ida idb\" is the auto-generated part based on the association <code>ariaDescribedBy<\/code>).","!static":false,"!category":"function","!type":"fn(oElement?: sap.ui.core.Element, mProps?: Object) -> sap.ui.core.RenderManager","parameters":{"oElement":"type: sap.ui.core.Element, description: the element whose accessibility state should be rendered","mProps":"type: Object, description: a map of properties that should be added additionally or changed."}},"!constructorDescription":"Creates an instance of the RenderManager.\n\nApplications or controls must not call the <code>RenderManager<\/code> constructor on their own\nbut should use the {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()}\nmethod to create an instance for their exclusive use.","getConfiguration":{"!description":"Returns the configuration object Shortcut for <code>sap.ui.getCore().getConfiguration()<\/code>","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Configuration"},"flush":{"!description":"Renders the content of the rendering buffer into the provided DOM node.\n\nThis function must not be called within control renderers.\n\nUsage: <pre>\n\n  // Create a new instance of the RenderManager\n  var rm = sap.ui.getCore().createRenderManager();\n\n  // Use the writer API to fill the buffers\n  rm.write(...);\n  rm.renderControl(oControl);\n  rm.write(...);\n  ...\n\n  // Finally flush the buffer into the provided DOM node (The current content is removed)\n  rm.flush(oDomNode);\n\n  // If the instance is not needed anymore, destroy it\n  rm.destroy();\n\n<\/pre>","!static":false,"!category":"function","!type":"fn(oTargetDomNode: Element, bDoNotPreserve: Boolean, vInsert: Boolean | Number)","parameters":{"bDoNotPreserve":"type: boolean, description: Determines whether the content is preserved (<code>false<\/code>) or not (<code>true<\/code>)","vInsert":"type: boolean|int, description: Determines whether the buffer of the target DOM node is expanded (<code>true<\/code>) or replaced (<code>false<\/code>), or the new entry is inserted at a specific position (value of type <code>int<\/code>)","oTargetDomNode":"type: Element, description: Node in the DOM where the buffer should be flushed into"}},"voidEnd":{"!description":"Ends an open self-closing tag started with <code>voidStart<\/code>.\n\nThis indicates that there are no more attributes to set to the open tag. For self-closing tags <code>close<\/code> must not be called.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.RenderManager"},"writeAcceleratorKey":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 never has been implemented - DO NOT USE<br>undefined","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.RenderManager"},"writeElementData":{"!description":"Writes the elements data into the HTML. Element Data consists at least of the id of an element","!static":false,"!category":"function","!type":"fn(oElement: sap.ui.core.Element) -> sap.ui.core.RenderManager","parameters":{"oElement":"type: sap.ui.core.Element, description: the element whose identifying information should be written to the buffer"}},"text":{"!description":"Sets the text content with the given text.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.core.RenderManager","parameters":{"sText":"type: string, description: The text to be written"}},"attr":{"!description":"Adds an attribute name-value pair to the last open HTML element.\n\nThis is only valid when called between <code>openStart/voidStart<\/code> and <code>openEnd/voidEnd<\/code>. The attribute name must not be equal to <code>style<\/code> or <code>class<\/code>. Styles and classes must be set via dedicated <code>class<\/code> or <code>style<\/code> methods. To update the DOM correctly, all attribute names have to be used in their canonical form. For HTML elements, {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes attribute names} must all be set in lowercase. For foreign elements, such as SVG, {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute attribute names} can be set in upper camel case (e.g. viewBox).","!static":false,"!category":"function","!type":"fn(sName: String, vValue: *) -> sap.ui.core.RenderManager","parameters":{"sName":"type: string, description: Name of the attribute","vValue":"type: *, description: Value of the attribute"}},"class":{"!description":"Adds a class name to the class collection of the last open HTML element.\n\nThis is only valid when called between <code>openStart/voidStart<\/code> and <code>openEnd/voidEnd<\/code>. Class name must not contain any whitespace.","!static":false,"!category":"function","!type":"fn(sClass: String) -> sap.ui.core.RenderManager","parameters":{"sClass":"type: string, description: Class name to be written"}},"close":{"!description":"Closes an open tag started with <code>openStart<\/code> and ended with <code>openEnd<\/code>.\n\nThis indicates that there are no more children to append to the open tag.","!static":false,"!category":"function","!type":"fn(sTagName: String) -> sap.ui.core.RenderManager","parameters":{"sTagName":"type: string, description: Tag name of the HTML element"}},"render":{"!description":"Renders the given control to the provided DOMNode.\n\nIf the control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended to the provided DOMNode.\n\nThis function must not be called within control renderers.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control, oTargetDomNode: Element)","parameters":{"oControl":"type: sap.ui.core.Control, description: the Control that should be rendered.","oTargetDomNode":"type: Element, description: The node in the DOM where the result of the rendering should be inserted."}},"write":{"!description":"Write the given texts to the buffer","!static":false,"!category":"function","!type":"fn(sText: String | Number) -> sap.ui.core.RenderManager","parameters":{"sText":"type: string|number, description: (can be a number too)"}},"writeControlData":{"!description":"Writes the controls data into the HTML. Control Data consists at least of the id of a control","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> sap.ui.core.RenderManager","parameters":{"oControl":"type: sap.ui.core.Control, description: the control whose identifying information should be written to the buffer"}},"addClass":{"!description":"Adds a class to the class collection if the name is not empty or null. The class collection is flushed if it is written to the buffer using {@link #writeClasses}","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.RenderManager","parameters":{"sName":"type: string, description: name of the class to be added; null values are ignored"}},"writeAttribute":{"!description":"Writes the attribute and its value into the HTML.\n\nFor details about the escaping refer to {@link jQuery.sap.encodeHTML}","!static":false,"!category":"function","!type":"fn(sName: String, vValue: String | Number | Boolean) -> sap.ui.core.RenderManager","parameters":{"sName":"type: string, description: Name of the attribute","vValue":"type: string|number|boolean, description: Value of the attribute"}},"!description":"A class that handles the rendering of controls.\n\nFor the default rendering task of UI5, a shared RenderManager is created and owned by <code>sap.ui.core.Core<\/code>. Controls or other code that want to render controls outside the default rendering task can create a private instance of RenderManager by calling the {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()} method. When such a private instance is no longer needed, it should be {@link #destroy destroyed}.\n\nControl renderers only have access to a subset of the public and protected instance methods of this class. The instance methods {@link #flush}, {@link #render} and {@link #destroy} are not part of that subset and are reserved to the owner of the corresponding RenderManager instance. Renderers will use the provided methods to create their HTML output. The RenderManager will collect the HTML output and inject the final HTML DOM at the desired location.\n\n<h3>Renderers<\/h3> When the {@link #renderControl} method of the RenderManager is invoked, it will retrieve the default renderer for that control. By convention, the default renderer is implemented in its own namespace (static class) which matches the name of the control's class with the additional suffix 'Renderer'. So for a control <code>sap.m.Input<\/code> the default renderer will be searched for under the global name <code>sap.m.Input<i>Renderer<\/i><\/code>.\n\n<h3>In-place DOM patching<\/h3> As of 1.67, <code>RenderManager<\/code> provides a set of new APIs to describe the structure of the DOM that can be used by the control renderers.\n\n<pre>\n\n  myButtonRenderer.render = function(rm, oButton) {\n\n      rm.openStart(\"button\", oButton);\n      rm.attr(\"tabindex\", 1);\n      rm.class(\"myButton\");\n      rm.style(\"width\", oButton.getWidth());\n      rm.openEnd();\n          rm.text(oButton.getText());\n      rm.close(\"button\");\n\n  };\n\n<\/pre>\n\nBy default, when the control is invalidated (e.g. a property is changed, an aggregation is removed, or an association is added), it will be registered for re-rendering. During the (re)rendering, the <code>render<\/code> method of the control renderer is executed via a specified <code>RenderManager<\/code> interface and the control instance.\n\nTraditional string-based rendering creates a new HTML structure of the control in every rendering cycle and removes the existing control DOM structure from the DOM tree.\n\nThe set of new semantic <code>RenderManager<\/code> APIs lets us understand the structure of the DOM, walk along the live DOM tree, and figure out changes as new APIs are called. If there is a change, then <code>RenderManager<\/code> patches only the required parts of the live DOM tree. This allows control developers to remove their DOM-related custom setters.\n\n<b>Note:<\/b> To enable the new in-place rendering technology, the <code>apiVersion<\/code> property of the control renderer must be set to <code>2<\/code>. This property is not inherited by subclass renderers. It has to be set anew by each subclass to assure that the extended contract between framework and renderer is fulfilled (see next paragraph).\n\n<pre>\n\n  var myButtonRenderer = {\n      apiVersion: 2    // enable in-place DOM patching\n  };\n\n  myButtonRenderer.render = function(rm, oButton) {\n\n      rm.openStart(\"button\", oButton);\n      ...\n      ...\n      rm.close(\"button\");\n\n  };\n\n<\/pre>\n\n<h3>Contract for Renderer.apiVersion 2<\/h3> To allow a more efficient in-place DOM patching and to ensure the compatibility of the control, the following prerequisites must be fulfilled for the controls using the new rendering technology:\n\n<ul> <li>Legacy control renderers must be migrated to the new semantic renderer API: {@link sap.ui.core.RenderManager#openStart openStart}, {@link sap.ui.core.RenderManager#voidStart voidStart}, {@link sap.ui.core.RenderManager#style style}, {@link sap.ui.core.RenderManager#class class}, {@link sap.ui.core.RenderManager#attr attr}, {@link sap.ui.core.RenderManager#openEnd openEnd}, {@link sap.ui.core.RenderManager#voidEnd voidEnd}, {@link sap.ui.core.RenderManager#text text}, {@link sap.ui.core.RenderManager#unsafeHtml unsafeHtml}, {@link sap.ui.core.RenderManager#icon icon}, {@link sap.ui.core.RenderManager#accessibilityState accessibilityState}, {@link sap.ui.core.RenderManager#renderControl renderControl}, {@link sap.ui.core.RenderManager#cleanupControlWithoutRendering cleanupControlWithoutRendering} <\/li> <li>During the migration, restrictions that are defined in the API documentation of those methods must be taken into account, e.g. tag and attribute names must be set in their canonical form.<\/li> <li>Fault tolerance of HTML5 markup is not applicable for the new semantic rendering API, e.g. except void tags, all tags must be closed; duplicate attributes within one HTML element must not exist.<\/li> <li>Existing control DOM structure will not be removed from the DOM tree; therefore all custom events, including the ones that are registered with jQuery, must be de-registered correctly at the <code>onBeforeRendering<\/code> and <code>exit<\/code> hooks.<\/li> <li>Classes and attribute names must not be escaped.<\/li> <li>Styles should be validated via types (e.g. <code>sap.ui.core.CSSSize<\/code>). But this might not be sufficient in all cases, e.g. validated URL values can contain harmful content; in this case {@link module:sap/base/security/encodeCSS encodeCSS} can be used.<\/li> <li>To allow a more efficient DOM update, second parameter of the {@link sap.ui.core.RenderManager#openStart openStart} or {@link sap.ui.core.RenderManager#voidStart voidStart} methods must be used to identify elements, e.g. use <code>rm.openStart(\"div\", oControl.getId() + \"-suffix\");<\/code> instead of <code>rm.openStart(\"div\").attr(\"id\", oControl.getId() + \"-suffix\");<\/code><\/li> <li>Controls that listen to the <code>focusin<\/code> event must double check their focus handling. Since DOM nodes are not removed and only reused, the <code>focusin<\/code> event might not be fired during re-rendering.<\/li> <\/ul>","detachPreserveContent":{"!description":"Detaches a {@link sap.ui.core.RenderManager.preserveContent} listener","!static":true,"!category":"function","!type":"fn(fnListener: fn())","parameters":{"fnListener":"type: function, description: listener function"}},"findPreservedContent":{"!description":"Searches \"to-be-preserved\" nodes for the given control id.","!static":true,"!category":"function","!type":"fn(sId: String) -> jQuery","parameters":{"sId":"type: string, description: control id to search content for."}},"getRenderer":{"!description":"Returns the renderer class for a given control instance","!static":true,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Object","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that should be rendered"}},"accessibilityState":{"!description":"Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML based on the element's properties and associations.\n\nThe ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.\n\nThe following properties/values to ARIA attribute mappings are done (if the element does have such properties): <ul> <li><code>editable===false<\/code> => <code>aria-readonly=\"true\"<\/code><\/li> <li><code>enabled===false<\/code> => <code>aria-disabled=\"true\"<\/code><\/li> <li><code>visible===false<\/code> => <code>aria-hidden=\"true\"<\/code><\/li> <li><code>required===true<\/code> => <code>aria-required=\"true\"<\/code><\/li> <li><code>selected===true<\/code> => <code>aria-selected=\"true\"<\/code><\/li> <li><code>checked===true<\/code> => <code>aria-checked=\"true\"<\/code><\/li> <\/ul>\n\nIn case of the required attribute also the Label controls which referencing the given element in their 'for' relation are taken into account to compute the <code>aria-required<\/code> attribute.\n\nAdditionally, the association <code>ariaDescribedBy<\/code> and <code>ariaLabelledBy<\/code> are used to write the ID lists of the ARIA attributes <code>aria-describedby<\/code> and <code>aria-labelledby<\/code>.\n\nLabel controls that reference the given element in their 'for' relation are automatically added to the <code>aria-labelledby<\/code> attributes.\n\nNote: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers have to check whether it fulfills their requirements. In case of problems (for example the RadioButton has a <code>selected<\/code> property but must provide an <code>aria-checked<\/code> attribute) the auto-generated result of this function can be influenced via the parameter <code>mProps<\/code> as described below.\n\nThe parameter <code>mProps<\/code> can be used to either provide additional attributes which should be added and/or to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys (Exception: Attribute 'role' does not get the prefix 'aria-').\n\nExamples: <code>{hidden : true}<\/code> results in <code>aria-hidden=\"true\"<\/code> independent of the presence or absence of the visibility property. <code>{hidden : null}<\/code> ensures that no <code>aria-hidden<\/code> attribute is written independent of the presence or absence of the visibility property. The function behaves in the same way for the associations <code>ariaDescribedBy<\/code> and <code>ariaLabelledBy<\/code>. To append additional values to the auto-generated <code>aria-describedby<\/code> and <code>aria-labelledby<\/code> attributes the following format can be used: <code>{describedby : {value: \"id1 id2\", append: true}}<\/code> => <code>aria-describedby=\"ida idb id1 id2\"<\/code> (assuming that \"ida idb\" is the auto-generated part based on the association <code>ariaDescribedBy<\/code>).","!static":false,"!category":"function","!type":"fn(oElement?: sap.ui.core.Element, mProps?: Object) -> sap.ui.core.RenderManager","parameters":{"oElement":"type: sap.ui.core.Element, description: the element whose accessibility state should be rendered","mProps":"type: Object, description: a map of properties that should be added additionally or changed."}},"voidStart":{"!description":"Starts a self-closing tag, such as <code>img<\/code> or <code>input<\/code>.\n\nThis must be followed by <code>voidEnd<\/code>. For self-closing tags, the <code>close<\/code> method must not be called. To allow a more efficient DOM update, void tag names have to be set in lowercase. This API is specific for void elements and must not be used for foreign elements. For more information, see {@link https://www.w3.org/TR/html5/syntax.html#void-elements}.","!static":false,"!category":"function","!type":"fn(sTagName: String, vControlOrId?: sap.ui.core.Element | sap.ui.core.ID) -> sap.ui.core.RenderManager","parameters":{"vControlOrId":"type: sap.ui.core.Element|sap.ui.core.ID, description: Control instance or ID to identify the element","sTagName":"type: string, description: Tag name of the HTML element"}},"destroy":{"!description":"Cleans up the resources associated with this instance.\n\nAfter the instance has been destroyed, it must not be used anymore. Applications should call this function if they don't need the instance any longer.","!static":false,"!category":"function","!type":"fn()"},"createInvisiblePlaceholderId":{"!description":"Creates the ID to be used for the invisible Placeholder DOM element. This method can be used to get direct access to the placeholder DOM element. Also statically available as RenderManager.createInvisiblePlaceholderId()","!static":true,"!category":"function","!type":"fn(oElement: sap.ui.core.Element) -> String","parameters":{"oElement":"type: sap.ui.core.Element, description: The Element instance for which to create the placeholder ID"}},"unsafeHtml":{"!description":"Sets the given HTML markup without any encoding or sanitizing.\n\nThis must not be used for plain texts; use the <code>text<\/code> method instead.","!static":false,"!category":"function","!type":"fn(sHtml: String) -> sap.ui.core.RenderManager","parameters":{"sHtml":"type: string, description: Well-formed, valid HTML markup"}},"!module":"sap/ui/core/RenderManager","writeEscaped":{"!description":"Escape text for HTML and write it to the buffer.\n\nFor details about the escaping refer to {@link jQuery.sap.encodeHTML}","!static":false,"!category":"function","!type":"fn(sText: Object, bLineBreaks: Boolean) -> sap.ui.core.RenderManager","parameters":{"sText":"type: any, description: the text to escape","bLineBreaks":"type: boolean, description: Whether to convert line breaks into <br> tags"}},"!helpDescription":"A class that handles the rendering of controls.\n\nFor the default rendering task of UI5, a shared RenderManager is created and owned by <code>sap.ui.core.Core<\/code>. Controls or other code that want to render controls outside the default rendering task can create a private instance of RenderManager by calling the {@link sap.ui.core.Core#createRenderManager sap.ui.getCore().createRenderManager()} method. When such a private instance is no longer needed, it should be {@link #destroy destroyed}.\n\nControl renderers only have access to a subset of the public and protected instance methods of this class. The instance methods {@link #flush}, {@link #render} and {@link #destroy} are not part of that subset and are reserved to the owner of the corresponding RenderManager instance. Renderers will use the provided methods to create their HTML output. The RenderManager will collect the HTML output and inject the final HTML DOM at the desired location.\n\n<h3>Renderers<\/h3> When the {@link #renderControl} method of the RenderManager is invoked, it will retrieve the default renderer for that control. By convention, the default renderer is implemented in its own namespace (static class) which matches the name of the control's class with the additional suffix 'Renderer'. So for a control <code>sap.m.Input<\/code> the default renderer will be searched for under the global name <code>sap.m.Input<i>Renderer<\/i><\/code>.\n\n<h3>In-place DOM patching<\/h3> As of 1.67, <code>RenderManager<\/code> provides a set of new APIs to describe the structure of the DOM that can be used by the control renderers.\n\n<pre>\n\n  myButtonRenderer.render = function(rm, oButton) {\n\n      rm.openStart(\"button\", oButton);\n      rm.attr(\"tabindex\", 1);\n      rm.class(\"myButton\");\n      rm.style(\"width\", oButton.getWidth());\n      rm.openEnd();\n          rm.text(oButton.getText());\n      rm.close(\"button\");\n\n  };\n\n<\/pre>\n\nBy default, when the control is invalidated (e.g. a property is changed, an aggregation is removed, or an association is added), it will be registered for re-rendering. During the (re)rendering, the <code>render<\/code> method of the control renderer is executed via a specified <code>RenderManager<\/code> interface and the control instance.\n\nTraditional string-based rendering creates a new HTML structure of the control in every rendering cycle and removes the existing control DOM structure from the DOM tree.\n\nThe set of new semantic <code>RenderManager<\/code> APIs lets us understand the structure of the DOM, walk along the live DOM tree, and figure out changes as new APIs are called. If there is a change, then <code>RenderManager<\/code> patches only the required parts of the live DOM tree. This allows control developers to remove their DOM-related custom setters.\n\n<b>Note:<\/b> To enable the new in-place rendering technology, the <code>apiVersion<\/code> property of the control renderer must be set to <code>2<\/code>. This property is not inherited by subclass renderers. It has to be set anew by each subclass to assure that the extended contract between framework and renderer is fulfilled (see next paragraph).\n\n<pre>\n\n  var myButtonRenderer = {\n      apiVersion: 2    // enable in-place DOM patching\n  };\n\n  myButtonRenderer.render = function(rm, oButton) {\n\n      rm.openStart(\"button\", oButton);\n      ...\n      ...\n      rm.close(\"button\");\n\n  };\n\n<\/pre>\n\n<h3>Contract for Renderer.apiVersion 2<\/h3> To allow a more efficient in-place DOM patching and to ensure the compatibility of the control, the following prerequisites must be fulfilled for the controls using the new rendering technology:\n\n<ul> <li>Legacy control renderers must be migrated to the new semantic renderer API: {@link sap.ui.core.RenderManager#openStart openStart}, {@link sap.ui.core.RenderManager#voidStart voidStart}, {@link sap.ui.core.RenderManager#style style}, {@link sap.ui.core.RenderManager#class class}, {@link sap.ui.core.RenderManager#attr attr}, {@link sap.ui.core.RenderManager#openEnd openEnd}, {@link sap.ui.core.RenderManager#voidEnd voidEnd}, {@link sap.ui.core.RenderManager#text text}, {@link sap.ui.core.RenderManager#unsafeHtml unsafeHtml}, {@link sap.ui.core.RenderManager#icon icon}, {@link sap.ui.core.RenderManager#accessibilityState accessibilityState}, {@link sap.ui.core.RenderManager#renderControl renderControl}, {@link sap.ui.core.RenderManager#cleanupControlWithoutRendering cleanupControlWithoutRendering} <\/li> <li>During the migration, restrictions that are defined in the API documentation of those methods must be taken into account, e.g. tag and attribute names must be set in their canonical form.<\/li> <li>Fault tolerance of HTML5 markup is not applicable for the new semantic rendering API, e.g. except void tags, all tags must be closed; duplicate attributes within one HTML element must not exist.<\/li> <li>Existing control DOM structure will not be removed from the DOM tree; therefore all custom events, including the ones that are registered with jQuery, must be de-registered correctly at the <code>onBeforeRendering<\/code> and <code>exit<\/code> hooks.<\/li> <li>Classes and attribute names must not be escaped.<\/li> <li>Styles should be validated via types (e.g. <code>sap.ui.core.CSSSize<\/code>). But this might not be sufficient in all cases, e.g. validated URL values can contain harmful content; in this case {@link module:sap/base/security/encodeCSS encodeCSS} can be used.<\/li> <li>To allow a more efficient DOM update, second parameter of the {@link sap.ui.core.RenderManager#openStart openStart} or {@link sap.ui.core.RenderManager#voidStart voidStart} methods must be used to identify elements, e.g. use <code>rm.openStart(\"div\", oControl.getId() + \"-suffix\");<\/code> instead of <code>rm.openStart(\"div\").attr(\"id\", oControl.getId() + \"-suffix\");<\/code><\/li> <li>Controls that listen to the <code>focusin<\/code> event must double check their focus handling. Since DOM nodes are not removed and only reused, the <code>focusin<\/code> event might not be fired during re-rendering.<\/li> <\/ul>","openStart":{"!description":"Opens the start tag of an HTML element.\n\nThis must be followed by <code>openEnd<\/code> and concluded with <code>close<\/code>. To allow a more efficient DOM update, all tag names have to be used in their canonical form. For HTML elements, {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element tag names} must all be set in lowercase. For foreign elements, such as SVG, {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Element tag names} can be set in upper camel case (e.g. linearGradient).","!static":false,"!category":"function","!type":"fn(sTagName: String, vControlOrId?: sap.ui.core.Element | sap.ui.core.ID) -> sap.ui.core.RenderManager","parameters":{"vControlOrId":"type: sap.ui.core.Element|sap.ui.core.ID, description: Control instance or ID to identify the element","sTagName":"type: string, description: Tag name of the HTML element"}},"style":{"!description":"Adds a style name-value pair to the style collection of the last open HTML element.\n\nThis is only valid when called between <code>openStart/voidStart<\/code> and <code>openEnd/voidEnd<\/code>.","!static":false,"!category":"function","!type":"fn(sName: String, sValue: String) -> sap.ui.core.RenderManager","parameters":{"sName":"type: string, description: Name of the style property","sValue":"type: string, description: Value of the style property"}},"writeClasses":{"!description":"Writes and flushes the class collection (all CSS classes added by \"addClass()\" since the last flush). Also writes the custom style classes added by the application with \"addStyleClass(...)\". Custom classes are added by default from the currently rendered control. If an oElement is given, this Element's custom style classes are added instead. If oElement === false, no custom style classes are added.","!static":false,"!category":"function","!type":"fn(oElement?: sap.ui.core.Element | Boolean) -> sap.ui.core.RenderManager","parameters":{"oElement":"type: sap.ui.core.Element|boolean, description: an Element from which to add custom style classes (instead of adding from the control itself)"}},"addStyle":{"!description":"Adds a style property to the style collection if the value is not empty or null The style collection is flushed if it is written to the buffer using {@link #writeStyle}","!static":false,"!category":"function","!type":"fn(sName: String, vValue: String | Number | Number) -> sap.ui.core.RenderManager","parameters":{"sName":"type: string, description: Name of the CSS property to write","vValue":"type: string|float|int, description: Value to write"}},"getHTML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 0.15.0 Use <code>flush()<\/code> instead render content outside the rendering phase.<br>Renders the given {@link sap.ui.core.Control} and finally returns the content of the rendering buffer. Ensures the buffer is restored to the state before calling this method.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> String","parameters":{"oControl":"type: sap.ui.core.Control, description: the Control whose HTML should be returned."}},"renderControl":{"!description":"Turns the given control into its HTML representation and appends it to the rendering buffer.\n\nIf the given control is undefined or null, then nothing is rendered.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> sap.ui.core.RenderManager","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that should be rendered"}},"writeAttributeEscaped":{"!description":"Writes the attribute and a value into the HTML, the value will be encoded.\n\nThe value is properly encoded to avoid XSS attacks.","!static":false,"!category":"function","!type":"fn(sName: String, vValue: Object) -> sap.ui.core.RenderManager","parameters":{"sName":"type: string, description: Name of the attribute","vValue":"type: any, description: Value of the attribute"}}},"sap.ui.model.odata.type.DateTimeOffset_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.DateTimeOffset with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.DateTimeOffset"},"jQuery.sap.log.Level":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/Log.Level} instead<br>Enumeration of the configurable log levels that a Logger should persist to the log.\n\nOnly if the current LogLevel is higher than the level {@link jQuery.sap.log.Level} of the currently added log entry, then this very entry is permanently added to the log. Otherwise it is ignored.","TRACE":{"!description":"Trace level. Use this for tracing the program flow.","!category":"enum","!type":"Number"},"ALL":{"!description":"Trace level to log everything.","!category":"enum","!type":"Number"},"!module":"jquery.sap.global","!category":"static class","ERROR":{"!description":"Error level. Use this for logging of erroneous but still recoverable situations","!category":"enum","!type":"Number"},"INFO":{"!description":"Info level. Use this for logging information of purely informative nature","!category":"enum","!type":"Number"},"NONE":{"!description":"Do not log anything","!category":"enum","!type":"Number"},"DEBUG":{"!description":"Debug level. Use this for logging information necessary for debugging","!category":"enum","!type":"Number"},"FATAL":{"!description":"Fatal level. Use this for logging unrecoverable situations","!category":"enum","!type":"Number"},"WARNING":{"!description":"Warning level. Use this for logging unwanted but foreseen situations","!category":"enum","!type":"Number"}},"sap.ui.core.util.serializer.HTMLViewSerializer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.HTMLViewSerializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oView: sap.ui.core.mvc.HTMLView, oWindow?: Object, fnGetControlId: fn(), fnGetEventHandlerName: fn())","prototype":"sap.ui.core.util.serializer.HTMLViewSerializer"},"sap.ui.model":{"ValidateException":"sap.ui.model.ValidateException_obj","CompositeBinding":"sap.ui.model.CompositeBinding_obj","type":"sap.ui.model.type","SINGLE_SELECTION":{"!description":"SelectionMode: Single Selection","!category":"enum","!type":"String"},"ChangeReason":"sap.ui.model.ChangeReason","analytics":"sap.ui.model.analytics","TreeBindingUtils":"sap.ui.model.TreeBindingUtils","TreeBindingAdapter":"sap.ui.model.TreeBindingAdapter_obj","xml":"sap.ui.model.xml","Sorter":"sap.ui.model.Sorter_obj","SelectionModel":"sap.ui.model.SelectionModel_obj","Binding":"sap.ui.model.Binding_obj","!description":"The SAPUI5 Data Binding API.\n\nThe default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model are one way, two way and one time. The default binding mode can be changed by the application for each model instance. A model implementation should specify its supported binding modes and set the default binding mode accordingly (e.g. if the model supports only one way binding the default binding mode should also be set to one way).\n\nThe default size limit for models is 100. The size limit determines the number of entries used for the list bindings.","resource":"sap.ui.model.resource","FormatException":"sap.ui.model.FormatException_obj","FilterOperator":"sap.ui.model.FilterOperator","MetaModel":"sap.ui.model.MetaModel_obj","FilterType":"sap.ui.model.FilterType","!module":"sap/ui/model/Model","!helpDescription":"The SAPUI5 Data Binding API.\n\nThe default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model are one way, two way and one time. The default binding mode can be changed by the application for each model instance. A model implementation should specify its supported binding modes and set the default binding mode accordingly (e.g. if the model supports only one way binding the default binding mode should also be set to one way).\n\nThe default size limit for models is 100. The size limit determines the number of entries used for the list bindings.","ClientTreeBinding":"sap.ui.model.ClientTreeBinding_obj","TreeBinding":"sap.ui.model.TreeBinding_obj","TreeAutoExpandMode":"sap.ui.model.TreeAutoExpandMode","StaticBinding":"sap.ui.model.StaticBinding_obj","ClientListBinding":"sap.ui.model.ClientListBinding_obj","DataState":"sap.ui.model.DataState_obj","!category":"namespace","TreeBindingCompatibilityAdapter":"sap.ui.model.TreeBindingCompatibilityAdapter_obj","BindingMode":"sap.ui.model.BindingMode","ClientTreeBindingAdapter":"sap.ui.model.ClientTreeBindingAdapter_obj","PropertyBinding":"sap.ui.model.PropertyBinding_obj","SimpleType":"sap.ui.model.SimpleType_obj","odata":"sap.ui.model.odata","ClientPropertyBinding":"sap.ui.model.ClientPropertyBinding_obj","json":"sap.ui.model.json","ContextBinding":"sap.ui.model.ContextBinding_obj","MULTI_SELECTION":{"!description":"SelectionMode: Multi Selection","!category":"enum","!type":"String"},"Context":"sap.ui.model.Context_obj","ListBinding":"sap.ui.model.ListBinding_obj","message":"sap.ui.model.message","CompositeDataState":"sap.ui.model.CompositeDataState_obj","ClientModel":"sap.ui.model.ClientModel_obj","Type":"sap.ui.model.Type_obj","Filter":"sap.ui.model.Filter_obj","Model":"sap.ui.model.Model_obj","ParseException":"sap.ui.model.ParseException_obj","ClientContextBinding":"sap.ui.model.ClientContextBinding_obj","CompositeType":"sap.ui.model.CompositeType_obj","base":"sap.ui.model.base"},"sap.ui.model.odata.type.Decimal_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Decimal with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Decimal"},"module:sap/ui/dom/jquery/selectText":{"!description":"This module provides the {@link jQuery#selectText} API.","!module":"sap/ui/dom/jquery/selectText","!helpDescription":"This module provides the {@link jQuery#selectText} API.","module:sap/ui/dom/jquery/selectText":"module:sap/ui/dom/jquery/selectText","!category":"namespace"},"sap.ui.model.TreeBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext?: Object, aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: String, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter])","prototype":"sap.ui.model.TreeBinding"},"sap.ui.model.json.JSONTreeBinding_obj":{"!type":"fn(oModel: sap.ui.model.json.JSONModel, sPath: String, oContext?: Object, aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object)","prototype":"sap.ui.model.json.JSONTreeBinding"},"jQuery.sap.history.NavType":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.19.1 Please use {@link sap.ui.core.routing.HistoryDirection} instead.<br>undefined","!module":"jquery.sap.history","Bookmark":{"!description":"This indicates that the new hash is restored from the bookmark.","!category":"enum","!type":"String"},"Unknown":{"!description":"This indicates that the new hash is achieved by some unknown direction. This happens when the user navigates out of the application and then click on the forward button in the browser to navigate back to the application.","!category":"enum","!type":"String"},"Back":{"!description":"This indicates that the new hash is achieved by pressing the back button.","!category":"enum","!type":"String"},"Forward":{"!description":"This indicates that the new hash is achieved by pressing the forward button.","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.core.LayoutData":{"!description":"A layout data base type.","extend":{"!description":"Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.LayoutData.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new LayoutData.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThis class does not have its own settings, but all settings applicable to the base type\n{@link sap.ui.core.Element#constructor sap.ui.core.Element} can be used.","!module":"sap/ui/core/LayoutData","!helpDescription":"A layout data base type.","!proto":"sap.ui.core.Element","!category":"class"},"sap.ui.model.ClientContextBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.ClientContextBinding"},"sap.ui.base.ManagedObject_obj":{"extend":{"!description":"Defines a new subclass of ManagedObject with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> can contain the same information that {@link sap.ui.base.Object.extend} already accepts, plus the following new properties in the 'metadata' object literal:\n\n<ul> <li><code>library : <i>string<\/i><\/code><\/li> <li><code>properties : <i>object<\/i><\/code><\/li> <li><code>defaultProperty : <i>string<\/i><\/code><\/li> <li><code>aggregations : <i>object<\/i><\/code><\/li> <li><code>defaultAggregation : <i>string<\/i><\/code><\/li> <li><code>associations : <i>object<\/i><\/code><\/li> <li><code>events : <i>object<\/i><\/code><\/li> <li><code>specialSettings : <i>object<\/i><\/code>// this one is still experimental and not for public usage!<\/li> <\/ul>\n\nEach of these properties is explained in more detail lateron.\n\nExample: <pre>\nManagedObect.extend('sap.mylib.MyClass', {\n  metadata : {\n    library: 'sap.mylib',\n    properties : {\n      value: 'string',\n      width: 'sap.ui.core.CSSSize',\n      height: { type: 'sap.ui.core.CSSSize', defaultValue: '100%'}\n      description: { type: 'string', defaultValue: '', selector: '#{id}-desc'}\n    },\n    defaultProperty : 'value',\n    aggregations : {\n      header : { type: 'sap.mylib.FancyHeader', multiple : false }\n      items : 'sap.ui.core.Control',\n      buttons: { type: 'sap.mylib.Button', multiple : true, selector: '#{id} > .sapMLButtonsSection'}\n    },\n    defaultAggregation : 'items',\n    associations : {\n      initiallyFocused : { type: 'sap.ui.core.Control' }\n    },\n    events: {\n      beforeOpen : {\n        parameters : {\n          opener : { type: 'sap.ui.core.Control' }\n        }\n      }\n    },\n  },\n\n  init: function() {\n  }\n\n}); // end of 'extend' call\n<\/pre>\n\nDetailed explanation of properties<br>\n\n<b>'library'<\/b> : <i>string<\/i><br> Name of the library that the new subclass should belong to. If the subclass is a control or element, it will automatically register with that library so that authoring tools can discover it. By convention, the name of the subclass should have the library name as a prefix, e.g. 'sap.ui.commons.Panel' belongs to library 'sap.ui.commons'.\n\n<b>'properties'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new managed property in the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new property or it can be an object literal with the following properties <ul> <li><code>type: <i>string<\/i><\/code> type of the new property. Must either be one of the built-in types 'string', 'boolean', 'int', 'float', 'object', 'function' or 'any', or a type created and registered with {@link sap.ui.base.DataType.createType} or an array type based on one of the previous types (e.g. 'int[]' or 'string[]', but not just 'array').<\/li> <li><code>visibility: <i>string<\/i><\/code> either 'hidden' or 'public', defaults to 'public'. Properties that belong to the API of a class must be 'public' whereas 'hidden' properties can only be used internally. Only public properties are accepted by the constructor or by <code>applySettings<\/code> or in declarative representations like an <code>XMLView<\/code>. Equally, only public properties are cloned.<\/li> <li><code>byValue: <i>boolean<\/i><\/code> (either can be omitted or set to the boolean value <code>true<\/code>) If set to <code>true<\/code>, the property value will be {@link module:sap/base/util/deepClone deep cloned} on write and read operations to ensure that the internal value can't be modified by the outside. The property <code>byValue<\/code> is currently limited to a <code>boolean<\/code> value. Other types are reserved for future use. Class definitions must only use boolean values for the flag (or omit it), but readers of ManagedObject metadata should handle any truthy value as <code>true<\/code> to be future safe. Note that using <code>byValue:true<\/code> has a performance impact on property access and therefore should be used carefully. It also doesn't make sense to set this option for properties with a primitive type (they have value semantic anyhow) or for properties with arrays of primitive types (they have been cloned already in the past with a cheaper implementation). Future versions of UI5 might encourage this as a limitation during class definition. <li><code>group:<i>string<\/i><\/code> a semantic grouping of the properties, intended to be used in design time tools. Allowed values are (case sensitive): Accessibility, Appearance, Behavior, Data, Designtime, Dimension, Identification, Misc<\/li> <li><code>defaultValue: <i>any<\/i><\/code> the default value for the property or null if there is no defaultValue.<\/li> <li><code>bindable: <i>boolean|string<\/i><\/code> (either can be omitted or set to the boolean value <code>true<\/code> or the magic string 'bindable') If set to <code>true<\/code> or 'bindable', additional named methods <code>bind<i>Name<\/i><\/code> and <code>unbind<i>Name<\/i><\/code> are generated as convenience. Despite its name, setting this flag is not mandatory to make the managed property bindable. The generic methods {@link #bindProperty} and {@link #unbindProperty} can always be used. <\/li> <li><code>selector: <i>string<\/i><\/code> Optional; can be set to a valid CSS selector (as accepted by the {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector Element.prototype.querySelector} method). When set, it locates the DOM element that represents this property's value. It should only be set for properties that have a visual text representation in the DOM.\n\nThe purpose of the selector is to allow other framework parts or design time tooling to identify the DOM parts of a control or element that represent a specific property without knowing the control or element implementation in detail.\n\nAs an extension to the standard CSS selector syntax, the selector string can contain the placeholder <code>{id}<\/code> (multiple times). Before evaluating the selector in the context of an element or control, all occurrences of the placeholder have to be replaced by the (potentially escaped) ID of that element or control. In fact, any selector should start with <code>#{id}<\/code> to ensure that the query result is limited to the desired element or control.\n\n<b>Note<\/b>: there is a convenience method {@link sap.ui.core.Element#getDomRefForSetting} that evaluates the selector in the context of a concrete element or control instance. It also handles the placeholder <code>{id}<\/code>. Only selected framework features may use that private method, it is not yet a public API and might be changed or removed in future versions of UI5. However, instead of maintaining the <code>selector<\/code> in the metadata, element and control classes can overwrite <code>getDomRefForSetting<\/code> and determine the DOM element dynamically.<\/li> <\/ul> Property names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the aggregation.\n\nFor each public property 'foo', the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>getFoo() - returns the current value of property 'foo'. Internally calls {@link #getProperty}<\/li> <li>setFoo(v) - sets 'v' as the new value of property 'foo'. Internally calls {@link #setProperty}<\/li> <li>bindFoo(c) - (only if property was defined to be 'bindable'): convenience function that wraps {@link #bindProperty}<\/li> <li>unbindFoo() - (only if property was defined to be 'bindable'): convenience function that wraps {@link #unbindProperty}<\/li> <\/ul> For hidden properties, no methods are generated.\n\n<b>'defaultProperty'<\/b> : <i>string<\/i><br> When specified, the default property must match the name of one of the properties defined for the new subclass (either own or inherited). The named property can be used to identify the main property to be used for bound data. E.g. the value property of a field control.\n\n<b>'aggregations'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new aggregation in the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new aggregation or it can be an object literal with the following properties <ul> <li><code>type: <i>string<\/i><\/code> type of the new aggregation. must be the full global name of a ManagedObject subclass or UI5 interface (in dot notation, e.g. 'sap.m.Button')<\/li> <li><code>[multiple]: <i>boolean<\/i><\/code> whether the aggregation is a 0..1 (false) or a 0..n aggregation (true), defaults to true <\/li> <li><code>[singularName]: <i>string<\/i><\/code>. Singular name for 0..n aggregations. For 0..n aggregations the name by convention should be the plural name. Methods affecting multiple objects in an aggregation will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine a singular name on its own. if that name is wrong, a singluarName can be specified with this property. <\/li> <li><code>[visibility]: <i>string<\/i><\/code> either 'hidden' or 'public', defaults to 'public'. Aggregations that belong to the API of a class must be 'public' whereas 'hidden' aggregations typically are used for the implementation of composite classes (e.g. composite controls). Only public aggregations are accepted by the constructor or by <code>applySettings<\/code> or in declarative representations like an <code>XMLView<\/code>. Equally, only public aggregations are cloned.<\/li> <li><code>bindable: <i>boolean|string<\/i><\/code> (either can be omitted or set to the boolean value <code>true<\/code> or the magic string 'bindable') If set to <code>true<\/code> or 'bindable', additional named methods <code>bind<i>Name<\/i><\/code> and <code>unbind<i>Name<\/i><\/code> are generated as convenience. Despite its name, setting this flag is not mandatory to make the managed aggregation bindable. The generic methods {@link #bindAggregation} and {@link #unbindAggregation} can always be used. <\/li> <li><code>forwarding: <i>object<\/i><\/code> If set, this defines a forwarding of objects added to this aggregation into an aggregation of another ManagedObject - typically to an inner control within a composite control. This means that all adding, removal, or other operations happening on the source aggregation are actually called on the target instance. All elements added to the source aggregation will be located at the target aggregation (this means the target instance is their parent). Both, source and target element will return the added elements when asked for the content of the respective aggregation. If present, the named (non-generic) aggregation methods will be called for the target aggregation. Aggregations can only be forwarded to non-hidden aggregations of the same or higher multiplicity (i.e. an aggregation with multiplicity \"0..n\" cannot be forwarded to an aggregation with multiplicity \"0..1\"). The target aggregation must also be \"compatible\" to the source aggregation in the sense that any items given to the source aggregation must also be valid in the target aggregation (otherwise the target element will throw a validation error). If the forwarded elements use data binding, the target element must be properly aggregated by the source element to make sure all models are available there as well. The aggregation target must remain the same instance across the entire lifetime of the source control. Aggregation forwarding will behave unexpectedly when the content in the target aggregation is modified by other actors (e.g. by the target element or by another forwarding from a different source aggregation). Hence, this is not allowed. The forwarding configuration object defines the target of the forwarding. The available settings are: <ul> <li><code>idSuffix: <i>string<\/i><\/code>A string which is appended to the ID of <i>this<\/i> ManagedObject to construct the ID of the target ManagedObject. This is one of the two options to specify the target. This option requires the target instance to be created in the init() method of this ManagedObject and to be always available.<\/li> <li><code>getter: <i>string<\/i><\/code>The name of the function on instances of this ManagedObject which returns the target instance. This second option to specify the target can be used for lazy instantiation of the target. Note that either idSuffix or getter must be given. Also note that the target instance returned by the getter must remain the same over the entire lifetime of this ManagedObject and the implementation assumes that all instances return the same type of object (at least the target aggregation must always be defined in the same class).<\/li> <li><code>aggregation: <i>string<\/i><\/code>The name of the aggregation on the target into which the objects shall be forwarded. The multiplicity of the target aggregation must be the same as the one of the source aggregation for which forwarding is defined.<\/li> <li><code>[forwardBinding]: <i>boolean<\/i><\/code>Whether any binding should happen on the forwarding target or not. Default if omitted is <code>false<\/code>, which means any bindings happen on the outer ManagedObject. When the binding is forwarded, all binding methods like updateAggregation, getBindingInfo, refreshAggregation etc. are called on the target element of the forwarding instead of being called on this element. The basic aggregation mutator methods (add/remove etc.) are only called on the forwarding target element. Without forwardBinding, they are called on this element, but forwarded to the forwarding target, where they actually modify the aggregation. <\/li> <\/ul> <\/li> <li><code>selector: <i>string<\/i><\/code> Optional; can be set to a valid CSS selector (as accepted by the {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector Element.prototype.querySelector} method). When set, it locates the DOM element that surrounds the aggregation's content. It should only be set for aggregations that have a visual representation in the DOM. A DOM element surrounding the aggregation's rendered content should be available in the DOM, even if the aggregation is empty or not rendered for some reason. In cases where this is not possible or not intended, <code>getDomRefForSetting<\/code> can be overridden, see below.\n\nThe purpose of the selector is to allow other framework parts like drag and drop or design time tooling to identify those DOM parts of a control or element that represent a specific aggregation without knowing the control or element implementation in detail.\n\nAs an extension to the standard CSS selector syntax, the selector string can contain the placeholder <code>{id}<\/code> (multiple times). Before evaluating the selector in the context of an element or control, all occurrences of the placeholder have to be replaced by the (potentially escaped) ID of that element or control. In fact, any selector should start with <code>#{id}<\/code> to ensure that the query result is limited to the desired element or control.\n\n<b>Note<\/b>: there is a convenience method {@link sap.ui.core.Element#getDomRefForSetting} that evaluates the selector in the context of a concrete element or control instance. It also handles the placeholder <code>{id}<\/code>. Only selected framework features may use that private method, it is not yet a public API and might be changed or removed in future versions of UI5. However, instead of maintaining the <code>selector<\/code> in the metadata, element and control classes can overwrite <code>getDomRefForSetting<\/code> to calculate or add the appropriate DOM Element dynamically.<\/li> <\/li> <\/ul> Aggregation names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. The name for a hidden aggregations might start with an underscore. If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the aggregation.\n\nFor each public aggregation 'item' of cardinality 0..1, the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>getItem() - returns the current value of aggregation 'item'. Internally calls {@link #getAggregation} with a default value of <code>undefined<\/code><\/li> <li>setItem(o) - sets 'o' as the new aggregated object in aggregation 'item'. Internally calls {@link #setAggregation}<\/li> <li>destroyItem(o) - destroy a currently aggregated object in aggregation 'item' and clears the aggregation. Internally calls {@link #destroyAggregation}<\/li> <li>bindItem(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}<\/li> <li>unbindItem() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}<\/li> <\/ul> For a public aggregation 'items' of cardinality 0..n, the following methods will be created: <ul> <li>getItems() - returns an array with the objects contained in aggregation 'items'. Internally calls {@link #getAggregation} with a default value of <code>[]<\/code><\/li> <li>addItem(o) - adds an object as last element in the aggregation 'items'. Internally calls {@link #addAggregation}<\/li> <li>insertItem(o,p) - inserts an object into the aggregation 'items'. Internally calls {@link #insertAggregation}<\/li> <li>indexOfItem(o) - returns the position of the given object within the aggregation 'items'. Internally calls {@link #indexOfAggregation}<\/li> <li>removeItem(v) - removes an object from the aggregation 'items'. Internally calls {@link #removeAggregation}<\/li> <li>removeItems() - removes all objects from the aggregation 'items'. Internally calls {@link #removeAllAggregation}<\/li> <li>destroyItems() - destroy all currently aggregated objects in aggregation 'items' and clears the aggregation. Internally calls {@link #destroyAggregation}<\/li> <li>bindItems(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}<\/li> <li>unbindItems() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}<\/li> <\/ul> For hidden aggregations, no methods are generated.\n\n<b>'defaultAggregation'<\/b> : <i>string<\/i><br> When specified, the default aggregation must match the name of one of the aggregations defined for the new subclass (either own or inherited). The named aggregation will be used in contexts where no aggregation is specified. E,g. when an object in an XMLView embeds other objects without naming an aggregation, as in the following example: <pre>\n &lt;!-- assuming the defaultAggregation for Dialog is 'content' -->\n &lt;Dialog>\n   &lt;Text/>\n   &lt;Button/>\n &lt;/Dialog>\n<\/pre>\n\n<b>'associations'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new association of the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new association or it can be an object literal with the following properties <ul> <li><code>type: <i>string<\/i><\/code> type of the new association<\/li> <li><code>multiple: <i>boolean<\/i><\/code> whether the association is a 0..1 (false) or a 0..n association (true), defaults to false(1) for associations<\/li> <li><code>[singularName]: <i>string<\/i><\/code>. Singular name for 0..n associations. For 0..n associations the name by convention should be the plural name. Methods affecting multiple objects in an association will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine a singular name on its own. if that name is wrong, a singluarName can be specified with this property.<\/li> <li><code>visibility: <i>string<\/i><\/code> either 'hidden' or 'public', defaults to 'public'. Associations that belong to the API of a class must be 'public' whereas 'hidden' associations can only be used internally. Only public associations are accepted by the constructor or by <code>applySettings<\/code> or in declarative representations like an <code>XMLView<\/code>. Equally, only public associations are cloned.<\/li> <\/ul> Association names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$]. If an association in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the association.\n\nFor each association 'ref' of cardinality 0..1, the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>getRef() - returns the current value of association 'item'. Internally calls {@link #getAssociation} with a default value of <code>undefined<\/code><\/li> <li>setRef(o) - sets 'o' as the new associated object in association 'item'. Internally calls {@link #setAssociation}<\/li> <\/ul> For a public association 'refs' of cardinality 0..n, the following methods will be created: <ul> <li>getRefs() - returns an array with the objects contained in association 'items'. Internally calls {@link #getAssociation} with a default value of <code>[]<\/code><\/li> <li>addRef(o) - adds an object as last element in the association 'items'. Internally calls {@link #addAssociation}<\/li> <li>removeRef(v) - removes an object from the association 'items'. Internally calls {@link #removeAssociation}<\/li> <li>removeAllRefs() - removes all objects from the association 'items'. Internally calls {@link #removeAllAssociation}<\/li> <\/ul> For hidden associations, no methods are generated.\n\n<b>'events'<\/b> : <i>object<\/i><br> An object literal whose properties each define a new event of the ManagedObject subclass. The value can either be a simple string which then will be assumed to be the type of the new association or it can be an object literal with the following properties <ul> <li><code>allowPreventDefault: <i>boolean<\/i><\/code> whether the event allows to prevented the default behavior of the event source<\/li> <li><code>parameters: <i>object<\/i><\/code> an object literal that describes the parameters of this event. <\/li> <\/ul> Event names should use camelCase notation, start with a lower-case letter and only use characters from the set [a-zA-Z0-9_$]. If an event in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used as generic documentation of the event.\n\nFor each event 'Some' the following methods will be created by the \"extend\" method and will be added to the prototype of the subclass: <ul> <li>attachSome(fn,o) - registers a listener for the event. Internally calls {@link #attachEvent}<\/li> <li>detachSome(fn,o) - deregisters a listener for the event. Internally calls {@link #detachEvent}<\/li> <li>fireSome() - fire the event. Internally calls {@link #fireEvent}<\/li> <\/ul>\n\n<b>'specialSettings'<\/b> : <i>object<\/i><br> Special settings are an experimental feature and MUST NOT BE DEFINED in controls or applications outside of the <code>sap.ui.core<\/code> library. There's no generic or general way how to set or get the values for special settings. For the same reason, they cannot be bound against a model. If there's a way for consumers to define a value for a special setting, it must be documented in the class that introduces the setting.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: object literal with information about the class","FNMetaImpl":"type: function, description: constructor function for the metadata object. If not given, it defaults to <code>sap.ui.base.ManagedObjectMetadata<\/code>.","sClassName":"type: string, description: name of the class to be created"}},"!type":"fn(sId: String, mSettings: Object, oScope?: Object)","prototype":"sap.ui.base.ManagedObject"},"sap.ui.test.gherkin":{"StepDefinitions":"sap.ui.test.gherkin.StepDefinitions_obj","qUnitTestHarness":"sap.ui.test.gherkin.qUnitTestHarness","dataTableUtils":"sap.ui.test.gherkin.dataTableUtils","opa5TestHarness":"sap.ui.test.gherkin.opa5TestHarness","!category":"namespace"},"sap.ui.core.routing":{"HashChangerBase":"sap.ui.core.routing.HashChangerBase_obj","Target":"sap.ui.core.routing.Target_obj","Views":"sap.ui.core.routing.Views_obj","RouterHashChanger":"sap.ui.core.routing.RouterHashChanger_obj","HashChanger":"sap.ui.core.routing.HashChanger_obj","Router":"sap.ui.core.routing.Router_obj","Targets":"sap.ui.core.routing.Targets_obj","!category":"namespace","History":"sap.ui.core.routing.History_obj","Route":"sap.ui.core.routing.Route_obj"},"sap.ui.model.analytics.odata4analytics.EntitySet_obj":{"!type":"fn(oModel: Object, oSchema: Object, oContainer: Object, oEntitySet: Object, oEntityType: Object)","prototype":"sap.ui.model.analytics.odata4analytics.EntitySet"},"sap.ui.model.Model_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.Model with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.Model"},"sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround_obj":{"!type":"fn(oModel: Object, aWorkaroundID: [String])","prototype":"sap.ui.model.analytics.odata4analytics.Model.ReferenceWithWorkaround"},"sap.ui.test.matchers.BindingPath":{"!description":"Checks if a control has a binding context with the exact same binding path.\n\nAs of version 1.60, comparison is strict and can include one or more binding criteria: <ul> <li>context path (matches children of bound controls, eg: items in a table)<\/li> <li>property path (matches controls with no context and a single bound property, eg: Text with binding for property text)<\/li> <li>context path + property path (matches children of bound controls, where the child has a binding for a certain property within the context)<\/li> <\/ul>\n\n<b>Note:<\/b> Before version 1.60, the only available criteria is binding context path.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    bindingPath: {\n        path: \"string\",\n        modelName: \"string\",\n        propertyPath: \"string\"\n    }\n}\n<\/code><\/pre>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.BindingPath.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.test.matchers.Matcher","setPath":{"!description":"Sets a new value for property {@link #getPath path}.\n\nThe value of the binding context path that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sPath: String) -> sap.ui.test.matchers.BindingPath","parameters":{"sPath":"type: string, description: New value for property <code>path<\/code>"}},"!category":"class","getModelName":{"!description":"Gets current value of property {@link #getModelName modelName}.\n\nThe name of the binding model that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"isMatching":{"!description":"Checks if the control has a binding with matching path","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}},"setPropertyPath":{"!description":"Sets a new value for property {@link #getPropertyPath propertyPath}.\n\nThe value of the binding property path that is used for matching. If (context) path is also set, propertyPath will be assumed to be relative to the binding context path\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sPropertyPath: String) -> sap.ui.test.matchers.BindingPath","parameters":{"sPropertyPath":"type: string, description: New value for property <code>propertyPath<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.BindingPath with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getPath path} : string<\/li>\n<li>{@link #getModelName modelName} : string<\/li>\n<li>{@link #getPropertyPath propertyPath} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","!module":"sap/ui/test/matchers/BindingPath","setModelName":{"!description":"Sets a new value for property {@link #getModelName modelName}.\n\nThe name of the binding model that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sModelName: String) -> sap.ui.test.matchers.BindingPath","parameters":{"sModelName":"type: string, description: New value for property <code>modelName<\/code>"}},"!helpDescription":"Checks if a control has a binding context with the exact same binding path.\n\nAs of version 1.60, comparison is strict and can include one or more binding criteria: <ul> <li>context path (matches children of bound controls, eg: items in a table)<\/li> <li>property path (matches controls with no context and a single bound property, eg: Text with binding for property text)<\/li> <li>context path + property path (matches children of bound controls, where the child has a binding for a certain property within the context)<\/li> <\/ul>\n\n<b>Note:<\/b> Before version 1.60, the only available criteria is binding context path.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    bindingPath: {\n        path: \"string\",\n        modelName: \"string\",\n        propertyPath: \"string\"\n    }\n}\n<\/code><\/pre>","getPath":{"!description":"Gets current value of property {@link #getPath path}.\n\nThe value of the binding context path that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"getPropertyPath":{"!description":"Gets current value of property {@link #getPropertyPath propertyPath}.\n\nThe value of the binding property path that is used for matching. If (context) path is also set, propertyPath will be assumed to be relative to the binding context path","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.Renderer":{"!description":"Base Class for a Renderer.","extend":{"!description":"Creates a new renderer that extends a given renderer.\n\nThis method can be used with two signatures that are explained below. In both variants, the returned renderer inherits all properties (methods, fields) from the given parent renderer. Both variants also add an 'extend' method to the created renderer that behaves like the modern signature variant of this <code>Renderer.extend<\/code> method, but allows to extend the new renderer instead of <code>sap.ui.core.Renderer<\/code>.\n\n<h3>Modern Signature<\/h3>\n\nIn the modern signature variant, two parameters must be given: a qualified name for the new renderer (its global name, in dot-notation), and an optional object literal that contains methods or fields to be added to the new renderer class.\n\nThis signature has been designed to resemble the class extension mechanism as provided by {@link sap.ui.base.Object.extend Object.extend}.\n\n<pre>\nsap.ui.define(['sap/ui/core/Renderer'],\n    function(Renderer) {\n    \"use strict\";\n\n    var LabelRenderer = Renderer.extend('sap.m.LabelRenderer', {\n        render: function(oRM, oControl) {\n\n            renderPreamble(oRM, oControl);\n\n            // implementation core renderer logic here\n\n            renderPostamble(oRM, oControl);\n\n        },\n\n        renderPreamble : function(oRM, oControl) {\n        ...\n        },\n\n        renderPostamble : function(oRM, oControl) {\n        ...\n        }\n\n    });\n\n    return LabelRenderer;\n});\n<\/pre>\n\nThe extension of renderers works across multiple levels. A <code>FancyLabelRenderer<\/code> can extend the above <code>LabelRenderer<\/code>:\n\n<pre>\nsap.ui.define(['sap/m/LabelRenderer'],\n    function(LabelRenderer) {\n    \"use strict\";\n\n    var FancyLabelRenderer = LabelRenderer.extend('sap.mylib.FancyLabelRenderer', {\n        render: function(oRM, oControl) {\n\n            // call base renderer\n            LabelRenderer.renderPreamble(oRM, oControl);\n\n            // ... do your own fancy rendering here\n\n            // call base renderer again\n            LabelRenderer.renderPostamble(oRM, oControl);\n        }\n    });\n\n    return FancyLabelRenderer;\n});\n<\/pre>\n\n<b>Note:<\/b> The modern signature no longer requires the <code>bExport<\/code> flag to be set for the enclosing {@link sap.ui.define} call. The Renderer base class takes care of the necessary global export of the renderer. This allows non-SAP developers to write a renderer that complies with the documented restriction for <code>sap.ui.define<\/code> (no use of bExport = true outside sap.ui.core projects).\n\n<h3>Deprecated Signature<\/h3>\n\nThe deprecated old signature expects just one parameter: a renderer that should be extended. With that signature, the renderer can't be exported globally as the name of the renderer class is not known.\n\nFor compatibility reasons, the class created by the deprecated signature contains a property <code>_super<\/code> that references the parent class. It shouldn't be used by applications / control developers as it doesn't work reliably for deeper inheritance chains: if the old variant of <code>Renderer.extend<\/code> is used on two or more levels of the inheritance hierarchy, the <code>_super<\/code> property of the resulting renderer class will always point to the implementation of the base renderer of the last call to extend. Instead of using <code>this._super<\/code>, renderer implementations should use the new signature variant and access the base implementation of a method via the AMD reference to the base renderer (as shown in the FancyLabelRenderer example above).\n\n<h3>Use as a Generic Method<\/h3>\n\nOnly renderers that have been created with a call to <code>extend<\/code> will get their own <code>extend<\/code> method to create new subclasses. To allow extending from older renderers that have been written from scratch as a plain object, the <code>Renderer.extend<\/code> method can be called as a <i>generic method<\/i>, providing the base renderer as <code>this<\/code>.\n\nExample: Derive from <code>HBoxRenderer<\/code> (which is assumed to be a plain object) <pre>\nsap.ui.define(['sap/ui/core/Renderer', 'sap/m/HBoxRenderer'],\n    function(Renderer, HBoxRenderer) {\n    \"use strict\";\n\n    // Call 'extend' as a generic method, providing the HBoxRenderer as 'this'\n    var MyRenderer = Renderer.extend.call(HBoxRenderer, 'sap.m.LabelRenderer', {\n\n        someOverriddenHook: function(oRM, oControl) {\n        ...\n        },\n\n    });\n\n    return LabelRenderer;\n});\n<\/pre>\n\n<b>Note:<\/b> The deprecated signature cannot be used generically, it is only supported when called on <code>sap.ui.core.Renderer<\/code>.","!static":"true","!category":"function","!type":"fn(vName: String | Object, oRendererInfo?: Object) -> Object"},"!module":"sap/ui/core/Renderer","!helpDescription":"Base Class for a Renderer.","getTextAlign":{"!description":"Returns the TextAlignment for the provided configuration.","!static":"true","!category":"function","!type":"fn(oTextAlign: sap.ui.core.TextAlign, oTextDirection: sap.ui.core.TextDirection) -> String"},"!category":"namespace"},"module:sap/ui/util/Mobile":{"init":{"!description":"Does some basic modifications to the HTML page that make it more suitable for mobile apps. Only the first call to this method is executed, subsequent calls are ignored. Note that this method is also called by the constructor of toplevel controls like sap.m.App, sap.m.SplitApp and sap.m.Shell. Exception: if <code>homeIcon<\/code> or <code>mobileWebAppCapable<\/code> were not set, subsequent calls have the chance to set them.\n\nThe \"options\" parameter configures what exactly should be done.\n\nIt can have the following properties: <ul> <li>viewport: whether to set the viewport in a way that disables zooming (default: true)<\/li> <li>statusBar: the iOS status bar color, \"default\", \"black\" or \"black-translucent\" (default: \"default\")<\/li> <li>hideBrowser: whether the browser UI should be hidden as far as possible to make the app feel more native (default: true)<\/li> <li>preventScroll: whether native scrolling should be disabled in order to prevent the \"rubber-band\" effect where the whole window is moved (default: true)<\/li> <li>preventPhoneNumberDetection: whether Safari Mobile should be prevented from transforming any numbers that look like phone numbers into clickable links; this should be left as \"true\", otherwise it might break controls because Safari actually changes the DOM. This only affects all page content which is created after init() is called.<\/li> <li>rootId: the ID of the root element that should be made fullscreen; only used when hideBrowser is set (default: the document.body)<\/li> <li>useFullScreenHeight: a boolean that defines whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height (default: true)<\/li> <li>homeIcon: deprecated since 1.12, use sap/ui/util/Mobile.setIcons instead. <\/ul>","!category":"function","!type":"fn(options?: Object)"},"!module":"sap/ui/util/Mobile","setWebAppCapable":{"!description":"Sets the \"apple-mobile-web-app-capable\" and \"mobile-web-app-capable\" meta information which defines whether the application is loaded in full screen mode (browser address bar and toolbar are hidden) after the user does \"add to home screen\" on mobile devices. Currently this meta tag is only supported by iOS Safari and mobile Chrome from version 31.\n\nIf the application opens new tabs because of attachments, url and so on, setting this to false will let the user be able to go from the new tab back to the application tab after the application is added to home screen.\n\nNote: this function only has effect when the application runs on iOS Safari and mobile Chrome from version 31.","!category":"function","!type":"fn(bValue: Boolean)"},"!category":"namespace","setIcons":{"!description":"Sets the bookmark icon for desktop browsers and the icon to be displayed on the home screen of iOS devices after the user does \"add to home screen\".\n\nOnly call this method once and call it early when the page is loading: browsers behave differently when the favicon is modified while the page is alive. Some update the displayed icon inside the browser but use an old icon for bookmarks. When a favicon is given, any other existing favicon in the document will be removed. When at least one home icon is given, all existing home icons will be removed and new home icon tags for all four resolutions will be created.\n\nThe home icons must be in PNG format and given in different sizes for iPad/iPhone with and without retina display. The favicon is used in the browser and for desktop shortcuts and should optimally be in ICO format: PNG does not seem to be supported by Internet Explorer and ICO files can contain different image sizes for different usage locations. E.g. a 16x16px version is used inside browsers.\n\nAll icons are given in an an object holding icon URLs and other settings. The properties of this object are: <ul> <li>phone: a 60x60 pixel version for non-retina iPhones<\/li> <li>tablet: a 76x76 pixel version for non-retina iPads<\/li> <li>phone@2: a 120x120 pixel version for retina iPhones<\/li> <li>tablet@2: a 152x152 pixel version for retina iPads<\/li> <li>precomposed: whether the home icons already have some glare effect (otherwise iOS will add it) (default: false)<\/li> <li>favicon: the ICO file to be used inside the browser and for desktop shortcuts<\/li> <\/ul>\n\nOne example is: <pre>\n{\n   'phone':'phone-icon_60x60.png',\n   'phone@2':'phone-retina_120x120.png',\n   'tablet':'tablet-icon_76x76.png',\n   'tablet@2':'tablet-retina_152x152.png',\n   'precomposed':true,\n   'favicon':'desktop.ico'\n}\n<\/pre> If one of the sizes is not given, the largest available alternative image will be used instead for this size. On Android these icons may or may not be used by the device. Apparently chances can be improved by using icons with glare effect, so the \"precomposed\" property can be set to \"true\". Some Android devices may also use the favicon for bookmarks instead of the home icons.<\/li>","!category":"function","!type":"fn(oIcons: Object)"},"module:sap/ui/util/Mobile":"module:sap/ui/util/Mobile"},"sap.ui.test.actions.EnterText":{"!description":"The <code>EnterText<\/code> action is used to simulate a user entering texts to inputs. <code>EnterText<\/code> will be executed on a control's focus dom ref. Supported controls are (for other controls this action still might work): <ul> <li><code>sap.m.Input<\/code><\/li> <li><code>sap.m.SearchField<\/code><\/li> <li><code>sap.m.TextArea<\/code><\/li> <\/ul>","getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.actions.EnterText.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setKeepFocus":{"!description":"Sets a new value for property {@link #getKeepFocus keepFocus}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bKeepFocus: Boolean) -> sap.ui.test.actions.EnterText","parameters":{"bKeepFocus":"type: boolean, description: New value for property <code>keepFocus<\/code>"}},"getClearTextFirst":{"!description":"Gets current value of property {@link #getClearTextFirst clearTextFirst}.\n\nIf it is set to <code>false<\/code>, the current text of the control will be preserved. By default, the current text of the control will be cleared. When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied. This will trigger a <code>liveChange<\/code> event on the input with an empty value.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.","!static":false,"!category":"function","!type":"fn() -> String"},"setPressEnterKey":{"!description":"Sets a new value for property {@link #getPressEnterKey pressEnterKey}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bPressEnterKey: Boolean) -> sap.ui.test.actions.EnterText","parameters":{"bPressEnterKey":"type: boolean, description: New value for property <code>pressEnterKey<\/code>"}},"!proto":"sap.ui.test.actions.Action","!category":"class","executeOn":{"!description":"Sets focus on given control and triggers Multiple keyboard events on it, one event for every character in the text. Logs an error if control has no focusable dom ref or is not visible.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control)","parameters":{"oControl":"type: sap.ui.core.Control, description: the control on which the text event should be entered in."}},"getPressEnterKey":{"!description":"Gets current value of property {@link #getPressEnterKey pressEnterKey}.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.EnterText with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string<\/li>\n<li>{@link #getClearTextFirst clearTextFirst} : boolean (default: true)<\/li>\n<li>{@link #getKeepFocus keepFocus} : boolean (default: false)<\/li>\n<li>{@link #getPressEnterKey pressEnterKey} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.actions.Action#constructor sap.ui.test.actions.Action}\ncan be used as well.","!module":"sap/ui/test/actions/EnterText","!helpDescription":"The <code>EnterText<\/code> action is used to simulate a user entering texts to inputs. <code>EnterText<\/code> will be executed on a control's focus dom ref. Supported controls are (for other controls this action still might work): <ul> <li><code>sap.m.Input<\/code><\/li> <li><code>sap.m.SearchField<\/code><\/li> <li><code>sap.m.TextArea<\/code><\/li> <\/ul>","setClearTextFirst":{"!description":"Sets a new value for property {@link #getClearTextFirst clearTextFirst}.\n\nIf it is set to <code>false<\/code>, the current text of the control will be preserved. By default, the current text of the control will be cleared. When the text is going to be cleared, a delete character event will be fired and then the value of the input is emptied. This will trigger a <code>liveChange<\/code> event on the input with an empty value.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bClearTextFirst: Boolean) -> sap.ui.test.actions.EnterText","parameters":{"bClearTextFirst":"type: boolean, description: New value for property <code>clearTextFirst<\/code>"}},"getKeepFocus":{"!description":"Gets current value of property {@link #getKeepFocus keepFocus}.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.test.actions.EnterText","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.core.date":{"UniversalDate":"sap.ui.core.date.UniversalDate_obj","!category":"namespace"},"sap.ui.app.Application_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.app.Application with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.app.Application"},"sap.ui.test.gherkin.qUnitTestHarness":{"!description":"Dynamically generates and executes QUnit tests based on a Gherkin feature file and step definitions\n\nLogs activity to QUnit, and some debug information to the console with the prefix \"[GHERKIN]\"","!module":"sap/ui/test/gherkin/qUnitTestHarness","test":{"!description":"Dynamically generates and executes QUnit tests","!static":"true","!category":"function","!type":"fn(args: Object)"},"!helpDescription":"Dynamically generates and executes QUnit tests based on a Gherkin feature file and step definitions\n\nLogs activity to QUnit, and some debug information to the console with the prefix \"[GHERKIN]\"","!category":"namespace"},"sap.ui.core.util.serializer.XMLViewSerializer_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.XMLViewSerializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oView: sap.ui.core.mvc.XMLView, oWindow?: Object, sDefaultXmlNamespace?: String, fnGetControlId: fn(), fnGetEventHandlerName: fn())","prototype":"sap.ui.core.util.serializer.XMLViewSerializer"},"sap.ui.model.SimpleType":{"!description":"This is an abstract base class for simple types. A simple type can format a raw model value based on the given format options, parse an external value based on the given format options and validate the raw model value based on the given constraints. An implementation of a simple type needs to implement {@link #formatValue}, {@link #parseValue} and {@link #validateValue}. If the raw value, which is the value in model representation, isn't already a JavaScript primitive type, subclasses must override {@link #getModelFormat}.","extend":{"!description":"Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.SimpleType.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new SimpleType.","formatValue":{"!description":"Formats the given raw value to an output value of the given target type. This happens according to the format options if the target type is <code>string<\/code>. If <code>vValue<\/code> is not defined or <code>null<\/code>, <code>null<\/code> is returned.","!static":false,"!category":"function","!type":"fn(vValue: Object, sTargetType: String) -> Object | Promise","parameters":{"sTargetType":"type: string, description: The target type; see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}","vValue":"type: any, description: The value to be formatted"}},"!module":"sap/ui/model/SimpleType","!helpDescription":"This is an abstract base class for simple types. A simple type can format a raw model value based on the given format options, parse an external value based on the given format options and validate the raw model value based on the given constraints. An implementation of a simple type needs to implement {@link #formatValue}, {@link #parseValue} and {@link #validateValue}. If the raw value, which is the value in model representation, isn't already a JavaScript primitive type, subclasses must override {@link #getModelFormat}.","!proto":"sap.ui.model.Type","validateValue":{"!description":"Validates whether a given raw value meets the defined constraints. This method does nothing if no constraints are defined.","!static":false,"!category":"function","!type":"fn(vValue: Object) -> Promise","parameters":{"vValue":"type: any, description: The value to be validated"}},"!category":"class","parseValue":{"!description":"Parses an external value of the given source type to the corresponding value in model representation.","!static":false,"!category":"function","!type":"fn(vValue: Object, sSourceType: String) -> Object | Promise","parameters":{"sSourceType":"type: string, description: The type of the given value; see {@link topic:ac56d92162ed47ff858fdf1ce26c18c4 Allowed Property Types}","vValue":"type: any, description: The value to be parsed"}},"getModelFormat":{"!description":"Returns an object with <code>format<\/code> and <code>parse<\/code> methods. <code>format<\/code> converts the internal value which has a JavaScript primitive type or is a built-in object such as Date which can be used by a control to the raw value, and <code>parse<\/code> converts the raw value to the internal value.\n\nYou may return an instance of {@link sap.ui.core.format.DateFormat#constructor DateFormat} or {@link sap.ui.core.format.NumberFormat#constructor NumberFormat}.\n\nThe default implementation of the <code>format<\/code> and <code>parse<\/code> methods simply returns the given parameter. Subclasses of {@link sap.ui.model.SimpleType#constructor SimpleType} should override this method if the raw value isn't already a JavaScript primitive type. The overwritten method must return an object which has the <code>format<\/code> and <code>parse<\/code> methods implemented.\n\nExample:<br> If the type is related to a JavaScript <code>Date<\/code> object, but the raw value isn't, this method should return an instance of {@link sap.ui.core.format.DateFormat#constructor DateFormat}, which is able to convert between the raw value and a JavaScript <code>Date<\/code> object.","!static":false,"!category":"function","!type":"fn() -> Object"}},"sap.ui.core.date.UniversalDate_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.date.UniversalDate with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.date.UniversalDate"},"sap.ui.core.ElementMetadata":{"uid":{"!description":"Calculates a new id based on a prefix.","!static":true,"!category":"function","!type":"fn() -> String"},"!constructorDescription":"Creates a new metadata object for a UIElement subclass.","!module":"sap/ui/core/ElementMetadata","!proto":"sap.ui.base.ManagedObjectMetadata","!category":"class","getDragDropInfo":{"!description":"Returns an info object describing the drag-and-drop behavior.","!static":false,"!category":"function","!type":"fn(sAggregationName?: String) -> Object","parameters":{"sAggregationName":"type: string, description: name of the aggregation or empty."}},"getElementName":{"!description":"By default, the element name is equal to the class name","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.core.util.ExportRow_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportRow with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.util.ExportRow"},"sap.ui.core.HTML":{"!description":"Embeds standard HTML in an SAPUI5 control tree.\n\nSecurity Hint: By default, the HTML content (property 'content') is not sanitized and therefore open to XSS attacks. Applications that want to show user defined input in an HTML control, should either sanitize the content on their own or activate automatic sanitizing through the {@link #setSanitizeContent sanitizeContent} property.\n\nAlthough this control inherits the <code>tooltip<\/code> aggregation/property and the <code>hasStyleClass<\/code>, <code>addStyleClass<\/code>, <code>removeStyleClass<\/code> and <code>toggleStyleClass<\/code> methods from its base class, it doesn't support them. Instead, the defined HTML content can contain a tooltip (title attribute) or custom CSS classes.\n\nFor further hints about usage restrictions for this control, see also the documentation of the <code>content<\/code> property.","attachAfterRendering":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.HTML<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.HTML<\/code> itself.\n\nFired after the HTML control has been rendered. Allows to manipulate the resulting DOM.\n\nWhen the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.HTML","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setVisible":{"!description":"Sets a new value for property {@link #getVisible visible}.\n\nSpecifies whether the control is visible. Invisible controls are not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVisible: Boolean) -> sap.ui.core.HTML","parameters":{"bVisible":"type: boolean, description: New value for property <code>visible<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.HTML.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"setContent":{"!description":"Sets a new value for property {@link #getContent content}.\n\nHTML content to be displayed, defined as a string.\n\nThe content is converted to DOM nodes with a call to <code>new jQuery(content)<\/code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.\n\nSome of these restrictions (there might be others!) are: <ul> <li>the content must be enclosed in tags, pure text is not supported. <\/li> <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.<\/li> <\/ul>\n\nPlease consider to consult the jQuery documentation as well.\n\nThe HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. <code>setContent(\"&lt;div/>&lt;div/>\")<\/code>), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.\n\nWhen changing the content dynamically, ensure that the ID of the root node remains the same as the HTML control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sContent: String) -> sap.ui.core.HTML","parameters":{"sContent":"type: string, description: New value for property <code>content<\/code>"}},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nSpecifies whether the control is visible. Invisible controls are not rendered.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"setDOMContent":{"!description":"Sets some new DOM content for this HTML control. The content will replace the existing content after the next rendering. Properties are not modified, but preferDOM should be set to true.","!static":false,"!category":"function","!type":"fn(oDom: Element) -> sap.ui.core.HTML","parameters":{"oDom":"type: Element, description: the new DOM content"}},"getContent":{"!description":"Gets current value of property {@link #getContent content}.\n\nHTML content to be displayed, defined as a string.\n\nThe content is converted to DOM nodes with a call to <code>new jQuery(content)<\/code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.\n\nSome of these restrictions (there might be others!) are: <ul> <li>the content must be enclosed in tags, pure text is not supported. <\/li> <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.<\/li> <\/ul>\n\nPlease consider to consult the jQuery documentation as well.\n\nThe HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. <code>setContent(\"&lt;div/>&lt;div/>\")<\/code>), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.\n\nWhen changing the content dynamically, ensure that the ID of the root node remains the same as the HTML control's ID. Otherwise it cannot be guaranteed that certain lifecycle events take place.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Control","!category":"class","getDomRef":{"!static":false,"!category":"function","!type":"fn(sSuffix?: String) -> Element","parameters":{"sSuffix":"type: string, description: Suffix of the Element to be retrieved or empty"}},"setPreferDOM":{"!description":"Sets a new value for property {@link #getPreferDOM preferDOM}.\n\nWhether existing DOM content is preferred over the given content string.\n\nThere are two scenarios where this flag is relevant (when set to true): <ul> <li>for the initial rendering: when an HTML control is added to a UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content<\/li> <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content<\/li> <\/ul>\n\nAs preserving the existing DOM is the most common use case of the HTML control, the default value is true.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bPreferDOM: Boolean) -> sap.ui.core.HTML","parameters":{"bPreferDOM":"type: boolean, description: New value for property <code>preferDOM<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setSanitizeContent":{"!description":"Sets a new value for property {@link #getSanitizeContent sanitizeContent}.\n\nWhether to run the HTML sanitizer once the content (HTML markup) is applied or not.\n\nTo configure the set of allowed URLs, you can use the {@link jQuery.sap.addUrlWhitelist whitelist API}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn(bSanitizeContent: Boolean) -> sap.ui.core.HTML","parameters":{"bSanitizeContent":"type: boolean, description: New value for property <code>sanitizeContent<\/code>"}},"!constructorDescription":"Constructor for a new HTML.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getContent content} : string<\/li>\n<li>{@link #getPreferDOM preferDOM} : boolean (default: true)<\/li>\n<li>{@link #getSanitizeContent sanitizeContent} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","getSanitizeContent":{"!description":"Gets current value of property {@link #getSanitizeContent sanitizeContent}.\n\nWhether to run the HTML sanitizer once the content (HTML markup) is applied or not.\n\nTo configure the set of allowed URLs, you can use the {@link jQuery.sap.addUrlWhitelist whitelist API}.\n\nDefault value is <code>false<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!module":"sap/ui/core/HTML","!helpDescription":"Embeds standard HTML in an SAPUI5 control tree.\n\nSecurity Hint: By default, the HTML content (property 'content') is not sanitized and therefore open to XSS attacks. Applications that want to show user defined input in an HTML control, should either sanitize the content on their own or activate automatic sanitizing through the {@link #setSanitizeContent sanitizeContent} property.\n\nAlthough this control inherits the <code>tooltip<\/code> aggregation/property and the <code>hasStyleClass<\/code>, <code>addStyleClass<\/code>, <code>removeStyleClass<\/code> and <code>toggleStyleClass<\/code> methods from its base class, it doesn't support them. Instead, the defined HTML content can contain a tooltip (title attribute) or custom CSS classes.\n\nFor further hints about usage restrictions for this control, see also the documentation of the <code>content<\/code> property.","getPreferDOM":{"!description":"Gets current value of property {@link #getPreferDOM preferDOM}.\n\nWhether existing DOM content is preferred over the given content string.\n\nThere are two scenarios where this flag is relevant (when set to true): <ul> <li>for the initial rendering: when an HTML control is added to a UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content<\/li> <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content<\/li> <\/ul>\n\nAs preserving the existing DOM is the most common use case of the HTML control, the default value is true.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireAfterRendering":{"!description":"Fires event {@link #event:afterRendering afterRendering} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.HTML","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"detachAfterRendering":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:afterRendering afterRendering} event of this <code>sap.ui.core.HTML<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.HTML","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.model.ClientTreeBindingAdapter_obj":{"!type":"fn()","prototype":"sap.ui.model.ClientTreeBindingAdapter"},"jQuery.device":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use the respective functions of {@link sap.ui.Device} instead<br>undefined","!module":"jquery.sap.mobile","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.20 use the respective functions of {@link sap.ui.Device} instead<br>undefined","is":"jQuery.device.is","!category":"namespace"},"sap.ui.test.matchers.Interactable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.Interactable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.matchers.Interactable"},"module:sap/ui/dom/jquery/rect":{"!description":"This module provides the {@link jQuery#rect} API.","module:sap/ui/dom/jquery/rect":"module:sap/ui/dom/jquery/rect","!module":"sap/ui/dom/jquery/rect","!helpDescription":"This module provides the {@link jQuery#rect} API.","!category":"namespace"},"sap.ui.core.support.RuleEngineOpaExtension":{"!description":"This class represents an extension for OPA tests which allows running Support Assistant checks.\n\nIt enriches the OPA assertions with the methods described in {@link sap.ui.core.support.RuleEngineOpaAssertions}.\n\nFor more information, see {@link topic:cfabbd4dfc054936997d9d00916e1668 Integrating the Support Assistant in OPA Tests}.","extend":{"!description":"Creates a new subclass of class sap.ui.core.support.RuleEngineOpaExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.support.RuleEngineOpaExtension.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/core/support/RuleEngineOpaExtension","!helpDescription":"This class represents an extension for OPA tests which allows running Support Assistant checks.\n\nIt enriches the OPA assertions with the methods described in {@link sap.ui.core.support.RuleEngineOpaAssertions}.\n\nFor more information, see {@link topic:cfabbd4dfc054936997d9d00916e1668 Integrating the Support Assistant in OPA Tests}.","!proto":"sap.ui.base.Object","!category":"class","getAssertions":{"!static":false,"!category":"function","!type":"fn() -> sap.ui.core.support.RuleEngineOpaAssertions"}},"sap.ui.core.LabelEnablement":{"!description":"Helper functionality for enhancement of a <code>Label<\/code> with common label functionality.","isRequired":{"!description":"Returns <code>true<\/code> when the given control is required (property 'required') or one of its referencing labels, <code>false<\/code> otherwise.","!static":"true","!category":"function","!type":"fn(oElement: sap.ui.core.Element) -> Boolean"},"!module":"sap/ui/core/LabelEnablement","!helpDescription":"Helper functionality for enhancement of a <code>Label<\/code> with common label functionality.","getReferencingLabels":{"!description":"Returns an array of IDs of the labels referencing the given element.","!static":"true","!category":"function","!type":"fn(oElement: sap.ui.core.Element) -> [String]"},"writeLabelForAttribute":{"!description":"Helper function for the <code>Label<\/code> control to render the HTML 'for' attribute. This function should be called at the desired location in the renderer code of the <code>Label<\/code> control.","!static":"true","!category":"function","!type":"fn(oRenderManager: sap.ui.core.RenderManager, oLabel: sap.ui.core.Label)"},"enrich":{"!description":"This function should be called on a label control to enrich its functionality.\n\n<b>Usage:<\/b> The function can be called with a control prototype: <code> sap.ui.core.LabelEnablement.enrich(my.Label.prototype); <\/code> Or the function can be called on instance level in the init function of a label control: <code> my.Label.prototype.init: function(){ sap.ui.core.LabelEnablement.enrich(this); } <\/code>\n\n<b>Preconditions:<\/b> The given control must implement the interface sap.ui.core.Label and have an association 'labelFor' with cardinality 0..1. This function extends existing API functions. Ensure not to override these extensions AFTER calling this function.\n\n<b>What does this function do?<\/b>\n\nA mechanism is added that ensures that a bidirectional reference between the label and its labeled control is established: The label references the labeled control via the HTML 'for' attribute (@see sap.ui.core.LabelEnablement#writeLabelForAttribute). If the labeled control supports the aria-labelledby attribute, a reference to the label is added automatically.\n\nIn addition an alternative to apply a 'for' reference without influencing the labelFor association of the API is applied (e.g. used by Form). For this purpose the functions setAlternativeLabelFor and getLabelForRendering are added.","!static":"true","!category":"function","!type":"fn(oControl: sap.ui.core.Control)"},"!category":"namespace"},"sap.ui.model.type.DateTime_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.DateTime"},"sap.ui.base.EventProvider_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.base.EventProvider"},"sap.ui.core.util.XMLPreprocessor.IContext":{"!description":"Context interface provided by XML template processing as an additional first argument to any formatter function which opts in to this mechanism. Candidates for such formatter functions are all those used in binding expressions which are evaluated during XML template processing, including those used inside template instructions like <code>&lt;template:if><\/code>. The formatter function needs to be marked with a property <code>requiresIContext = true<\/code> to express that it requires this extended signature (compared to ordinary formatter functions). The usual arguments are provided after the first one (currently: the raw value from the model).\n\nThis interface provides callback functions to access the model and path which are needed to process OData V4 annotations. It initially offers a subset of methods from {@link sap.ui.model.Context} so that formatters might also be called with a context object for convenience, e.g. outside of XML template processing (see below for an exception to this rule).\n\n<b>Example:<\/b> Suppose you have a formatter function called \"foo\" like below and it is used within an XML template like <code>&lt;template:if test=\"{path: '...', formatter: 'foo'}\"><\/code>. In this case <code>foo<\/code> is called with arguments <code>oInterface, vRawValue<\/code> such that <code>oInterface.getModel().getObject(oInterface.getPath()) === vRawValue<\/code> holds. <pre>\nwindow.foo = function (oInterface, vRawValue) {\n    //TODO ...\n};\nwindow.foo.requiresIContext = true;\n<\/pre>\n\n<b>Composite Binding Examples:<\/b> Suppose you have the same formatter function and it is used in a composite binding like <code>&lt;Text text=\"{path: 'Label', formatter: 'foo'}: {path: 'Value', formatter: 'foo'}\"/><\/code>. In this case <code>oInterface.getPath()<\/code> refers to \".../Label\" in the 1st call and \".../Value\" in the 2nd call. This means each formatter call knows which part of the composite binding it belongs to and behaves just as if it was an ordinary binding.\n\nSuppose your formatter is not used within a part of the composite binding, but at the root of the composite binding in order to aggregate all parts like <code> &lt;Text text=\"{parts: [{path: 'Label'}, {path: 'Value'}], formatter: 'foo'}\"/><\/code>. In this case <code>oInterface.getPath(0)<\/code> refers to \".../Label\" and <code>oInterface.getPath(1)<\/code> refers to \".../Value\". This means, the root formatter can access the ith part of the composite binding at will (since 1.31.0); see also {@link #.getInterface getInterface}. The function <code>foo<\/code> is called with arguments such that <code> oInterface.getModel(i).getObject(oInterface.getPath(i)) === arguments[i + 1]<\/code> holds. This use is not supported within an expression binding, that is, <code>&lt;Text text=\"{= ${parts: [{path: 'Label'}, {path: 'Value'}], formatter: 'foo'} }\"/><\/code> does not work as expected because the property <code>requiresIContext = true<\/code> is ignored.\n\nTo distinguish those two use cases, just check whether <code>oInterface.getModel() === undefined<\/code>, in which case the formatter is called on root level of a composite binding. To find out the number of parts, probe for the smallest non-negative integer where <code>oInterface.getModel(i) === undefined<\/code>. This additional functionality is, of course, not available from {@link sap.ui.model.Context}, i.e. such formatters MUST be called with an instance of this context interface.","!module":"sap/ui/core/util/XMLPreprocessor","!category":"static class"},"sap.ui.model.analytics.BatchResponseCollector":{"!description":"Simple Response Collection Component, collects the responses for each sub-request inside a bigger batch request.\n\nAlso handles clean-up after all responses (either success or error) have been collected. Instantiated in AnalyticalBinding.prototype._executeBatchRequest()","!constructorDescription":"Constructor for a batch response collecting component.","!module":"sap/ui/model/analytics/BatchResponseCollector","!helpDescription":"Simple Response Collection Component, collects the responses for each sub-request inside a bigger batch request.\n\nAlso handles clean-up after all responses (either success or error) have been collected. Instantiated in AnalyticalBinding.prototype._executeBatchRequest()","success":{"!description":"Convenience function to collect a success response.\n\nInternally BatchResponseCollector#collect is called with second parameter BatchResponseCollector.TYPE_SUCCESS","!static":false,"!category":"function","!type":"fn(oResponse: Object)","parameters":{"oResponse":"type: object, description: the successful response, which should be collected"}},"!proto":"sap.ui.base.Object","setup":{"!description":"Setup-Function to initialize/reset the BatchResponseCollector.","!static":false,"!category":"function","!type":"fn(mParams?: Object)","parameters":{"mParams":"type: object, description: optional Setup-Parameter"}},"!category":"class","error":{"!description":"Convenience function to collect an error response.\n\nInternally BatchResponseCollector#collect is called, the second parameter is set to BatchResponseCollector.TYPE_ERROR","!static":false,"!category":"function","!type":"fn(oResponse: Object)","parameters":{"oResponse":"type: object, description: the erroneous response object"}},"collect":{"!description":"Collects responses of type BatchResponseCollector.TYPE_SUCCESS and BatchResponseCollector.TYPE_ERROR.\n\nKeeps track of all collected responses and fires the necessary events after all responses for the requests, given in the constructor, have returned.","!static":false,"!category":"function","!type":"fn(oResponse: Object, sResponseType?: String)","parameters":{"oResponse":"type: object, description: the response which should be collected","sResponseType":"type: string, description: the type of the response, either BatchResponseCollector.TYPE_SUCCESS or BatchResponseCollector.TYPE_ERROR"}}},"sap.ui.model.analytics.odata4analytics.DimensionAttribute_obj":{"!type":"fn(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: Object)","prototype":"sap.ui.model.analytics.odata4analytics.DimensionAttribute"},"sap.ui.model.odata.Filter":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.22 Please use the {@link sap.ui.model.Filter} instead.<br>Filter for the list binding","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.Filter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.Filter.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for Filter","!module":"sap/ui/model/odata/Filter","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.22 Please use the {@link sap.ui.model.Filter} instead.<br>Filter for the list binding","!proto":"sap.ui.base.Object","!category":"class","convert":{"!description":"Converts the <code>sap.ui.model.odata.Filter<\/code> into a <code>sap.ui.model.Filter<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.Filter"}},"sap.ui.core.CSSColor":{"!description":"A string type that represents CSS color values.\n\nAllowed values are CSS hex colors like \"#666666\" or \"#fff\", RGB/HSL values like \"rgb(0,0,0)\" or \"hsla(50%,10%,30%,0.5)\" as well as CSS color names like \"green\" and \"darkblue\" and special values like \"inherit\" and \"transparent\".\n\nThe empty string is also allowed and has the same effect as setting no color.","!module":"sap/ui/core/library","!helpDescription":"A string type that represents CSS color values.\n\nAllowed values are CSS hex colors like \"#666666\" or \"#fff\", RGB/HSL values like \"rgb(0,0,0)\" or \"hsla(50%,10%,30%,0.5)\" as well as CSS color names like \"green\" and \"darkblue\" and special values like \"inherit\" and \"transparent\".\n\nThe empty string is also allowed and has the same effect as setting no color.","!category":"namespace"},"sap.ui.core.service.ServiceFactory":{"!description":"A service factory is used to create service instances for a specific context. The service factory needs to be registered in a central {@link sap.ui.core.service.ServiceFactoryRegistry service factory registry}. Consumers of services require the service factory to create service instances.\n\nThe service factory base class can be used in a generic way to act as a factory for any service: <pre>\nsap.ui.require([\n  \"sap/ui/core/service/ServiceFactoryRegistry\",\n  \"sap/ui/core/service/ServiceFactory\",\n  \"my/Service\"\n], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\n  ServiceFactoryRegistry.register(new ServiceFactory(MService));\n\n});\n<\/pre>\n\nAdditionally a concrete service factory can be implemented by extending the service factory base class if additional functionality is needed when creating new instances for a specific context: <pre>\nsap.ui.define(\"my/ServiceFactory\", [\n  \"sap/ui/core/service/ServiceFactoryRegistry\",\n  \"sap/ui/core/service/ServiceFactory\",\n  \"my/Service\"\n], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\n  return ServiceFactory.extend(\"my.ServiceFactory\", {\n    createInstance: function(oServiceContext) {\n      return Promise.resolve(new MyService(oServiceContext));\n    }\n  });\n\n});\n<\/pre>\n\nAnother option for the usage of the service factory is to provide a structured object with information about the service which will create an anonymous service internally: <pre>\nsap.ui.define(\"my/ServiceFactory\", [\n  \"sap/ui/core/service/ServiceFactoryRegistry\",\n  \"sap/ui/core/service/ServiceFactory\",\n  \"my/Service\"\n], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\n  return new ServiceFactory({\n\n    init: function() { ... },\n    exit: function() { ... },\n\n    doSomething: function() { ... }\n\n  });\n\n});\n<\/pre>\n\nAs <code>createInstance<\/code> returns a <code>Promise<\/code> e.g. the service module can also be loaded asynchronously and resolve once the module has been loaded and instantiated.","extend":{"!description":"Creates a new subclass of class sap.ui.core.service.ServiceFactory with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"createInstance":{"!description":"Creates a new instance of a service. When used as a generic service factory by providing a service constructor function it will create a new service instance otherwise the function will fail. For custom service factories this function has to be overridden and should return a <code>Promise<\/code>.","!static":false,"!category":"function","!type":"fn(oServiceContext: Object) -> Promise","parameters":{"oServiceContext":"type: object, description: Context for which the service is created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.service.ServiceFactory.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates a service factory.","!module":"sap/ui/core/service/ServiceFactory","!helpDescription":"A service factory is used to create service instances for a specific context. The service factory needs to be registered in a central {@link sap.ui.core.service.ServiceFactoryRegistry service factory registry}. Consumers of services require the service factory to create service instances.\n\nThe service factory base class can be used in a generic way to act as a factory for any service: <pre>\nsap.ui.require([\n  \"sap/ui/core/service/ServiceFactoryRegistry\",\n  \"sap/ui/core/service/ServiceFactory\",\n  \"my/Service\"\n], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\n  ServiceFactoryRegistry.register(new ServiceFactory(MService));\n\n});\n<\/pre>\n\nAdditionally a concrete service factory can be implemented by extending the service factory base class if additional functionality is needed when creating new instances for a specific context: <pre>\nsap.ui.define(\"my/ServiceFactory\", [\n  \"sap/ui/core/service/ServiceFactoryRegistry\",\n  \"sap/ui/core/service/ServiceFactory\",\n  \"my/Service\"\n], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\n  return ServiceFactory.extend(\"my.ServiceFactory\", {\n    createInstance: function(oServiceContext) {\n      return Promise.resolve(new MyService(oServiceContext));\n    }\n  });\n\n});\n<\/pre>\n\nAnother option for the usage of the service factory is to provide a structured object with information about the service which will create an anonymous service internally: <pre>\nsap.ui.define(\"my/ServiceFactory\", [\n  \"sap/ui/core/service/ServiceFactoryRegistry\",\n  \"sap/ui/core/service/ServiceFactory\",\n  \"my/Service\"\n], function(ServiceFactoryRegistry, ServiceFactory, MyService) {\n\n  return new ServiceFactory({\n\n    init: function() { ... },\n    exit: function() { ... },\n\n    doSomething: function() { ... }\n\n  });\n\n});\n<\/pre>\n\nAs <code>createInstance<\/code> returns a <code>Promise<\/code> e.g. the service module can also be loaded asynchronously and resolve once the module has been loaded and instantiated.","!proto":"sap.ui.base.Object","destroy":{"!description":"Lifecycle method to destroy the service factory instance.","!static":false,"!category":"function","!type":"fn()"},"!category":"class"},"sap.ui.test.Opa_obj":{"!type":"fn(extensionObject?: Object)","prototype":"sap.ui.test.Opa"},"sap.ui.test.PageObjectFactory_obj":{"!type":"fn()","prototype":"sap.ui.test.PageObjectFactory"},"sap.ui.core.ResizeHandler":{"!description":"The resize handling API provides firing of resize events on all browsers by regularly checking the width and height of registered DOM elements or controls and firing events accordingly.","extend":{"!description":"Creates a new subclass of class sap.ui.core.ResizeHandler with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":"true","!category":"function","!type":"fn(vName: String | Object, oRendererInfo?: Object, sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.ResizeHandler.","!static":"true","!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/core/ResizeHandler","!helpDescription":"The resize handling API provides firing of resize events on all browsers by regularly checking the width and height of registered DOM elements or controls and firing events accordingly.","deregister":{"!description":"Deregisters a previously registered handler for resize events with the given registration ID.","!static":"true","!category":"function","!type":"fn(sId: String)"},"!category":"namespace","register":{"!description":"Registers the given event handler for resize events on the given DOM element or control.\n\n<b>Note:<\/b> This function must not be used before the UI5 framework is initialized. Please use the {@link sap.ui.core.Core#attachInit init event} of UI5 if you are not sure whether this is the case.\n\nThe resize handler periodically checks the dimensions of the registered reference. Whenever it detects changes, an event is fired. Be careful when changing dimensions within the event handler which might cause another resize event and so on.\n\nThe available parameters of the resize event are: <ul> <li><code>oEvent.target<\/code>: The DOM element of which the dimensions were checked<\/li> <li><code>oEvent.size.width<\/code>: The current width of the DOM element in pixels<\/li> <li><code>oEvent.size.height<\/code>: The current height of the DOM element in pixels<\/li> <li><code>oEvent.oldSize.width<\/code>: The previous width of the DOM element in pixels<\/li> <li><code>oEvent.oldSize.height<\/code>: The previous height of the DOM element in pixels<\/li> <li><code>oEvent.control<\/code>: The control which was given during registration of the event handler (if present)<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn(oRef: Element | sap.ui.core.Control, fHandler: fn()) -> String"}},"sap.ui.model.odata.ODataUtils":{"compare":{"!description":"Compares the given OData values based on their type. All date and time types can also be compared with a number. This number is then interpreted as the number of milliseconds that the corresponding date or time object should hold.","!static":"true","!category":"function","!type":"fn(vValue1: Object, vValue2: Object, bAsDecimal?: String) -> Number"},"formatValue":{"!description":"Formats a JavaScript value according to the given <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> EDM type<\/a>.","!static":"true","!category":"function","!type":"fn(vValue: Object, sType: String, bCaseSensitive: Boolean) -> String"},"!module":"sap/ui/model/odata/ODataUtils","getComparator":{"!description":"Returns a comparator function optimized for the given EDM type.","!static":"true","!category":"function","!type":"fn(sEdmType: String) -> fn()"},"setOrigin":{"!description":"Adds an origin to the given service URL. If an origin is already present, it will only be replaced if the parameters object contains the flag \"force: true\". In case the URL already contains URL parameters, these will be kept. As a parameter, a sole alias is sufficient. The parameters vParameters.system and vParameters.client however have to be given in pairs. In case all three origin specifying parameters are given (system/client/alias), the alias has precedence.\n\nExamples: setOrigin(\"/backend/service/url/\", \"DEMO_123\"); - result: /backend/service/url;o=DEMO_123/\n\nsetOrigin(\"/backend/service/url;o=OTHERSYS8?myUrlParam=true&x=4\", {alias: \"DEMO_123\", force: true}); - result /backend/service/url;o=DEMO_123?myUrlParam=true&x=4\n\nsetOrigin(\"/backend/service;o=NOT_TOUCHED/url;v=2;o=OTHERSYS8;srv=XVC\", {alias: \"DEMO_123\", force: true}); - result /backend/service;o=NOT_TOUCHED/url;v=2;o=DEMO_123;srv=XVC\n\nsetOrigin(\"/backend/service/url/\", {system: \"DEMO\", client: 134}); - result /backend/service/url;o=sid(DEMO.134)/","!static":"true","!category":"function","!type":"fn(sServiceURL: String, vParameters: Object | String) -> String"},"!category":"namespace"},"sap.ui.app.Application":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 The Component class is enhanced to take care about the Application code.<br>Abstract application class. Extend this class to create a central application class.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.app.Application.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"onBeforeExit":{"!description":"On before exit application hook. Override this method in your Application class implementation, to handle cleanup before the real exit or to prompt a question to the user, if the application should be exited.","!static":false,"!category":"function","!type":"fn() -> String"},"onError":{"!description":"On error hook. Override this method in your Application class implementation to listen to unhandled errors.","!static":false,"!category":"function","!type":"fn(sMessage: String, sFile: String, iLine: Number)","parameters":{"iLine":"type: number, description: The line number of the error","sFile":"type: string, description: The file where the error occurred","sMessage":"type: string, description: The error message."}},"onExit":{"!description":"On exit application hook. Override this method in your Application class implementation, to handle cleanup of the application.","!static":false,"!category":"function","!type":"fn()"},"!proto":"sap.ui.core.Component","destroy":{"!static":false,"!category":"function","!type":"fn()"},"!category":"class","main":{"!description":"The main method is called when the DOM and UI5 is completely loaded. Override this method in your Application class implementation to execute code which relies on a loaded DOM / UI5.","!static":false,"!category":"function","!type":"fn()"},"setRoot":{"!description":"Sets a new value for property {@link #getRoot root}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sRoot: String) -> sap.ui.app.Application","parameters":{"sRoot":"type: string, description: New value for property <code>root<\/code>"}},"getConfig":{"!description":"Gets current value of property {@link #getConfig config}.","!static":false,"!category":"function","!type":"fn() -> Object"},"destroyRootComponent":{"!description":"Destroys the rootComponent in the aggregation {@link #getRootComponent rootComponent}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.app.Application"},"setConfig":{"!description":"Sets the configuration model.","!static":false,"!category":"function","!type":"fn(vConfig: String | Object | sap.ui.model.Model)","parameters":{"vConfig":"type: string|object|sap.ui.model.Model, description: the configuration model, the configuration object or a URI string to load a JSON configuration file."}},"extend":{"!description":"Creates a new subclass of class sap.ui.app.Application with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Creates an application instance, only one instance is allowed (singleton).\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getRoot root} : string<\/li>\n<li>{@link #getConfig config} : any<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getRootComponent rootComponent} : sap.ui.core.UIComponent<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Component#constructor sap.ui.core.Component}\ncan be used as well.","!module":"sap/ui/app/Application","getRootComponent":{"!description":"Gets content of aggregation {@link #getRootComponent rootComponent}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIComponent"},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 The Component class is enhanced to take care about the Application code.<br>Abstract application class. Extend this class to create a central application class.","getRoot":{"!description":"Gets current value of property {@link #getRoot root}.","!static":false,"!category":"function","!type":"fn() -> String"},"getView":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.14 undefined<br>Returns the application root component.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIComponent"},"createRootComponent":{"!description":"Creates and returns the root component. Override this method in your application implementation, if you want to override the default creation by metadata.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIComponent"},"setRootComponent":{"!description":"Sets the aggregated {@link #getRootComponent rootComponent}.","!static":false,"!category":"function","!type":"fn(oRootComponent: sap.ui.core.UIComponent) -> sap.ui.app.Application","parameters":{"oRootComponent":"type: sap.ui.core.UIComponent, description: The rootComponent to set"}}},"sap.ui.core.Core_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Core with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.Core"},"sap.ui.core.mvc.JSONView_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.mvc.JSONView"},"sap.ui.core.Core":{"detachValidationError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationError validationError} event of <code>sap.ui.core.Core<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The callback function to unregister"}},"fireFormatError":{"!description":"Fires event {@link #event:formatError formatError} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.Core","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"isStaticAreaRef":{"!description":"Used to find out whether a certain DOM element is the static area","!static":false,"!category":"function","!type":"fn(oDomRef: Object) -> Boolean","parameters":{"oDomRef":"type: object, description: undefined"}},"fireParseError":{"!description":"Fires event {@link #event:parseError parseError} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.Core","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"getRenderManager":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 0.15.0 Replaced by <code>createRenderManager()<\/code><br>undefined","!static":false,"!category":"function","!type":"fn()"},"fireValidationSuccess":{"!description":"Fires event {@link #event:validationSuccess validationSuccess} to attached listeners.\n\nExpects following event parameters: <ul> <li>'element' of type <code>sap.ui.core.Element<\/code> <\/li> <li>'property' of type <code>string<\/code> <\/li> <li>'type' of type <code>string<\/code> <\/li> <li>'newValue' of type <code>object<\/code> <\/li> <li>'oldValue' of type <code>object<\/code> <\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.Core","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"notifyContentDensityChanged":{"!description":"This method can be called to trigger realignment of controls after changing the cozy/compact CSS class of a DOM element, for example, the <code>&lt;body&gt;<\/code> tag.","!static":false,"!category":"function","!type":"fn()"},"getUIDirty":{"!description":"Returns <code>true<\/code> if there are any pending rendering tasks or when such rendering tasks are currently being executed.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getEventBus":{"!description":"Returns the event bus.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.EventBus"},"attachInit":{"!description":"Registers a given function that is executed after the framework has been initialized.\n\nThe given function will either be called as soon as the framework has been initialized or, if it has been initialized already, it will be called immediately.\n\nMore information about the initialization process and the steps it consists of can be found in the documentation topic \"{@link topic:91f2c9076f4d1014b6dd926db0e91070 Initialization Process}\".","!static":false,"!category":"function","!type":"fn(fnFunction: fn())","parameters":{"fnFunction":"type: function, description: Function to be after initialization of the framework"}},"detachValidationSuccess":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:validationSuccess validationSuccess} event of <code>sap.ui.core.Core<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"isLocked":{"!description":"Returns the locked state of the <code>sap.ui.core.Core<\/code>","!static":false,"!category":"function","!type":"fn() -> Boolean"},"lock":{"!description":"Locks the Core. No browser events are dispatched to the controls.\n\nLock should be called before and after the DOM is modified for rendering, roundtrips... Exceptions might be the case for asynchronous UI behavior","!static":false,"!category":"function","!type":"fn()"},"detachIntervalTimer":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.61 Use <code>IntervalTrigger.removeListener()<\/code> from \"sap/ui/core/IntervalTrigger\" module.<br>Unregisters a listener for the central interval timer.\n\nA listener will only be unregistered if the same function/context combination is given as in the <code>attachIntervalTimer<\/code> call.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: context object given during registration","fnFunction":"type: function, description: function to unregister"}},"isMobile":{"!description":"Check if the script is running on mobile","!static":false,"!category":"function","!type":"fn() -> Boolean"},"initLibrary":{"!description":"Provides the framework with information about a library.\n\nThis method is intended to be called exactly once while the main module of a library (its <code>library.js<\/code> module) is executing, typically at its begin. The single parameter <code>oLibInfo<\/code> is an info object that describes the content of the library.\n\nWhen the <code>oLibInfo<\/code> has been processed, a normalized version of it will be kept and will be returned as library information in later calls to {@link #getLoadedLibraries}. Finally, <code>initLibrary<\/code> fires (the currently private) {@link #event:LibraryChanged} event with operation 'add' for the newly loaded library.\n\n<h3>Side Effects<\/h3>\n\nWhile analyzing the <code>oLibInfo<\/code>, the framework takes some additional actions:\n\n<ul> <li>If the info object contains a list of <code>interfaces<\/code>, they will be registered with the {@link sap.ui.base.DataType} class to make them available as aggregation types in managed objects.<\/li>\n\n<li>If the object contains a list of <code>controls<\/code> or <code>elements<\/code>, {@link sap.ui.lazyRequire lazy stubs} will be created for their constructor as well as for their static <code>extend<\/code> and <code>getMetadata<\/code> methods.<br> <b>Note:<\/b> Future versions might abandon the concept of lazy stubs as it requires synchronous XMLHttpRequests which have been deprecated (see {@link http://xhr.spec.whatwg.org}). To be on the safe side, productive applications should always require any modules that they directly depend on.<\/li>\n\n<li>With the <code>noLibraryCSS<\/code> property, the library can be marked as 'theming-free'. Otherwise, the framework will add a &lt;link&gt; tag to the page's head, pointing to the library's theme-specific stylesheet. The creation of such a &lt;link&gt; tag can be suppressed with the {@link sap.ui.core.Configuration global configuration option} <code>preloadLibCss<\/code>. It can contain a list of library names for which no stylesheet should be included. This is e.g. useful when an application merges the CSS for multiple libraries and already loaded the resulting stylesheet.<\/li>\n\n<li>If a list of library <code>dependencies<\/code> is specified in the info object, those libraries will be loaded synchronously by <code>initLibrary<\/code>.<br> <b>Note:<\/b> Dependencies between libraries don't have to be modeled as AMD dependencies. Only when enums or types from an additional library are used in the coding of the <code>library.js<\/code> module, the library should be additionally listed in the AMD dependencies.<\/li> <\/ul>\n\nLast but not least, higher layer frameworks might want to include their own metadata for libraries. The property <code>extensions<\/code> might contain such additional metadata. Its structure is not defined by the framework, but it is strongly suggested that each extension only occupies a single property in the <code>extensions<\/code> object and that the name of that property contains some namespace information (e.g. library name that introduces the feature) to avoid conflicts with other extensions. The framework won't touch the content of <code>extensions<\/code> but will make it available in the library info objects returned by {@link #getLoadedLibraries}.\n\n<h3>Relationship to Descriptor for Libraries (manifest.json)<\/h3>\n\nThe information contained in <code>oLibInfo<\/code> is partially redundant to the content of the descriptor for the same library (its <code>manifest.json<\/code> file). Future versions of UI5 might ignore the information provided in <code>oLibInfo<\/code> and might evaluate the descriptor file instead. Library developers therefore should keep the information in both files in sync.\n\nWhen the <code>manifest.json<\/code> is generated from the <code>.library<\/code> file (which is the default for UI5 libraries built with Maven), then the content of the <code>.library<\/code> and <code>library.js<\/code> files must be kept in sync.","!static":false,"!category":"function","!type":"fn(oLibInfo: Object)","parameters":{"oLibInfo":"type: object, description: Info object for the library"}},"!description":"Core Class of the SAP UI Library.\n\nThis class boots the Core framework and makes it available for the application via method <code>sap.ui.getCore()<\/code>.\n\nExample: <pre>\n\n  var oCore = sap.ui.getCore();\n\n<\/pre>\n\nWith methods of the Core framework you can {@link #attachInit execute code} after the framework has been initialized. It provides access to the {@link #getConfiguration configuration} and exposes events that an application or a control can register to (e.g. {@link #event:localizationChanged localizationChanged}, {@link #event:parseError parseError}, {@link #event:validationError validationError}, {@link #event:formatError formatError}, {@link #event:validationSuccess validationSuccess}).\n\nExample: <pre>\n\n  oCore.attachInit(function() {\n    if ( oCore.getConfiguration().getRTL() ) {\n      ...\n    }\n  });\n\n  oCore.attachLocalizationChanged(function(oEvent) {\n    ...\n  });\n\n<\/pre>","detachFormatError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:formatError formatError} event of <code>sap.ui.core.Core<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The callback function to unregister"}},"attachValidationSuccess":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationSuccess validationSuccess} event of <code>sap.ui.core.Core<\/code>.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.\n\nPlease note that this event is a bubbling event and may already be canceled before reaching the core.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to a dummy event provider object","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: The object, that should be passed along with the event-object when firing the event"}},"getCurrentFocusedControlId":{"!description":"Returns the Id of the control/element currently in focus.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Core.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getModel":{"!description":"Get the model with the given model name.\n\nThe name can be omitted to reference the default model or it must be a non-empty string.\n\nNote: to be compatible with future versions of this API, applications must not use the value <code>null<\/code>, the empty string <code>\"\"<\/code> or the string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code> as model name.","!static":false,"!category":"function","!type":"fn(sName?: String | undefined) -> sap.ui.model.Model","parameters":{"sName":"type: string|undefined, description: name of the model to be retrieved"}},"loadLibrary":{"!description":"Loads the given library and its dependencies and makes its content available to the application.\n\n<h3>What it does<\/h3>\n\nWhen library preloads are not suppressed for the given library, then a library-preload bundle will be loaded for it. By default, the bundle will be loaded synchronously (for compatibility reasons). Only when the optional parameter <code>vUrl<\/code> is given as <code>true<\/code> or as a configuration object with a property of <code>async:true<\/code>, then the bundle will be loaded asynchronously and a <code>Promise<\/code> will be returned (preferred usage).\n\nAfter preloading the bundle, dependency information from the bundle is evaluated and any missing libraries are also preloaded.\n\nOnly then the library entry module (named <code><i>your/lib<\/i>/library.js<\/code>) will be required and executed. The module is supposed to call <code>sap.ui.getCore().initLibrary(...)<\/code> providing the framework with additional metadata about the library, e.g. its version, the set of contained enums, types, interfaces, controls and elements and whether the library requires CSS. If the library requires CSS, a &lt;link&gt; will be added to the page referring to the corresponding <code>library.css<\/code> stylesheet for the library and the current theme.\n\nWhen the optional parameter <code>vUrl<\/code> is given as a string or when a configuration object is given with a non-empty, string-valued property <code>url<\/code>, then that URL will be registered for the namespace of the library and all resources will be loaded from that location. This is convenience for a call like <pre>\n  sap.ui.loader.config({\n    paths: {\n      \"lib/with/slashes\": vUrl\n    }\n  });\n<\/pre>\n\nWhen the given library has been loaded already, no further action will be taken, especially, a given URL will not be registered! In the case of asynchronous loading, a Promise will be returned, but will be resolved immediately.\n\n<h3>When to use<\/h3>\n\nFor applications that follow the best practices and use components with component descriptors (manifest.json), the framework will load all declared mandatory libraries and their dependencies automatically before instantiating the application component.\n\nThe same is true for libraries that are listed in the bootstrap configuration (e.g. with the attribute <code>data-sap-ui-libs<\/code>). They will be loaded before the <code>init<\/code> event of the UI5 Core is fired.\n\nOnly when an app declares a library to be a lazy library dependency or when code does not use descriptors at all, then an explicit call to <code>loadLibrary<\/code> becomes necessary. The call should be made before artifacts (controls, elements, types, helpers, modules etc.) from the library are used or required. This allows the framework to optimize access to those artifacts.\n\nFor example, when an app uses a heavy-weight charting library that shouldn't be loaded during startup, it can declare it as \"lazy\" and load it just before it loads and displays a view that uses the charting library: <pre>\n  sap.ui.getCore().loadLibrary(\"heavy.charting\", {async: true})\n    .then(function() {\n      View.create({\n        name: \"myapp.views.HeavyChartingView\",\n        type: ViewType.XML\n      });\n    });\n<\/pre>","!static":false,"!category":"function","!type":"fn(sLibrary: String, vUrl?: String | Boolean | Object) -> Object | Promise","parameters":{"sLibrary":"type: string, description: name of the library to load","vUrl":"type: string|boolean|object, description: URL to load the library from or the async flag or a complex configuration object"}},"getControl":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use <code>sap.ui.core.Core.byId<\/code> instead!<br>Returns the registered element for the given ID, if any.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: undefined"}},"getLibraryResourceBundle":{"!description":"Retrieves a resource bundle for the given library and locale.\n\nIf only one argument is given, it is assumed to be the libraryName. The locale then falls back to the current {@link sap.ui.core.Configuration#getLanguage session locale}. If no argument is given, the library also falls back to a default: \"sap.ui.core\".\n\n<h3>Configuration via App Descriptor<\/h3> When the App Descriptor for the library is available without further request (manifest.json has been preloaded) and when the App Descriptor is at least of version 1.9.0 or higher, then this method will evaluate the App Descriptor entry <code>\"sap.ui5\" / \"library\" / \"i18n\"<\/code>. <ul> <li>When the entry is <code>true<\/code>, a bundle with the default name \"messagebundle.properties\" will be loaded<\/li> <li>If it is a string, then that string will be used as name of the bundle<\/li> <li>If it is <code>false<\/code>, no bundle will be loaded and the result will be <code>undefined<\/code><\/li> <\/ul>\n\n<h3>Caching<\/h3> Once a resource bundle for a library has been loaded, it will be cached by this method. Further calls for the same library and locale won't create new requests, but return the already loaded bundle. There's therefore no need for control code to cache the returned bundle for a longer period of time. Not further caching the result also prevents stale texts after a locale change.\n\n<h3>Asynchronous Loading<\/h3> The asynchronous variant of {@link #loadLibrary} will evaluate the same descriptor entry as described above. If it is not <code>false<\/code>, loading the main resource bundle of the library will become a subtask of the asynchronous loading of the library.\n\nDue to this preload of the main bundle and the caching behavior of this method, controls in such a library still can use the synchronous variant of <code>getLibraryResourceBundle<\/code> in their API, behavior and rendering code. Only when the bundle is needed at module execution time (by top level code in a control module), then the asynchronous variant of this method should be preferred.","!static":false,"!category":"function","!type":"fn(sLibraryName?: String, sLocale?: String, bAsync?: Boolean) -> jQuery.sap.util.ResourceBundle | Promise","parameters":{"sLocale":"type: string, description: Locale to retrieve the resource bundle for","sLibraryName":"type: string, description: Name of the library to retrieve the bundle for","bAsync":"type: boolean, description: Whether the resource bundle is loaded asynchronously"}},"unlock":{"!description":"Unlocks the Core.\n\nBrowser events are dispatched to the controls again after this method is called.","!static":false,"!category":"function","!type":"fn()"},"attachValidationError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:validationError validationError} event of <code>sap.ui.core.Core<\/code>.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.\n\nPlease note that this event is a bubbling event and may already be canceled before reaching the core.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to a dummy event provider object","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"fireValidationError":{"!description":"Fires event {@link #event:validationError validationError} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.Core","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event."}},"getLoadedLibraries":{"!description":"Returns a map of library info objects for all currently loaded libraries, keyed by their names.\n\nThe structure of the library info objects matches the structure of the info object that the {@link #initLibrary} method expects. Only property names documented with <code>initLibrary<\/code> should be accessed, any additional properties might change or disappear in future. When a property does not exists, its default value (as documented with <code>initLibrary<\/code>) should be assumed.\n\n<b>Note:<\/b> The returned info objects must not be modified. They might be a living copy of the internal data (for efficiency reasons) and the framework is not prepared to handle modifications to these objects.","!static":false,"!category":"function","!type":"fn() -> Object.<string,Object>"},"setRoot":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use {@link sap.ui.core.Control#placeAt oControl.placeAt(oDomRef, \"only\")} instead.<br>Implicitly creates a new <code>UIArea<\/code> (or reuses an exiting one) for the given DOM reference and adds the given control reference to the UIAreas content (existing content will be removed).","!static":false,"!category":"function","!type":"fn(oDomRef: String | Element, oControl: sap.ui.base.Interface | sap.ui.core.Control)","parameters":{"oDomRef":"type: string|Element, description: a DOM Element or Id (string) of the UIArea","oControl":"type: sap.ui.base.Interface|sap.ui.core.Control, description: the Control that should be the added to the <code>UIArea<\/code>."}},"detachControlEvent":{"!description":"Unregisters a listener for control events.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: Function to unregister"}},"byFieldGroupId":{"!description":"Returns a list of all controls with a field group ID. See {@link sap.ui.core.Control#checkFieldGroupIds Control.prototype.checkFieldGroupIds} for a description of the <code>vFieldGroupIds<\/code> parameter.","!static":false,"!category":"function","!type":"fn(vFieldGroupIds?: [String | String]) -> [sap.ui.core.Control]","parameters":{"vFieldGroupIds":"type: string|string[], description: ID of the field group or an array of field group IDs to match"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Core with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"detachParseError":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:parseError parseError} event of <code>sap.ui.core.Core<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The callback function to unregister."}},"!module":"sap/ui/core/Core","getRootComponent":{"!description":"Returns the instance of the root component (if exists).","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Component"},"!helpDescription":"Core Class of the SAP UI Library.\n\nThis class boots the Core framework and makes it available for the application via method <code>sap.ui.getCore()<\/code>.\n\nExample: <pre>\n\n  var oCore = sap.ui.getCore();\n\n<\/pre>\n\nWith methods of the Core framework you can {@link #attachInit execute code} after the framework has been initialized. It provides access to the {@link #getConfiguration configuration} and exposes events that an application or a control can register to (e.g. {@link #event:localizationChanged localizationChanged}, {@link #event:parseError parseError}, {@link #event:validationError validationError}, {@link #event:formatError formatError}, {@link #event:validationSuccess validationSuccess}).\n\nExample: <pre>\n\n  oCore.attachInit(function() {\n    if ( oCore.getConfiguration().getRTL() ) {\n      ...\n    }\n  });\n\n  oCore.attachLocalizationChanged(function(oEvent) {\n    ...\n  });\n\n<\/pre>","setModel":{"!description":"Sets or unsets a model for the given model name.\n\nThe <code>sName<\/code> must either be <code>undefined<\/code> (or omitted) or a non-empty string. When the name is omitted, the default model is set/unset.\n\nWhen <code>oModel<\/code> is <code>null<\/code> or <code>undefined<\/code>, a previously set model with that name is removed from the Core.\n\nAny change (new model, removed model) is propagated to all existing UIAreas and their descendants as long as a descendant doesn't have its own model set for the given name.\n\nNote: to be compatible with future versions of this API, applications must not use the value <code>null<\/code>, the empty string <code>\"\"<\/code> or the string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code> as model name.","!static":false,"!category":"function","!type":"fn(oModel: sap.ui.model.Model, sName?: String) -> sap.ui.core.Core","parameters":{"oModel":"type: sap.ui.model.Model, description: the model to be set or <code>null<\/code> or <code>undefined<\/code>","sName":"type: string, description: the name of the model or <code>undefined<\/code>"}},"unregisterPlugin":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 Plugins never have been meant as a public offering, but were intended for internal usage only. They unfortunately allow access to all internals of the Core and therefore break encapsulation and hinder evolution of the Core. The most common use case of accessing the set of all controls/elements or all components can now be addressed by using the APIs {@link sap.ui.core.Element.registry} or {@link sap.ui.core.Component.registry}, respectively. Future refactorings of the Core will only take existing plugins in the OpenUI5 repository into account.<br>Unregisters a Plugin out of the <code>sap.ui.core.Core<\/code>","!static":false,"!category":"function","!type":"fn(oPlugin: Object)","parameters":{"oPlugin":"type: object, description: reference to a Plugin object"}},"attachControlEvent":{"!description":"Registers a listener for control events.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Optional context object to call the callback on","fnFunction":"type: function, description: Callback to be called for each control event"}},"includeLibraryTheme":{"!description":"Includes a library theme into the current page (if a variant is specified it will include the variant library theme)","!static":false,"!category":"function","!type":"fn(sLibName: String, sVariant?: String, sQuery?: String)","parameters":{"sLibName":"type: string, description: the name of the UI library","sQuery":"type: string, description: to be used only by the Core","sVariant":"type: string, description: the variant to include (optional)"}},"getComponent":{"!description":"Returns the registered component for the given id, if any.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Component","parameters":{"sId":"type: string, description: undefined"}},"createRenderManager":{"!description":"Returns a new instance of the RenderManager for exclusive use by the caller.\n\nThe caller must take care to destroy the render manager when it is no longer needed. Calling this method before the Core has been {@link #isInitialized initialized}, is not recommended.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.RenderManager"},"setThemeRoot":{"!description":"Defines the root directory from below which UI5 should load the theme with the given name. Optionally allows restricting the setting to parts of a theme covering specific control libraries.\n\nExample: <pre>\n  sap.ui.getCore().setThemeRoot(\"my_theme\", \"https://mythemeserver.com/allThemes\");\n  sap.ui.getCore().applyTheme(\"my_theme\");\n<\/pre>\n\nwill cause the following file to be loaded (assuming that the bootstrap is configured to load libraries <code>sap.m<\/code> and <code>sap.ui.layout<\/code>): <pre>\n  https://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css\n  https://mythemeserver.com/allThemes/sap/ui/layout/themes/my_theme/library.css\n  https://mythemeserver.com/allThemes/sap/m/themes/my_theme/library.css\n<\/pre>\n\nIf parts of the theme are at different locations (e.g. because you provide a standard theme like \"sap_belize\" for a custom control library and this self-made part of the standard theme is at a different location than the UI5 resources), you can also specify for which control libraries the setting should be used, by giving an array with the names of the respective control libraries as second parameter: <pre>\n  sap.ui.getCore().setThemeRoot(\"sap_belize\", [\"my.own.library\"], \"https://mythemeserver.com/allThemes\");\n<\/pre>\n\nThis will cause the Belize theme to be loaded from the UI5 location for all standard libraries. Resources for styling the <code>my.own.library<\/code> controls will be loaded from the configured location: <pre>\n  https://openui5.hana.ondemand.com/resources/sap/ui/core/themes/sap_belize/library.css\n  https://openui5.hana.ondemand.com/resources/sap/ui/layout/themes/sap_belize/library.css\n  https://openui5.hana.ondemand.com/resources/sap/m/themes/sap_belize/library.css\n  https://mythemeserver.com/allThemes/my/own/library/themes/sap_belize/library.css\n<\/pre>\n\nIf the custom theme should be loaded initially (via bootstrap attribute), the <code>themeRoots<\/code> property of the <code>window[\"sap-ui-config\"]<\/code> object must be used instead of calling <code>sap.ui.getCore().setThemeRoot(...)<\/code> in order to configure the theme location early enough.","!static":false,"!category":"function","!type":"fn(sThemeName: String, aLibraryNames?: [String], sThemeBaseUrl: String, bForceUpdate?: Boolean) -> sap.ui.core.Core","parameters":{"sThemeName":"type: string, description: Name of the theme for which to configure the location","bForceUpdate":"type: boolean, description: Force updating URLs of currently loaded theme","aLibraryNames":"type: string[], description: Optional library names to which the configuration should be restricted","sThemeBaseUrl":"type: string, description: Base URL below which the CSS file(s) will be loaded from"}},"getElementById":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use <code>sap.ui.core.Core.byId<\/code> instead!<br>Returns the registered element for the given ID, if any.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: undefined"}},"attachLocalizationChanged":{"!description":"Register a listener for the {@link #event:localizationChanged localizationChanged} event.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the function on","fnFunction":"type: function, description: Callback to be called when the event occurs"}},"createUIArea":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.1 use {@link sap.ui.core.Control#placeAt Control#placeAt} instead!<br>Creates a new {@link sap.ui.core.UIArea UIArea}.","!static":false,"!category":"function","!type":"fn(oDomRef: String | Element) -> sap.ui.core.UIArea","parameters":{"oDomRef":"type: string|Element, description: a DOM Element or ID string of the UIArea"}},"detachLocalizationChanged":{"!description":"Unregister a listener from the {@link #event:localizationChanged localizationChanged} event.\n\nThe listener will only be unregistered if the same function/context combination is given as in the call to <code>attachLocalizationListener<\/code>.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: Callback to be deregistered"}},"!proto":"sap.ui.base.Object","applyTheme":{"!description":"Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).\n\nBy default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]). Different locations can be configured by using the method setThemePath() or by using the second parameter \"sThemeBaseUrl\" of applyTheme(). Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.\n\nsThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css then the URL that needs to be given is: http://my.server/myapp/resources All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.\n\nIf the theme resources are not all either below this base location or with their respective libraries, then setThemePath must be used to configure individual locations.","!static":false,"!category":"function","!type":"fn(sThemeName: String, sThemeBaseUrl?: String)","parameters":{"sThemeName":"type: string, description: the name of the theme to be loaded","sThemeBaseUrl":"type: string, description: the (optional) base location of the theme"}},"isInitialized":{"!description":"Returns true if the Core has already been initialized. This means that instances of RenderManager etc. do already exist and the init event has already been fired (and will not be fired again).","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!category":"class","hasModel":{"!description":"Check if a Model is set to the core","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getStaticAreaRef":{"!description":"Returns the static, hidden area DOM element belonging to this core instance.\n\nIt can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.\n\nIf it is not yet available, a DIV is created and appended to the body.","!static":false,"!category":"function","!type":"fn() -> Element"},"getConfiguration":{"!description":"Returns the Configuration of the Core.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Configuration"},"isThemeApplied":{"!description":"Returns true, if the styles of the current theme are already applied, false otherwise.\n\nThis function must not be used before the init event of the Core. If the styles are not yet applied a theme changed event will follow when the styles will be applied.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"attachParseError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:parseError parseError} event of <code>sap.ui.core.Core<\/code>.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.\n\nPlease note that this event is a bubbling event and may already be canceled before reaching the core.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to a dummy event provider object","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"loadLibraries":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":false,"!category":"function","!type":"fn(aLibraries: [String], mOptions?: Object) -> Promise | undefined","parameters":{"mOptions":"type: object, description: configuration options","aLibraries":"type: string[], description: set of libraries that should be loaded"}},"createComponent":{"!description":"Creates a component with the provided id and settings.\n\nWhen the optional parameter <code>sUrl<\/code> is given, then all request for resources of the library will be redirected to the given URL. This is convenience for a call to <pre>\n  sap.ui.loader.config({\n      paths: {\n        \"lib/with/slashes\": vUrl\n      }\n  });\n<\/pre>","!static":false,"!category":"function","!type":"fn(vComponent: String | Object, sUrl?: String, sId: String, mSettings: Object)","parameters":{"mSettings":"type: object, description: the settings object for the component","sUrl":"type: string, description: the URL to load the component from","vComponent":"type: string|object, description: name of the component to import or object containing all needed parameters","sId":"type: string, description: the ID for the component instance"}},"attachFormatError":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:formatError formatError} event of <code>sap.ui.core.Core<\/code>.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.\n\nPlease note that this event is a bubbling event and may already be canceled before reaching the core.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Core","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to a dummy event provider object","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getApplication":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.15.1 The Component class is enhanced to take care about the Application code.<br>Returns the instance of the application (if exists).","!static":false,"!category":"function","!type":"fn() -> sap.ui.app.Application"},"attachInitEvent":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.13.2 Register with the more convenient {@link #attachInit} function instead<br>Registers a given function that is executed after the framework has been initialized.\n\nThe method is executed only once and only if the framework has not been initialized already. This could be checked by calling {@link #isInitialized}, but in most cases it is more convenient to use {@link #attachInit} instead. This guarantees that the given function is executed exactly once, independent of the state of the framework.","!static":false,"!category":"function","!type":"fn(fnFunction: fn())","parameters":{"fnFunction":"type: function, description: Function that is called after initialization of the framework"}},"applyChanges":{"!description":"Enforces an immediate update of the visible UI (aka \"rendering\").\n\nIn general, applications should avoid calling this method and instead let the framework manage any necessary rendering.","!static":false,"!category":"function","!type":"fn()"},"getTemplate":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.29.1 Require 'sap/ui/core/tmpl/Template' and use {@link sap.ui.core.tmpl.Template.byId Template.byId} instead.<br>Returns the registered template for the given id, if any.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Component","parameters":{"sId":"type: string, description: undefined"}},"getMessageManager":{"!description":"Returns the active <code>MessageManager<\/code> instance.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.message.MessageManager"},"registerPlugin":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 Plugins never have been meant as a public offering, but were intended for internal usage only. They unfortunately allow access to all internals of the Core and therefore break encapsulation and hinder evolution of the Core. The most common use case of accessing the set of all controls/elements or all components can now be addressed by using the APIs {@link sap.ui.core.Element.registry} or {@link sap.ui.core.Component.registry}, respectively. Future refactorings of the Core will only take existing plugins in the OpenUI5 repository into account.<br>Registers a Plugin to the <code>sap.ui.core.Core<\/code>, which lifecycle will be managed (start and stop).\n\nPlugin object need to implement two methods: <ul> <li><code>startPlugin(oCore)<\/code>: will be invoked, when the Plugin should start (as parameter the reference to the Core will be provided<\/li> <li><code>stopPlugin()<\/code>: will be invoked, when the Plugin should stop<\/li> <\/ul>","!static":false,"!category":"function","!type":"fn(oPlugin: Object)","parameters":{"oPlugin":"type: object, description: reference to a Plugin object"}},"attachThemeChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:ThemeChanged ThemeChanged} event of this <code>sap.ui.core.Core<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to a dummy event provider object","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getUIArea":{"!description":"Returns the {@link sap.ui.core.UIArea UIArea} with the given ID or that belongs to the given DOM element.","!static":false,"!category":"function","!type":"fn(o: String | Element) -> sap.ui.core.UIArea","parameters":{"o":"type: string|Element, description: DOM element or ID of the UIArea"}},"detachThemeChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:ThemeChanged ThemeChanged} event of this <code>sap.ui.core.Core<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Object on which the given function had to be called.","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"byId":{"!description":"Returns the registered element with the given ID, if any.\n\nThe ID must be the globally unique ID of an element, the same as returned by <code>oElement.getId()<\/code>. When the element has been created from a declarative source (e.g. XMLView), that source might have used a shorter, non-unique local ID. A search for such a local ID cannot be executed with this method. It can only be executed on the corresponding scope (e.g. on an XMLView instance), by using the {@link sap.ui.core.mvc.View#byId View#byId} method of that scope.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: ID of the element to search for"}},"attachIntervalTimer":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.61 Use <code>IntervalTrigger.addListener()<\/code> from \"sap/ui/core/IntervalTrigger\" module.<br>Registers a listener to the central interval timer.\n\nWhen called, the context of the listener (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to the interval timer instance.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Optional context object to call the callback on","fnFunction":"type: function, description: Callback to be called periodically"}}},"sap.ui.core.IContextMenu":{"!description":"Marker interface for controls that can serve as a context menu.\n\nImplementation of this interface should implement the <code>openAsContextMenu<\/code> method.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.model.FormatException":{"!description":"Instances of this exception are thrown when converting a model value to its representation on the UI fails.","!constructorDescription":"Creates a new FormatException.","!module":"sap/ui/model/FormatException","!helpDescription":"Instances of this exception are thrown when converting a model value to its representation on the UI fails.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.odata.v2.ODataTreeBinding":{"!description":"Tree binding implementation for OData models.\n\n<h3>Hierarchy Annotations<\/h3> To use the v2.ODataTreeBinding with an OData service which exposes hierarchy annotations, see the <b>\"SAP Annotations for OData Version 2.0\"<\/b> specification. The required property annotations as well as accepted/default values are documented in this specification.\n\nServices which include the <code>hierarchy-node-descendant-count-for<\/code> annotation and expose the data points sorted in a depth-first, pre-order manner, can use an optimized auto-expand feature by specifying the <code>numberOfExpandedLevels<\/code> in the binding parameters. This will pre-expand the hierarchy to the given number of levels, with only a single initial OData request.\n\nFor services without the <code>hierarchy-node-descendant-count-for<\/code> annotation, the <code>numberOfExpandedLevels<\/code> property is not supported and deprecated.\n\n<h3>Navigation Properties<\/h3> <b>Note:<\/b> The use of navigation properties to build up the hierarchy structure is deprecated and it is recommended to use the hierarchy annotations mentioned above instead.\n\nIn addition to the hierarchy annotations, the <code>ODataTreeBinding<\/code> also supports (cyclic) references between entities based on navigation properties. They have to be specified with the binding parameter <code>navigation<\/code>. The value for that parameter has to be structured as a map object where the keys are entity names and the values are names of navigation properties.\n\nExample: <pre>\n  oTree.bindItems({\n\n    path: \"Employees\",\n    template: ...\n\n\t   parameters: {\n      navigation: {\n        \"Employees\": \"toColleagues\"\n      }\n    }\n  });\n<\/pre>\n\n<h3>Operation Modes<\/h3> For a full definition and explanation of all OData binding operation modes see {@link sap.ui.model.odata.OperationMode}.\n\n<h4>OperationMode.Server<\/h4> Filtering on the <code>ODataTreeBinding<\/code> is only supported with ({@link sap.ui.model.FilterType.Application application filters}). However please be aware that this applies only to filters which do not prevent the creation of a hierarchy. So filtering on a property (e.g. a \"Customer\") is fine, as long as the application can ensure that the responses from the backend are sufficient to create a valid hierarchy on the client. Subsequent paging requests for sibling and child nodes must also return responses since the filters will be sent with every request. Using control-defined filters ({@link sap.ui.model.FilterType.Control FilterType.Control}) via the <code>filter()<\/code> function is not supported for the operation mode <code>Server<\/code>.\n\n<h4>OperationMode.Client and OperationMode.Auto<\/h4> The ODataTreeBinding supports control-defined filters only in operation modes <code>Client<\/code> and <code>Auto<\/code>. In these operation modes, the filters and sorters will be applied on the client, like for the <code>v2.ODataListBinding<\/code>.\n\nThe operation modes <code>Client<\/code> and <code>Auto<\/code> are only supported for services which expose the hierarchy annotations mentioned above, but do <b>not<\/b> expose the <code>hierarchy-node-descendant-count-for<\/code> annotation. Services with hierarchy annotations including the <code>hierarchy-node-descendant-count-for<\/code> annotation, do <b>not<\/b> support the operation modes <code>Client<\/code> and <code>Auto<\/code>.","getRootLevel":{"!description":"Returns the rootLevel","!static":false,"!category":"function","!type":"fn() -> Number"},"getTreeAnnotation":{"!description":"Returns the value of a given hierarchy annotation.","!static":false,"!category":"function","!type":"fn(sAttributeName: String) -> String | undefined","parameters":{"sAttributeName":"type: string, description: The name of the hierarchy annotation"}},"setRootLevel":{"!description":"Sets the rootLevel The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services. This is only possible (and necessary) for OData services implementing the hierarchy annotation specification, or when providing the annotation information locally as a binding parameter. See the constructor for API documentation on this.","!static":false,"!category":"function","!type":"fn(iRootLevel: Number)","parameters":{"iRootLevel":"type: int, description: undefined"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v2.ODataTreeBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"hasChildren":{"!description":"Returns if the node has child nodes. If the ODataTreeBinding is running with hierarchy annotations, a context with the property values \"expanded\" or \"collapsed\" for the drilldown state property, returns true. Entities with drilldown state \"leaf\" return false.\n\nThis function is not available when the annotation \"hierarchy-node-descendant-count-for\" is exposed on the service.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> Boolean","parameters":{"oContext":"type: sap.ui.model.Context, description: the context element of the node"}},"expandNodeToLevel":{"!description":"Expand a nodes subtree to a given level.\n\nThis API is only supported in <code>OperationMode.Server<\/code> and if the OData service implements the full specification of the \"hierarchy-node-for\" annotation.","!static":false,"!category":"function","!type":"fn(iIndex: Number, iLevel: Number, bSuppressChange: Boolean) -> Promise","parameters":{"iLevel":"type: int, description: Level to which the data should be expanded","bSuppressChange":"type: boolean, description: If set to true, no change event will be fired","iIndex":"type: int, description: Absolute row index"}},"getRootContexts":{"!description":"Returns root contexts for the tree. You can specify the start index and the length for paging requests. This function is not available when the annotation \"hierarchy-node-descendant-count-for\" is exposed on the service.","!static":false,"!category":"function","!type":"fn(iStartIndex?: Number, iLength?: Number, iThreshold?: Number) -> [sap.ui.model.Context]","parameters":{"iThreshold":"type: int, description: the number of entities which should be retrieved in addition to the given length. A higher threshold reduces the number of backend requests, yet these request blow up in size, since more data is loaded.","iStartIndex":"type: int, description: the start index of the requested contexts","iLength":"type: int, description: the requested amount of contexts. If none given, the default value is the size limit of the underlying sap.ui.model.odata.v2.ODataModel instance."}},"!proto":"sap.ui.model.TreeBinding","refresh":{"!description":"Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For server side models this should refetch the data from the server. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, use the parameter <code>bForceUpdate<\/code>.","!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean, sGroupId?: String)","parameters":{"bForceUpdate":"type: boolean, description: Update the bound control even if no data has been changed","sGroupId":"type: string, description: The group Id for the refresh"}},"!category":"class","sort":{"!description":"Sorts the Tree according to the given Sorter(s). In OperationMode.Client or OperationMode.Auto (if the given threshold is satisfied), the sorters are applied locally on the client.","!static":false,"!category":"function","!type":"fn(aSorters: [sap.ui.model.Sorter]) -> sap.ui.model.odata.v2.ODataTreeBinding","parameters":{"aSorters":"type: sap.ui.model.Sorter[]|sap.ui.model.Sorter, description: the Sorter or an Array of sap.ui.model.Sorter instances"}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataTreeBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"filter":{"!description":"Applies the given filters to the ODataTreeBinding.\n\nPlease note that filters of type <code>FilterType.Control<\/code> are not supported for <code>OperationMode.Server<\/code>, here only filters of type <code>FilterType.Application<\/code> are allowed. Filters given via the constructor are always of type <code>Application<\/code> and will be sent with every backend request. See the constructor documentation for more information.\n\nSince 1.34.0, complete client-side filtering is supported for <code>OperationMode.Client<\/code> and also in <code>OperationMode.Auto<\/code> if the backend count is lower than the threshold. In this case, all types of filters will be applied on the client. See also: {@link sap.ui.model.odata.OperationMode.Auto}, {@link sap.ui.model.FilterType}.\n\nFor the <code>OperationMode.Client<\/code> and <code>OperationMode.Auto<\/code>, you may also specify the binding parameter <code>useServersideApplicationFilters<\/code> in the constructor. If it is set, the filters of type <code>Application<\/code> will always be applied on the backend and trigger an OData request. See the constructor documentation for more information.","!static":false,"!category":"function","!type":"fn(aFilters: [sap.ui.model.Filter], sFilterType: sap.ui.model.FilterType) -> sap.ui.model.odata.v2.ODataTreeBinding","parameters":{"aFilters":"type: sap.ui.model.Filter[]|sap.ui.model.Filter, description: Filter or array of filters to apply","sFilterType":"type: sap.ui.model.FilterType, description: Type of the filter which should be adjusted. If it is not given, the type <code>FilterType.Control<\/code> is assumed"}},"getChildCount":{"!description":"Returns the number of child nodes. This function is not available when the annotation \"hierarchy-node-descendant-count-for\" is exposed on the service.","!static":false,"!category":"function","!type":"fn(oContext: Object) -> Number","parameters":{"oContext":"type: Object, description: the context element of the node"}},"!module":"sap/ui/model/odata/v2/ODataTreeBinding","getDownloadUrl":{"!description":"Get a download URL with the specified format considering the sort/filter/custom parameters.","!static":false,"!category":"function","!type":"fn(sFormat: String) -> String","parameters":{"sFormat":"type: string, description: Value for the $format Parameter"}},"!helpDescription":"Tree binding implementation for OData models.\n\n<h3>Hierarchy Annotations<\/h3> To use the v2.ODataTreeBinding with an OData service which exposes hierarchy annotations, see the <b>\"SAP Annotations for OData Version 2.0\"<\/b> specification. The required property annotations as well as accepted/default values are documented in this specification.\n\nServices which include the <code>hierarchy-node-descendant-count-for<\/code> annotation and expose the data points sorted in a depth-first, pre-order manner, can use an optimized auto-expand feature by specifying the <code>numberOfExpandedLevels<\/code> in the binding parameters. This will pre-expand the hierarchy to the given number of levels, with only a single initial OData request.\n\nFor services without the <code>hierarchy-node-descendant-count-for<\/code> annotation, the <code>numberOfExpandedLevels<\/code> property is not supported and deprecated.\n\n<h3>Navigation Properties<\/h3> <b>Note:<\/b> The use of navigation properties to build up the hierarchy structure is deprecated and it is recommended to use the hierarchy annotations mentioned above instead.\n\nIn addition to the hierarchy annotations, the <code>ODataTreeBinding<\/code> also supports (cyclic) references between entities based on navigation properties. They have to be specified with the binding parameter <code>navigation<\/code>. The value for that parameter has to be structured as a map object where the keys are entity names and the values are names of navigation properties.\n\nExample: <pre>\n  oTree.bindItems({\n\n    path: \"Employees\",\n    template: ...\n\n\t   parameters: {\n      navigation: {\n        \"Employees\": \"toColleagues\"\n      }\n    }\n  });\n<\/pre>\n\n<h3>Operation Modes<\/h3> For a full definition and explanation of all OData binding operation modes see {@link sap.ui.model.odata.OperationMode}.\n\n<h4>OperationMode.Server<\/h4> Filtering on the <code>ODataTreeBinding<\/code> is only supported with ({@link sap.ui.model.FilterType.Application application filters}). However please be aware that this applies only to filters which do not prevent the creation of a hierarchy. So filtering on a property (e.g. a \"Customer\") is fine, as long as the application can ensure that the responses from the backend are sufficient to create a valid hierarchy on the client. Subsequent paging requests for sibling and child nodes must also return responses since the filters will be sent with every request. Using control-defined filters ({@link sap.ui.model.FilterType.Control FilterType.Control}) via the <code>filter()<\/code> function is not supported for the operation mode <code>Server<\/code>.\n\n<h4>OperationMode.Client and OperationMode.Auto<\/h4> The ODataTreeBinding supports control-defined filters only in operation modes <code>Client<\/code> and <code>Auto<\/code>. In these operation modes, the filters and sorters will be applied on the client, like for the <code>v2.ODataListBinding<\/code>.\n\nThe operation modes <code>Client<\/code> and <code>Auto<\/code> are only supported for services which expose the hierarchy annotations mentioned above, but do <b>not<\/b> expose the <code>hierarchy-node-descendant-count-for<\/code> annotation. Services with hierarchy annotations including the <code>hierarchy-node-descendant-count-for<\/code> annotation, do <b>not<\/b> support the operation modes <code>Client<\/code> and <code>Auto<\/code>.","getNodeContexts":{"!description":"Returns the contexts of the child nodes for the given context. This function is not available when the annotation \"hierarchy-node-descendant-count-for\" is exposed on the service.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context, iStartIndex: Number, iLength: Number, iThreshold: Number) -> [sap.ui.model.Context]","parameters":{"iThreshold":"type: int, description: undefined","oContext":"type: sap.ui.model.Context, description: the context for which the child nodes should be retrieved","iStartIndex":"type: int, description: the start index of the requested contexts","iLength":"type: int, description: the requested amount of contexts"}},"initialize":{"!description":"Initialize binding. Fires a change if data is already available ($expand) or a refresh. If metadata is not yet available, do nothing, method will be called again when metadata is loaded.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.odata.v2.ODataTreeBinding"}},"sap.ui.model.json.JSONModel":{"!description":"Model implementation for JSON format","setJSON":{"!description":"Sets the data, passed as a string in JSON format, to the model.","!static":false,"!category":"function","!type":"fn(sJSON: String, bMerge?: Boolean)","parameters":{"bMerge":"type: boolean, description: whether to merge the data instead of replacing it","sJSON":"type: string, description: the JSON data to set on the model"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.json.JSONModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getProperty":{"!description":"Returns the value for the property with the given <code>sPropertyName<\/code>","!static":false,"!category":"function","!type":"fn(sPath: String, oContext?: sap.ui.model.Context) -> Object","parameters":{"sPath":"type: string, description: the path to the property","oContext":"type: sap.ui.model.Context, description: the context which will be used to retrieve the property"}},"setData":{"!description":"Sets the data, passed as a JS object tree, to the model.","!static":false,"!category":"function","!type":"fn(oData: Object, bMerge?: Boolean)","parameters":{"bMerge":"type: boolean, description: whether to merge the data instead of replacing it","oData":"type: object, description: the data to set on the model"}},"!proto":"sap.ui.model.ClientModel","!category":"class","loadData":{"!description":"Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model. Note: Due to browser security restrictions, most \"Ajax\" requests are subject to the same origin policy, the request can not successfully retrieve data from a different domain, subdomain, or protocol.","!static":false,"!category":"function","!type":"fn(sURL: String, oParameters?: Object | String, bAsync?: Boolean, sType?: String, bMerge?: Boolean, bCache?: Boolean, mHeaders?: Object) -> Promise | undefined","parameters":{"sType":"type: string, description: The type of request to make (\"POST\" or \"GET\"), default is \"GET\". Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.","bMerge":"type: boolean, description: Whether the data should be merged instead of replaced","bCache":"type: boolean, description: Disables caching if set to false. Default is true.","sURL":"type: string, description: A string containing the URL to which the request is sent.","mHeaders":"type: object, description: An object of additional header key/value pairs to send along with the request","oParameters":"type: object|string, description: A map or string that is sent to the server with the request. Data that is sent to the server is appended to the URL as a query string. If the value of the data parameter is an object (map), it is converted to a string and url-encoded before it is appended to the URL.","bAsync":"type: boolean, description: By default, all requests are sent asynchronous (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active."}},"extend":{"!description":"Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"dataLoaded":{"!description":"Returns a Promise of the current data-loading state. Every currently running {@link sap.ui.model.json.JSONModel#loadData} call is respected by the returned Promise. This also includes a potential loadData call from the JSONModel's constructor in case a URL was given. The data-loaded Promise will resolve once all running requests have finished. Only request, which have been queued up to the point of calling this function will be respected by the returned Promise.","!static":false,"!category":"function","!type":"fn() -> Promise"},"!constructorDescription":"Constructor for a new JSONModel.\n\nThe observation feature is experimental! When observation is activated, the application can directly change the\nJS objects without the need to call setData, setProperty or refresh. Observation does only work for existing\nproperties in the JSON, it cannot detect new properties or new array entries.","!module":"sap/ui/model/json/JSONModel","!helpDescription":"Model implementation for JSON format","setProperty":{"!description":"Sets a new value for the given property <code>sPropertyName<\/code> in the model. If the model value changed all interested parties are informed.","!static":false,"!category":"function","!type":"fn(sPath: String, oValue: Object, oContext?: Object, bAsyncUpdate?: Boolean) -> Boolean","parameters":{"oValue":"type: any, description: value to set the property to","sPath":"type: string, description: path of the property to set","oContext":"type: object, description: the context which will be used to set the property","bAsyncUpdate":"type: boolean, description: whether to update other bindings dependent on this property asynchronously"}},"getJSON":{"!description":"Serializes the current JSON data of the model into a string. Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.model.odata.type.Date":{"!description":"This class represents the OData V4 primitive type <code>Edm.Date<\/code>.\n\nIn {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code> in the format \"yyyy-MM-dd\".\n\n<b>Note: For an OData V2 service use {@link sap.ui.model.odata.type.DateTime} with the constraint <code>displayFormat: \"Date\"<\/code> to display only a date.<\/b>","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Date with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Date.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.Date<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(vValue: String | Date, sTargetType: String) -> String | Date","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"object\" (since 1.69.0), \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}; see {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|Date, description: the value to be formatted; <code>string<\/code> values are expected in the format \"yyyy-MM-dd\" used by OData V4; <code>Date<\/code> objects are expected to represent UTC as used by OData V2"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Date","!helpDescription":"This class represents the OData V4 primitive type <code>Edm.Date<\/code>.\n\nIn {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code> in the format \"yyyy-MM-dd\".\n\n<b>Note: For an OData V2 service use {@link sap.ui.model.odata.type.DateTime} with the constraint <code>displayFormat: \"Date\"<\/code> to display only a date.<\/b>","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the given constraints.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value to a date.","!static":false,"!category":"function","!type":"fn(vValue: String | Date, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); must be \"object\" (since 1.69.0), \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}; see {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|Date, description: the value to be parsed, maps <code>\"\"<\/code> to <code>null<\/code>; <code>Date<\/code> objects are expected to represent local time and are supported if and only if source type is \"object\""}}},"sap.ui.model.odata.type.Single":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Single<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Single with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Single.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a primitive type <code>Edm.Single<\/code>.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(vValue: String | Number, sTargetType: String) -> Number | String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|number, description: the value to be formatted, which is represented as a number in the model"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Single","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.Single<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>number<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(fValue: Number)","parameters":{"fValue":"type: number, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given type, to an Edm.Single in <code>number<\/code> representation.","!static":false,"!category":"function","!type":"fn(vValue: String | Number, sSourceType: String) -> Number","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); may be \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|number, description: the value to be parsed; the empty string and <code>null<\/code> are parsed to <code>null<\/code>; note that there is no way to enter <code>Infinity<\/code> or <code>NaN<\/code> values"}}},"sap.ui.base.ManagedObjectMetadata_obj":{"!type":"fn(sClassName: String, oClassInfo: Object)","prototype":"sap.ui.base.ManagedObjectMetadata"},"sap.ui.core.Toolbar":{"!description":"Marker interface for toolbar controls.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.model.CompositeDataState_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.CompositeDataState with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.DataState.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.CompositeDataState"},"sap.ui.test.matchers.Interactable":{"!description":"Checks if a control is currently able to take user interactions. OPA5 will automatically apply this matcher if you specify actions in {@link sap.ui.test.Opa5#waitFor}. A control will be filtered out by this matcher when: <ul> <li> The control is invisible (using the visible matcher) <\/li> <li> The control or its parents are busy <\/li> <li> The control or its parents are not enabled <\/li> <li> The control is hidden behind a dialog <\/li> <li> The UIArea of the control needs new rendering <\/li> <\/ul> Since 1.53, Interactable no longer uses internal autoWait functionality. Interactable matcher might be made private in the near future. It is recommended to enable autoWait OPA option instead of using the Interactable matcher directly.","extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.Interactable with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.Interactable.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/test/matchers/Interactable","!helpDescription":"Checks if a control is currently able to take user interactions. OPA5 will automatically apply this matcher if you specify actions in {@link sap.ui.test.Opa5#waitFor}. A control will be filtered out by this matcher when: <ul> <li> The control is invisible (using the visible matcher) <\/li> <li> The control or its parents are busy <\/li> <li> The control or its parents are not enabled <\/li> <li> The control is hidden behind a dialog <\/li> <li> The UIArea of the control needs new rendering <\/li> <\/ul> Since 1.53, Interactable no longer uses internal autoWait functionality. Interactable matcher might be made private in the near future. It is recommended to enable autoWait OPA option instead of using the Interactable matcher directly.","!proto":"sap.ui.test.matchers.Matcher","!category":"class"},"sap.ui.core.search.SearchProvider_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.search.SearchProvider"},"sap.ui.model.odata.type.ODataType_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.ODataType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.ODataType"},"sap.ui.model.analytics.odata4analytics.ParameterizationRequest_obj":{"!type":"fn(oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization)","prototype":"sap.ui.model.analytics.odata4analytics.ParameterizationRequest"},"jQuery.sap.act":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/ActivityDetection} instead<br>undefined","attachActivate":{"!description":"Registers the given handler to the activity event, which is fired when an activity was detected after a certain period of inactivity.\n\nThe Event is not fired for Internet Explorer 8.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)"},"detachActivate":{"!description":"Deregisters a previously registered handler from the activity event.","!static":"true","!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)"},"!module":"jquery.sap.act","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/ui/util/ActivityDetection} instead<br>undefined","refresh":{"!description":"Reports an activity.","!static":"true","!category":"function","!type":"fn()"},"!category":"namespace","isActive":{"!description":"Checks whether recently an activity was detected.","!static":"true","!category":"function","!type":"fn()"}},"sap.ui.model.Binding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.Binding"},"sap.ui.core.dnd.IDragInfo":{"!description":"Marker interface for drag configuration providing information about the source of the drag operation.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.core.VerticalAlign":{"!description":"Configuration options for vertical alignments, for example of a layout cell content within the borders.","!module":"sap/ui/core/library","Top":{"!description":"Content is aligned at the top.","!category":"enum","!type":"String"},"Bottom":{"!description":"Content is aligned at the bottom.","!category":"enum","!type":"String"},"!category":"static class","Inherit":{"!description":"Content respect the parent's vertical alignment.","!category":"enum","!type":"String"},"Middle":{"!description":"Content is centered vertically .","!category":"enum","!type":"String"}},"sap.ui.core.dnd.DragDropBase_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DragDropBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.dnd.DragDropBase"},"sap.ui.model.DataState_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.DataState with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.DataState"},"sap.ui.model.analytics.odata4analytics.EntitySet":{"!description":"Representation of an OData entity set.","getUpdatablePropertyNameSet":{"!description":"Get names of properties in this entity set that can be updated","!static":false,"!category":"function","!type":"fn() -> Object"},"!constructorDescription":"Create a representation of an OData entity set in the context of an analytic\nquery. Do not create your own instances.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of an OData entity set.","!proto":"sap.ui.base.Object","getEntityType":{"!description":"Get entity type used for this entity set","!static":false,"!category":"function","!type":"fn() -> Object"},"getSetDescription":{"!description":"Get full description for this entity set","!static":false,"!category":"function","!type":"fn() -> Object"},"!category":"class","getQName":{"!description":"Get the fully qualified name for this entity type","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.test.actions.Drag_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Drag with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.actions.Drag"},"sap.ui.core.CSSSize":{"!description":"A string type that represents CSS size values.\n\nThe CSS specifications calls this the <code>'&lt;length&gt; type'<\/code>. Allowed values are CSS sizes like \"1px\" or \"2em\" or \"50%\". The special values <code>auto<\/code> and <code>inherit<\/code> are also accepted as well as mathematical expressions using the CSS3 <code>calc(<i>expression<\/i>)<\/code> operator. Furthermore, length units representing a percentage of the current viewport dimensions: width (vw), height (vh), the smaller of the two (vmin), or the larger of the two (vmax) can also be defined as a CSS size.\n\nNote that CSS does not allow all these values for every CSS property representing a size. E.g. <code>padding-left<\/code> doesn't allow the value <code>auto<\/code>. So even if a value is accepted by <code>sap.ui.core.CSSSize<\/code>, it still might have no effect in a specific context. In other words: UI5 controls usually don't extend the range of allowed values in CSS.\n\n<b>Units<\/b>\n\nValid font-relative units are <code>em, ex<\/code> and <code>rem<\/code>. Viewport relative units <code>vw, vh, vmin, vmax<\/code> are also valid. Supported absolute units are <code>cm, mm, in, pc, pt<\/code> and <code>px<\/code>.Other units are not supported yet.\n\n<b>Mathematical Expressions<\/b>\n\nExpressions inside the <code>calc()<\/code> operator are only roughly checked for validity. Not every value that this type accepts might be a valid expression in the sense of the CSS spec. But vice versa, any expression that is valid according to the spec should be accepted by this type. The current implementation is based on the {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April 2015}.\n\nNoteworthy details: <ul> <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise<\/li> <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)<\/li> <li>semantic constraints like type restrictions are not checked<\/li> <\/ul>\n\nFuture versions of UI5 might check <code>calc()<\/code> expressions in more detail, so applications should not assume that a value, that is invalid according to the CSS spec but currently accepted by this type still will be accepted by future versions of this type.","!module":"sap/ui/core/library","!helpDescription":"A string type that represents CSS size values.\n\nThe CSS specifications calls this the <code>'&lt;length&gt; type'<\/code>. Allowed values are CSS sizes like \"1px\" or \"2em\" or \"50%\". The special values <code>auto<\/code> and <code>inherit<\/code> are also accepted as well as mathematical expressions using the CSS3 <code>calc(<i>expression<\/i>)<\/code> operator. Furthermore, length units representing a percentage of the current viewport dimensions: width (vw), height (vh), the smaller of the two (vmin), or the larger of the two (vmax) can also be defined as a CSS size.\n\nNote that CSS does not allow all these values for every CSS property representing a size. E.g. <code>padding-left<\/code> doesn't allow the value <code>auto<\/code>. So even if a value is accepted by <code>sap.ui.core.CSSSize<\/code>, it still might have no effect in a specific context. In other words: UI5 controls usually don't extend the range of allowed values in CSS.\n\n<b>Units<\/b>\n\nValid font-relative units are <code>em, ex<\/code> and <code>rem<\/code>. Viewport relative units <code>vw, vh, vmin, vmax<\/code> are also valid. Supported absolute units are <code>cm, mm, in, pc, pt<\/code> and <code>px<\/code>.Other units are not supported yet.\n\n<b>Mathematical Expressions<\/b>\n\nExpressions inside the <code>calc()<\/code> operator are only roughly checked for validity. Not every value that this type accepts might be a valid expression in the sense of the CSS spec. But vice versa, any expression that is valid according to the spec should be accepted by this type. The current implementation is based on the {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April 2015}.\n\nNoteworthy details: <ul> <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise<\/li> <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)<\/li> <li>semantic constraints like type restrictions are not checked<\/li> <\/ul>\n\nFuture versions of UI5 might check <code>calc()<\/code> expressions in more detail, so applications should not assume that a value, that is invalid according to the CSS spec but currently accepted by this type still will be accepted by future versions of this type.","!category":"namespace"},"sap.ui.core.util":{"charset":{"!description":"Charset.","!category":"enum","!type":"String"},"byteOrderMark":{"!description":"Whether to prepend an unicode byte order mark when saving as a file (only applies for utf-8 charset).","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"PasteHelper":"sap.ui.core.util.PasteHelper_obj","serializer":"sap.ui.core.util.serializer","!category":"namespace","mimeType":{"!description":"MIME type.","!category":"enum","!type":"String"},"requests":{"!description":"Getter for property <code>requests<\/code>.\n\nDefault value is <code>[]<\/code>","!category":"enum","!type":"[Object]"},"content":{"!description":"Cell content.","!category":"enum","!type":"String"},"blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"ExportColumn":"sap.ui.core.util.ExportColumn_obj","busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"fileExtension":{"!description":"File extension.","!category":"enum","!type":"String"},"ExportCell":"sap.ui.core.util.ExportCell_obj","busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"Export":"sap.ui.core.util.Export_obj","separatorChar":{"!description":"Separator char.\n\nValue needs to be exactly one character or empty for default.","!category":"enum","!type":"String"},"recordRequests":{"!description":"Whether or not the requests performed should be recorded (stored). This could be memory intense if each request is recorded. For unit testing purposes it should be set to <code>true<\/code> to compare requests performed otherwise this flag should be set to <code>false<\/code> e.g. for demonstration/app purposes.","!category":"enum","!type":"Boolean"},"visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"HTTPMETHOD":{"!description":"Enum for the method.","!category":"enum","!type":"String"},"reflection":"sap.ui.core.util.reflection","ExportTypeCSV":"sap.ui.core.util.ExportTypeCSV_obj","ExportType":"sap.ui.core.util.ExportType_obj","rootUri":{"!description":"Getter for property <code>rootUri<\/code>. Has to be relative and requires a trailing '/'. It also needs to match the URI set in OData/JSON models or simple XHR calls in order for the mock server to intercept them.\n\nDefault value is empty/<code>undefined<\/code>. Must end with a a trailing slash (\"/\").","!category":"enum","!type":"String"},"MockServer":"sap.ui.core.util.MockServer_obj","name":{"!description":"Column name.","!category":"enum","!type":"String"},"ExportRow":"sap.ui.core.util.ExportRow_obj","XMLPreprocessor":"sap.ui.core.util.XMLPreprocessor","File":"sap.ui.core.util.File"},"sap.ui.core.Popup":{"setContent":{"!description":"Sets the content this instance of the Popup should render. Content must be capable of being positioned via position:absolute;","!static":false,"!category":"function","!type":"fn(oContent: sap.ui.core.Control | Element) -> sap.ui.core.Popup","parameters":{"oContent":"type: sap.ui.core.Control|Element, description: undefined"}},"setExtraContent":{"!description":"Sets additional content that are considered part of the Popup.\n\nA popup with autoclose {@link #setAutoClose} enabled allows the focus to be moved into the extra content without closing itself.\n\nA popup with modal {@link #setModal} enabled allows the focus to be shifted into the extra content without taking it back to the previous focused element in the popup.","!static":false,"!category":"function","!type":"fn(aContent: [Element[] | sap.ui.core.Element[] | String]) -> sap.ui.core.Popup","parameters":{"aContent":"type: Element[]|sap.ui.core.Element[]|string[], description: An array containing DOM elements, sap.ui.core.Element or an ID which are considered to be part of the Popup; a value of null removes all previous content"}},"detachOpened":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:opened opened} event of this <code>sap.ui.core.Popup<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Popup","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"detachBlockLayerStateChange":{"!description":"Removes a previously attached event handler <code>fnFunction<\/code> from the static {@link #.blockLayerStateChange blockLayerStateChange} event.\n\nThe event gets triggered in case of modal popups when the first of multiple popups opens and closes.","!static":true,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getContent":{"!description":"Returns this Popup's content.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control | Element"},"!proto":"sap.ui.base.ManagedObject","getFollowOf":{"!description":"This returns true/false if the default followOf method should be used. If a separate followOf-handler was previously added the corresponding function is returned.","!static":false,"!category":"function","!type":"fn() -> Boolean | fn()"},"!category":"class","attachBlockLayerStateChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the static {@link #.blockLayerStateChange blockLayerStateChange} event.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to a dummy event provider object.\n\nThe event gets triggered in case of modal popups when the first of multiple popups opens and closes.","!static":true,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object)","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to a dummy event provider object","fnFunction":"type: function, description: The function to be called, when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setPosition":{"!description":"Sets the position of the Popup (if you refer to a Control as anchor then do not use the DOMRef of the control which might change after re-renderings). Optional parameters can only be omitted when all subsequent parameters are omitted as well.","!static":false,"!category":"function","!type":"fn(my: sap.ui.core.Popup.Dock, at: sap.ui.core.Popup.Dock | Object, of?: String | sap.ui.core.Element | Element | jQuery | jQuery.Event, offset?: String, collision?: String) -> sap.ui.core.Popup","parameters":{"collision":"type: string, description: defines how the position of an element should be adjusted in case it overflows the window in some direction. The valid values that refer to jQuery-UI's position parameters are \"flip\", \"fit\" and \"none\".","at":"type: sap.ui.core.Popup.Dock|Object, description: specifies the point of the reference element to which the given Content should be aligned","offset":"type: string, description: the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. \"0 10\" to move the popup 10 pixels to the right). If the docking of both \"my\" and \"at\" are both RTL-sensitive (\"begin\" or \"end\"), this offset is automatically mirrored in the RTL case as well.","of":"type: string|sap.ui.core.Element|Element|jQuery|jQuery.Event, description: specifies the reference element to which the given content should be aligned as specified in the other parameters","my":"type: sap.ui.core.Popup.Dock, description: specifies which point of the given Content should be aligned"}},"setShadow":{"!description":"Determines whether the Popup should have a shadow (in supporting browsers). This also affects a currently open popup.","!static":false,"!category":"function","!type":"fn(bShowShadow: Boolean) -> sap.ui.core.Popup","parameters":{"bShowShadow":"type: boolean, description: whether to show a shadow"}},"!constructorDescription":"Creates an instance of <code>sap.ui.core.Popup<\/code> that can be used to open controls as a Popup,\nvisually appearing in front of other controls.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Associations\n<ul>\n<li>{@link #getChildPopups childPopups} : (sap.ui.core.ID | sap.ui.core.Popup)[]<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:opened opened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","getLastZIndex":{"!description":"Returns the last z-index that has been handed out. does not increase the internal z-index counter.","!static":true,"!category":"function","!type":"fn() -> Number"},"setInitialFocusId":{"!description":"Sets the ID of the element that should be focused once the popup opens. If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control). If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.","!static":false,"!category":"function","!type":"fn(sId: String)","parameters":{"sId":"type: string, description: the ID of the DOM element to focus"}},"setDurations":{"!description":"Sets the durations for opening and closing animations. Null values and values < 0 are ignored. A duration of 0 means no animation. Default value is \"fast\" which is the jQuery constant for \"200 ms\".","!static":false,"!category":"function","!type":"fn(iOpenDuration: Number, iCloseDuration: Number) -> sap.ui.core.Popup","parameters":{"iOpenDuration":"type: int, description: in milliseconds","iCloseDuration":"type: int, description: in milliseconds"}},"close":{"!description":"Closes the popup.\n\nIf the Popup is already closed or in the process of closing, calling this method does nothing. If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing. If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous, may lead to inconsistent behavior and is thus not recommended and may even be removed.","!static":false,"!category":"function","!type":"fn(iDuration?: Number)","parameters":{"iDuration":"type: int, description: animation duration in milliseconds; default is the jQuery preset \"fast\". For iDuration == 0 the closing happens synchronously without animation."}},"getOpenState":{"!description":"Returns whether the Popup is currently open, closed, or in a transition between these states.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.OpenState"},"!description":"Popup Class is a helper class for controls that want themselves or parts of themselves or even other aggregated or composed controls or plain HTML content to popup on the screen like menus, dialogs, drop down boxes.\n\nIt allows the controls to be aligned to other DOM elements using the {@link sap.ui.core.Popup.Dock} method. With it you can define where the popup should be docked. One can dock the popup to the top, bottom, left or right side of another DOM element.\n\nIn the case that the popup has no space to show itself in the view port of the current window, it tries to open itself to the inverted direction.\n\n<strong>Since 1.12.3<\/strong>, it is possible to add further DOM-element-IDs that can get the focus when <code>autoclose<\/code> or <code>modal<\/code> is enabled. E.g. the <code>RichTextEditor<\/code> with running TinyMCE uses this method to be able to focus the popups of the TinyMCE if the <code>RichTextEditor<\/code> runs within a <code>Popup<\/code>/<code>Dialog<\/code> etc.\n\nTo provide an additional DOM element that can get the focus the following should be done: <pre>\n  // create an object with the corresponding DOM-ID\n  var oObject = {\n    id : \"this_is_the_most_valuable_id_of_the_DOM_element\"\n  };\n\n  // add the event prefix for adding an element to the ID of the corresponding Popup\n  var sEventId = \"sap.ui.core.Popup.addFocusableContent-\" + oPopup.getId();\n\n  // fire the event with the created event-ID and the object with the DOM-ID\n  sap.ui.getCore().getEventBus().publish(\"sap.ui\", sEventId, oObject);\n<\/pre>\n\n<strong>Since 1.75<\/strong>, DOM elements which have the attribute <code>data-sap-ui-integration-popup-content<\/code> are considered to be part of all opened popups. Those DOM elements can get the focus without causing the autoclose popup to be closed or the modal popup to take the focus back to itself. Additionally, a further DOM query selector can be provided by using {@link sap.ui.core.Popup.addExternalContent} to make the DOM elements which match the selector be considered as part of all opened popups. Please be aware that the Popup implementation only checks if a DOM element is marked with the attribute <code>data-sap-ui-integration-popup-content<\/code>. The actual attribute value is not checked. To prevent a DOM element from matching, you must remove the attribute itself. Setting the attribute to a falsy value is not enough in this case.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Popup.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"addExternalContent":{"!description":"Adds a DOM query selector for determining additional external popup content.\n\nWhen the browser focus is switched from the main popup content (which is set by calling {@link #setContent}) to another DOM element, this DOM element is tested against the selector to determine:\n\n<ul> <li>Autoclose popup: whether the popup should be kept open<\/li> <li>Modal popup: whether the focus is allowed to be taken away<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn(vSelectors: [String])","parameters":{"vSelectors":"type: string[]|string, description: One query selector or an array of query selectors to be added"}},"removeExternalContent":{"!description":"Removes a DOM query selector which has been added by {@link sap.ui.core.Popup.addExternalContent}.\n\nThe default query selector <code>[data-sap-ui-integration-popup-content]<\/code> can't be deleted.","!static":true,"!category":"function","!type":"fn(vSelectors: [String])","parameters":{"vSelectors":"type: string[]|string, description: One query selector or an array of query selectors to be deleted"}},"attachOpened":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:opened opened} event of this <code>sap.ui.core.Popup<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.Popup<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Popup","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setFollowOf":{"!description":"This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf should be set the corresponding listener will be attached.","!static":false,"!category":"function","!type":"fn(followOf: Boolean | fn() | null)","parameters":{"followOf":"type: boolean|function|null, description: a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given. null deletes all followOf settings."}},"getModal":{"!description":"Returns the value if a Popup is of modal type","!static":false,"!category":"function","!type":"fn()"},"fireOpened":{"!description":"Fires event {@link #event:opened opened} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.Popup","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"fireClosed":{"!description":"Fires event {@link #event:closed closed} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.Popup","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"destroy":{"!description":"Closes and destroys this instance of Popup. Does not destroy the hosted content.","!static":false,"!category":"function","!type":"fn()"},"attachClosed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:closed closed} event of this <code>sap.ui.core.Popup<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.Popup<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.Popup","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setAnimations":{"!description":"Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function. When called, the animation functions receive three parameters: - the jQuery object wrapping the DomRef of the popup - the requested animation duration - a function that MUST be called once the animation has completed","!static":false,"!category":"function","!type":"fn(fnOpen: fn(), fnClose: fn()) -> sap.ui.core.Popup","parameters":{"fnOpen":"type: function, description: undefined","fnClose":"type: function, description: undefined"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Popup with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"exit":{"!description":"When the Popup is being destroyed all corresponding references should be deleted as well to prevent any memory leaks.","!static":false,"!category":"function","!type":"fn()"},"isOpen":{"!description":"Returns whether the Popup is currently open (this includes opening and closing animations).","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!module":"sap/ui/core/Popup","detachClosed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:closed closed} event of this <code>sap.ui.core.Popup<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.Popup","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"setInitialZIndex":{"!description":"Set an initial z-index that should be used by all Popup so all Popups start at least with the set z-index. If the given z-index is lower than any current available z-index the highest z-index will be used.","!static":true,"!category":"function","!type":"fn(iInitialZIndex: Number)","parameters":{"iInitialZIndex":"type: number, description: is the initial z-index"}},"setModal":{"!description":"Used to specify whether the Popup should be modal. A modal popup will put some fading \"block layer\" over the background and prevent attempts to put the focus outside/below the popup. Setting this while the popup is open will change \"block layer\" immediately.","!static":false,"!category":"function","!type":"fn(bModal: Boolean, sModalCSSClass?: String) -> sap.ui.core.Popup","parameters":{"bModal":"type: boolean, description: whether the Popup is of modal type","sModalCSSClass":"type: string, description: a CSS class (or space-separated list of classes) that should be added to the block layer"}},"!helpDescription":"Popup Class is a helper class for controls that want themselves or parts of themselves or even other aggregated or composed controls or plain HTML content to popup on the screen like menus, dialogs, drop down boxes.\n\nIt allows the controls to be aligned to other DOM elements using the {@link sap.ui.core.Popup.Dock} method. With it you can define where the popup should be docked. One can dock the popup to the top, bottom, left or right side of another DOM element.\n\nIn the case that the popup has no space to show itself in the view port of the current window, it tries to open itself to the inverted direction.\n\n<strong>Since 1.12.3<\/strong>, it is possible to add further DOM-element-IDs that can get the focus when <code>autoclose<\/code> or <code>modal<\/code> is enabled. E.g. the <code>RichTextEditor<\/code> with running TinyMCE uses this method to be able to focus the popups of the TinyMCE if the <code>RichTextEditor<\/code> runs within a <code>Popup<\/code>/<code>Dialog<\/code> etc.\n\nTo provide an additional DOM element that can get the focus the following should be done: <pre>\n  // create an object with the corresponding DOM-ID\n  var oObject = {\n    id : \"this_is_the_most_valuable_id_of_the_DOM_element\"\n  };\n\n  // add the event prefix for adding an element to the ID of the corresponding Popup\n  var sEventId = \"sap.ui.core.Popup.addFocusableContent-\" + oPopup.getId();\n\n  // fire the event with the created event-ID and the object with the DOM-ID\n  sap.ui.getCore().getEventBus().publish(\"sap.ui\", sEventId, oObject);\n<\/pre>\n\n<strong>Since 1.75<\/strong>, DOM elements which have the attribute <code>data-sap-ui-integration-popup-content<\/code> are considered to be part of all opened popups. Those DOM elements can get the focus without causing the autoclose popup to be closed or the modal popup to take the focus back to itself. Additionally, a further DOM query selector can be provided by using {@link sap.ui.core.Popup.addExternalContent} to make the DOM elements which match the selector be considered as part of all opened popups. Please be aware that the Popup implementation only checks if a DOM element is marked with the attribute <code>data-sap-ui-integration-popup-content<\/code>. The actual attribute value is not checked. To prevent a DOM element from matching, you must remove the attribute itself. Setting the attribute to a falsy value is not enough in this case.","getAutoClose":{"!description":"Determines whether the pop-up should auto closes or not.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getNextZIndex":{"!description":"Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.","!static":true,"!category":"function","!type":"fn() -> Number"},"open":{"!description":"Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}. Content must be capable of being positioned via \"position:absolute;\" All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of \"at\", \"of\", \"offset\", \"collision\" is given, also the preceding positioning parameters (\"my\", at\",...) must be given.\n\nIf the Popup's OpenState is different from \"CLOSED\" (i.e. if the Popup is already open, opening or closing), the call is ignored.","!static":false,"!category":"function","!type":"fn(iDuration?: Number, my?: sap.ui.core.Popup.Dock, at?: sap.ui.core.Popup.Dock, of?: String | sap.ui.core.Element | Element | jQuery | jQuery.Event, offset?: String, collision?: String, followOf?: Boolean)","parameters":{"collision":"type: string, description: defines how the position of an element should be adjusted in case it overflows the window in some direction.","at":"type: sap.ui.core.Popup.Dock, description: the \"of\" element's reference point for docking to","offset":"type: string, description: the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. \"10 0\" to move the popup 10 pixels to the right). If the docking of both \"my\" and \"at\" are both RTL-sensitive (\"begin\" or \"end\"), this offset is automatically mirrored in the RTL case as well.","followOf":"type: boolean, description: defines whether the popup should follow the dock reference when the reference changes its position.","of":"type: string|sap.ui.core.Element|Element|jQuery|jQuery.Event, description: specifies the reference element to which the given content should dock to","my":"type: sap.ui.core.Popup.Dock, description: the popup content's reference position for docking","iDuration":"type: int, description: animation duration in milliseconds; default is the jQuery preset \"fast\". For iDuration == 0 the opening happens synchronously without animation."}},"setAutoClose":{"!description":"Used to specify whether the Popup should close as soon as - for non-touch environment: the focus leaves - for touch environment: user clicks the area which is outside the popup itself, the DOM element which the popup aligns to (except document), and any extra popup content set by calling setExtraContent.","!static":false,"!category":"function","!type":"fn(bAutoClose: Boolean) -> sap.ui.core.Popup","parameters":{"bAutoClose":"type: boolean, description: whether the Popup should close as soon as the focus leaves"}}},"sap.ui.core.Configuration.FormatSettings_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.Configuration"},"sap.ui.model.odata.type.Raw":{"!description":"This class represents a placeholder for all unsupported OData primitive types. It can only be used to retrieve raw values \"as is\" (i.e. <code>formatValue(vValue, \"any\")<\/code>), but not to actually convert to or from any other representation or to validate.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Raw with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Raw.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a placeholder for all unsupported OData primitive types.","formatValue":{"!description":"Formats the given value to the given target type.","!static":false,"!category":"function","!type":"fn(vValue: Object, sTargetType: String) -> Object","parameters":{"sTargetType":"type: string, description: The target type; must be \"any\"","vValue":"type: any, description: The raw value to be retrieved \"as is\""}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/Raw","!helpDescription":"This class represents a placeholder for all unsupported OData primitive types. It can only be used to retrieve raw values \"as is\" (i.e. <code>formatValue(vValue, \"any\")<\/code>), but not to actually convert to or from any other representation or to validate.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"},"!category":"class","parseValue":{"!description":"Method not supported","!static":false,"!category":"function","!type":"fn()"}},"sap.ui.core.SortOrder":{"!description":"Sort order of a column.","Descending":{"!description":"Sorting is done in descending order.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","!category":"static class","None":{"!description":"Sorting is not applied.","!category":"enum","!type":"String"},"Ascending":{"!description":"Sorting is done in ascending order.","!category":"enum","!type":"String"}},"sap.ui.core.mvc.ControllerExtension":{"!description":"Base class for controller extensions.\n\nAll controller extensions must {@link #.extend extend} from this base class. It provides access to the {@link #getView view} of the extended controller as well as to the view's {@link #byId controls}.\n\nFor a more detailed description how to develop controller extensions, see section {@link topic:21515f09c0324218bb705b27407f5d61 Using Controller Extension} in the documentation.","extend":{"!description":"Creates a new subclass of class sap.ui.core.mvc.ControllerExtension with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.mvc.ControllerExtension.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!module":"sap/ui/core/mvc/ControllerExtension","!helpDescription":"Base class for controller extensions.\n\nAll controller extensions must {@link #.extend extend} from this base class. It provides access to the {@link #getView view} of the extended controller as well as to the view's {@link #byId controls}.\n\nFor a more detailed description how to develop controller extensions, see section {@link topic:21515f09c0324218bb705b27407f5d61 Using Controller Extension} in the documentation.","!proto":"sap.ui.base.Object","!category":"class","override":{"!description":"Override the ControllerExtension class with the given custom extension definition.\n\nOnly public methods that are not final could be overridden. The lifecycle methods <code>onInit<\/code>, <code>onExit<\/code>, <code>onBeforeRendering<\/code> and <code>onAfterRendering<\/code> are added before or after the lifecycle functions of the original extension.\n\nExample for <code>oExtension<\/code>: <pre>\n{\n    onInit: function() {\n        ...\n    },\n    ...\n}\n<\/pre>\n\n<b>Note:<\/b> This static method is automatically propagated to subclasses of <code>ControllerExtension<\/code>.","!static":true,"!category":"function","!type":"fn(oExtension: Object) -> fn()","parameters":{"oExtension":"type: object, description: The custom extension definition"}},"byId":{"!description":"Returns an Element of the connected view with the given local ID.\n\nViews automatically prepend their own ID as a prefix to created Elements to make the IDs unique even in the case of multiple view instances. For a controller extension, the namespace of the control ID gets also prefixed with the namespace of the extension. This method helps to find an element by its local ID only.\n\nIf no view is connected or if the view doesn't contain an element with the given local ID, <code>undefined<\/code> is returned.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: View-local ID"}},"getView":{"!description":"Returns the View from the corresponding controller.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.mvc.View"}},"sap.ui.core.EnabledPropagator_obj":{"!type":"fn(bDefault?: Boolean, bLegacy?: Boolean)","prototype":"sap.ui.core.EnabledPropagator"},"sap.ui.model.analytics.odata4analytics.RecursiveHierarchy":{"!description":"Representation of a recursive hierarchy.","getNodeValueProperty":{"!description":"Get the property holding the value that is structurally organized by the hierarchy","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.Object","!category":"class","isLeveledHierarchy":{"!description":"Get indicator if this is a leveled hierarchy","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getNodeLevelProperty":{"!description":"Get the property holding the level of the hierarchy node","!static":false,"!category":"function","!type":"fn() -> Object"},"getNodeIDProperty":{"!description":"Get the property holding the node ID of the hierarchy node","!static":false,"!category":"function","!type":"fn() -> Object"},"isRecursiveHierarchy":{"!description":"Get indicator if this is a recursive hierarchy","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Create a representation of a recursive hierarchy defined on one multiple\nproperties in an OData entity type query. Do not create your own instances.","!module":"sap/ui/model/analytics/odata4analytics","getParentNodeIDProperty":{"!description":"Get the property holding the parent node ID of the hierarchy node","!static":false,"!category":"function","!type":"fn() -> Object"},"!helpDescription":"Representation of a recursive hierarchy.","getNodeExternalKeyProperty":{"!description":"Get the property holding the node external key of the hierarchy node","!static":false,"!category":"function","!type":"fn() -> Object"}},"sap.ui.model.odata.v4.ODataMetaModel_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataMetaModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.odata.v4.ODataMetaModel"},"sap.ui.model.odata.v4.AnnotationHelper":{"!description":"A collection of methods which help to consume <a href=\"http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html\"> OData V4 annotations<\/a> in XML template views. Every context argument must belong to a {@link sap.ui.model.odata.v4.ODataMetaModel} instance.","!module":"sap/ui/model/odata/v4/AnnotationHelper","!helpDescription":"A collection of methods which help to consume <a href=\"http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html\"> OData V4 annotations<\/a> in XML template views. Every context argument must belong to a {@link sap.ui.model.odata.v4.ODataMetaModel} instance.","resolve$Path":{"!description":"Helper function for a <code>template:with<\/code> instruction that returns an equivalent to the given context's path, without \"$AnnotationPath\", \"$NavigationPropertyPath\", \"$Path\", and \"$PropertyPath\" segments.","!static":"true","!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> String"},"getNavigationBinding":{"!description":"Returns a data binding according to the result of {@link sap.ui.model.odata.v4.AnnotationHelper.getNavigationPath}.","!static":"true","!category":"function","!type":"fn(sPath: String) -> String"},"getNavigationPath":{"!description":"A function that helps to interpret OData V4 annotations. It knows about the syntax of the path value used by the following dynamic expressions: <ul> <li>\"14.5.2 Expression edm:AnnotationPath\"<\/li> <li>\"14.5.11 Expression edm:NavigationPropertyPath\"<\/li> <li>\"14.5.12 Expression edm:Path\"<\/li> <li>\"14.5.13 Expression edm:PropertyPath\"<\/li> <\/ul> It returns the path of structural and navigation properties from the given path value, but removes \"$count\", types casts, term casts, and annotations on navigation properties.","!static":"true","!category":"function","!type":"fn(sPath: String) -> String"},"format":{"!description":"A function that helps to interpret OData V4 annotations. It knows about the following expressions: <ul> <li>\"14.4 Constant Expressions\" for \"edm:Bool\", \"edm:Date\", \"edm:DateTimeOffset\", \"edm:Decimal\", \"edm:Float\", \"edm:Guid\", \"edm:Int\", \"edm:TimeOfDay\". <li>constant \"14.4.11 Expression edm:String\": This is turned into a fixed text (e.g. <code>\"Width\"<\/code>). String constants that contain a simple binding <code>\"{@i18n>...}\"<\/code> to the hard-coded model name \"@i18n\" with arbitrary path are not turned into a fixed text, but kept as a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization. <li>dynamic \"14.5.1 Comparison and Logical Operators\": These are turned into expression bindings to perform the operations at runtime. <li>dynamic \"14.5.3 Expression edm:Apply\": <ul> <li>\"14.5.3.1.1 Function odata.concat\": This is turned into a data binding expression relative to an entity. <li>\"14.5.3.1.2 Function odata.fillUriTemplate\": This is turned into an expression binding to fill the template at runtime. <li>\"14.5.3.1.3 Function odata.uriEncode\": This is turned into an expression binding to encode the parameter at runtime. <li>Apply functions may be nested arbitrarily. <\/ul> <li>dynamic \"14.5.6 Expression edm:If\": This is turned into an expression binding to be evaluated at runtime. The expression is a conditional expression like <code>\"{=condition ? expression1 : expression2}\"<\/code>. <li>dynamic \"14.5.10 Expression edm:Null\": This is turned into a <code>null<\/code> value. It is ignored in <code>odata.concat<\/code>. <li>dynamic \"14.5.12 Expression edm:Path\" and \"14.5.13 Expression edm:PropertyPath\": This is turned into a data binding relative to an entity, including type information and constraints as available from metadata, e.g. <code>\"{path : 'Name', type : 'sap.ui.model.odata.type.String', constraints : {'maxLength':'255'}}\"<\/code>. Depending on the used type, some additional constraints of this type are set: <ul> <li>Edm.DateTime: The \"displayFormat\" constraint is set to the value of the \"sap:display-format\" annotation of the referenced property. <li>Edm.Decimal: The \"precision\" and \"scale\" constraints are set to the values of the corresponding attributes of the referenced property. The \"minimum\", \"maximum\", \"minimumExclusive\" and \"maximumExlusive\" constraints are set to the values of the corresponding \"Org.OData.Validation.V1\" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. <li>Edm.String: The \"maxLength\" constraint is set to the value of the corresponding attribute of the referenced property, and the \"isDigitSequence\" constraint is set to the value of the \"com.sap.vocabularies.Common.v1.IsDigitSequence\" annotation of the referenced property; note that in this case only constant expressions are supported to determine the annotation value. <\/ul> <\/ul>\n\nIf <code>oDetails.context.getPath()<\/code> contains a single \"$AnnotationPath\" or \"$Path\" segment, the value corresponding to that segment is considered as a data binding path prefix whenever a dynamic \"14.5.12 Expression edm:Path\" or \"14.5.13 Expression edm:PropertyPath\" is turned into a data binding. Use {@link sap.ui.model.odata.v4.AnnotationHelper.resolve$Path} to avoid these prefixes in cases where they are not applicable.\n\nUnsupported or incorrect values are turned into a string nevertheless, but indicated as such. Proper escaping is used to make sure that data binding syntax is not corrupted. In such a case, an error describing the problem is logged to the console.\n\nExample: <pre>\n&lt;Text text=\"{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.format}\" />\n<\/pre>\n\nExample for \"$Path\" in the context's path: <pre>\n&lt;Annotations Target=\"com.sap.gateway.default.iwbep.tea_busi.v0001.EQUIPMENT\">\n\t&lt;Annotation Term=\"com.sap.vocabularies.UI.v1.LineItem\">\n\t\t&lt;Collection>\n\t\t\t&lt;Record Type=\"com.sap.vocabularies.UI.v1.DataField\">\n\t\t\t\t&lt;PropertyValue Property=\"Value\" Path=\"EQUIPMENT_2_PRODUCT/Name\" />\n\t\t\t&lt;/Record>\n\t\t&lt;/Collection>\n\t&lt;/Annotation>\n&lt;/Annotations>\n&lt;Annotations Target=\"com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product/Name\">\n\t&lt;Annotation Term=\"com.sap.vocabularies.Common.v1.QuickInfo\" Path=\"PRODUCT_2_SUPPLIER/Supplier_Name\" />\n&lt;/Annotations>\n<\/pre> <pre>\n&lt;Text text=\"{meta>/Equipments/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path@com.sap.vocabularies.Common.v1.QuickInfo@@sap.ui.model.odata.v4.AnnotationHelper.format}\" />\n<\/pre> <code>format<\/code> returns a binding with path \"EQUIPMENT_2_PRODUCT/PRODUCT_2_SUPPLIER/Supplier_Name\".\n\nExample for \"$AnnotationPath\" in the context's path: <pre>\n&lt;Annotations Target=\"com.sap.gateway.default.iwbep.tea_busi.v0001.EQUIPMENT\">\n\t&lt;Annotation Term=\"com.sap.vocabularies.UI.v1.Facets\">\n\t\t&lt;Collection>\n\t\t\t&lt;Record Type=\"com.sap.vocabularies.UI.v1.ReferenceFacet\">\n\t\t\t\t&lt;PropertyValue Property=\"Target\" AnnotationPath=\"EQUIPMENT_2_PRODUCT/@com.sap.vocabularies.Common.v1.QuickInfo\" />\n\t\t\t&lt;/Record>\n\t\t&lt;/Collection>\n\t&lt;/Annotation>\n&lt;/Annotations>\n&lt;Annotations Target=\"com.sap.gateway.default.iwbep.tea_busi_product.v0001.Product\">\n\t&lt;Annotation Term=\"com.sap.vocabularies.Common.v1.QuickInfo\" Path=\"Name\" />\n&lt;/Annotations>\n<\/pre> <pre>\n&lt;Text text=\"{meta>/Equipments/@com.sap.vocabularies.UI.v1.Facets/0/Target/$AnnotationPath/@@sap.ui.model.odata.v4.AnnotationHelper.format}\" />\n<\/pre> <code>format<\/code> returns a binding with path \"EQUIPMENT_2_PRODUCT/Name\".\n\nSince 1.73.0 in addition to supporting annotations, this function also can be used to interpret action or function parameters as a binding string.\n\nSee an example of the metadata for an unbound action \"AcChangeTeamBudgetByID\": <pre>\n   &lt;Action Name=\"AcChangeTeamBudgetByID\">\n       &lt;Parameter Name=\"TeamID\" Type=\"Edm.String\" Nullable=\"false\" MaxLength=\"10\"/>\n       &lt;Parameter Name=\"Budget\" Type=\"Edm.Decimal\" Nullable=\"false\" Precision=\"16\" Scale=\"variable\"/>\n   &lt;/Action>\n<\/pre>\n\nLet <code>ChangeTeamBudgetByID<\/code> be the action import of this action. Using <code>AnnotationHelper.format<\/code> for the <code>TeamID<\/code> like <pre>\n&lt;Text text=\"{meta>/ChangeTeamBudgetByID/TeamID@@sap.ui.model.odata.v4.AnnotationHelper.format}\" />\n<\/pre> returns the following binding string which contains information about path, type and constraints: <pre>\n&lt;Text text=\"{path:'TeamID',type:'sap.ui.model.odata.type.String',constraints:{'maxLength':10,'nullable':false}\" />\n<\/pre>\n\nSince 1.71.0, for annotations on an operation or a parameter, the binding parameter's name is stripped off any dynamic \"14.5.12 Expression edm:Path\" and \"14.5.13 Expression edm:PropertyPath\" where it might be used as a first segment. Since 1.76.0 this does not apply to annotations on a parameter. In the former case, we assume that the resulting data binding is relative to the parent context of the operation binding, that is, to the context representing the binding parameter itself. In the latter case, we assume that the resulting data binding is relative to the parameter context of the operation binding (see {@link sap.ui.model.odata.v4.ODataContextBinding#getParameterContext}).\n\nExample: <pre>\n   &lt;Action Name=\"ShipProduct\" EntitySetPath=\"_it\" IsBound=\"true\" >\n       &lt;Parameter Name=\"_it\" Type=\"name.space.Product\" Nullable=\"false\"/>\n       &lt;Parameter Name=\"City\" Type=\"Edm.String\"/>\n   &lt;/Action>\n<\/pre> For the operation <code>ShipProduct<\/code> mentioned above, the following annotation targets an operation parameter and refers back to the binding parameter. <pre>\n    &lt;Annotations Target=\"name.space.ShipProduct(name.space.Product)/City\">\n       &lt;Annotation Term=\"com.sap.vocabularies.Common.v1.Text\" Path=\"_it/SupplierIdentifier\"/>\n    &lt;/Annotations>\n<\/pre>\n\nUsing <code>AnnotationHelper.format<\/code> like <pre>\n&lt;Text text=\"{meta>/Products/name.space.ShipProduct/$Parameter/City@com.sap.vocabularies.Common.v1.Text@@sap.ui.model.odata.v4.AnnotationHelper.format}\" />\n<\/pre> results in <pre>\n&lt;Text text=\"{path:'_it/SupplierIdentifier',type:'sap.ui.model.odata.type.Int32'}\" />\n<\/pre> and the data binding evaluates to the <code>SupplierIdentifier<\/code> property of the entity the operation is called on.","!static":"true","!category":"function","!type":"fn(vRawValue: Object, oDetails: Object) -> String | Promise"},"!category":"namespace","isMultiple":{"!description":"A function that helps to interpret OData V4 annotations. It knows about the syntax of the path value used by the following dynamic expressions: <ul> <li>\"14.5.2 Expression edm:AnnotationPath\"<\/li> <li>\"14.5.11 Expression edm:NavigationPropertyPath\"<\/li> <li>\"14.5.12 Expression edm:Path\"<\/li> <li>\"14.5.13 Expression edm:PropertyPath\"<\/li> <\/ul> It returns the information whether the given path ends with \"$count\" or with a multi-valued structural or navigation property. Term casts and annotations on navigation properties are ignored.\n\nExample: <pre>\n&lt;template:if test=\"{facet>Target/$AnnotationPath@@sap.ui.model.odata.v4.AnnotationHelper.isMultiple}\">\n<\/pre>","!static":"true","!category":"function","!type":"fn(sPath: String, oDetails: Object) -> Boolean | Promise"},"label":{"!description":"Returns the value for the label of a <code>com.sap.vocabularies.UI.v1.DataFieldAbstract<\/code> from the meta model. If no <code>Label<\/code> property is available, but the data field has a <code>Value<\/code> property with an <code>edm:Path<\/code> expression as value, the label will be taken from the <code>com.sap.vocabularies.Common.v1.Label<\/code> annotation of the path's target property.\n\nExample: <pre>\n&lt;Label text=\"{meta>@@sap.ui.model.odata.v4.AnnotationHelper.label}\" />\n<\/pre>","!static":"true","!category":"function","!type":"fn(vRawValue: Object, oDetails: Object) -> String | Promise"},"getValueListType":{"!description":"Determines which type of value list exists for the given property.","!static":"true","!category":"function","!type":"fn(vRawValue: Object, oDetails: Object) -> sap.ui.model.odata.v4.ValueListType | Promise"},"value":{"!description":"A function that helps to interpret OData V4 annotations. It knows about the following expressions: <ul> <li>\"14.4 Constant Expressions\" for \"edm:Bool\", \"edm:Date\", \"edm:DateTimeOffset\", \"edm:Decimal\", \"edm:Float\", \"edm:Guid\", \"edm:Int\", \"edm:TimeOfDay\". <li>constant \"14.4.11 Expression edm:String\": This is turned into a fixed text (e.g. <code>\"Width\"<\/code>). String constants that contain a simple binding <code>\"{@i18n>...}\"<\/code> to the hard-coded model name \"@i18n\" with arbitrary path are not turned into a fixed text, but kept as a data binding expression; this allows local annotation files to refer to a resource bundle for internationalization. <li>dynamic \"14.5.1 Comparison and Logical Operators\": These are turned into expression bindings to perform the operations at runtime. <li>dynamic \"14.5.3 Expression edm:Apply\": <ul> <li>\"14.5.3.1.1 Function odata.concat\": This is turned into a data binding expression. <li>\"14.5.3.1.2 Function odata.fillUriTemplate\": This is turned into an expression binding to fill the template at runtime. <li>\"14.5.3.1.3 Function odata.uriEncode\": This is turned into an expression binding to encode the parameter at runtime. <li>Apply functions may be nested arbitrarily. <\/ul> <li>dynamic \"14.5.6 Expression edm:If\": This is turned into an expression binding to be evaluated at runtime. The expression is a conditional expression like <code>\"{=condition ? expression1 : expression2}\"<\/code>. <li>dynamic \"14.5.10 Expression edm:Null\": This is turned into a <code>null<\/code> value. It is ignored in <code>odata.concat<\/code>. <li>dynamic \"14.5.12 Expression edm:Path\" and \"14.5.13 Expression edm:PropertyPath\": This is turned into a simple data binding, e.g. <code>\"{Name}\"<\/code>. <\/ul> Unsupported or incorrect values are turned into a string nevertheless, but indicated as such. In such a case, an error describing the problem is logged to the console.\n\nExample: <pre>\n&lt;Text text=\"{meta>Value/@@sap.ui.model.odata.v4.AnnotationHelper.value}\" />\n<\/pre>\n\nSince 1.71.0, for annotations on an operation or a parameter, the binding parameter's name is stripped off any dynamic \"14.5.12 Expression edm:Path\" and \"14.5.13 Expression edm:PropertyPath\" where it might be used as a first segment. Since 1.76.0 this does not apply to annotations on a parameter. In the former case, we assume that the resulting data binding is relative to the parent context of the operation binding, that is, to the context representing the binding parameter itself. In the latter case, we assume that the resulting data binding is relative to the parameter context of the operation binding (see {@link sap.ui.model.odata.v4.ODataContextBinding#getParameterContext}).","!static":"true","!category":"function","!type":"fn(vRawValue: Object, oDetails: Object) -> String"}},"module:sap/ui/util/XMLHelper":{"!description":"Provides functionality for parsing XML formatted strings and serializing XML documents.","module:sap/ui/util/XMLHelper":"module:sap/ui/util/XMLHelper","serialize":{"!description":"Serializes the specified XML document into a string representation.","!category":"function","!type":"fn(oXMLDocument: String) -> Object"},"!module":"sap/ui/util/XMLHelper","!helpDescription":"Provides functionality for parsing XML formatted strings and serializing XML documents.","getParseError":{"!description":"Extracts parse error information from the specified document (if any).\n\nIf an error was found the returned object has the following error information parameters: errorCode, url, reason, srcText, line, linepos, filepos","!category":"function","!type":"fn(oDocument: String) -> Object"},"!category":"namespace","parse":{"!description":"Parses the specified XML formatted string text using native parsing function of the browser and returns a valid XML document. If an error occurred during parsing a parse error xobject is returned as property (parseError) of the returned XML document object. The parse error object has the following error information parameters: errorCode, url, reason, srcText, line, linepos, filepos","!category":"function","!type":"fn(sXMLText: String) -> Object"}},"sap.ui.core.util.ExportTypeCSV_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.ExportTypeCSV with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.util.ExportType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.util.ExportTypeCSV"},"sap.ui.core.History":{"!description":"History handles the history of certain controls (e.g. sap.ui.commons.SearchField).","extend":{"!description":"Creates a new subclass of class sap.ui.core.History with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.History.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Creates an instance of the History.\n\nAttention: The Web Storage API which is used by this class stores the data on the client.\nTherefore do not use this API for confidential information.","!module":"sap/ui/core/History","!helpDescription":"History handles the history of certain controls (e.g. sap.ui.commons.SearchField).","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.model.analytics":{"!description":"Analytical Adapter for ODataModels","ODataModelAdapter":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!static":"true","!category":"function","!type":"fn()"},"!module":"sap/ui/model/analytics/ODataModelAdapter","!helpDescription":"Analytical Adapter for ODataModels","AnalyticalTreeBindingAdapter":"sap.ui.model.analytics.AnalyticalTreeBindingAdapter_obj","odata4analytics":"sap.ui.model.analytics.odata4analytics","BatchResponseCollector":"sap.ui.model.analytics.BatchResponseCollector_obj","!category":"namespace","AnalyticalBinding":"sap.ui.model.analytics.AnalyticalBinding_obj"},"sap.ui.core.TitleLevel":{"!description":"Level of a title.","Auto":{"!description":"The level of the title is choosen by the control rendering the title.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","H1":{"!description":"The Title is of level 1.","!category":"enum","!type":"String"},"!category":"static class","H2":{"!description":"The Title is of level 2","!category":"enum","!type":"String"},"H3":{"!description":"The Title is of level 3","!category":"enum","!type":"String"},"H4":{"!description":"The Title is of level 4","!category":"enum","!type":"String"},"H5":{"!description":"The Title is of level 5","!category":"enum","!type":"String"},"H6":{"!description":"The Title is of level 6","!category":"enum","!type":"String"}},"sap.ui.core.ComponentLifecycle":{"!description":"Enumeration for different lifecycle behaviors of Components created by the ComponentContainer.","Container":{"!description":"Container managed lifecycle means that the ComponentContainer takes care to destroy the Components associated with the ComponentContainer once the ComponentContainer is destroyed or a new Component is associated.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Legacy":{"!description":"Legacy lifecycle means that the ComponentContainer takes care to destroy the Component which is associated with the ComponentContainer once the ComponentContainer is destroyed but not when a new Component is associated.","!category":"enum","!type":"String"},"!category":"static class","Application":{"!description":"Application managed lifecycle means that the Application takes care to destroy the Components associated with the ComponentContainer.","!category":"enum","!type":"String"}},"sap.ui.test.matchers.AggregationContainsPropertyEqual_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationContainsPropertyEqual with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mSettings: Object)","prototype":"sap.ui.test.matchers.AggregationContainsPropertyEqual"},"sap.ui.test.actions.Press_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.actions.Press with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.actions.Press"},"sap.ui.core.Title_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Title with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Title"},"sap.ui.core.tmpl.TemplateControl_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.tmpl.TemplateControl"},"sap.ui.core.util.Export":{"!proto":"sap.ui.core.Control","bindRows":{"!description":"Binds aggregation {@link #getRows rows} to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description of the possible properties of <code>oBindingInfo<\/code>.","!static":false,"!category":"function","!type":"fn(oBindingInfo: Object) -> sap.ui.core.util.Export","parameters":{"oBindingInfo":"type: object, description: The binding information"}},"!category":"class","getRows":{"!description":"Gets content of aggregation {@link #getRows rows}.\n\nRows of the Export.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.util.ExportRow]"},"addRow":{"!description":"Adds some row to the aggregation {@link #getRows rows}.","!static":false,"!category":"function","!type":"fn(oRow: sap.ui.core.util.ExportRow) -> sap.ui.core.util.Export","parameters":{"oRow":"type: sap.ui.core.util.ExportRow, description: The row to add; if empty, nothing is inserted"}},"setExportType":{"!description":"Sets the aggregated {@link #getExportType exportType}.","!static":false,"!category":"function","!type":"fn(oExportType: sap.ui.core.util.ExportType) -> sap.ui.core.util.Export","parameters":{"oExportType":"type: sap.ui.core.util.ExportType, description: The exportType to set"}},"getColumns":{"!description":"Gets content of aggregation {@link #getColumns columns}.\n\nColumns for the Export.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.util.ExportColumn]"},"destroyExportType":{"!description":"Destroys the exportType in the aggregation {@link #getExportType exportType}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.Export"},"!constructorDescription":"Constructor for a new Export.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getExportType exportType} : sap.ui.core.util.ExportType<\/li>\n<li>{@link #getColumns columns} : sap.ui.core.util.ExportColumn[]<\/li>\n<li>{@link #getRows rows} : sap.ui.core.util.ExportRow[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","removeAllRows":{"!description":"Removes all the controls from the aggregation {@link #getRows rows}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.util.ExportRow]"},"removeAllColumns":{"!description":"Removes all the controls from the aggregation {@link #getColumns columns}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.util.ExportColumn]"},"removeRow":{"!description":"Removes a row from the aggregation {@link #getRows rows}.","!static":false,"!category":"function","!type":"fn(vRow: Number | String | sap.ui.core.util.ExportRow) -> sap.ui.core.util.ExportRow","parameters":{"vRow":"type: int|string|sap.ui.core.util.ExportRow, description: The row to remove or its index or id"}},"generate":{"!description":"Generates the file content and returns a Promise with the instance as context (this).<br> The promise will be resolved with the generated content as a string.\n\n<p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises. jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used. Please use only the standard methods 'then' and 'catch'!<\/b><\/p>","!static":false,"!category":"function","!type":"fn() -> Promise"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Export provides the possibility to generate a list of data in a specific format / type, e.g. CSV to use it in other programs / applications.","addColumn":{"!description":"Adds some column to the aggregation {@link #getColumns columns}.","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.core.util.ExportColumn) -> sap.ui.core.util.Export","parameters":{"oColumn":"type: sap.ui.core.util.ExportColumn, description: The column to add; if empty, nothing is inserted"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.Export.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"destroyRows":{"!description":"Destroys all the rows in the aggregation {@link #getRows rows}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.Export"},"destroyColumns":{"!description":"Destroys all the columns in the aggregation {@link #getColumns columns}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.Export"},"saveFile":{"!description":"Generates the file content, triggers a download / save action and returns a Promise with the instance as context (this).<br> The promise will be resolved with the generated content as a string. <p><b>For information about browser support, see <code>sap.ui.core.util.File.save<\/code><\/b><\/p>\n\n<p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises. jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used. Please use only the standard methods 'then' and 'catch'!<\/b><\/p>","!static":false,"!category":"function","!type":"fn(sFileName?: String) -> Promise","parameters":{"sFileName":"type: string, description: file name, defaults to 'data'"}},"indexOfColumn":{"!description":"Checks for the provided <code>sap.ui.core.util.ExportColumn<\/code> in the aggregation {@link #getColumns columns}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.core.util.ExportColumn) -> Number","parameters":{"oColumn":"type: sap.ui.core.util.ExportColumn, description: The column whose index is looked for"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.util.Export with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"indexOfRow":{"!description":"Checks for the provided <code>sap.ui.core.util.ExportRow<\/code> in the aggregation {@link #getRows rows}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oRow: sap.ui.core.util.ExportRow) -> Number","parameters":{"oRow":"type: sap.ui.core.util.ExportRow, description: The row whose index is looked for"}},"removeColumn":{"!description":"Removes a column from the aggregation {@link #getColumns columns}.","!static":false,"!category":"function","!type":"fn(vColumn: Number | String | sap.ui.core.util.ExportColumn) -> sap.ui.core.util.ExportColumn","parameters":{"vColumn":"type: int|string|sap.ui.core.util.ExportColumn, description: The column to remove or its index or id"}},"unbindColumns":{"!description":"Unbinds aggregation {@link #getColumns columns} from model data.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.Export"},"!module":"sap/ui/core/util/Export","insertColumn":{"!description":"Inserts a column into the aggregation {@link #getColumns columns}.","!static":false,"!category":"function","!type":"fn(oColumn: sap.ui.core.util.ExportColumn, iIndex: Number) -> sap.ui.core.util.Export","parameters":{"oColumn":"type: sap.ui.core.util.ExportColumn, description: The column to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the column should be inserted at; for a negative value of <code>iIndex<\/code>, the column is inserted at position 0; for a value greater than the current size of the aggregation, the column is inserted at the last position"}},"insertRow":{"!description":"Inserts a row into the aggregation {@link #getRows rows}.","!static":false,"!category":"function","!type":"fn(oRow: sap.ui.core.util.ExportRow, iIndex: Number) -> sap.ui.core.util.Export","parameters":{"oRow":"type: sap.ui.core.util.ExportRow, description: The row to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the row should be inserted at; for a negative value of <code>iIndex<\/code>, the row is inserted at position 0; for a value greater than the current size of the aggregation, the row is inserted at the last position"}},"!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.73 undefined<br>Export provides the possibility to generate a list of data in a specific format / type, e.g. CSV to use it in other programs / applications.","unbindRows":{"!description":"Unbinds aggregation {@link #getRows rows} from model data.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.Export"},"getExportType":{"!description":"Gets content of aggregation {@link #getExportType exportType}.\n\nType that generates the content.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.util.ExportType"},"bindColumns":{"!description":"Binds aggregation {@link #getColumns columns} to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a detailed description of the possible properties of <code>oBindingInfo<\/code>.","!static":false,"!category":"function","!type":"fn(oBindingInfo: Object) -> sap.ui.core.util.Export","parameters":{"oBindingInfo":"type: object, description: The binding information"}}},"sap.ui.model.xml.XMLTreeBinding_obj":{"!type":"fn(oModel?: sap.ui.model.xml.XMLModel, Path: String, oContext?: Object, aFilters?: Array, mParameters?: Object)","prototype":"sap.ui.model.xml.XMLTreeBinding"},"sap.ui.core.service.Service_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.service.Service with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oServiceContext: Object)","prototype":"sap.ui.core.service.Service"},"sap.ui.core.util.serializer.XMLViewSerializer":{"!description":"XMLViewSerializer class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.XMLViewSerializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.XMLViewSerializer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"XML view serializer class. Serializes a given view.","!module":"sap/ui/core/util/serializer/XMLViewSerializer","!helpDescription":"XMLViewSerializer class.","!proto":"sap.ui.base.EventProvider","!category":"class"},"sap.ui.model.odata.type.Double_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Double with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.odata.type.Double"},"sap.ui.model.type.Date_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oFormatOptions?: Object, oConstraints?: Object)","prototype":"sap.ui.model.type.Date"},"sap.ui.core.routing.HashChanger_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.HashChanger with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.routing.HashChanger"},"sap.ui.core.Icon_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Icon with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Icon"},"sap.ui.model.odata.type.String":{"!description":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.String<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.String with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.String.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for an OData primitive type <code>Edm.String<\/code>.","formatValue":{"!description":"Formats the given value to the given target type. If <code>isDigitSequence<\/code> constraint of this type is set to <code>true<\/code> and the target type is any or string and the given value contains only digits, the leading zeros are truncated.","!static":false,"!category":"function","!type":"fn(sValue: String, sTargetType: String) -> String | Number | Boolean","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"boolean\", \"float\", \"int\" or \"string\". See {@link sap.ui.model.odata.type} for more information.","sValue":"type: string, description: the value to be formatted"}},"getName":{"!description":"Returns the type's name.","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/odata/type/String","!helpDescription":"This class represents the OData primitive type <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> <code>Edm.String<\/code><\/a>.\n\nIn both {@link sap.ui.model.odata.v2.ODataModel} and {@link sap.ui.model.odata.v4.ODataModel} this type is represented as a <code>string<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(sValue: String)","parameters":{"sValue":"type: string, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value which is expected to be of the given type to a string. If <code>isDigitSequence<\/code> constraint of this type is set to <code>true<\/code> and the parsed string is a sequence of digits, then the parsed string is either enhanced with leading zeros, if <code>maxLength<\/code> constraint is given, or leading zeros are removed from parsed string.\n\nNote: Depending on the format option <code>parseKeepsEmptyString<\/code>, an empty input string (<code>\"\"<\/code>) is either parsed to <code>\"\"<\/code> or <code>null<\/code>. If the constraint <code>nullable<\/code> is <code>false<\/code>, a <code>null<\/code> value is rejected with a {@link sap.ui.model.ValidateException ValidateException} raised in the {@link #validateValue} method.","!static":false,"!category":"function","!type":"fn(vValue: String | Number | Boolean, sSourceType: String) -> String","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>). See {@link sap.ui.model.odata.type} for more information.","vValue":"type: string|number|boolean, description: the value to be parsed"}}},"sap.ui.core.util.reflection":{"BaseTreeModifier":"sap.ui.core.util.reflection.BaseTreeModifier","!category":"namespace","XmlTreeModifier":"sap.ui.core.util.reflection.XmlTreeModifier","JsControlTreeModifier":"sap.ui.core.util.reflection.JsControlTreeModifier"},"sap.ui.core.dnd.DropPosition":{"!description":"Configuration options for drop positions.","OnOrBetween":{"!description":"Drop on the control or between the controls.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Between":{"!description":"Drop between the controls.","!category":"enum","!type":"String"},"!category":"static class","On":{"!description":"Drop on the control.","!category":"enum","!type":"String"}},"sap.ui.core.Patcher":{"!description":"Provides an API for an in-place DOM patching.","!module":"sap/ui/core/Patcher","!helpDescription":"Provides an API for an in-place DOM patching.","!category":"namespace"},"sap.ui.core.dnd.IDropInfo":{"!description":"Marker interface for drop configuration providing information about the target of the drop operation.","!module":"sap/ui/core/library","!category":"static class"},"sap.ui.base.Event_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.base.Event with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, oSource: sap.ui.base.EventProvider, oParameters: Object)","prototype":"sap.ui.base.Event"},"sap.ui.core.tmpl.HandlebarsTemplate_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.tmpl.Template.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.tmpl.HandlebarsTemplate"},"sap.ui.core.BusyIndicatorSize":{"!description":"Configuration options for the <code>BusyIndicator<\/code> size.","Auto":{"!description":"Type: automatic size detection","!category":"enum","!type":"String"},"Small":{"!description":"Type: small size","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Medium":{"!description":"Type: Medium size","!category":"enum","!type":"String"},"Large":{"!description":"Type: Large size","!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.core.routing.Router":{"detachBypassed":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:bypassed bypassed} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.\n\nThe event will get fired, if none of the routes of the router is matching.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called when the event occurs"}},"detachRouteMatched":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:routeMatched routeMatched} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called when the event occurs"}},"navTo":{"!description":"Navigates to a specific route defining a set of parameters.\n\nThe parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be encoded. If you want to use special characters in your <code>oParameters<\/code>, you have to encode them (encodeURIComponent).\n\nIf the given route name can't be found, an error message is logged to the console and the hash will be changed to the empty string.","!static":false,"!category":"function","!type":"fn(sName: String, oParameters?: Object, oComponentTargetInfo?: Object, bReplace?: Boolean) -> sap.ui.core.routing.Router","parameters":{"oComponentTargetInfo":"type: object, description: Information for route name and parameters of the router in nested components. When any target of the route which is specified with the <code>sName<\/code> parameter loads a component and a route of this component whose pattern is different than an empty string should be matched directly with this navTo call, the route name and its parameters can be given by using this parameter. Information for deeper nested component target can be given within the <code>componentTargetInfo<\/code> property which contains the same properties as the top level.","sName":"type: string, description: The name of the route","oParameters":"type: object, description: The parameters for the route. As of Version 1.75 the recommendation is naming the query parameter with a leading \"?\" character, which is identical to the definition in the route's pattern. The old syntax without a leading \"?\" character is deprecated. e.g. <b>Route:<\/b> <code>{parameterName1}/:parameterName2:/{?queryParameterName}<\/code> <b>Parameter:<\/b> <pre>\n\t\t\t\t{\n\t\t\t\t\tparameterName1: \"parameterValue1\",\n\t\t\t\t\tparameterName2: \"parameterValue2\",\n\t\t\t\t\t\"?queryParameterName\": {\n\t\t\t\t\t\tqueryParameterName1: \"queryParameterValue1\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t<\/pre>","bReplace":"type: boolean, description: If set to <code>true<\/code>, the hash is replaced, and there will be no entry in the browser history. If set to <code>false<\/code>, the hash is set and the entry is stored in the browser history."}},"!proto":"sap.ui.base.EventProvider","isInitialized":{"!description":"Returns whether the router is initialized by calling {@link sap.ui.core.routing.Router#initialize} function.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"fireBypassed":{"!description":"Fires event {@link #event:bypassed bypassed} to attached listeners.\n\nThe event will get fired, if none of the routes of the router is matching.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Router","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"!category":"class","attachBeforeRouteMatched":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:beforeRouteMatched beforeRouteMatched} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Router<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.core.routing.Router<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachRouteMatched":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:routeMatched routeMatched} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Router<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.core.routing.Router<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getRoute":{"!description":"Returns the route with the given name or <code>undefined<\/code> if no route is found.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.routing.Route","parameters":{"sName":"type: string, description: Name of the route"}},"detachRoutePatternMatched":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:routePatternMatched routePatternMatched} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.\n\nThis event is similar to <code>routeMatched<\/code>. But it will only fire for the route that has a matching pattern, not for its parent routes.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called when the event occurs"}},"getRouter":{"!description":"Get a registered router.","!static":true,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.routing.Router","parameters":{"sName":"type: string, description: Name of the router"}},"getHashChanger":{"!description":"Returns the hash changer instance which is used in the router.\n\nThis hash changer behaves differently than the hash changer that is returned by {@link sap.ui.core.routing.HashChanger.getInstance}, especially when the router is created in a component which is nested within another component. When this hash changer is used, the other hash parts which belong to the parent components are kept in the browser hash, while the complete browser hash is changed when it's changed by using the {@link sap.ui.core.routing.HashChanger.getInstance}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.RouterHashChanger"},"getTargets":{"!description":"Returns the instance of <code>sap.ui.core.routing.Targets<\/code>, if you passed a <code>targets<\/code> configuration to the router.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Targets | undefined"},"fireRouteMatched":{"!description":"Fires event {@link #event:routeMatched routeMatched} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Router","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"getTarget":{"!description":"Returns a target by its name.\n\nIf you pass <code>myTarget: { view: \"myView\" })<\/code> in the config, <code>myTarget<\/code> is the name. See {@link sap.ui.core.routing.Targets#getTarget}.","!static":false,"!category":"function","!type":"fn(vName: [String | String]) -> [sap.ui.core.routing.Target | undefined | sap.ui.core.routing.Target]","parameters":{"vName":"type: string|string[], description: Name of a single target or an array of names of multiple targets"}},"!constructorDescription":"Instantiates a SAPUI5 Router","fireRoutePatternMatched":{"!description":"Fires event {@link #event:routePatternMatched routePatternMatched} to attached listeners.\n\nThis event is similar to <code>routeMatched<\/code>. But it will only fire for the route that has a matching pattern, not for its parent routes.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Router","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"fireViewCreated":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 use {@link #getViews} instead.<br>Fires event {@link #event:viewCreated viewCreated} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Router","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"attachRoutePatternMatched":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:routePatternMatched routePatternMatched} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThis event is similar to <code>routeMatched<\/code>. But it will only fire for the route that has a matching pattern, not for its parent routes.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Router<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.core.routing.Router<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"attachViewCreated":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 use {@link #getViews} instead.<br>Attaches event handler <code>fnFunction<\/code> to the {@link #event:viewCreated viewCreated} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Router<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.core.routing.Router<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachBeforeRouteMatched":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:beforeRouteMatched beforeRouteMatched} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called when the event occurs"}},"getView":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28.1 use {@link #getViews} instead.<br>Returns a cached view for a given name or creates it if it does not exist yet.","!static":false,"!category":"function","!type":"fn(sViewName: String, sViewType: String, sViewId: String) -> sap.ui.core.mvc.View","parameters":{"sViewId":"type: string, description: Optional view id","sViewType":"type: string, description: Type of the view","sViewName":"type: string, description: Name of the view"}},"attachBypassed":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:bypassed bypassed} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe event will get fired, if none of the routes of the router is matching.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Router<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.core.routing.Router<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.routing.Router.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"isStopped":{"!description":"Returns whether the router is stopped by calling {@link sap.ui.core.routing.Router#stop} function.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getTitleHistory":{"!description":"Returns the title history.\n\nHistory entry example: <pre>\n\t{\n\t\ttitle: \"TITLE\", // The displayed title\n\t\thash: \"HASH\" // The url hash\n\t\tisHome: \"true/false\" // The app home indicator\n\t}\n<\/pre>","!static":false,"!category":"function","!type":"fn() -> Array"},"fireBeforeRouteMatched":{"!description":"Fires event {@link #event:beforeRouteMatched beforeRouteMatched} to attached listeners.","!static":false,"!category":"function","!type":"fn(oParameters?: Object) -> sap.ui.core.routing.Router","parameters":{"oParameters":"type: object, description: Parameters to pass along with the event"}},"match":{"!description":"Returns whether the given hash can be matched by any of the routes in the router.","!static":false,"!category":"function","!type":"fn(sHash: String) -> Boolean","parameters":{"sHash":"type: string, description: which will be tested by the Router"}},"destroy":{"!description":"Removes the router from the hash changer.\n\nSee {@link sap.ui.core.routing.HashChanger}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Router"},"detachViewCreated":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 use {@link #getViews} instead.<br>Detaches event handler <code>fnFunction<\/code> from the {@link #event:viewCreated viewCreated} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called when the event occurs"}},"getRouteInfoByHash":{"!description":"Returns a route info object containing the name and arguments of the route which matches the given hash or <code>undefined<\/code>.","!static":false,"!category":"function","!type":"fn(sHash: String) -> Object | undefined","parameters":{"sHash":"type: string, description: The hash to be matched"}},"parse":{"!description":"Will trigger routing events + place targets for routes matching the string.","!static":false,"!category":"function","!type":"fn(sNewHash: String)","parameters":{"sNewHash":"type: string, description: A new hash"}},"getRouteByHash":{"!description":"Returns the first route which matches the given hash or <code>undefined<\/code> if no matching route can be determined","!static":false,"!category":"function","!type":"fn(sHash: String) -> sap.ui.core.routing.Route | undefined","parameters":{"sHash":"type: string, description: The hash of the desired route"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Router with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getURL":{"!description":"Returns the URL for the route and replaces the placeholders with the values in <code>oParameters<\/code>.","!static":false,"!category":"function","!type":"fn(sName: String, oParameters?: Object) -> String | undefined","parameters":{"sName":"type: string, description: Name of the route","oParameters":"type: object, description: Parameters for the route"}},"attachTitleChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:titleChanged titleChanged} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.routing.Router<\/code> itself.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object to call the event handler with, defaults to this <code>sap.ui.core.routing.Router<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"!module":"sap/ui/core/routing/Router","stop":{"!description":"Stops to listen to the <code>hashChange<\/code> of the browser.\n\nIf you want the router to start again, call {@link #initialize} again.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Router"},"addRoute":{"!description":"Adds a route to the router.","!static":false,"!category":"function","!type":"fn(oConfig: Object, oParent: sap.ui.core.routing.Route)","parameters":{"oConfig":"type: object, description: Configuration object for the route @see sap.ui.core.routing.Route#constructor","oParent":"type: sap.ui.core.routing.Route, description: The parent route - if a parent route is given, the <code>routeMatched<\/code> event of this route will also trigger the <code>routeMatched<\/code> of the parent and it will also create the view of the parent (if provided)."}},"getViews":{"!description":"Returns the <code>sap.ui.core.routing.Views<\/code> instance created by the router.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Views"},"setView":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28 use {@link #getViews} instead.<br>Adds or overwrites a view in the view cache of the router which will be cached under the given <code>sViewName<\/code> and the \"undefined\" key.","!static":false,"!category":"function","!type":"fn(sViewName: String, oView: sap.ui.core.mvc.View) -> sap.ui.core.routing.Router","parameters":{"oView":"type: sap.ui.core.mvc.View, description: The view instance","sViewName":"type: string, description: Name of the view"}},"detachTitleChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:titleChanged titleChanged} event of this <code>sap.ui.core.routing.Router<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.core.routing.Router","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called when the event occurs"}},"initialize":{"!description":"Attaches the router to the hash changer.\n\nSee {@link sap.ui.core.routing.HashChanger}.","!static":false,"!category":"function","!type":"fn(bIgnoreInitialHash?: Boolean) -> sap.ui.core.routing.Router","parameters":{"bIgnoreInitialHash":"type: boolean, description: @since 1.48.0 Whether the current URL hash shouldn't be parsed after the router is initialized"}},"_interceptRouteMatched":{"!description":"Intercepts <code>routeMatched<\/code> event.\n\nThis method is meant for private usages. Apps are not supposed to used it. It is created for an experimental purpose. Implementation should be injected by outside.","!static":true,"!category":"function","!type":"fn(sControlId: String, oRouter: sap.ui.core.routing.Router)","parameters":{"sControlId":"type: string, description: the name of the container control (usually sap.m.App) which targets are rendered in.","oRouter":"type: sap.ui.core.routing.Router, description: The instance of the router"}},"register":{"!description":"Centrally register this router instance under a given name to be able to access it from another context, just by knowing the name.\n\nUse {@link sap.ui.core.routing.Router.getRouter Router.getRouter()} to retrieve the instance.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.routing.Router","parameters":{"sName":"type: string, description: Name of the router instance"}}},"sap.ui.model.Sorter":{"!description":"Sorter for list bindings.\n\nInstances of this class define the sort order for a list binding.","extend":{"!description":"Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.Sorter.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for Sorter.","!module":"sap/ui/model/Sorter","!helpDescription":"Sorter for list bindings.\n\nInstances of this class define the sort order for a list binding.","getGroupFunction":{"!description":"Returns the group function of this Sorter. If grouping is not enabled on this Sorter, it will return undefined, if no explicit group function has been defined the default group function is returned. The returned function is bound to its Sorter, so it will group according to its own property path, even if it is used in the context of another Sorter.","!static":false,"!category":"function","!type":"fn() -> fn()"},"getGroup":{"!description":"Returns a group object, at least containing a key property for group detection. May contain additional properties as provided by a custom group function.","!static":false,"!category":"function","!type":"fn(oContext: sap.ui.model.Context) -> Object","parameters":{"oContext":"type: sap.ui.model.Context, description: the binding context"}},"!proto":"sap.ui.base.Object","!category":"class","defaultComparator":{"!description":"Compares two values\n\nThis is the default comparator function used for clientside sorting, if no custom comparator is given in the constructor. It does compare just by using equal/less than/greater than with automatic type casting, except for null values, which are last in ascending order, and string values where localeCompare is used.\n\nThe comparator method returns -1, 0 or 1, depending on the order of the two items and is suitable to be used as a comparator method for Array.sort.","!static":true,"!category":"function","!type":"fn(a: Object, b: Object) -> Number","parameters":{"a":"type: any, description: the first value to compare","b":"type: any, description: the second value to compare"}}},"sap.ui.model.odata.type.ODataType":{"!description":"This class is an abstract base class for all OData primitive types (see {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element OData V4 Edm Types} and {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem OData V2 Edm Types}). All subtypes implement the interface of {@link sap.ui.model.SimpleType}. That means they implement next to the constructor: <ul> <li>{@link sap.ui.model.SimpleType#getName getName}<\/li> <li>{@link sap.ui.model.SimpleType#formatValue formatValue}<\/li> <li>{@link sap.ui.model.SimpleType#parseValue parseValue}<\/li> <li>{@link sap.ui.model.SimpleType#validateValue validateValue}<\/li> <\/ul>\n\nAll ODataTypes are immutable. All format options and constraints are given to the constructor, they cannot be modified later.\n\nAll ODataTypes use a locale-specific message when throwing an error caused by invalid user input (e.g. if {@link sap.ui.model.odata.type.Double#parseValue Double.parseValue} cannot parse the given value to a number, or if any type's {@link #validateValue validateValue} gets a <code>null<\/code>, but the constraint <code>nullable<\/code> is <code>false<\/code>).","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.ODataType with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getInterface":{"!static":false,"!category":"function","!type":"fn() -> Object"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.ODataType.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>ODataType<\/code>.","!module":"sap/ui/model/odata/type/ODataType","!helpDescription":"This class is an abstract base class for all OData primitive types (see {@link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part3-csdl/odata-v4.0-errata02-os-part3-csdl-complete.html#_The_edm:Documentation_Element OData V4 Edm Types} and {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem OData V2 Edm Types}). All subtypes implement the interface of {@link sap.ui.model.SimpleType}. That means they implement next to the constructor: <ul> <li>{@link sap.ui.model.SimpleType#getName getName}<\/li> <li>{@link sap.ui.model.SimpleType#formatValue formatValue}<\/li> <li>{@link sap.ui.model.SimpleType#parseValue parseValue}<\/li> <li>{@link sap.ui.model.SimpleType#validateValue validateValue}<\/li> <\/ul>\n\nAll ODataTypes are immutable. All format options and constraints are given to the constructor, they cannot be modified later.\n\nAll ODataTypes use a locale-specific message when throwing an error caused by invalid user input (e.g. if {@link sap.ui.model.odata.type.Double#parseValue Double.parseValue} cannot parse the given value to a number, or if any type's {@link #validateValue validateValue} gets a <code>null<\/code>, but the constraint <code>nullable<\/code> is <code>false<\/code>).","!proto":"sap.ui.model.SimpleType","!category":"class"},"sap.ui.core.message.Message_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.message.Message with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(mParameters?: Object)","prototype":"sap.ui.core.message.Message"},"sap.ui.core.IndicationColorSupport":{"!description":"Helper functionality for indication color support.","getAdditionalText":{"!description":"Returns a generic indication color message if the given Element has a property <code>IndicationColor<\/code> with one of the states or the given <code>indicationColor<\/code> string represents one of five states.","!static":"true","!category":"function","!type":"fn(vValue: sap.ui.core.Element | sap.ui.core.IndicationColor) -> String"},"!module":"sap/ui/core/IndicationColorSupport","!helpDescription":"Helper functionality for indication color support.","!category":"namespace"},"sap.ui.base.EventProvider":{"!description":"Provides eventing capabilities for objects like attaching or detaching event handlers for events which are notified when events are fired.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.base.EventProvider.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"fireEvent":{"!description":"Fires an {@link sap.ui.base.Event event} with the given settings and notifies all attached event handlers.","!static":false,"!category":"function","!type":"fn(sEventId: String, oParameters?: Object, bAllowPreventDefault?: Boolean, bEnableEventBubbling?: Boolean) -> sap.ui.base.EventProvider | Boolean","parameters":{"sEventId":"type: string, description: The identifier of the event to fire","bEnableEventBubbling":"type: boolean, description: Defines whether event bubbling is enabled on the fired event. Set to <code>true<\/code> the event is also forwarded to the parent(s) of the event provider ({@link #getEventingParent}) until the bubbling of the event is stopped or no parent is available anymore.","bAllowPreventDefault":"type: boolean, description: Defines whether function <code>preventDefault<\/code> is supported on the fired event","oParameters":"type: object, description: Parameters which should be carried by the event"}},"!proto":"sap.ui.base.Object","destroy":{"!description":"Cleans up the internal structures and removes all event handlers.\n\nThe object must not be used anymore after destroy was called.","!static":false,"!category":"function","!type":"fn()"},"!category":"class","getEventingParent":{"!description":"Returns the parent in the eventing hierarchy of this object.\n\nPer default this returns null, but if eventing is used in objects, which are hierarchically structured, this can be overwritten to make the object hierarchy visible to the eventing and enables the use of event bubbling within this object hierarchy.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.EventProvider"},"detachEvent":{"!description":"Removes a previously attached event handler from the event with the given identifier.\n\nThe passed parameters must match those used for registration with {@link #attachEvent} beforehand.","!static":false,"!category":"function","!type":"fn(sEventId: String, fnFunction: fn(), oListener?: Object) -> sap.ui.base.EventProvider","parameters":{"oListener":"type: object, description: The object that wanted to be notified when the event occurred","sEventId":"type: string, description: The identifier of the event to detach from","fnFunction":"type: function, description: The handler function to detach from the event"}},"extend":{"!description":"Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"attachEventOnce":{"!description":"Attaches an event handler, called one time only, to the event with the given identifier.\n\nWhen the event occurs, the handler function is called and the handler registration is automatically removed afterwards.","!static":false,"!category":"function","!type":"fn(sEventId: String, oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.EventProvider","parameters":{"oListener":"type: object, description: The object that wants to be notified when the event occurs (<code>this<\/code> context within the handler function). If it is not specified, the handler function is called in the context of the event provider.","sEventId":"type: string, description: The identifier of the event to listen for","fnFunction":"type: function, description: The handler function to call when the event occurs. This function will be called in the context of the <code>oListener<\/code> instance (if present) or on the event provider instance. The event object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change the content of the event. The second argument is the specified <code>oData<\/code> instance (if present).","oData":"type: object, description: An object that will be passed to the handler along with the event object when the event is fired"}},"attachEvent":{"!description":"Attaches an event handler to the event with the given identifier.","!static":false,"!category":"function","!type":"fn(sEventId: String, oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.base.EventProvider","parameters":{"oListener":"type: object, description: The object that wants to be notified when the event occurs (<code>this<\/code> context within the handler function). If it is not specified, the handler function is called in the context of the event provider.","sEventId":"type: string, description: The identifier of the event to listen for","fnFunction":"type: function, description: The handler function to call when the event occurs. This function will be called in the context of the <code>oListener<\/code> instance (if present) or on the event provider instance. The event object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change the content of the event. The second argument is the specified <code>oData<\/code> instance (if present).","oData":"type: object, description: An object that will be passed to the handler along with the event object when the event is fired"}},"!constructorDescription":"Creates an instance of EventProvider.","!module":"sap/ui/base/EventProvider","!helpDescription":"Provides eventing capabilities for objects like attaching or detaching event handlers for events which are notified when events are fired.","toString":{"!description":"Returns a string representation of this object.\n\nIn case there is no class or id information, a simple static string is returned. Subclasses should override this method.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"},"hasListeners":{"!description":"Returns whether there are any registered event handlers for the event with the given identifier.","!static":false,"!category":"function","!type":"fn(sEventId: String) -> Boolean","parameters":{"sEventId":"type: string, description: The identifier of the event"}},"hasListener":{"!description":"Checks whether the given event provider has the given listener registered for the given event.\n\nReturns true if function and listener object both match the corresponding parameters of at least one listener registered for the named event.","!static":true,"!category":"function","!type":"fn(oEventProvider: sap.ui.base.EventProvider, sEventId: String, fnFunction: fn(), oListener?: Object) -> Boolean","parameters":{"oListener":"type: object, description: The listener object to check for","sEventId":"type: string, description: The identifier of the event to check listeners for","fnFunction":"type: function, description: The handler function to check for","oEventProvider":"type: sap.ui.base.EventProvider, description: The event provider to get the registered events for"}}},"sap.ui.core.date.UniversalDate":{"!description":"The UniversalDate is the base class of calendar date instances. It contains the static methods to create calendar specific instances.\n\nThe member variable <code>this.oData<\/code> contains the JS Date object, which is the source value of the date information. The prototype is containing getters and setters of the JS Date and is delegating them to the internal date object. Implementations for specific calendars may override methods needed for their specific calendar (e.g. getYear and getEra for Japanese emperor calendar);","extend":{"!description":"Creates a new subclass of class sap.ui.core.date.UniversalDate with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getClass":{"!description":"Returns a specific Date class, based on the calendar type from the configuration, or as explicitly defined by parameter. The object provides all methods also known on the JavaScript Date object.","!static":true,"!category":"function","!type":"fn(sCalendarType: sap.ui.core.CalendarType)","parameters":{"sCalendarType":"type: sap.ui.core.CalendarType, description: the type of the used calendar"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.date.UniversalDate.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for UniversalDate.","!module":"sap/ui/core/date/UniversalDate","!helpDescription":"The UniversalDate is the base class of calendar date instances. It contains the static methods to create calendar specific instances.\n\nThe member variable <code>this.oData<\/code> contains the JS Date object, which is the source value of the date information. The prototype is containing getters and setters of the JS Date and is delegating them to the internal date object. Implementations for specific calendars may override methods needed for their specific calendar (e.g. getYear and getEra for Japanese emperor calendar);","getJSDate":{"!description":"Returns the JS date object representing the current calendar date value.","!static":false,"!category":"function","!type":"fn() -> Date"},"!proto":"sap.ui.base.Object","!category":"class","getInstance":{"!description":"Returns an instance of Date, based on the calendar type from the configuration, or as explicitly defined by parameter. The object provides all methods also known on the JavaScript Date object.","!static":true,"!category":"function","!type":"fn(oDate: Date, sCalendarType: sap.ui.core.CalendarType) -> sap.ui.core.date.UniversalDate","parameters":{"oDate":"type: Date, description: A JavaScript date object","sCalendarType":"type: sap.ui.core.CalendarType, description: A calendar type"}}},"sap.ui.model.odata.v4.ODataContextBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v4.ODataContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.odata.v4.ODataContextBinding"},"sap.ui.core.support.Plugin_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.support.Plugin with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.core.support.Plugin"},"sap.ui.core.util.PasteHelper":{"!description":"Parses and validates data on the <code>paste<\/code> event of an SAPUI5 table.","!constructorDescription":"A utility for converting and validating data pasted from the clipboard. This utility is used for importing data\nfrom spreadsheets to SAPUI5 tables.","!module":"sap/ui/core/util/PasteHelper","!helpDescription":"Parses and validates data on the <code>paste<\/code> event of an SAPUI5 table.","!proto":"sap.ui.base.Object","!category":"class"},"sap.ui.core.Priority":{"!description":"Priorities for general use.","High":{"!description":"High priority","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Low":{"!description":"Low priority","!category":"enum","!type":"String"},"Medium":{"!description":"Medium priority","!category":"enum","!type":"String"},"!category":"static class","None":{"!description":"Default, none priority","!category":"enum","!type":"String"}},"sap.ui.model.odata.type.Int":{"!description":"This is an abstract base class for integer-based <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> OData primitive types<\/a> like <code>Edm.Int16<\/code> or <code>Edm.Int32<\/code>.","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.type.Int with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.type.Int.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new <code>Int<\/code>.","formatValue":{"!description":"Formats the given value to the given target type. When formatting to <code>string<\/code> the format options are used.","!static":false,"!category":"function","!type":"fn(iValue: Number, sTargetType: String) -> Number | String","parameters":{"sTargetType":"type: string, description: the target type; may be \"any\", \"int\", \"float\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","iValue":"type: number, description: the value in model representation to be formatted"}},"!module":"sap/ui/model/odata/type/Int","!helpDescription":"This is an abstract base class for integer-based <a href=\"http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem\"> OData primitive types<\/a> like <code>Edm.Int16<\/code> or <code>Edm.Int32<\/code>.","!proto":"sap.ui.model.odata.type.ODataType","validateValue":{"!description":"Validates whether the given value in model representation is valid and meets the defined constraints.","!static":false,"!category":"function","!type":"fn(iValue: Number)","parameters":{"iValue":"type: number, description: the value to be validated"}},"!category":"class","parseValue":{"!description":"Parses the given value, which is expected to be of the given source type, to an Int in number representation.","!static":false,"!category":"function","!type":"fn(vValue: Number | String, sSourceType: String) -> Number","parameters":{"sSourceType":"type: string, description: the source type (the expected type of <code>vValue<\/code>); may be \"float\", \"int\", \"string\", or a type with one of these types as its {@link sap.ui.base.DataType#getPrimitiveType primitive type}. See {@link sap.ui.model.odata.type} for more information.","vValue":"type: number|string, description: the value to be parsed. The empty string and <code>null<\/code> are parsed to <code>null<\/code>."}}},"sap.ui.core.util.serializer.delegate.HTML":{"!description":"HTML serializer delegate class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.delegate.HTML with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.delegate.HTML.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"HTML serializer delegate class. Called by the serializer instance.","!module":"sap/ui/core/util/serializer/delegate/HTML","!helpDescription":"HTML serializer delegate class.","!proto":"sap.ui.core.util.serializer.delegate.Delegate","!category":"class"},"sap.ui.core.CommandExecution":{"setVisible":{"!description":"Sets whether the <code>CommandExecution<\/code> is visible, or not. If set to false, the <code>CommandExecution<\/code> will unregister the shortcut. If not visible, the CommandExecution will not be triggered even if it is enabled.","!static":false,"!category":"function","!type":"fn(bValue: Boolean) -> sap.ui.core.Element","parameters":{"bValue":"type: boolean, description: Whether the CommandExecution is visible, or not."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.CommandExecution.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getVisible":{"!description":"Gets current value of property {@link #getVisible visible}.\n\nWhether the CommandExecution is visible, or not. By default, it is visible. If not visible, the CommandExecution will not be triggered even if it is enabled.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getCommand":{"!description":"Gets current value of property {@link #getCommand command}.\n\nThe command's name, that has to be defined in the manifest. This property can only be applied initially.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.core.Element","!category":"class","attachExecute":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:execute execute} event of this <code>sap.ui.core.CommandExecution<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.CommandExecution<\/code> itself.\n\nExecute will be fired when the CommandExecution will be triggered.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.CommandExecution","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.CommandExecution<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"trigger":{"!description":"Fires the execute event and triggers the attached handler. If the CommandExecution is disabled, the handler will not be triggered.","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.CommandExecution with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setEnabled":{"!description":"Sets whether the <code>CommandExecution<\/code> is enabled, or not. If set to false, the <code>CommandExecution<\/code> will still register the shortcut. This will block the default behavior for that shortcut.","!static":false,"!category":"function","!type":"fn(bValue: Boolean) -> sap.ui.core.Element","parameters":{"bValue":"type: boolean, description: Whether the CommandExecution is enabled, or not."}},"!constructorDescription":"Creates and initializes a new CommandExecution.\n\nThe CommandExecution registers a shortcut when it is added to the dependent\naggregation of a control. The shortcut information is retrieved from the\nowner components manifest (<code>/sap.ui5/commands/&lt;command&gt;<\/code>).\n\nYou can use a CommandExecution instead of an event handler in XMLViews by\nusing <code>cmd:<\/code> plus the command name.\n\nExample for <code>sap.m.Button<\/code>:\n\n<pre>\n&lt;Button press=\"cmd:MyCommand\" /&gt;\n<\/pre>\n\nWhen the press event is fired, the CommandExecution will be triggered and\nthe <code>execute<\/code> event is fired.\n\nWhen using commands, the component will create a model named <code>$cmd<\/code>.\nThe model data provides the enabled state of all CommandExecution.\nWhen binding a button's enabled state to this model, it follows the\nenabled state of the CommandExecution. The binding path must be relative\nlike <code>myCommand/enabled<\/code>:\n\n<pre>\n&lt;Button press=\"cmd:MyCommand\" enabled=\"$cmd&gt;MyCommand/enabled\" /&gt;\n<\/pre>\n\n<b>Note: The usage of the <code>$cmd<\/code> model is restricted to <code>sap.suite.ui.generic<\/code><\/b>\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getCommand command} : string<\/li>\n<li>{@link #getEnabled enabled} : boolean (default: true)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:execute execute} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/core/CommandExecution","getEnabled":{"!description":"Gets current value of property {@link #getEnabled enabled}.\n\nWhether the CommandExecution is enabled or not. By default, it is enabled\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"detachExecute":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:execute execute} event of this <code>sap.ui.core.CommandExecution<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.CommandExecution","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"fireExecute":{"!description":"Fires event {@link #event:execute execute} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.CommandExecution","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}}},"sap.ui.core.tmpl.DOMAttribute":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>Represents a DOM attribute of a DOM element.","extend":{"!description":"Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nName of the DOM attribute\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.core.tmpl.DOMAttribute","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getValue":{"!description":"Gets current value of property {@link #getValue value}.\n\nValue of the DOM attribute","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.tmpl.DOMAttribute.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new tmpl/DOMAttribute.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getValue value} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","getName":{"!description":"Gets current value of property {@link #getName name}.\n\nName of the DOM attribute","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/core/tmpl/DOMAttribute","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>Represents a DOM attribute of a DOM element.","setValue":{"!description":"Sets a new value for property {@link #getValue value}.\n\nValue of the DOM attribute\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sValue: String) -> sap.ui.core.tmpl.DOMAttribute","parameters":{"sValue":"type: string, description: New value for property <code>value<\/code>"}},"!proto":"sap.ui.core.Element","!category":"class"},"sap.ui.core.dnd.DragDropInfo":{"!description":"Provides the configuration for drag-and-drop operations.\n\n<b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.dnd.DragDropInfo.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"attachDragEnd":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragEnd dragEnd} event of this <code>sap.ui.core.dnd.DragDropInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragDropInfo<\/code> itself.\n\nThis event is fired when a drag operation is being ended.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragDropInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragDropInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"getTargetElement":{"!description":"ID of the element which is the current target of the association {@link #getTargetElement targetElement}, or <code>null<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.ID"},"fireDragStart":{"!description":"Fires event {@link #event:dragStart dragStart} to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> Boolean","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"setTargetElement":{"!description":"Sets the associated {@link #getTargetElement targetElement}.","!static":false,"!category":"function","!type":"fn(oTargetElement: sap.ui.core.ID | sap.ui.core.Element) -> sap.ui.core.dnd.DragDropInfo","parameters":{"oTargetElement":"type: sap.ui.core.ID|sap.ui.core.Element, description: ID of an element which becomes the new target of this targetElement association; alternatively, an element instance may be given"}},"!proto":"sap.ui.core.dnd.DropInfo","!category":"class","extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DragDropInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.dnd.DropInfo.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getSourceAggregation":{"!description":"Gets current value of property {@link #getSourceAggregation sourceAggregation}.\n\nThe name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.","!static":false,"!category":"function","!type":"fn() -> String"},"setSourceAggregation":{"!description":"Sets a new value for property {@link #getSourceAggregation sourceAggregation}.\n\nThe name of the aggregation from which all children can be dragged. If undefined, the control itself can be dragged.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSourceAggregation: String) -> sap.ui.core.dnd.DragDropInfo","parameters":{"sSourceAggregation":"type: string, description: New value for property <code>sourceAggregation<\/code>"}},"!constructorDescription":"Constructor for a new DragDropInfo.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSourceAggregation sourceAggregation} : string<\/li>\n<\/ul>\n<\/li>\n<li>Associations\n<ul>\n<li>{@link #getTargetElement targetElement} : (sap.ui.core.ID | sap.ui.core.Element)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:dragStart dragStart} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:dragEnd dragEnd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.dnd.DropInfo#constructor sap.ui.core.dnd.DropInfo}\ncan be used as well.","!module":"sap/ui/core/dnd/DragDropInfo","fireDragEnd":{"!description":"Fires event {@link #event:dragEnd dragEnd} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.dnd.DragDropInfo","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"!helpDescription":"Provides the configuration for drag-and-drop operations.\n\n<b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","detachDragEnd":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragEnd dragEnd} event of this <code>sap.ui.core.dnd.DragDropInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragDropInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"attachDragStart":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:dragStart dragStart} event of this <code>sap.ui.core.dnd.DragDropInfo<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.dnd.DragDropInfo<\/code> itself.\n\nThis event is fired when the user starts dragging an element.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragDropInfo","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.dnd.DragDropInfo<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"detachDragStart":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:dragStart dragStart} event of this <code>sap.ui.core.dnd.DragDropInfo<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.dnd.DragDropInfo","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}}},"sap.ui.core.util.serializer.delegate":{"Delegate":"sap.ui.core.util.serializer.delegate.Delegate_obj","XML":"sap.ui.core.util.serializer.delegate.XML_obj","HTML":"sap.ui.core.util.serializer.delegate.HTML_obj","!category":"namespace"},"sap.ui.test":{"InteractionType":"sap.ui.test.RecordReplay.InteractionType","Opa":"sap.ui.test.Opa_obj","RecordReplay":"sap.ui.test.RecordReplay_obj","Actions":"sap.ui.test.OpaBuilder.Actions","!category":"namespace","Matchers":"sap.ui.test.OpaBuilder.Matchers","Opa5":"sap.ui.test.Opa5_obj","OpaBuilder":"sap.ui.test.OpaBuilder_obj","matchers":"sap.ui.test.matchers","assert":{"!description":"A map of QUnit-style assertions to be used in an opaTest.\n\nContains all methods available on <code>QUnit.assert<\/code> for the running QUnit version. Available assertions are: <code>ok<\/code>, <code>equal<\/code>, <code>propEqual<\/code>, <code>deepEqual<\/code>, <code>strictEqual<\/code> and their negative counterparts. You can define custom OPA5 assertions in the extensions section of {@link sap.ui.test.Opa5.extendConfig}.\n\nExample usage: <pre>\n  oOpa5.waitFor({\n    success: function () {\n      Opa5.assert.ok(true, \"Should be true\");\n    }\n  });\n<\/pre>\n\nFor more information, see {@link sap.ui.test.opaQunit}.","!category":"enum","!type":"map"},"OpaPlugin":"sap.ui.test.OpaPlugin_obj","opaQunit":{"!description":"QUnit test adapter for OPA: add a test to be executed by QUnit Has the same signature as QUnit.test (QUnit version is also considered) Suggested usage: <pre><code>\nsap.ui.require([\"sap/ui/test/Opa5\", \"sap/ui/test/opaQunit\"], function (Opa5, opaTest) {\n\n   Opa5.extendConfig({\n       assertions: new Opa5({\n           checkIfSomethingIsOk : function () {\n               this.waitFor({\n                   success: function () {\n                       Opa5.assert.ok(true, \"Everything is fine\");\n                   }\n               });\n           }\n       })\n   });\n\n   opaTest(\"Should test something\", function (Given, When, Then) {\n      // Implementation of the test\n      Then.checkIfSomethingIsOk();\n   });\n\n});\n<\/code><\/pre>","!static":"true","!category":"function","!type":"fn(testName: String, expected: Number | fn(), callback: fn(), async: Boolean)"},"OpaExtension":"sap.ui.test.OpaExtension_obj","gherkin":"sap.ui.test.gherkin","PageObjectFactory":"sap.ui.test.PageObjectFactory_obj","actions":"sap.ui.test.actions","config":{"!description":"The global configuration of Opa. All of the global values can be overwritten in an individual <code>waitFor<\/code> call. The default values are: <ul> <li>arrangements: A new Opa instance<\/li> <li>actions: A new Opa instance<\/li> <li>assertions: A new Opa instance<\/li> <li>timeout : 15 seconds, 0 for infinite timeout<\/li> <li>pollingInterval: 400 milliseconds<\/li> <li>debugTimeout: 0 seconds, infinite timeout by default. This will be used instead of timeout if running in debug mode.<\/li> <li>asyncPolling: false<\/li> <\/ul> You can either directly manipulate the config, or extend it using {@link sap.ui.test.Opa.extendConfig}.","!category":"enum","!type":"String"}},"jQuery.sap.util.Properties":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/util/Properties} instead<br>Represents a collection of string properties (key/value pairs).\n\nEach key and its corresponding value in the collection is a string, keys are case-sensitive.\n\nUse {@link jQuery.sap.properties} to create an instance of <code>jQuery.sap.util.Properties<\/code>.\n\nThe {@link #getProperty} method can be used to retrieve a value from the collection, {@link #setProperty} to store or change a value for a key and {@link #getKeys} can be used to retrieve an array of all keys that are currently stored in the collection.","!module":"jquery.sap.properties","!category":"static class"},"sap.ui.core.IconPool":{"!description":"The IconPool is a static class for retrieving or registering icons. It also provides helping methods for easier consumption of icons. There are already icons registered in IconPool, please use the Demo App named \"Icon Explorer\" to find the name of the icon.\n\nIn order to use the icon inside an existing control, please call {@link sap.ui.core.IconPool.getIconURI} and assign the URI to the control's property which supports icons. If you want to support both, icons and standard images in your own control, please use the static method {@link sap.ui.core.IconPool.createControlByURI} to either create an Icon in case the first argument is an icon-URL or another control which you define by providing it as the second argument.","getIconInfo":{"!description":"Returns an info object for the icon with the given <code>iconName<\/code> and <code>collectionName<\/code>.\n\nInstead of giving name and collection, a complete icon-URI can be provided as <code>iconName<\/code>. The method will determine name and collection from the URI, see {@link #.isIconURI IconPool.isIconURI} for details.\n\nThe returned info object has the following properties: <ul> <li><code>string: name<\/code> Name of the icon<\/li> <li><code>string: collection<\/code> Name of the collection that contains the icon or <code>undefined<\/code> in case of the default collection<\/li> <li><code>string: uri<\/code> Icon URI that identifies the icon<\/li> <li><code>string: fontFamily<\/code> CSS font family to use for this icon<\/li> <li><code>string: content<\/code> Character sequence that represents the icon in the icon font<\/li> <li><code>string: text<\/code> Alternative text describing the icon (optional, might be empty)<\/li> <li><code>boolean: suppressMirroring<\/code> Whether the icon needs no mirroring in right-to-left mode<\/li> <\/ul>","!static":"true","!category":"function","!type":"fn(iconName: String, collectionName?: String, loadingMode?: String) -> Object | Promise | undefined"},"getIconURI":{"!description":"Returns the URI of the icon in the pool which has the given <code>iconName<\/code> and <code>collectionName<\/code>.","!static":"true","!category":"function","!type":"fn(iconName: String, collectionName?: String) -> String"},"fontLoaded":{"!description":"Checks if the icon font is loaded","!static":"true","!category":"function","!type":"fn(sCollectionName: String) -> Promise | undefined"},"!category":"namespace","getIconForMimeType":{"!description":"Returns the icon url based on the given mime type","!static":"true","!category":"function","!type":"fn(sMimeType: String) -> String"},"getIconNames":{"!description":"Returns all name of icons that are registered under the given collection.","!static":"true","!category":"function","!type":"fn(collectionName: String) -> Array"},"!module":"sap/ui/core/IconPool","!helpDescription":"The IconPool is a static class for retrieving or registering icons. It also provides helping methods for easier consumption of icons. There are already icons registered in IconPool, please use the Demo App named \"Icon Explorer\" to find the name of the icon.\n\nIn order to use the icon inside an existing control, please call {@link sap.ui.core.IconPool.getIconURI} and assign the URI to the control's property which supports icons. If you want to support both, icons and standard images in your own control, please use the static method {@link sap.ui.core.IconPool.createControlByURI} to either create an Icon in case the first argument is an icon-URL or another control which you define by providing it as the second argument.","isIconURI":{"!description":"Returns whether the given <code>uri<\/code> is an icon URI.\n\nA string is an icon URI when it can be parsed as a URI and when it has one of the two forms <ul> <li>sap-icon://collectionName/iconName<\/li> <li>sap-icon://iconName<\/li> <\/ul> where collectionName and iconName must be non-empty.","!static":"true","!category":"function","!type":"fn(uri: String) -> Boolean"},"getIconCollectionNames":{"!description":"Returns all names of registered collections in IconPool","!static":"true","!category":"function","!type":"fn() -> Array"},"createControlByURI":{"!description":"Creates an instance of {@link sap.ui.core.Icon} if the given URI is an icon URI, otherwise the given constructor is called. The given URI is set to the src property of the control.","!static":"true","!category":"function","!type":"fn(setting: String | Object, constructor: fn()) -> sap.ui.core.Control"},"registerFont":{"!description":"Registers an additional icon font to the icon pool","!static":"true","!category":"function","!type":"fn(oConfig: Object)"},"addIcon":{"!description":"Register an additional icon to the sap.ui.core.IconPool.","!static":"true","!category":"function","!type":"fn(iconName: String, collectionName: String, iconInfo: Object) -> Object"}},"sap.ui.core.support.usage.EventBroadcaster":{"!description":"Broadcasts UI5 events via single native custom browser event. This way consumers have a generic mechanism for hooking into any UI5 event. Example consumer code: <pre>\n    window.addEventListener(\"UI5Event\", function(oEvent) {\n\n    \t\t// consumer coding, e.g. :\n    \t\t// analyze event\n    \t\t// store events - GDPR is responsibility of the consumer\n    \t\t// or any other\n\n    \t\tvar oDetail = oEvent.detail;\n\n    \t\tconsole.log(\"UI5 Event \" \t\t\t\t+ oDetail.eventName\n    \t\t\t+ \" occurred at \" \t\t\t\t\t+ new Date(oDetail.timestamp).toString()\n    \t\t\t+ \" for element \" \t\t\t\t\t+ oDetail.targetId\n    \t\t\t+ \" of type \"\t\t\t\t\t\t+ oDetail.targetType\n    \t\t\t+ \", which is part of component \" \t+ oDetail.componentId\n    \t\t\t+ \" with version \" \t\t\t\t\t+ oDetail.componentVersion\n    \t\t\t+ \" and additional parameters \"\t\t, oDetail.additionalAttributes);\n\n    });\n<\/pre>","broadcastEvent":{"!description":"Broadcasts an UI5 event. This method should not be called directly, but rather upon event firing.","!static":true,"!category":"function","!type":"fn(sEventId: String, oElement: sap.ui.core.Element, mParameters?: Object)","parameters":{"sEventId":"type: string, description: the name of the event","oElement":"type: sap.ui.core.Element, description: The event's target UI5 element","mParameters":"type: object, description: The parameters which complement the event"}},"!constructorDescription":"Event broadcaster. This class is meant for private usages. Apps are not supposed to used it.\nIt is created for an experimental purpose.","broadcastRouteMatched":{"!description":"Broadcast an UI5 Routing event. This method should not be called directly, but rather upon event firing.","!static":true,"!category":"function","!type":"fn(sEventId: String, sElementId: String, oRouter: sap.ui.core.routing.Router)","parameters":{"sEventId":"type: string, description: the name of the event","sElementId":"type: string, description: the container control tis navigation is fired on","oRouter":"type: sap.ui.core.routing.Router, description: The underlying router"}},"!module":"sap/ui/core/support/usage/EventBroadcaster","!helpDescription":"Broadcasts UI5 events via single native custom browser event. This way consumers have a generic mechanism for hooking into any UI5 event. Example consumer code: <pre>\n    window.addEventListener(\"UI5Event\", function(oEvent) {\n\n    \t\t// consumer coding, e.g. :\n    \t\t// analyze event\n    \t\t// store events - GDPR is responsibility of the consumer\n    \t\t// or any other\n\n    \t\tvar oDetail = oEvent.detail;\n\n    \t\tconsole.log(\"UI5 Event \" \t\t\t\t+ oDetail.eventName\n    \t\t\t+ \" occurred at \" \t\t\t\t\t+ new Date(oDetail.timestamp).toString()\n    \t\t\t+ \" for element \" \t\t\t\t\t+ oDetail.targetId\n    \t\t\t+ \" of type \"\t\t\t\t\t\t+ oDetail.targetType\n    \t\t\t+ \", which is part of component \" \t+ oDetail.componentId\n    \t\t\t+ \" with version \" \t\t\t\t\t+ oDetail.componentVersion\n    \t\t\t+ \" and additional parameters \"\t\t, oDetail.additionalAttributes);\n\n    });\n<\/pre>","disable":{"!description":"Disables the EventBroadcaster.","!static":true,"!category":"function","!type":"fn()"},"enable":{"!description":"Starts broadcasting events. Consumers could stop broadcasting via {@link sap.ui.core.support.usage.EventBroadcaster#disable EventBroadcaster.disable}","!static":true,"!category":"function","!type":"fn()"},"getEventsBlacklist":{"!description":"Returns the currently set Blacklist configuration. Returned object is copied from the original one. In case you modify it, you have to set it by using the <code>setEventBlacklist<\/code> setter in order for it to take effect.","!static":true,"!category":"function","!type":"fn()"},"!proto":"sap.ui.base.Object","!category":"class","setEventsBlacklist":{"!description":"Sets a new Blacklist configuration.\n\nBlackList configuration should have the following structure as in the example shown below.\n\nIn <code>global<\/code> object, we set all events that we don't want to track. In <code>controls<\/code> object, we can list different controls and include or exclude events for them.\n\nFor example, in this configuration the <code>load<\/code> event is exposed for the <code>sap.m.Image<\/code> control regardless of it being excluded globally for all other controls.\n\nFor <code>sap.m.Button<\/code> control, we don't want to track the <code>tap<\/code> event but we need to track the <code>afterRendering<\/code> event.\n\nIn the case where we write in the <code>controls<\/code> object a control without any excluded or included events, this control is NOT tracked at all.\n\nIn the example configuration events coming from control <code>sap.m.AccButton<\/code> are not be exposed.\n\n<pre>\n{\n\t\tglobal: [\"modelContextChange\", \"beforeRendering\", \"afterRendering\",\n\t\t\t\t\"propertyChanged\", \"beforeGeometryChanged\", \"geometryChanged\",\n\t\t\t\t\"aggregationChanged\", \"componentCreated\", \"afterInit\",\n\t\t\t\t\"updateStarted\", \"updateFinished\", \"load\", \"scroll\"\n\t\t\t\t],\n\t\tcontrols: {\n\t\t\t\"sap.m.Image\": {\n\t\t\t\texclude: [\"load\"]\n\t\t\t},\n\t\t\t\"sap.m.Button\": {\n\t\t\t\tinclude: [\"tap\"],\n\t\t\t\texclude: [\"afterRendering\"]\n\t\t\t},\n\t\t\t\"sap.m.AccButton\": {}\n\t\t}\n\t}\n<\/pre> The set configuration object is copied from the given one.","!static":true,"!category":"function","!type":"fn()"}},"sap.ui.model.analytics.odata4analytics.EntityType":{"!description":"Representation of an OData entity type.","getAllHierarchyPropertyNames":{"!description":"Get the names of all properties with an associated hierarchy","!static":false,"!category":"function","!type":"fn() -> [String]"},"getLabelOfProperty":{"!description":"Get label of the property with specified name (identified by property metadata annotation sap:label)","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> String","parameters":{"sPropertyName":"type: string, description: Property name"}},"getTypeDescription":{"!description":"Get full description for this entity type","!static":false,"!category":"function","!type":"fn() -> Object"},"getProperties":{"!description":"Get all properties","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.Object","!category":"class","getPropertiesWithFilterRestrictions":{"!description":"Get properties for which filter restrictions have been specified","!static":false,"!category":"function","!type":"fn() -> Object"},"getKeyProperties":{"!description":"Get key properties of this type","!static":false,"!category":"function","!type":"fn() -> [String]"},"getHeadingOfProperty":{"!description":"Get heading of the property with specified name (identified by property metadata annotation sap:heading)","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> String","parameters":{"sPropertyName":"type: string, description: Property name"}},"!constructorDescription":"Create a representation of an OData entity type in the context of an analytic\nquery. Do not create your own instances.","!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of an OData entity type.","getTextPropertyOfProperty":{"!description":"Get the text property related to the property with specified name (identified by property metadata annotation sap:text)","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Object","parameters":{"sPropertyName":"type: string, description: Property name"}},"getRequiredFilterPropertyNames":{"!description":"Get names of properties that must be filtered, that is they must appear in every $filter expression","!static":false,"!category":"function","!type":"fn() -> [String]"},"findPropertyByName":{"!description":"Find property by name","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Object","parameters":{"sPropertyName":"type: string, description: Property name"}},"getSortablePropertyNames":{"!description":"Get names of properties that can be sorted, that is they can be used in $orderby expressions","!static":false,"!category":"function","!type":"fn() -> [String]"},"getSuperOrdinatePropertyOfProperty":{"!description":"Get the super-ordinate property related to the property with specified name (identified by property metadata annotation sap:super-ordinate)","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> Object","parameters":{"sPropertyName":"type: string, description: Property name"}},"getFilterablePropertyNames":{"!description":"Get names of properties that can be filtered, that is they can be used in $filter expressions","!static":false,"!category":"function","!type":"fn() -> [String]"},"getQName":{"!description":"Get the fully qualified name for this entity type","!static":false,"!category":"function","!type":"fn() -> String"},"getHierarchy":{"!description":"Get the hierarchy associated to a given property Based on the current specification, hierarchies are always recursive. TODO: Extend behavior when leveled hierarchies get in scope","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.model.analytics.odata4analytics.RecursiveHierarchy","parameters":{"sName":"type: string, description: Parameter name"}},"getQuickInfoOfProperty":{"!description":"Get quick info of the property with specified name (identified by property metadata annotation sap:quickinfo)","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> String","parameters":{"sPropertyName":"type: string, description: Property name"}}},"sap.ui.model.StaticBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.StaticBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.model.StaticBinding"},"sap.ui.core.ScrollBar":{"getContentSize":{"!description":"Gets current value of property {@link #getContentSize contentSize}.\n\nSize of the scrollable content (in pixels).","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!proto":"sap.ui.core.Control","!category":"class","setContentSize":{"!description":"Sets a new value for property {@link #getContentSize contentSize}.\n\nSize of the scrollable content (in pixels).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sContentSize: sap.ui.core.CSSSize) -> sap.ui.core.ScrollBar","parameters":{"sContentSize":"type: sap.ui.core.CSSSize, description: New value for property <code>contentSize<\/code>"}},"!constructorDescription":"Constructor for a new ScrollBar.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getVertical vertical} : boolean (default: true)<\/li>\n<li>{@link #getScrollPosition scrollPosition} : int<\/li>\n<li>{@link #getSize size} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getContentSize contentSize} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getSteps steps} : int<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:scroll scroll} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","bind":{"!description":"Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.","!static":false,"!category":"function","!type":"fn(oOwnerDomRef: String)","parameters":{"oOwnerDomRef":"type: string, description: Dom ref of the control that uses the scrollbar"}},"setSize":{"!description":"Sets a new value for property {@link #getSize size}.\n\nSize of the Scrollbar (in pixels).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sSize: sap.ui.core.CSSSize) -> sap.ui.core.ScrollBar","parameters":{"sSize":"type: sap.ui.core.CSSSize, description: New value for property <code>size<\/code>"}},"setSteps":{"!description":"Sets a new value for property {@link #getSteps steps}.\n\nNumber of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iSteps: Number) -> sap.ui.core.ScrollBar","parameters":{"iSteps":"type: int, description: New value for property <code>steps<\/code>"}},"fireScroll":{"!description":"Fires event {@link #event:scroll scroll} to attached listeners.","!static":false,"!category":"function","!type":"fn(mParameters?: Object) -> sap.ui.core.ScrollBar","parameters":{"mParameters":"type: object, description: Parameters to pass along with the event"}},"getSteps":{"!description":"Gets current value of property {@link #getSteps steps}.\n\nNumber of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.","!static":false,"!category":"function","!type":"fn() -> Number"},"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>The ScrollBar control can be used for virtual scrolling of a certain area. This means: to simulate a very large scrollable area when technically the area is small and the control takes care of displaying the respective part only. E.g. a Table control can take care of only rendering the currently visible rows and use this ScrollBar control to make the user think he actually scrolls through a long list.","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.ScrollBar.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"pageDown":{"!description":"Page Down is used to scroll one page forward.","!static":false,"!category":"function","!type":"fn()"},"pageUp":{"!description":"Page Up is used to scroll one page back.","!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getSize":{"!description":"Gets current value of property {@link #getSize size}.\n\nSize of the Scrollbar (in pixels).","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.CSSSize"},"!module":"sap/ui/core/ScrollBar","!helpDescription":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.56 undefined<br>The ScrollBar control can be used for virtual scrolling of a certain area. This means: to simulate a very large scrollable area when technically the area is small and the control takes care of displaying the respective part only. E.g. a Table control can take care of only rendering the currently visible rows and use this ScrollBar control to make the user think he actually scrolls through a long list.","unbind":{"!description":"Unbinds the mouse wheel scroll event of the control that has the scrollbar","!static":false,"!category":"function","!type":"fn(oOwnerDomRef: String)","parameters":{"oOwnerDomRef":"type: string, description: Dom ref of the Control that uses the scrollbar"}},"setVertical":{"!description":"Sets a new value for property {@link #getVertical vertical}.\n\nOrientation. Defines if the Scrollbar is vertical or horizontal.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn(bVertical: Boolean) -> sap.ui.core.ScrollBar","parameters":{"bVertical":"type: boolean, description: New value for property <code>vertical<\/code>"}},"getVertical":{"!description":"Gets current value of property {@link #getVertical vertical}.\n\nOrientation. Defines if the Scrollbar is vertical or horizontal.\n\nDefault value is <code>true<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"detachScroll":{"!description":"Detaches event handler <code>fnFunction<\/code> from the {@link #event:scroll scroll} event of this <code>sap.ui.core.ScrollBar<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener?: Object) -> sap.ui.core.ScrollBar","parameters":{"oListener":"type: object, description: Context object on which the given function had to be called","fnFunction":"type: function, description: The function to be called, when the event occurs"}},"getScrollPosition":{"!description":"Gets current value of property {@link #getScrollPosition scrollPosition}.\n\nScroll position in steps or pixels.","!static":false,"!category":"function","!type":"fn() -> Number"},"attachScroll":{"!description":"Attaches event handler <code>fnFunction<\/code> to the {@link #event:scroll scroll} event of this <code>sap.ui.core.ScrollBar<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, otherwise it will be bound to this <code>sap.ui.core.ScrollBar<\/code> itself.\n\nScroll event.","!static":false,"!category":"function","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.core.ScrollBar","parameters":{"oListener":"type: object, description: Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar<\/code> itself","fnFunction":"type: function, description: The function to be called when the event occurs","oData":"type: object, description: An application-specific payload object that will be passed to the event handler along with the event object when firing the event"}},"setScrollPosition":{"!description":"Sets a new value for property {@link #getScrollPosition scrollPosition}.\n\nScroll position in steps or pixels.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iScrollPosition: Number) -> sap.ui.core.ScrollBar","parameters":{"iScrollPosition":"type: int, description: New value for property <code>scrollPosition<\/code>"}}},"sap.ui.core.IndicationColor":{"!description":"Colors to highlight certain UI elements.\n\nIn contrast to the <code>ValueState<\/code>, the semantic meaning must be defined by the application.","Indication01":{"!description":"Indication Color 1","!category":"enum","!type":"String"},"Indication03":{"!description":"Indication Color 3","!category":"enum","!type":"String"},"Indication02":{"!description":"Indication Color 2","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Indication08":{"!description":"Indication Color 8","!category":"enum","!type":"String"},"!category":"static class","Indication05":{"!description":"Indication Color 5","!category":"enum","!type":"String"},"Indication04":{"!description":"Indication Color 4","!category":"enum","!type":"String"},"Indication07":{"!description":"Indication Color 7","!category":"enum","!type":"String"},"Indication06":{"!description":"Indication Color 6","!category":"enum","!type":"String"}},"sap.ui.core.mvc.ViewType":{"!description":"Specifies possible view types.","!module":"sap/ui/core/library","XML":{"!description":"XML view","!category":"enum","!type":"String"},"JS":{"!description":"JS View","!category":"enum","!type":"String"},"!category":"static class","HTML":{"!description":"HTML view","!category":"enum","!type":"String"},"JSON":{"!description":"JSON View","!category":"enum","!type":"String"},"Template":{"!description":"Template View","!category":"enum","!type":"String"}},"sap.ui.core.ComponentMetadata":{"getVersion":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.34.2 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.app/applicationVersion/version\")<br>Returns the version of the component. If not specified, the return value is null. <p> <b>Important:<\/b><\/br> If a Component is loaded using the manifest URL (or according the \"manifest first\" strategy), this function ignores the entries of the manifest file! It returns only the entries which have been defined in the Component metadata or in the proper Component manifest.","!static":false,"!category":"function","!type":"fn() -> String"},"getComponentName":{"!description":"Returns the name of the Component (which is the namespace only with the module name)","!static":false,"!category":"function","!type":"fn() -> String"},"getDependencies":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.ui5/dependencies\")<br>Returns the dependencies defined in the metadata of the Component. If not specified, the return value is null. <p> <b>Important:<\/b><\/br> If a Component is loaded using the manifest URL (or according the \"manifest first\" strategy), this function ignores the entries of the manifest file! It returns only the entries which have been defined in the Component metadata or in the proper Component manifest.","!static":false,"!category":"function","!type":"fn() -> Object"},"getLibs":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.ui5/dependencies/libs\")<br>Returns array of libraries specified in metadata of the Component, that are automatically loaded when an instance of the component is created. If not specified or the array is empty, the return value is null. <p> <b>Important:<\/b><\/br> If a Component is loaded using the manifest URL (or according the \"manifest first\" strategy), this function ignores the entries of the manifest file! It returns only the entries which have been defined in the Component metadata or in the proper Component manifest.","!static":false,"!category":"function","!type":"fn() -> [String]"},"getManifest":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.33.0 Please use the sap.ui.core.Component#getManifest<br>Returns the manifest defined in the metadata of the Component. If not specified, the return value is null.","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.ManagedObjectMetadata","!category":"class","getUI5Version":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.ui5/dependencies/minUI5Version\")<br>Returns the required version of SAPUI5 defined in the metadata of the Component. If returned value is null, then no special UI5 version is required. <p> <b>Important:<\/b><\/br> If a Component is loaded using the manifest URL (or according the \"manifest first\" strategy), this function ignores the entries of the manifest file! It returns only the entries which have been defined in the Component metadata or in the proper Component manifest.","!static":false,"!category":"function","!type":"fn() -> String"},"getConfig":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.ui5/config\")<br>Returns a copy of the configuration property to disallow modifications. If no key is specified it returns the complete configuration property","!static":false,"!category":"function","!type":"fn(sKey?: String, bDoNotMerge?: Boolean) -> Object","parameters":{"sKey":"type: string, description: Key of the configuration property","bDoNotMerge":"type: boolean, description: If set to <code>true<\/code>, only the local configuration is returned"}},"_applyManifest":{"!description":"Applies the given manifest json to the ComponentMetadata instance if there isn't already a manifest.\n\nThis method is called from - {@link #applySettings} in case there is a manifest object given from the metadata - {@link #getManifestObject} after lazy loading the manifest (sync request) - {@link sap.ui.component} / {@link sap.ui.component.load} with an existing manifest to prevent the sync request","!static":false,"!category":"function","!type":"fn(oManifestJson: Object)","parameters":{"oManifestJson":"type: object, description: manifest object (will be modified internally!)"}},"!constructorDescription":"Creates a new metadata object for a Component subclass.","!module":"sap/ui/core/ComponentMetadata","getManifestObject":{"!description":"Returns the manifest object.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Manifest"},"getRawManifest":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.33.0 Please use the sap.ui.core.Component#getManifest<br>Returns the raw manifest defined in the metadata of the Component. If not specified, the return value is null.","!static":false,"!category":"function","!type":"fn() -> Object"},"isBaseClass":{"!description":"Returns whether the class of this metadata is a component base class or not.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getComponents":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.ui5/dependencies/components\")<br>Returns array of components specified in the metadata of the Component. If not specified or the array is empty, the return value is null. <p> <b>Important:<\/b><\/br> If a Component is loaded using the manifest URL (or according the \"manifest first\" strategy), this function ignores the entries of the manifest file! It returns only the entries which have been defined in the Component metadata or in the proper Component manifest.","!static":false,"!category":"function","!type":"fn() -> [String]"},"getCustomEntry":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use the sap.ui.core.ComponentMetadata#getManifestEntry<br>Returns the custom Component configuration entry with the specified key (this must be a JSON object). If no key is specified, the return value is null.\n\nExample: <code> sap.ui.core.Component.extend(\"sample.Component\", { metadata: { \"my.custom.config\" : { \"property1\" : true, \"property2\" : \"Something else\" } } }); <\/code>\n\nThe configuration above can be accessed via <code>sample.Component.getMetadata().getCustomEntry(\"my.custom.config\")<\/code>.","!static":false,"!category":"function","!type":"fn(sKey: String, bMerged: Boolean) -> Object","parameters":{"bMerged":"type: boolean, description: Indicates whether the custom configuration is merged with the parent custom configuration of the Component.","sKey":"type: string, description: Key of the custom configuration (must be prefixed with a namespace)"}},"getIncludes":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.27.1 Please use {@link sap.ui.core.Component#getManifestEntry}(\"/sap.ui5/resources\")<br>Returns the array of the included files that the Component requires such as CSS and JavaScript. If not specified or the array is empty, the return value is null. <p> <b>Important:<\/b><\/br> If a Component is loaded using the manifest URL (or according the \"manifest first\" strategy), this function ignores the entries of the manifest file! It returns only the entries which have been defined in the Component metadata or in the proper Component manifest.","!static":false,"!category":"function","!type":"fn() -> [String]"},"getManifestEntry":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.33.0 Please use the sap.ui.core.Component#getManifest<br>Returns the configuration of a manifest section or the value for a specific path. If no section or key is specified, the return value is null.\n\nExample: <code> { \"sap.ui5\": { \"dependencies\": { \"libs\": { \"sap.m\": {} }, \"components\": { \"my.component.a\": {} } } }); <\/code>\n\nThe configuration above can be accessed in the following ways: <ul> <li><b>By section/namespace<\/b>: <code>oComponent.getMetadata().getManifestEntry(\"sap.ui5\")<\/code><\/li> <li><b>By path<\/b>: <code>oComponent.getMetadata().getManifestEntry(\"/sap.ui5/dependencies/libs\")<\/code><\/li> <\/ul>\n\nBy section/namespace returns the configuration for the specified manifest section and by path allows to specify a concrete path to a dedicated entry inside the manifest. The path syntax always starts with a slash (/).","!static":false,"!category":"function","!type":"fn(sKey: String, bMerged?: Boolean) -> Object | null","parameters":{"bMerged":"type: boolean, description: Indicates whether the custom configuration is merged with the parent custom configuration of the Component.","sKey":"type: string, description: Either the manifest section name (namespace) or a concrete path"}},"getMetadataVersion":{"!description":"Returns the version of the metadata which could be 1 or 2. 1 is for legacy metadata whereas 2 is for the manifest.","!static":false,"!category":"function","!type":"fn() -> Number"}},"sap.ui.model.Filter_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(vFilterInfo: [Object | String | sap.ui.model.Filter], vOperator?: sap.ui.model.FilterOperator | fn() | Boolean, vValue1?: Object, vValue2?: Object)","prototype":"sap.ui.model.Filter"},"module:sap/base/Log":{"!description":"A Logging API for JavaScript.\n\nProvides methods to manage a client-side log and to create entries in it. Each of the logging methods {@link module:sap/base/Log.debug}, {@link module:sap/base/Log.info}, {@link module:sap/base/Log.warning}, {@link module:sap/base/Log.error} and {@link module:sap/base/Log.fatal} creates and records a log entry, containing a timestamp, a log level, a message with details and a component info. The log level will be one of {@link module:sap/base/Log.Level} and equals the name of the concrete logging method.\n\nBy using the {@link module:sap/base/Log.setLevel} method, consumers can determine the least important log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric values represent less important levels). The initially set level depends on the mode that UI5 is running in. When the optimized sources are executed, the default level will be {@link module:sap/base/Log.Level.ERROR}. For normal (debug sources), the default level is {@link module:sap/base/Log.Level.DEBUG}.\n\nAll logging methods allow to specify a <b>component<\/b>. These components are simple strings and don't have a special meaning to the UI5 framework. However they can be used to semantically group log entries that belong to the same software component (or feature). There are two APIs that help to manage logging for such a component. With {@link module:sap/base/Log.getLogger}, one can retrieve a logger that automatically adds the given <code>sComponent<\/code> as component parameter to each log entry, if no other component is specified. Typically, JavaScript code will retrieve such a logger once during startup and reuse it for the rest of its lifecycle. Second, the {@link module:sap/base/Log.Logger#setLevel}(iLevel, sComponent) method allows to set the log level for a specific component only. This allows a more fine granular control about the created logging entries. {@link module:sap/base/Log.Logger#getLevel} allows to retrieve the currently effective log level for a given component.\n\n{@link module:sap/base/Log.getLogEntries} returns an array of the currently collected log entries.\n\nFurthermore, a listener can be registered to the log. It will be notified whenever a new entry is added to the log. The listener can be used for displaying log entries in a separate page area, or for sending it to some external target (server).","isLoggable":{"!description":"Checks whether logging is enabled for the given log level, depending on the currently effective log level for the given component.\n\nIf no component is given, the default component of this logger will be taken into account.","!category":"function","!type":"fn(iLevel?: Number, sComponent?: String, iLevel?: module:sap/base/Log.Level, sComponent?: String) -> Boolean"},"debug":{"!description":"Creates a new debug-level entry in the log with the given message, details and calling component.","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn())"},"getLogger":{"!description":"Returns a dedicated logger for a component\n\nThe logger comes with the same API as the Logger module: <ul> <li><code>#fatal<\/code> - see: {@link sap/base/Log.fatal} <li><code>#error<\/code> - see: {@link sap/base/Log.error} <li><code>#warning<\/code> - see: {@link sap/base/Log.warning} <li><code>#info<\/code> - see: {@link sap/base/Log.info} <li><code>#debug<\/code> - see: {@link sap/base/Log.debug} <li><code>#trace<\/code> - see: {@link sap/base/Log.trace} <li><code>#setLevel<\/code> - see: {@link sap/base/Log.setLevel} <li><code>#getLevel<\/code> - see: {@link sap/base/Log.getLevel} <li><code>#isLoggable<\/code> - see: {@link sap/base/Log.isLoggable} <\/ul>","!category":"function","!type":"fn(sComponent: String, iLogLevel?: module:sap/base/Log.Level) -> Object"},"!category":"namespace","error":{"!description":"Creates a new error-level entry in the log with the given message, details and calling component.","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn())"},"setLogEntriesLimit":{"!description":"Sets the limit of stored log entries\n\nIf the new limit is lower than the current limit, the overlap of old log entries will be discarded. If the limit is reached the amount of stored messages will be reduced by 30 percent.","!category":"function","!type":"fn(iLimit: Number | Infinity)"},"module:sap/base/Log":"module:sap/base/Log","addLogListener":{"!description":"Allows to add a new LogListener that will be notified for new log entries.\n\nThe given object must provide method <code>onLogEntry<\/code> and can also be informed about <code>onDetachFromLog<\/code>, <code>onAttachToLog<\/code> and <code>onDiscardLogEntries<\/code>.","!category":"function","!type":"fn(oListener: Object)"},"fatal":{"!description":"Creates a new fatal-level entry in the log with the given message, details and calling component.","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn())"},"setLevel":{"!description":"Defines the maximum <code>sap.base.log.Level<\/code> of log entries that will be recorded. Log entries with a higher (less important) log level will be omitted from the log. When a component name is given, the log level will be configured for that component only, otherwise the log level for the default component of this logger is set. For the global logger, the global default level is set.\n\n<b>Note<\/b>: Setting a global default log level has no impact on already defined component log levels. They always override the global default log level.","!category":"function","!type":"fn(iLogLevel: module:sap/base/Log.Level, sComponent?: String)"},"getLevel":{"!description":"Returns the log level currently effective for the given component. If no component is given or when no level has been configured for a given component, the log level for the default component of this logger is returned.","!category":"function","!type":"fn(sComponent?: String, sComponent?: String) -> module:sap/base/Log.Level"},"trace":{"!description":"Creates a new trace-level entry in the log with the given message, details and calling component.","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn())"},"getLogEntriesLimit":{"!description":"Returns the maximum amount of stored log entries.","!category":"function","!type":"fn() -> Number | Infinity"},"!module":"sap/base/Log","removeLogListener":{"!description":"Allows to remove a registered LogListener.","!category":"function","!type":"fn(oListener: Object)"},"!helpDescription":"A Logging API for JavaScript.\n\nProvides methods to manage a client-side log and to create entries in it. Each of the logging methods {@link module:sap/base/Log.debug}, {@link module:sap/base/Log.info}, {@link module:sap/base/Log.warning}, {@link module:sap/base/Log.error} and {@link module:sap/base/Log.fatal} creates and records a log entry, containing a timestamp, a log level, a message with details and a component info. The log level will be one of {@link module:sap/base/Log.Level} and equals the name of the concrete logging method.\n\nBy using the {@link module:sap/base/Log.setLevel} method, consumers can determine the least important log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric values represent less important levels). The initially set level depends on the mode that UI5 is running in. When the optimized sources are executed, the default level will be {@link module:sap/base/Log.Level.ERROR}. For normal (debug sources), the default level is {@link module:sap/base/Log.Level.DEBUG}.\n\nAll logging methods allow to specify a <b>component<\/b>. These components are simple strings and don't have a special meaning to the UI5 framework. However they can be used to semantically group log entries that belong to the same software component (or feature). There are two APIs that help to manage logging for such a component. With {@link module:sap/base/Log.getLogger}, one can retrieve a logger that automatically adds the given <code>sComponent<\/code> as component parameter to each log entry, if no other component is specified. Typically, JavaScript code will retrieve such a logger once during startup and reuse it for the rest of its lifecycle. Second, the {@link module:sap/base/Log.Logger#setLevel}(iLevel, sComponent) method allows to set the log level for a specific component only. This allows a more fine granular control about the created logging entries. {@link module:sap/base/Log.Logger#getLevel} allows to retrieve the currently effective log level for a given component.\n\n{@link module:sap/base/Log.getLogEntries} returns an array of the currently collected log entries.\n\nFurthermore, a listener can be registered to the log. It will be notified whenever a new entry is added to the log. The listener can be used for displaying log entries in a separate page area, or for sending it to some external target (server).","warning":{"!description":"Creates a new warning-level entry in the log with the given message, details and calling component.","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn())"},"Level":"module:sap/base/Log.Level","getLogEntries":{"!description":"Returns the logged entries recorded so far as an array.\n\nLog entries are plain JavaScript objects with the following properties <ul> <li>timestamp {number} point in time when the entry was created <li>level {module:sap/base/Log.Level} LogLevel level of the entry <li>message {string} message text of the entry <\/ul> The default amount of stored log entries is limited to 3000 entries.","!category":"function","!type":"fn() -> [Object]"},"info":{"!description":"Creates a new info-level entry in the log with the given message, details and calling component.","!category":"function","!type":"fn(sMessage: String, sDetails?: String, sComponent?: String, fnSupportInfo?: fn())"},"logSupportInfo":{"!description":"Enables or disables whether additional support information is logged in a trace. If enabled, logging methods like error, warning, info and debug are calling the additional optional callback parameter fnSupportInfo and store the returned object in the log entry property supportInfo.","!category":"function","!type":"fn(bEnabled: Boolean)"}},"sap.ui.model.analytics.odata4analytics.QueryResultRequest":{"setResourcePath":{"!description":"Set the resource path to be considered for the OData request URI of this query request object. This method provides an alternative way to assign a path comprising a parameterization. If a path is provided, it overwrites any parameterization object that might have been specified separately.","!static":false,"!category":"function","!type":"fn(sResourcePath: String)","parameters":{"sResourcePath":"type: string, description: Resource path pointing to the entity set of the query result. Must include a valid parameterization if query contains parameters."}},"getFilterExpression":{"!description":"Get the filter expression for this request.\n\nExpressions are represented by separate objects. If none exists so far, a new expression object gets created.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.FilterExpression"},"addToAggregationLevel":{"!description":"Add one or more dimensions to the aggregation level","!static":false,"!category":"function","!type":"fn(aDimensionName: undefined)","parameters":{"aDimensionName":"type: undefined, description: Array of dimension names to be added to the already defined aggregation level."}},"getAggregationLevelDetails":{"!description":"Get details about a dimensions included in the aggregation level","!static":false,"!category":"function","!type":"fn(sDImensionName: undefined) -> Object","parameters":{"sDImensionName":"type: undefined, description: Name of a dimension included in the aggregation level of this request, for which details shall be returned"}},"!proto":"sap.ui.base.Object","!category":"class","setMeasures":{"!description":"Set the measures to be included in the query result request. By default, the query result will include the properties holding the raw values of the given measures. This setting can be changed using includeMeasureRawFormattedValueUnit.","!static":false,"!category":"function","!type":"fn(aMeasureName: undefined)","parameters":{"aMeasureName":"type: undefined, description: Array of measure names to be part of the query result request. If null, the request includes all measures, if empty, no measure is included."}},"setSortExpression":{"!description":"Set the sort expression for this request.\n\nExpressions are represented by separate objects. Calling this method replaces the sort object maintained by this request.","!static":false,"!category":"function","!type":"fn(oSorter: sap.ui.model.analytics.odata4analytics.SortExpression)","parameters":{"oSorter":"type: sap.ui.model.analytics.odata4analytics.SortExpression, description: The sort object to be associated with this request."}},"!constructorDescription":"Create a request object for interaction with a query result.","getAggregationLevel":{"!description":"Get the names of the dimensions included in the aggregation level","!static":false,"!category":"function","!type":"fn() -> Array"},"getURIQueryOptionValue":{"!description":"Get the value of a query option for the OData request URI corresponding to this request.","!static":false,"!category":"function","!type":"fn(sQueryOptionName: String) -> String","parameters":{"sQueryOptionName":"type: String, description: Identifies the query option: $select, $filter,$orderby ... or any custom query option"}},"getSortExpression":{"!description":"Get the sort expression for this request.\n\nExpressions are represented by separate objects. If none exists so far, a new expression object gets created.","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.SortExpression"},"!description":"Creation of URIs for fetching query results.","setRequestOptions":{"!description":"Set further options to be applied for the OData request to fetch the query result","!static":false,"!category":"function","!type":"fn(bIncludeEntityKey: Boolean, bIncludeCount: Boolean, bReturnNoEntities: Boolean)","parameters":{"bIncludeEntityKey":"type: Boolean, description: Indicates whether or not the entity key should be returned for every entry in the query result. Default is not to include it. Pass null to keep current setting.","bIncludeCount":"type: Boolean, description: Indicates whether or not the result shall include a count for the returned entities. Default is not to include it. Pass null to keep current setting.","bReturnNoEntities":"type: Boolean, description: Indicates whether or not the result shall be empty. This will translate to $top=0 in the OData request and override any setting done with setResultPageBoundaries. The default is not to suppress entities in the result. Pass null to keep current setting. The main use case for this option is to create a request with $inlinecount returning an entity count."}},"setResultPageBoundaries":{"!description":"Specify that only a page of the query result shall be returned. A page is described by its boundaries, that are row numbers for the first and last rows in the query result to be returned.","!static":false,"!category":"function","!type":"fn(start: Number, end: Number)","parameters":{"start":"type: Number, description: The first row of the query result to be returned. Numbering starts at 1. Passing null is equivalent to start with the first row.","end":"type: Number, description: The last row of the query result to be returned. Passing null is equivalent to get all rows up to the end of the query result."}},"getMeasureNames":{"!description":"Get the names of the measures included in the query result request","!static":false,"!category":"function","!type":"fn() -> Array"},"getURIToQueryResultEntries":{"!description":"Get the unescaped URI to fetch the query result.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String, sResourcePath: String) -> String","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service","sResourcePath":"type: String, description: (optional) OData resource path to be considered. If provided, it overwrites any parameterization object that might have been specified separately."}},"getURIToQueryResultEntitySet":{"!description":"Get the URI to locate the entity set for the query result.","!static":false,"!category":"function","!type":"fn(sServiceRootURI: String) -> String","parameters":{"sServiceRootURI":"type: String, description: (optional) Identifies the root of the OData service"}},"includeDimensionKeyTextAttributes":{"!description":"Specify which dimension components shall be included in the query result. The settings get applied to the currently defined aggregation level.","!static":false,"!category":"function","!type":"fn(sDimensionName: String, bIncludeKey: Boolean, bIncludeText: Boolean, aAttributeName: undefined)","parameters":{"aAttributeName":"type: undefined, description: Array of dimension attribute names to be included in the result. Pass null to keep current setting. This argument is ignored if sDimensionName is null.","sDimensionName":"type: string, description: Name of the dimension for which the settings get applied. Specify null to apply the settings to all dimensions in the aggregation level.","bIncludeText":"type: boolean, description: Indicator whether or not to include the dimension text (if available) in the query result. Pass null to keep current setting.","bIncludeKey":"type: boolean, description: Indicator whether or not to include the dimension key in the query result. Pass null to keep current setting."}},"getResultPageBoundaries":{"!description":"Returns the current page boundaries as object with properties <code>start<\/code> and <code>end<\/code>. If the end of the page is unbounded, <code>end<\/code> is null.","!static":false,"!category":"function","!type":"fn() -> Object"},"addRecursiveHierarchy":{"!description":"Adds a recursive hierarchy to the aggregation level.","!static":false,"!category":"function","!type":"fn(sHierarchyDimensionName: String, bIncludeExternalKey: Boolean, bIncludeText: Boolean)","parameters":{"bIncludeText":"type: boolean, description: Indicator whether or not to include the node text (if available) in the query result","bIncludeExternalKey":"type: boolean, description: Indicator whether or not to include the external node key (if available) in the query result","sHierarchyDimensionName":"type: string, description: Name of dimension whose hierarchy shall be part of the aggregation level"}},"getQueryResult":{"!description":"Get the description of the query result on which this request operates on","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.QueryResult"},"setAggregationLevel":{"!description":"Set the aggregation level for the query result request. By default, the query result will include the properties holding the keys of the given dimensions. This setting can be changed using includeDimensionKeyTextAttributes.","!static":false,"!category":"function","!type":"fn(aDimensionName: undefined)","parameters":{"aDimensionName":"type: undefined, description: Array of dimension names to be part of the aggregation level. If null, the aggregation level includes all dimensions, if empty, no dimension is included."}},"getParameterizationRequest":{"!description":"Retrieves the current parametrization request","!static":false,"!category":"function","!type":"fn() -> sap.ui.model.analytics.odata4analytics.ParameterizationRequest"},"setFilterExpression":{"!description":"Set the filter expression for this request.\n\nExpressions are represented by separate objects. Calling this method replaces the filter object maintained by this request.","!static":false,"!category":"function","!type":"fn(oFilter: sap.ui.model.analytics.odata4analytics.FilterExpression)","parameters":{"oFilter":"type: sap.ui.model.analytics.odata4analytics.FilterExpression, description: The filter object to be associated with this request."}},"setParameterizationRequest":{"!description":"Set the parameterization request required for interactions with the query result of parameterized queries. This method provides an alternative way to assign a parameterization request to a query result request.","!static":false,"!category":"function","!type":"fn(oParameterizationRequest: undefined)","parameters":{"oParameterizationRequest":"type: undefined, description: Request object for interactions with the parameterization of this query"}},"!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Creation of URIs for fetching query results.","removeFromAggregationLevel":{"!description":"Remove one or more dimensions from the aggregation level. The method also removed a potential sort expression on the dimension.","!static":false,"!category":"function","!type":"fn(aDimensionName: undefined)","parameters":{"aDimensionName":"type: undefined, description: Array of dimension names to be removed from the already defined aggregation level."}},"includeMeasureRawFormattedValueUnit":{"!description":"Specify which measure components shall be included in the query result. The settings get applied to the currently set measures.","!static":false,"!category":"function","!type":"fn(sMeasureName: String, bIncludeRawValue: Boolean, bIncludeFormattedValue: Boolean, bIncludeUnit: Boolean)","parameters":{"bIncludeRawValue":"type: boolean, description: Indicator whether or not to include the raw value in the query result. Pass null to keep current setting.","bIncludeFormattedValue":"type: boolean, description: Indicator whether or not to include the formatted value (if available) in the query result. Pass null to keep current setting.","bIncludeUnit":"type: boolean, description: Indicator whether or not to include the unit (if available) in the query result. Pass null to keep current setting.","sMeasureName":"type: string, description: Name of the measure for which the settings get applied. Specify null to apply the settings to all currently set measures."}}},"sap.ui.test.matchers.LabelFor":{"!description":"The LabelFor matcher checks if a given control has a label associated with it. For every Label on the page, the matcher checks if: <ul> <li> its labelFor association is to the given control <\/li> <li> its properties match a condition <\/li> <\/ul> Labels can be matched by: <ul> <li> text <\/li> <li> i18n key, modelName, parameters or propertyName. See {@link sap.ui.test.matchers.I18NText} <\/li> <li> combination of text and key is not possible <\/li> <\/ul> Some control types cannot be in a labelFor association: <ul> <li> sap.ui.comp.navpopover.SmartLink <\/li> <li> sap.m.Link <\/li> <li> sap.m.Label <\/li> <li> sap.m.Text <\/li> <\/ul>\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    labelFor: {\n        text: \"string\",\n        modelName: \"string\",\n        key: \"string\",\n        parameters: \"any\",\n        propertyName: \"string\"\n    }\n}\n<\/code><\/pre>","getKey":{"!description":"Gets current value of property {@link #getKey key}.\n\nThe key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.","!static":false,"!category":"function","!type":"fn() -> String"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.LabelFor.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getText":{"!description":"Gets current value of property {@link #getText text}.\n\nThe text of the {@link sap.m.Label} which have the labelFor property.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.test.matchers.Matcher","!category":"class","getModelName":{"!description":"Gets current value of property {@link #getModelName modelName}.\n\nThe name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.\n\nDefault value is <code>i18n<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"isMatching":{"!description":"Checks for control with labelFor property annotating other control","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}},"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.LabelFor with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setParameters":{"!description":"Sets a new value for property {@link #getParameters parameters}.\n\nThe parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(oParameters: Object) -> sap.ui.test.matchers.LabelFor","parameters":{"oParameters":"type: any, description: New value for property <code>parameters<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getText text} : string<\/li>\n<li>{@link #getModelName modelName} : string (default: i18n)<\/li>\n<li>{@link #getKey key} : string<\/li>\n<li>{@link #getParameters parameters} : any<\/li>\n<li>{@link #getPropertyName propertyName} : string (default: text)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","setPropertyName":{"!description":"Sets a new value for property {@link #getPropertyName propertyName}.\n\nThe name of the control property to match the I18N text with.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>text<\/code>.","!static":false,"!category":"function","!type":"fn(sPropertyName: String) -> sap.ui.test.matchers.LabelFor","parameters":{"sPropertyName":"type: string, description: New value for property <code>propertyName<\/code>"}},"!module":"sap/ui/test/matchers/LabelFor","setModelName":{"!description":"Sets a new value for property {@link #getModelName modelName}.\n\nThe name of the {@link sap.ui.model.resource.ResourceModel} assigned to the control.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>i18n<\/code>.","!static":false,"!category":"function","!type":"fn(sModelName: String) -> sap.ui.test.matchers.LabelFor","parameters":{"sModelName":"type: string, description: New value for property <code>modelName<\/code>"}},"!helpDescription":"The LabelFor matcher checks if a given control has a label associated with it. For every Label on the page, the matcher checks if: <ul> <li> its labelFor association is to the given control <\/li> <li> its properties match a condition <\/li> <\/ul> Labels can be matched by: <ul> <li> text <\/li> <li> i18n key, modelName, parameters or propertyName. See {@link sap.ui.test.matchers.I18NText} <\/li> <li> combination of text and key is not possible <\/li> <\/ul> Some control types cannot be in a labelFor association: <ul> <li> sap.ui.comp.navpopover.SmartLink <\/li> <li> sap.m.Link <\/li> <li> sap.m.Label <\/li> <li> sap.m.Text <\/li> <\/ul>\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    labelFor: {\n        text: \"string\",\n        modelName: \"string\",\n        key: \"string\",\n        parameters: \"any\",\n        propertyName: \"string\"\n    }\n}\n<\/code><\/pre>","getParameters":{"!description":"Gets current value of property {@link #getParameters parameters}.\n\nThe parameters for replacing the placeholders of the I18N text. See {@link jQuery.sap.util.ResourceBundle#getText}.","!static":false,"!category":"function","!type":"fn() -> Object"},"getPropertyName":{"!description":"Gets current value of property {@link #getPropertyName propertyName}.\n\nThe name of the control property to match the I18N text with.\n\nDefault value is <code>text<\/code>.","!static":false,"!category":"function","!type":"fn() -> String"},"setKey":{"!description":"Sets a new value for property {@link #getKey key}.\n\nThe key of the I18N text in the containing {@link jQuery.sap.util.ResourceBundle}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sKey: String) -> sap.ui.test.matchers.LabelFor","parameters":{"sKey":"type: string, description: New value for property <code>key<\/code>"}},"setText":{"!description":"Sets a new value for property {@link #getText text}.\n\nThe text of the {@link sap.m.Label} which have the labelFor property.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sText: String) -> sap.ui.test.matchers.LabelFor","parameters":{"sText":"type: string, description: New value for property <code>text<\/code>"}}},"sap.ui.model.json.JSONListBinding":{"!description":"List binding implementation for JSON format.","!constructorDescription":"Creates a new JSONListBinding.\n\nThis constructor should only be called by subclasses or model implementations, not by application or control code.\nSuch code should use {@link sap.ui.model.json.JSONModel#bindList JSONModel#bindList} on the corresponding model instance instead.","getContexts":{"!description":"Return contexts for the list or a specified subset of contexts","!static":false,"!category":"function","!type":"fn(iStartIndex?: Number, iLength?: Number) -> Array","parameters":{"iStartIndex":"type: int, description: the startIndex where to start the retrieval of contexts","iLength":"type: int, description: determines how many contexts to retrieve beginning from the start index. Default is the whole list length."}},"!module":"sap/ui/model/json/JSONListBinding","!helpDescription":"List binding implementation for JSON format.","!proto":"sap.ui.model.ClientListBinding","!category":"class"},"sap.ui.app.MockServer_obj":{"!type":"fn(sId: String, mSettings: Object, oScope?: Object)","prototype":"sap.ui.app.MockServer"},"sap.ui.model.odata.v2.ODataContextBinding":{"!description":"The ContextBinding is a specific binding for a setting context for the model","extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.odata.v2.ODataContextBinding.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for odata.ODataContextBinding","!module":"sap/ui/model/odata/v2/ODataContextBinding","!helpDescription":"The ContextBinding is a specific binding for a setting context for the model","!proto":"sap.ui.model.ContextBinding","refresh":{"!static":false,"!category":"function","!type":"fn(bForceUpdate?: Boolean, sGroupId?: String)","parameters":{"bForceUpdate":"type: boolean, description: Update the bound control even if no data has been changed","sGroupId":"type: string, description: The group Id for the refresh"}},"!category":"class"},"module:sap/ui/dom/units/Rem":{"!module":"sap/ui/dom/units/Rem","toPx":{"!description":"Convert <code>rem<\/code> values to <code>px<\/code>.","!category":"function","!type":"fn(vRem: String | Number) -> Number"},"module:sap/ui/dom/units/Rem":"module:sap/ui/dom/units/Rem","!category":"namespace","fromPx":{"!description":"Convert <code>px<\/code> values to <code>rem<\/code>.","!category":"function","!type":"fn(vPx: String | Number) -> Number"}},"sap.ui.core.format":{"!description":"Format classes","!module":"sap/ui/core/format/NumberFormat","!helpDescription":"Format classes","RoundingMode":"sap.ui.core.format.NumberFormat.RoundingMode","DateFormat":"sap.ui.core.format.DateFormat_obj","!category":"namespace","ListFormat":"sap.ui.core.format.ListFormat_obj","FileSizeFormat":"sap.ui.core.format.FileSizeFormat_obj","NumberFormat":"sap.ui.core.format.NumberFormat_obj"},"sap.ui.model.odata.v4":{"Context":"sap.ui.model.odata.v4.Context_obj","!description":"Model and related classes like bindings for OData V4.","ODataModel":"sap.ui.model.odata.v4.ODataModel_obj","AnnotationHelper":"sap.ui.model.odata.v4.AnnotationHelper","ValueListType":"sap.ui.model.odata.v4.ValueListType","!category":"namespace","ODataPropertyBinding":"sap.ui.model.odata.v4.ODataPropertyBinding_obj","ODataMetaModel":"sap.ui.model.odata.v4.ODataMetaModel_obj","!module":"sap/ui/model/odata/v4/ODataModel","ODataContextBinding":"sap.ui.model.odata.v4.ODataContextBinding_obj","!helpDescription":"Model and related classes like bindings for OData V4.","ODataListBinding":"sap.ui.model.odata.v4.ODataListBinding_obj","ODataUtils":"sap.ui.model.odata.v4.ODataUtils","SubmitMode":"sap.ui.model.odata.v4.SubmitMode"},"module:sap/ui/dom/jquery/cursorPos":{"!description":"This module provides the {@link jQuery#cursorPos} API.","!module":"sap/ui/dom/jquery/cursorPos","!helpDescription":"This module provides the {@link jQuery#cursorPos} API.","!category":"namespace","module:sap/ui/dom/jquery/cursorPos":"module:sap/ui/dom/jquery/cursorPos"},"sap.ui.core.InvisibleText_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.InvisibleText with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.InvisibleText"},"sap.ui.base.Metadata":{"!description":"Metadata for a class.","getClass":{"!description":"Returns the (constructor of the) described class","!static":false,"!category":"function","!type":"fn() -> fn()"},"getAllPublicMethods":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 this method should not be used for productive code. The accuracy of the returned information highly depends on the concrete class and is not actively monitored. There might be more public methods or some of the returned methods might not really be intended for public use. In general, pure visibility information should not be exposed in runtime metadata but be part of the documentation. Subclasses of <code>sap.ui.base.Object<\/code> might decide to provide runtime metadata describing their public API, but this then should not be backed by this method. See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.<br>Returns an array with the names of all public methods declared by the described class and all its ancestors classes.","!static":false,"!category":"function","!type":"fn() -> [String]"},"getParent":{"!description":"Returns the metadata object of the base class of the described class or null if the class has no (documented) base class.","!static":false,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"isDeprecated":{"!description":"Whether the described class is deprecated and should not be used any more","!static":false,"!category":"function","!type":"fn() -> Boolean"},"getName":{"!description":"Returns the fully qualified name of the described class","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.base.Object","!category":"class","getPublicMethods":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 this method should not be used for productive code. The accuracy of the returned information highly depends on the concrete class and is not actively monitored. There might be more public methods or some of the returned methods might not really be intended for public use. In general, pure visibility information should not be exposed in runtime metadata but be part of the documentation. Subclasses of <code>sap.ui.base.Object<\/code> might decide to provide runtime metadata describing their public API, but this then should not be backed by this method. See {@link sap.ui.core.mvc.ControllerMetadata#getAllMethods} for an example.<br>Returns an array with the names of the public methods declared by the described class, methods of ancestors are not listed.","!static":false,"!category":"function","!type":"fn() -> [String]"},"isAbstract":{"!description":"Returns whether the described class is abstract","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Creates a new metadata object from the given static infos.\n\n<b>Note:<\/b> Throughout this class documentation, the described subclass of Object\nis referenced as <i>the described class<\/i>.","!module":"sap/ui/base/Metadata","!helpDescription":"Metadata for a class.","isA":{"!description":"Checks whether the class described by this metadata object is of the named type.\n\nThis check is solely based on the type names as declared in the class metadata. It compares the given <code>vTypeName<\/code> with the name of this class, with the names of any base class of this class and with the names of all interfaces implemented by any of the aforementioned classes.\n\nInstead of a single type name, an array of type names can be given and the method will check if this class is of any of the listed types (logical or).\n\nShould the UI5 class system in future implement additional means of associating classes with type names (e.g. by introducing mixins), then this method might detect matches for those names as well.","!static":false,"!category":"function","!type":"fn(vTypeName: [String | String]) -> Boolean","parameters":{"vTypeName":"type: string|string[], description: Type or types to check for"}},"isInstanceOf":{"!description":"Checks whether the described class or one of its ancestor classes implements the given interface.","!static":false,"!category":"function","!type":"fn(sInterface: String) -> Boolean","parameters":{"sInterface":"type: string, description: name of the interface to test for (in dot notation)"}},"isFinal":{"!description":"Returns whether the described class is final","!static":false,"!category":"function","!type":"fn() -> Boolean"}},"sap.ui.model.odata.v2":{"ODataTreeBinding":"sap.ui.model.odata.v2.ODataTreeBinding_obj","!description":"OData-based DataBinding","ODataAnnotations":"sap.ui.model.odata.v2.ODataAnnotations_obj","ODataModel":"sap.ui.model.odata.v2.ODataModel_obj","!module":"sap/ui/model/odata/v2/ODataModel","ODataContextBinding":"sap.ui.model.odata.v2.ODataContextBinding_obj","!helpDescription":"OData-based DataBinding","!category":"namespace","BatchMode":"sap.ui.model.odata.v2.BatchMode","ODataListBinding":"sap.ui.model.odata.v2.ODataListBinding_obj"},"sap.ui.core.Element":{"_attachMediaContainerWidthChange":{"!description":"Registers the given event handler to change events of the screen width/closest media container width, based on the range set with the specified name.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object, sName: String)","parameters":{"oListener":"type: object, description: undefined","fnFunction":"type: function, description: undefined","sName":"type: string, description: undefined"}},"data":{"!description":"Retrieves, modifies or removes custom data attached to an <code>Element<\/code>.\n\nUsages: <h4>Setting the value for a single key<\/h4> <pre>\n   data(\"myKey\", myData)\n<\/pre> Attaches <code>myData<\/code> (which can be any JS data type, e.g. a number, a string, an object, or a function) to this element, under the given key \"myKey\". If the key already exists,the value will be updated.\n\n<h4>Setting a value for a single key (rendered to the DOM)<\/h4> <pre>\n   data(\"myKey\", myData, writeToDom)\n<\/pre> Attaches <code>myData<\/code> to this element, under the given key \"myKey\" and (if <code>writeToDom<\/code> is true) writes key and value to the HTML. If the key already exists,the value will be updated. While <code>oValue<\/code> can be any JS data type to be attached, it must be a string to be also written to DOM. The key must also be a valid HTML attribute name (it must conform to <code>sap.ui.core.ID<\/code> and may contain no colon) and may not start with \"sap-ui\". When written to HTML, the key is prefixed with \"data-\".\n\n<h4>Getting the value for a single key<\/h4> <pre>\n   data(\"myKey\")\n<\/pre> Retrieves whatever data has been attached to this element (using the key \"myKey\") before.\n\n<h4>Removing the value for a single key<\/h4> <pre>\n   data(\"myKey\", null)\n<\/pre> Removes whatever data has been attached to this element (using the key \"myKey\") before.\n\n<h4>Removing all custom data for all keys<\/h4> <pre>\n   data(null)\n<\/pre>\n\n<h4>Getting all custom data values as a plain object<\/h4> <pre>\n   data()\n<\/pre> Returns all data, as a map-like object, property names are keys, property values are values.\n\n<h4>Setting multiple key/value pairs in a single call<\/h4> <pre>\n   data({\"myKey1\": myData, \"myKey2\": null})\n<\/pre> Attaches <code>myData<\/code> (using the key \"myKey1\" and removes any data that had been attached for key \"myKey2\".","!static":false,"!category":"function","!type":"fn(vKeyOrData?: String | Object.<string,any> | null, vValue?: String | Object, bWriteToDom?: Boolean) -> Object.<string,any> | Object | null | sap.ui.core.Element","parameters":{"vKeyOrData":"type: string|Object.<string,any>|null, description: Single key to set or remove, or an object with key/value pairs or <code>null<\/code> to remove all custom data","bWriteToDom":"type: boolean, description: Whether this custom data entry should be written to the DOM during rendering","vValue":"type: string|any, description: Value to set or <code>null<\/code> to remove the corresponding custom data"}},"focus":{"!description":"Sets the focus to the stored focus DOM reference","!static":false,"!category":"function","!type":"fn(oFocusInfo: Object)","parameters":{"oFocusInfo":"type: object, description: undefined"}},"getFocusInfo":{"!description":"Returns an object representing the serialized focus information To be overwritten by the specific control method","!static":false,"!category":"function","!type":"fn() -> Object"},"indexOfCustomData":{"!description":"Checks for the provided <code>sap.ui.core.CustomData<\/code> in the aggregation {@link #getCustomData customData}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oCustomData: sap.ui.core.CustomData) -> Number","parameters":{"oCustomData":"type: sap.ui.core.CustomData, description: The customData whose index is looked for"}},"indexOfDragDropConfig":{"!description":"Checks for the provided <code>sap.ui.core.dnd.DragDropBase<\/code> in the aggregation {@link #getDragDropConfig dragDropConfig}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oDragDropConfig: sap.ui.core.dnd.DragDropBase) -> Number","parameters":{"oDragDropConfig":"type: sap.ui.core.dnd.DragDropBase, description: The dragDropConfig whose index is looked for"}},"setTooltip":{"!description":"Sets a new tooltip for this object. The tooltip can either be a simple string (which in most cases will be rendered as the <code>title<\/code> attribute of this Element) or an instance of {@link sap.ui.core.TooltipBase}.\n\nIf a new tooltip is set, any previously set tooltip is deactivated.","!static":false,"!category":"function","!type":"fn(vTooltip: String | sap.ui.core.TooltipBase)","parameters":{"vTooltip":"type: string|sap.ui.core.TooltipBase, description: undefined"}},"_interceptEvent":{"!description":"Intercepts an event. This method is meant for private usages. Apps are not supposed to used it. It is created for an experimental purpose. Implementation should be injected by outside.","!static":true,"!category":"function","!type":"fn(sEventId: String, oElement: sap.ui.core.Element, mParameters: Object)","parameters":{"sEventId":"type: string, description: the name of the event","oElement":"type: sap.ui.core.Element, description: the element itself","mParameters":"type: object, description: The parameters which complement the event. Hooks must not modify the parameters."}},"getTooltip":{"!description":"Returns the tooltip for this element if any or an undefined value. The tooltip can either be a simple string or a subclass of {@link sap.ui.core.TooltipBase}.\n\nCallers that are only interested in tooltips of type string (e.g. to render them as a <code>title<\/code> attribute), should call the convenience method {@link #getTooltip_AsString} instead. If they want to get a tooltip text no matter where it comes from (be it a string tooltip or the text from a TooltipBase instance) then they could call {@link #getTooltip_Text} instead.","!static":false,"!category":"function","!type":"fn() -> String | sap.ui.core.TooltipBase"},"destroyDragDropConfig":{"!description":"Destroys all the dragDropConfig in the aggregation {@link #getDragDropConfig dragDropConfig}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Element"},"create":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.44 use the more flexible {@link sap.ui.base.ManagedObject.create}.<br>Creates a new Element from the given data.\n\nIf <code>vData<\/code> is an Element already, that element is returned. If <code>vData<\/code> is an object (literal), then a new element is created with <code>vData<\/code> as settings. The type of the element is either determined by a property named <code>Type<\/code> in the <code>vData<\/code> or by a type information in the <code>oKeyInfo<\/code> object","!static":true,"!category":"function","!type":"fn(vData: sap.ui.core.Element | Object, oKeyInfo?: Object)","parameters":{"oKeyInfo":"type: object, description: An entity information (e.g. aggregation info)","vData":"type: sap.ui.core.Element|object, description: Data to create the element from"}},"destroyLayoutData":{"!description":"Destroys the layoutData in the aggregation {@link #getLayoutData layoutData}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Element"},"unbindElement":{"!description":"Removes the defined binding context of this object, all bindings will now resolve relative to the parent context again.","!static":false,"!category":"function","!type":"fn(sModelName: String) -> sap.ui.base.ManagedObject","parameters":{"sModelName":"type: string, description: undefined"}},"applyFocusInfo":{"!description":"Applies the focus info.\n\nTo be overwritten by the specific control method.","!static":false,"!category":"function","!type":"fn(oFocusInfo: Object)","parameters":{"oFocusInfo":"type: object, description: undefined"}},"getTooltip_AsString":{"!description":"Returns the tooltip for this element but only if it is a simple string. Otherwise an undefined value is returned.","!static":false,"!category":"function","!type":"fn() -> String"},"!description":"Base Class for Elements.","init":{"!description":"Initializes the element instance after creation.\n\nApplications must not call this hook method directly, it is called by the framework while the constructor of an element is executed.\n\nSubclasses of Element should override this hook to implement any necessary initialization.","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Element.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"$":{"!description":"Returns the best suitable DOM node that represents this Element wrapped as jQuery object. I.e. the element returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.\n\nIf an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery. This matches the UI5 naming convention for named inner DOM nodes of a control.","!static":false,"!category":"function","!type":"fn(sSuffix?: String) -> jQuery","parameters":{"sSuffix":"type: string, description: ID suffix to get a jQuery object for"}},"destroyCustomData":{"!description":"Destroys all the customData in the aggregation {@link #getCustomData customData}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Element"},"removeAllDependents":{"!description":"Removes all the controls from the aggregation {@link #getDependents dependents}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Element]"},"destroy":{"!description":"Cleans up the resources associated with this element and all its children.\n\nAfter an element has been destroyed, it can no longer be used in the UI!\n\nApplications should call this method if they don't need the element any longer.","!static":false,"!category":"function","!type":"fn(bSuppressInvalidate?: Boolean)","parameters":{"bSuppressInvalidate":"type: boolean, description: if true, the UI element is removed from DOM synchronously and parent will not be invalidated."}},"enhanceAccessibilityState":{"!description":"Allows the parent of a control to enhance the aria information during rendering.\n\nThis function is called by the RenderManager's writeAccessibilityState method for the parent of the currently rendered control - if the parent implements it.","!static":false,"!category":"function","!type":"fn(oElement: sap.ui.core.Element, mAriaProps: Object) -> Object","parameters":{"oElement":"type: sap.ui.core.Element, description: the Control/Element for which aria properties are rendered","mAriaProps":"type: object, description: map of aria properties keyed by there name (without prefix \"aria-\")"}},"extend":{"!description":"Defines a new subclass of Element with the name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> can contain the same information that {@link sap.ui.base.ManagedObject.extend} already accepts, plus the following <code>dnd<\/code> property to configure drag-and-drop behavior in the metadata object literal:\n\nExample: <pre>\nElement.extend('sap.mylib.MyElement', {\n  metadata : {\n    library : 'sap.mylib',\n    properties : {\n      value : 'string',\n      width : 'sap.ui.core.CSSSize'\n    },\n    dnd : { draggable: true, droppable: false },\n    aggregations : {\n      items : { type: 'sap.ui.core.Control', multiple : true, dnd : {draggable: false, dropppable: true, layout: \"Horizontal\" } },\n      header : {type : \"sap.ui.core.Control\", multiple : false, dnd : true },\n    }\n  }\n});\n<\/pre>\n\n<h3><code>dnd<\/code> key as a metadata property<\/h3>\n\n<b>dnd<\/b>: <i>object|boolean<\/i><br> Defines draggable and droppable configuration of the element. The following keys can be provided via <code>dnd<\/code> object literal to configure drag-and-drop behavior of the element: <ul> <li><code>[draggable=false]: <i>boolean<\/i><\/code> Defines whether the element is draggable or not. The default value is <code>false<\/code>.<\/li> <li><code>[droppable=false]: <i>boolean<\/i><\/code> Defines whether the element is droppable (it allows being dropped on by a draggable element) or not. The default value is <code>false<\/code>.<\/li> <\/ul> If <code>dnd<\/code> property is of type Boolean, then the <code>draggable<\/code> and <code>droppable<\/code> configuration are set to this Boolean value.\n\n<h3><code>dnd<\/code> key as an aggregation metadata property<\/h3>\n\n<b>dnd<\/b>: <i>object|boolean<\/i><br> In addition to draggable and droppable configuration, the layout of the aggregation can be defined as a hint at the drop position indicator. <ul> <li><code>[layout=\"Vertical\"]: <\/code> The arrangement of the items in this aggregation. This setting is recommended for the aggregation with multiplicity 0..n (<code>multiple: true<\/code>). Possible values are <code>Vertical<\/code> (e.g. rows in a table) and <code>Horizontal<\/code> (e.g. columns in a table). It is recommended to use <code>Horizontal<\/code> layout if the arrangement is multidimensional.<\/li> <\/ul>","!static":true,"!category":"function","!type":"fn(sClassName: String, oStaticInfo: Object) -> fn()","parameters":{"oStaticInfo":"type: object, description: static info to construct the metadata from","sClassName":"type: string, description: fully qualified name of the class that is described by this metadata object"}},"exit":{"!description":"Cleans up the element instance before destruction.\n\nApplications must not call this hook method directly, it is called by the framework when the element is {@link #destroy destroyed}.\n\nSubclasses of Element should override this hook to implement any necessary cleanup.","!static":false,"!category":"function","!type":"fn()"},"!module":"sap/ui/core/Element","_detachMediaContainerWidthChange":{"!description":"Removes a previously attached event handler from the change events of the screen width/closest media container width.","!static":false,"!category":"function","!type":"fn(fnFunction: fn(), oListener: Object, sName: String)","parameters":{"oListener":"type: object, description: undefined","fnFunction":"type: function, description: undefined","sName":"type: string, description: undefined"}},"!helpDescription":"Base Class for Elements.","getTooltip_Text":{"!description":"Returns the main text for the current tooltip or undefined if there is no such text. If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property of that object is returned. Otherwise the object itself is returned (either a string or undefined or null).","!static":false,"!category":"function","!type":"fn() -> String"},"getDragDropConfig":{"!description":"Gets content of aggregation {@link #getDragDropConfig dragDropConfig}.\n\nDefines the drag-and-drop configuration. <b>Note:<\/b> This configuration might be ignored due to control {@link sap.ui.core.Element.extend metadata} restrictions.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.dnd.DragDropBase]"},"removeCustomData":{"!description":"Removes a customData from the aggregation {@link #getCustomData customData}.","!static":false,"!category":"function","!type":"fn(vCustomData: Number | String | sap.ui.core.CustomData) -> sap.ui.core.CustomData","parameters":{"vCustomData":"type: int|string|sap.ui.core.CustomData, description: The customData to remove or its index or id"}},"getDomRefForSetting":{"!description":"Returns a DOM Element representing the given property or aggregation of this <code>Element<\/code>.\n\nCheck the documentation for the <code>selector<\/code> metadata setting in {@link sap.ui.base.ManagedObject.extend} for details about its syntax or its expected result.\n\nThe default implementation of this method will return <code>null<\/code> in any of the following cases: <ul> <li>no setting (property or aggregation) with the given name exists in the class of this <code>Element<\/code><\/li> <li>the setting has no selector defined in its metadata<\/li> <li>{@link #getDomRef this.getDomRef()} returns no DOM Element for this <code>Element<\/code> or the returned DOM Element has no parentNode<\/li> <li>the selector does not match anything in the context of <code>this.getDomRef().parentNode<\/code><\/li> <\/ul> If more than one DOM Element within the element matches the selector, the first occurrence is returned.\n\nSubclasses can override this method to handle more complex cases which can't be described by a CSS selector.","!static":false,"!category":"function","!type":"fn(sSettingsName: String) -> Element","parameters":{"sSettingsName":"type: string, description: Name of the property or aggregation"}},"getFocusDomRef":{"!description":"Returns the DOM Element that should get the focus.\n\nTo be overwritten by the specific control method.","!static":false,"!category":"function","!type":"fn() -> Element"},"removeAllCustomData":{"!description":"Removes all the controls from the aggregation {@link #getCustomData customData}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.CustomData]"},"getCustomData":{"!description":"Gets content of aggregation {@link #getCustomData customData}.\n\nCustom Data, a data structure like a map containing arbitrary key value pairs.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.CustomData]"},"!proto":"sap.ui.base.ManagedObject","removeAllDragDropConfig":{"!description":"Removes all the controls from the aggregation {@link #getDragDropConfig dragDropConfig}.\n\nAdditionally, it unregisters them from the hosting UIArea.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.dnd.DragDropBase]"},"removeEventDelegate":{"!description":"Removes the given delegate from this element.\n\nThis method will remove all registrations of the given delegate, not only one.","!static":false,"!category":"function","!type":"fn(oDelegate: Object) -> sap.ui.core.Element","parameters":{"oDelegate":"type: object, description: the delegate object"}},"!category":"class","setLayoutData":{"!description":"Sets the {@link sap.ui.core.LayoutData} defining the layout constraints for this control when it is used inside a layout.","!static":false,"!category":"function","!type":"fn(oLayoutData: sap.ui.core.LayoutData) -> sap.ui.core.Element","parameters":{"oLayoutData":"type: sap.ui.core.LayoutData, description: which should be set"}},"!constructorDescription":"Constructs and initializes a UI Element with the given <code>sId<\/code> and settings.\n\n\n<h3>Uniqueness of IDs<\/h3>\n\nEach <code>Element<\/code> must have an ID. If no <code>sId<\/code> or <code>mSettings.id<\/code> is\ngiven at construction time, a new ID will be created automatically. The IDs of all elements that exist\nat the same time in the same window must be different. Providing an ID which is already used by another\nelement throws an error.\n\nWhen an element is created from a declarative source (e.g. XMLView), then an ID defined in that\ndeclarative source needs to be unique only within the declarative source. Declarative views will\nprefix that ID with their own ID (and some separator) before constructing the element.\nProgrammatically created views (JSViews) can do the same with the {@link sap.ui.core.mvc.View#createId} API.\nSimilarly, UIComponents can prefix the IDs of elements created in their context with their own ID.\nAlso see {@link sap.ui.core.UIComponent#getAutoPrefixId UIComponent#getAutoPrefixId}.\n\n\n<h3>Settings<\/h3>\nIf the optional <code>mSettings<\/code> are given, they must be a JSON-like object (object literal)\nthat defines values for properties, aggregations, associations or events keyed by their name.\n\n<b>Valid Names:<\/b>\n\nThe property (key) names supported in the object literal are exactly the (case sensitive)\nnames documented in the JSDoc for the properties, aggregations, associations and events\nof the control and its base classes. Note that for  0..n aggregations and associations this\nusually is the plural name, whereas it is the singular name in case of 0..1 relations.\n\nIf a key name is ambiguous for a specific control class (e.g. a property has the same\nname as an event), then this method prefers property, aggregation, association and\nevent in that order. To resolve such ambiguities, the keys can be prefixed with\n<code>aggregation:<\/code>, <code>association:<\/code> or <code>event:<\/code>.\nIn that case the keys must be quoted due to the ':'.\n\nEach subclass should document the set of supported names in its constructor documentation.\n\n<b>Valid Values:<\/b>\n\n<ul>\n<li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)<\/li>\n<li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type<\/li>\n<li>for 0..n aggregations, the value has to be an array of instances of the aggregated type<\/li>\n<li>for 0..1 associations, an instance of the associated type or an id (string) is accepted<\/li>\n<li>0..n associations are not supported yet<\/li>\n<li>for events either a function (event handler) is accepted or an array of length 2\n    where the first element is a function and the 2nd element is an object to invoke the method on.<\/li>\n<\/ul>\n\nSpecial aggregation <code>dependents<\/code> is connected to the lifecycle management and databinding,\nbut not rendered automatically and can be used for popups or other dependent controls or elements.\nThis allows the definition of popup controls in declarative views and enables propagation of model\nand context information to them.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getTooltip tooltip} : sap.ui.core.TooltipBase|string<\/li>\n<li>{@link #getCustomData customData} : sap.ui.core.CustomData[]<\/li>\n<li>{@link #getLayoutData layoutData} : sap.ui.core.LayoutData<\/li>\n<li>{@link #getDependents dependents} : sap.ui.core.Element[]<\/li>\n<li>{@link #getDragDropConfig dragDropConfig} : sap.ui.core.dnd.DragDropBase[]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","addEventDelegate":{"!description":"Adds a delegate that listens to the events that are fired on this element (as opposed to events which are fired BY this element).\n\nWhen this element is cloned, the same delegate will be added to all clones. This behavior is well-suited for applications which want to add delegates that also work with templates in aggregation bindings. For control development the internal \"addDelegate\" method which does not clone delegates by default may be more suitable, as typically each control instance takes care of its own delegates.\n\nTo avoid double registrations, all registrations of the given delegate are first removed and then the delegate is added.\n\n<strong>Important:<\/strong> If event delegates were added the delegate will still be called even if the event was processed and/or cancelled via <code>preventDefault<\/code> by the Element or another event delegate. <code>preventDefault<\/code> only prevents the event from bubbling. It should be checked e.g. in the event delegate's listener whether an Element is still enabled via <code>getEnabled<\/code>. Additionally there might be other things that delegates need to check depending on the event (e.g. not adding a key twice to an output string etc.).","!static":false,"!category":"function","!type":"fn(oDelegate: Object, oThis?: Object) -> sap.ui.core.Element","parameters":{"oDelegate":"type: object, description: the delegate object","oThis":"type: object, description: if given, this object will be the \"this\" context in the listener methods; default is the delegate object itself"}},"indexOfDependent":{"!description":"Checks for the provided <code>sap.ui.core.Element<\/code> in the aggregation {@link #getDependents dependents}. and returns its index if found or -1 otherwise.","!static":false,"!category":"function","!type":"fn(oDependent: sap.ui.core.Element) -> Number","parameters":{"oDependent":"type: sap.ui.core.Element, description: The dependent whose index is looked for"}},"prop":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.28.0 The contract of this method is not fully defined and its write capabilities overlap with applySettings<br>This function either calls set[sPropertyName] or get[sPropertyName] with the specified property name depending if an <code>oValue<\/code> is provided or not.","!static":false,"!category":"function","!type":"fn(sPropertyName: String, oValue?: Object) -> Object | sap.ui.core.Element","parameters":{"oValue":"type: any, description: value to set the property to","sPropertyName":"type: string, description: name of the property to set"}},"bindElement":{"!description":"Bind the object to the referenced entity in the model, which is used as the binding context to resolve bound properties or aggregations of the object itself and all of its children relatively to the given path. If a relative binding path is used, this will be applied whenever the parent context changes. There is no difference between {@link sap.ui.core.Element#bindElement} and {@link sap.ui.base.ManagedObject#bindObject}.","!static":false,"!category":"function","!type":"fn(vPath: String | Object, mParameters?: Object) -> sap.ui.core.Element","parameters":{"mParameters":"type: object, description: map of additional parameters for this binding (only taken into account when vPath is a string in that case it corresponds to vPath.parameters). The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ContextBinding<\/code>.","vPath":"type: string|object, description: the binding path or an object with more detailed binding options"}},"getElementBinding":{"!description":"Get the context binding object for a specific model name.\n\n<b>Note:<\/b> to be compatible with future versions of this API, you must not use the following model names: <ul> <li><code>null<\/code><\/li> <li>empty string <code>\"\"<\/code><\/li> <li>string literals <code>\"null\"<\/code> or <code>\"undefined\"<\/code><\/li> <\/ul> Omitting the model name (or using the value <code>undefined<\/code>) is explicitly allowed and refers to the default model.","!static":false,"!category":"function","!type":"fn(sModelName?: String) -> sap.ui.model.ContextBinding","parameters":{"sModelName":"type: string, description: Name of the model or <code>undefined<\/code>"}},"_getCurrentMediaContainerRange":{"!description":"Returns the current media range of the Device or the closest media container","!static":false,"!category":"function","!type":"fn(sName: String) -> Object","parameters":{"sName":"type: string, description: undefined"}},"destroyDependents":{"!description":"Destroys all the dependents in the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Element"},"addCustomData":{"!description":"Adds some customData to the aggregation {@link #getCustomData customData}.","!static":false,"!category":"function","!type":"fn(oCustomData: sap.ui.core.CustomData) -> sap.ui.core.Element","parameters":{"oCustomData":"type: sap.ui.core.CustomData, description: The customData to add; if empty, nothing is inserted"}},"getInterface":{"!static":false,"!category":"function","!type":"fn()"},"removeDependent":{"!description":"Removes a dependent from the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn(vDependent: Number | String | sap.ui.core.Element) -> sap.ui.core.Element","parameters":{"vDependent":"type: int|string|sap.ui.core.Element, description: The dependent to remove or its index or id"}},"defineClass":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.3.1 Use the static <code>extend<\/code> method of the desired base class (e.g. {@link sap.ui.core.Element.extend})<br>Creates metadata for a UI Element by extending the Object Metadata.","!static":true,"!category":"function","!type":"fn(sClassName: String, oStaticInfo: Object, fnMetaImpl?: fn()) -> sap.ui.core.ElementMetadata","parameters":{"oStaticInfo":"type: object, description: static information used to build the metadata","sClassName":"type: string, description: name of the class to build the metadata for","fnMetaImpl":"type: function, description: constructor to be used for the metadata"}},"getDependents":{"!description":"Gets content of aggregation {@link #getDependents dependents}.\n\nDependents are not rendered, but their databinding context and lifecycle are bound to the aggregating Element.","!static":false,"!category":"function","!type":"fn() -> [sap.ui.core.Element]"},"_getMediaContainerWidth":{"!description":"Returns the contextual width of an element, if set, or <code>undefined<\/code> otherwise","!static":false,"!category":"function","!type":"fn() -> *"},"removeDragDropConfig":{"!description":"Removes a dragDropConfig from the aggregation {@link #getDragDropConfig dragDropConfig}.","!static":false,"!category":"function","!type":"fn(vDragDropConfig: Number | String | sap.ui.core.dnd.DragDropBase) -> sap.ui.core.dnd.DragDropBase","parameters":{"vDragDropConfig":"type: int|string|sap.ui.core.dnd.DragDropBase, description: The dragDropConfig to remove or its index or id"}},"insertDragDropConfig":{"!description":"Inserts a dragDropConfig into the aggregation {@link #getDragDropConfig dragDropConfig}.","!static":false,"!category":"function","!type":"fn(oDragDropConfig: sap.ui.core.dnd.DragDropBase, iIndex: Number) -> sap.ui.core.Element","parameters":{"oDragDropConfig":"type: sap.ui.core.dnd.DragDropBase, description: The dragDropConfig to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the dragDropConfig should be inserted at; for a negative value of <code>iIndex<\/code>, the dragDropConfig is inserted at position 0; for a value greater than the current size of the aggregation, the dragDropConfig is inserted at the last position"}},"findElements":{"!description":"Searches and returns an array of child elements and controls which are referenced within an aggregation or aggregations of child elements/controls. This can be either done recursive or not.\n\n<b>Take care: this operation might be expensive.<\/b>","!static":false,"!category":"function","!type":"fn(bRecursive: Boolean) -> [sap.ui.core.Element]","parameters":{"bRecursive":"type: boolean, description: true, if all nested children should be returned."}},"getDomRef":{"!description":"Returns the best suitable DOM Element that represents this UI5 Element. By default the DOM Element with the same ID as this Element is returned. Subclasses should override this method if the lookup via id is not sufficient.\n\nNote that such a DOM Element does not necessarily exist in all cases. Some elements or controls might not have a DOM representation at all (e.g. a naive FlowLayout) while others might not have one due to their current state (e.g. an initial, not yet rendered control).\n\nIf an ID suffix is given, the ID of this Element is concatenated with the suffix (separated by a single dash) and the DOM node with that compound ID will be returned. This matches the UI5 naming convention for named inner DOM nodes of a control.","!static":false,"!category":"function","!type":"fn(sSuffix?: String) -> Element","parameters":{"sSuffix":"type: string, description: ID suffix to get the DOMRef for"}},"rerender":{"!description":"This triggers immediate rerendering of its parent and thus of itself and its children.\n\nAs <code>sap.ui.core.Element<\/code> \"bubbles up\" the rerender, changes to child-<code>Elements<\/code> will also result in immediate rerendering of the whole sub tree.","!static":false,"!category":"function","!type":"fn()"},"addDependent":{"!description":"Adds some dependent to the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn(oDependent: sap.ui.core.Element) -> sap.ui.core.Element","parameters":{"oDependent":"type: sap.ui.core.Element, description: The dependent to add; if empty, nothing is inserted"}},"insertDependent":{"!description":"Inserts a dependent into the aggregation {@link #getDependents dependents}.","!static":false,"!category":"function","!type":"fn(oDependent: sap.ui.core.Element, iIndex: Number) -> sap.ui.core.Element","parameters":{"oDependent":"type: sap.ui.core.Element, description: The dependent to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the dependent should be inserted at; for a negative value of <code>iIndex<\/code>, the dependent is inserted at position 0; for a value greater than the current size of the aggregation, the dependent is inserted at the last position"}},"clone":{"!description":"Create a clone of this Element.\n\nCalls {@link sap.ui.base.ManagedObject#clone} and additionally clones event delegates.","!static":false,"!category":"function","!type":"fn(sIdSuffix?: String, aLocalIds?: [String]) -> sap.ui.core.Element","parameters":{"sIdSuffix":"type: string, description: Suffix to be appended to the cloned element ID","aLocalIds":"type: string[], description: Array of local IDs within the cloned hierarchy (internally used)"}},"addDragDropConfig":{"!description":"Adds some dragDropConfig to the aggregation {@link #getDragDropConfig dragDropConfig}.","!static":false,"!category":"function","!type":"fn(oDragDropConfig: sap.ui.core.dnd.DragDropBase) -> sap.ui.core.Element","parameters":{"oDragDropConfig":"type: sap.ui.core.dnd.DragDropBase, description: The dragDropConfig to add; if empty, nothing is inserted"}},"toString":{"!description":"Returns a simple string representation of this element.\n\nMainly useful for tracing purposes.","!static":false,"!category":"function","!type":"function toString() { [native code for Array.toString, arity=0] }\n) -> String"},"insertCustomData":{"!description":"Inserts a customData into the aggregation {@link #getCustomData customData}.","!static":false,"!category":"function","!type":"fn(oCustomData: sap.ui.core.CustomData, iIndex: Number) -> sap.ui.core.Element","parameters":{"oCustomData":"type: sap.ui.core.CustomData, description: The customData to insert; if empty, nothing is inserted","iIndex":"type: int, description: The <code>0<\/code>-based index the customData should be inserted at; for a negative value of <code>iIndex<\/code>, the customData is inserted at position 0; for a value greater than the current size of the aggregation, the customData is inserted at the last position"}},"destroyTooltip":{"!description":"Destroys the tooltip in the aggregation named <code>tooltip<\/code>.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Element"},"getLayoutData":{"!description":"Gets content of aggregation {@link #getLayoutData layoutData}.\n\nDefines the layout constraints for this control when it is used inside a Layout. LayoutData classes are typed classes and must match the embedding Layout. See VariantLayoutData for aggregating multiple alternative LayoutData instances to a single Element.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.LayoutData"}},"sap.ui.model.odata.v2.ODataAnnotations_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataAnnotations with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oMetadata: sap.ui.model.odata.ODataMetadata, mOptions: Object)","prototype":"sap.ui.model.odata.v2.ODataAnnotations"},"sap.ui.test.RecordReplay_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.test.RecordReplay with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn()","prototype":"sap.ui.test.RecordReplay"},"sap.ui.core.ExtensionPoint":{"!module":"sap/ui/core/ExtensionPoint","load":{"!description":"Creates 0..n UI5 controls from an <code>ExtensionPoint<\/code>.\n\nOne control if the <code>ExtensionPoint<\/code> is e.g. filled with a <code>View<\/code>, zero for extension points without configured extension and n controls for multi-root <code>Fragments<\/code> as extension.","!static":"true","!category":"function","!type":"fn(mOptions: Object) -> [Promise.<sap.ui.core.Control]"},"!category":"namespace","registerExtensionProvider":{"!description":"Registers the given module path as an ExtensionProvider. The registered module will be loaded once an ExtensionPoint is encountered during XMLView processing.","!static":"true","!category":"function","!type":"fn(sExtensionProvider: String)"}},"sap.ui.core.format.DateFormat_obj":{"!type":"fn()","prototype":"sap.ui.core.format.DateFormat"},"sap.ui.core.routing.Router_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.routing.Router with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oRoutes?: [Object | Object], oConfig?: Object, oOwner?: sap.ui.core.UIComponent, oTargetsConfig?: Object)","prototype":"sap.ui.core.routing.Router"},"sap":{"!description":"Root namespace for JavaScript functionality provided by SAP SE.\n\nThe <code>sap<\/code> namespace is automatically registered with the OpenAjax hub if it exists.","sap":"sap","ui":"sap.ui","!module":"sap/ui/Global","!helpDescription":"Root namespace for JavaScript functionality provided by SAP SE.\n\nThe <code>sap<\/code> namespace is automatically registered with the OpenAjax hub if it exists.","!category":"namespace"},"sap.ui.test.matchers.AggregationLengthEquals":{"!description":"Checks if an aggregation contains a specified number of entries.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    aggregationLengthEquals: {\n        name: \"string\",\n        length: \"integer\"\n    }\n}\n<\/code><\/pre>","setName":{"!description":"Sets a new value for property {@link #getName name}.\n\nThe name of the aggregation that is used for matching.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sName: String) -> sap.ui.test.matchers.AggregationLengthEquals","parameters":{"sName":"type: string, description: New value for property <code>name<\/code>"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.test.matchers.AggregationLengthEquals.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"getName":{"!description":"Gets current value of property {@link #getName name}.\n\nThe name of the aggregation that is used for matching.","!static":false,"!category":"function","!type":"fn() -> String"},"!proto":"sap.ui.test.matchers.Matcher","!category":"class","isMatching":{"!description":"Checks if the control's aggregation <code>name<\/code> has length <code>length<\/code>.","!static":false,"!category":"function","!type":"fn(oControl: sap.ui.core.Control) -> Boolean","parameters":{"oControl":"type: sap.ui.core.Control, description: the control that is checked by the matcher"}},"extend":{"!description":"Creates a new subclass of class sap.ui.test.matchers.AggregationLengthEquals with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"setLength":{"!description":"Sets a new value for property {@link #getLength length}.\n\nThe length that aggregation <code>name<\/code> should have.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(iLength: Number) -> sap.ui.test.matchers.AggregationLengthEquals","parameters":{"iLength":"type: int, description: New value for property <code>length<\/code>"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getLength length} : int<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.test.matchers.Matcher#constructor sap.ui.test.matchers.Matcher}\ncan be used as well.","!module":"sap/ui/test/matchers/AggregationLengthEquals","!helpDescription":"Checks if an aggregation contains a specified number of entries.\n\nAs of version 1.72, it is available as a declarative matcher with the following syntax: <code><pre>{\n    aggregationLengthEquals: {\n        name: \"string\",\n        length: \"integer\"\n    }\n}\n<\/code><\/pre>","getLength":{"!description":"Gets current value of property {@link #getLength length}.\n\nThe length that aggregation <code>name<\/code> should have.","!static":false,"!category":"function","!type":"fn() -> Number"}},"sap.ui.core.Manifest_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Manifest with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oManifest: Object, mOptions?: Object)","prototype":"sap.ui.core.Manifest"},"sap.ui.core.dnd.DragDropInfo_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.dnd.DragDropInfo with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.dnd.DropInfo.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.dnd.DragDropInfo"},"jQuery.sap.util.ResourceBundle":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use {@link module:sap/base/i18n/ResourceBundle} instead<br>Contains locale-specific texts.\n\nIf you need a locale-specific text within your application, you can use the resource bundle to load the locale-specific file from the server and access the texts of it.\n\nUse {@link jQuery.sap.resources} to create an instance of jQuery.sap.util.ResourceBundle. There you have to specify the URL to the base .properties file of a bundle (.properties without any locale information, e.g. \"mybundle.properties\"), and optionally a locale. The locale is defined as a string of the language and an optional country code separated by underscore (e.g. \"en_GB\" or \"fr\"). If no locale is passed, the default locale is \"en\" if the SAPUI5 framework is not available. Otherwise the default locale is taken from the SAPUI5 configuration.\n\nWith the getText() method of the resource bundle, a locale-specific string value for a given key will be returned.\n\nWith the given locale, the ResourceBundle requests the locale-specific properties file (e.g. \"mybundle_fr_FR.properties\"). If no file is found for the requested locale or if the file does not contain a text for the given key, a sequence of fall back locales is tried one by one. First, if the locale contains a region information (fr_FR), then the locale without the region is tried (fr). If that also can't be found or doesn't contain the requested text, the English file is used (en - assuming that most development projects contain at least English texts). If that also fails, the file without locale (base URL of the bundle) is tried.\n\nIf none of the requested files can be found or none of them contains a text for the given key, then the key itself is returned as text.\n\nException: Fallback for \"zh_HK\" is \"zh_TW\" before zh.","!module":"jquery.sap.resources","!category":"static class"},"sap.ui.core.Popup.Dock":{"!description":"Enumeration providing options for docking of some element to another.\n\n\"Right\" and \"Left\" will stay the same in RTL mode, but \"Begin\" and \"End\" will flip to the other side (\"Begin\" is \"Right\" in RTL).","EndTop":{"!category":"enum","!type":"String"},"CenterTop":{"!category":"enum","!type":"String"},"BeginCenter":{"!category":"enum","!type":"String"},"BeginBottom":{"!category":"enum","!type":"String"},"LeftTop":{"!category":"enum","!type":"String"},"!category":"static class","EndCenter":{"!category":"enum","!type":"String"},"BeginTop":{"!category":"enum","!type":"String"},"RightBottom":{"!category":"enum","!type":"String"},"EndBottom":{"!category":"enum","!type":"String"},"LeftCenter":{"!category":"enum","!type":"String"},"!module":"sap/ui/core/Popup","CenterCenter":{"!category":"enum","!type":"String"},"LeftBottom":{"!category":"enum","!type":"String"},"RightTop":{"!category":"enum","!type":"String"},"CenterBottom":{"!category":"enum","!type":"String"},"RightCenter":{"!category":"enum","!type":"String"}},"sap.ui.core.ID":{"!description":"A string type representing an ID or a name.\n\nAllowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons. It may start with a character or underscore only.","!module":"sap/ui/core/library","!helpDescription":"A string type representing an ID or a name.\n\nAllowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons. It may start with a character or underscore only.","!category":"namespace"},"sap.ui.model.odata.v2.ODataListBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.v2.ODataListBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.odata.v2.ODataModel, sPath: String, oContext: sap.ui.model.Context, aSorters?: [sap.ui.model.Sorter | sap.ui.model.Sorter], aFilters?: [sap.ui.model.Filter | sap.ui.model.Filter], mParameters?: Object)","prototype":"sap.ui.model.odata.v2.ODataListBinding"},"sap.ui.core.Item_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.Item with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.Item"},"sap.ui.core.Scrolling":{"!description":"Defines the possible values for horizontal and vertical scrolling behavior.","Auto":{"!description":"A scroll bar is shown if the content requires more space than the given space (rectangle) provides.","!category":"enum","!type":"String"},"!module":"sap/ui/core/library","Scroll":{"!description":"A scroll bar is always shown even if the space is large enough for the current content.","!category":"enum","!type":"String"},"Hidden":{"!description":"No scroll bar is shown, and the content stays in the given rectangle.","!category":"enum","!type":"String"},"!category":"static class","None":{"!description":"No scroll bar provided even if the content is larger than the available space.","!category":"enum","!type":"String"}},"sap.ui.model.MetaModel":{"!description":"Model implementation for meta models","extend":{"!description":"Creates a new subclass of class sap.ui.model.MetaModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.MetaModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new MetaModel.","!module":"sap/ui/model/MetaModel","!helpDescription":"Model implementation for meta models","!proto":"sap.ui.model.Model","!category":"class"},"sap.ui.core.ElementMetadata_obj":{"!type":"fn(sClassName: String, oStaticInfo: Object)","prototype":"sap.ui.core.ElementMetadata"},"sap.ui.core.util.serializer.HTMLViewSerializer":{"!description":"HTMLViewSerializer class.","extend":{"!description":"Creates a new subclass of class sap.ui.core.util.serializer.HTMLViewSerializer with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.util.serializer.HTMLViewSerializer.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"HTML view serializer class. Serializes a given view.","!module":"sap/ui/core/util/serializer/HTMLViewSerializer","!helpDescription":"HTMLViewSerializer class.","!proto":"sap.ui.base.EventProvider","!category":"class"},"jQuery":{"getSelectedText":{"!description":"Retrieve the selected text in the first element of the collection.\n\n<b>Note<\/b>: This feature is only supported for input element\u2019s type of text, search, url, tel and password.","!category":"function","!type":"fn() -> String"},"firstFocusableDomRef":{"!description":"Returns the first focusable domRef in a given container (the first element of the collection)","!category":"function","!type":"fn() -> Element"},"parentByAttribute":{"!description":"Gets the next parent DOM element with a given attribute and attribute value starting above the first given element","!category":"function","!type":"fn(sAttribute: String, sValue: String) -> Element"},"selectText":{"!description":"Sets the text selection in the first element of the collection.\n\n<b>Note<\/b>: This feature is only supported for input element\u2019s type of text, search, url, tel and password.","!category":"function","!type":"fn(iStart: Number, iEnd: Number) -> jQuery"},"lastFocusableDomRef":{"!description":"Returns the last focusable domRef in a given container","!category":"function","!type":"fn() -> Element"},"!category":"namespace","outerHTML":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 use native <code>Element#outerHTML<\/code> instead<br>Returns the outer HTML of the given HTML element.","!category":"function","!type":"fn() -> String"},"rect":{"!description":"Returns a rectangle describing the current visual positioning of the first DOM object in the collection (or <code>null<\/code> if no element was given).","!category":"function","!type":"fn() -> Object"},"addAriaLabelledBy":{"!description":"Adds the given ID reference to the aria-labelledby attribute.","!category":"function","!type":"fn(sId: String, bPrepend?: Boolean) -> jQuery"},"root":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>undefined","!category":"function","!type":"fn(oRootControl: Object) -> jQuery"},"zIndex":{"!description":"Get the z-index for an element.","!category":"function","!type":"fn(zIndex: Number) -> Number"},"!description":"Provides base functionality of the SAP jQuery plugin as extension of the jQuery framework.<br/> See also <a href=\"http://api.jquery.com/jQuery/\">jQuery<\/a> for details.<br/> Although these functions appear as static ones, they are meant to be used on jQuery instances.<br/> If not stated differently, the functions follow the fluent interface paradigm and return the jQuery instance for chaining of statements.\n\nExample for usage of an instance method: <pre>\n  var oRect = jQuery(\"#myDiv\").rect();\n  alert(\"Top Position: \" + oRect.top);\n<\/pre>","removeAriaLabelledBy":{"!description":"Removes the given ID reference from the aria-labelledby attribute.","!category":"function","!type":"fn(sId: String) -> jQuery"},"sap":"jQuery.sap","os":"jQuery.os","rectContains":{"!description":"Returns whether a point described by X and Y is inside this Rectangle's boundaries.","!category":"function","!type":"fn(iPosX: Number, iPosY: Number) -> Boolean"},"disableSelection":{"!description":"Disable HTML elements selection.","!category":"function","!type":"fn() -> jQuery"},"control":{"!description":"Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.","!category":"function","!type":"fn(iIndex?: Number, bIncludeRelated?: Boolean) -> [sap.ui.core.Control]"},"enableSelection":{"!description":"Enable HTML elements to get selected.","!category":"function","!type":"fn() -> jQuery"},"cursorPos":{"!description":"Sets or gets the position of the cursor in an element that supports cursor positioning.","!category":"function","!type":"fn(iPos: Number) -> Number | jQuery"},"addAriaDescribedBy":{"!description":"Adds the given ID reference to the aria-describedby attribute.","!category":"function","!type":"fn(sId: String, bPrepend?: Boolean) -> jQuery"},"jQuery":"jQuery","!module":"jquery.sap.global","scrollLeftRTL":{"!description":"Sets or returns the scrollLeft value of the first element in the given jQuery collection in right-to-left mode. Precondition: The element is rendered in RTL mode.\n\nReason for this method is that the major browsers use three different values for the same scroll position when in RTL mode. This method hides those differences and returns/applies the same value that would be returned in LTR mode: The distance in px how far the given container is scrolled away from the leftmost scroll position.\n\nReturns \"undefined\" if no element and no iPos is given.","!category":"function","!type":"fn(iPos: Number) -> jQuery | Number"},"!helpDescription":"Provides base functionality of the SAP jQuery plugin as extension of the jQuery framework.<br/> See also <a href=\"http://api.jquery.com/jQuery/\">jQuery<\/a> for details.<br/> Although these functions appear as static ones, they are meant to be used on jQuery instances.<br/> If not stated differently, the functions follow the fluent interface paradigm and return the jQuery instance for chaining of statements.\n\nExample for usage of an instance method: <pre>\n  var oRect = jQuery(\"#myDiv\").rect();\n  alert(\"Top Position: \" + oRect.top);\n<\/pre>","removeAriaDescribedBy":{"!description":"Removes the given ID reference from the aria-describedby attribute.","!category":"function","!type":"fn(sId: String) -> jQuery"},"scrollRightRTL":{"!description":"Returns the MIRRORED scrollLeft value of the first element in the given jQuery collection in right-to-left mode. Precondition: The element is rendered in RTL mode.\n\nReason for this method is that the major browsers return three different values for the same scroll position when in RTL mode. This method hides those differences and returns the value that would be returned in LTR mode if the UI would be mirrored horizontally: The distance in px how far the given container is scrolled away from the rightmost scroll position.\n\nReturns \"undefined\" if no element is given.","!category":"function","!type":"fn() -> Number"},"Event":"jQuery.Event_obj","hasTabIndex":{"!description":"Returns <code>true<\/code> if the first element has a set tabindex.","!category":"function","!type":"fn() -> Boolean"},"device":"jQuery.device","uiarea":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.58 undefined<br>Returns a single UIArea if an index is provided or an array of UIAreas.","!category":"function","!type":"fn(iIdx: Number) -> Object | Array"}},"sap.ui.core.UIComponent":{"createContent":{"!description":"Hook method to create the content (UI Control Tree) of this component.\n\nThe default implementation in this class reads the name (and optionally type) of a root view from the descriptor for this component (path <code>/sap.ui5/rootView<\/code>) or, for backward compatibility, just the name from static component metadata (property <code>rootView<\/code>). When no type is specified, it defaults to XML. The method then calls the {@link sap.ui.view view factory} to instantiate the root view and returns the result.\n\nWhen there is no root view configuration, <code>null<\/code> will be returned.\n\nThis method can be overwritten by subclasses if the default implementation doesn't fit their needs. Subclasses are not limited to views as return type but may return any control, but only a single control (can be the root of a larger control tree, however).","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.mvc.View | sap.ui.core.Control"},"!proto":"sap.ui.core.Component","getLocalId":{"!description":"Returns the local ID of an element by removing the component ID prefix or <code>null<\/code> if the ID does not contain a prefix.","!static":false,"!category":"function","!type":"fn(sId: String) -> String","parameters":{"sId":"type: string, description: Prefixed ID"}},"!category":"class","getRouter":{"!description":"Returns the reference to the router instance which has been created by the UIComponent once the routes in the routing metadata has been defined.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Router"},"getRootControl":{"!description":"Returns the content of {@link sap.ui.core.UIComponent#createContent}. If you specified a <code>rootView<\/code> in your metadata or in the descriptor file (manifest.json), you will get the instance of the root view. This getter will only return something if the {@link sap.ui.core.UIComponent#init} function was invoked. If <code>createContent<\/code> is not implemented, and there is no root view, it will return <code>null<\/code>. Here is an example: <pre>\n         var MyExtension = UIComponent.extend(\"my.Component\", {\n              metadata: {\n                   rootView: \"my.View\"\n              },\n              init: function () {\n                   this.getRootControl(); // returns null\n                   UIComponent.prototype.init.apply(this, arguments);\n                   this.getRootControl(); // returns the view \"my.View\"\n              }\n         });\n    <\/pre>","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.Control"},"getTargets":{"!description":"Returns the reference to the Targets instance which has been created by the UIComponent once the targets in the routing metadata has been defined. If routes have been defined, it will be the Targets instance created and used by the router.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.routing.Targets"},"!constructorDescription":"Creates and initializes a new UIComponent with the given <code>sId<\/code> and\nsettings.\n\nThe set of allowed entries in the <code>mSettings<\/code> object depends on\nthe concrete subclass and is described there. See {@link sap.ui.core.Component}\nfor a general description of this argument.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Component#constructor sap.ui.core.Component}\ncan be used as well.","getAutoPrefixId":{"!description":"A method to be implemented by UIComponents, returning the flag whether to prefix the IDs of controls automatically or not if the controls are created inside the {@link sap.ui.core.UIComponent#createContent} function. By default this feature is not activated.\n\nYou can overwrite this function and return <code>true<\/code> to activate the automatic prefixing. In addition the default behavior can be configured in the manifest by specifying the entry <code>sap.ui5/autoPrefixId<\/code>.","!static":false,"!category":"function","!type":"fn() -> Boolean"},"onAfterRendering":{"!description":"Function is called when the rendering of the ComponentContainer is completed.\n\nApplications must not call this hook method directly, it is called from ComponentContainer.\n\nSubclasses of UIComponent override this hook to implement any necessary actions after the rendering.","!static":false,"!category":"function","!type":"fn()"},"render":{"!description":"Renders the root control of the UIComponent.","!static":false,"!category":"function","!type":"fn(oRenderManager: sap.ui.core.RenderManager)","parameters":{"oRenderManager":"type: sap.ui.core.RenderManager, description: a RenderManager instance"}},"!description":"Base Class for UIComponent.\n\nIf you are extending a UIComponent make sure you read the {@link #.extend} documentation since the metadata is special.","init":{"!description":"Initializes the component instance after creation.\n\nApplications must not call this hook method directly, it is called by the framework while the constructor of a Component is executed.\n\nSubclasses of <code>UIComponent<\/code> should override this hook to implement any necessary initialization. <b>When overriding this function make sure to invoke the <code>init<\/code> function of the <code>UIComponent<\/code> as well!<\/b>","!static":false,"!category":"function","!type":"fn()"},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.UIComponent.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"onBeforeRendering":{"!description":"Function is called when the rendering of the ComponentContainer is started.\n\nApplications must not call this hook method directly, it is called from ComponentContainer.\n\nSubclasses of UIComponent override this hook to implement any necessary actions before the rendering.","!static":false,"!category":"function","!type":"fn()"},"_getRouterClassName":{"!description":"Determines the router class name by checking the \"routing\" configuration manifest entry. Override to change the criteria for determining the router class.","!static":false,"!category":"function","!type":"fn() -> String | undefined"},"getEventingParent":{"!static":false,"!category":"function","!type":"fn()"},"extend":{"!description":"Creates a new subclass of class <code>sap.ui.core.UIComponent<\/code> with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>. <code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn())","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object. If not given, it defaults to an internal subclass of <code>sap.ui.core.ComponentMetadata<\/code>.","sClassName":"type: string, description: Qualified name of the newly created class"}},"getRouterFor":{"!description":"Returns the reference to the router instance.\n\nThe passed controller or view has to be created in the context of a UIComponent to return the router instance. Otherwise this function will return undefined. You may define the routerClass property in the config section of the routing to make the Component create your router extension.\n\nExample: <pre>\nrouting: {\n\tconfig: {\n\t\trouterClass : myAppNamespace.MyRouterClass\n\t\t...\n}\n...\n<\/pre>","!static":true,"!category":"function","!type":"fn(oControllerOrView: sap.ui.core.mvc.View | sap.ui.core.mvc.Controller) -> sap.ui.core.routing.Router","parameters":{"oControllerOrView":"type: sap.ui.core.mvc.View|sap.ui.core.mvc.Controller, description: either a view or controller"}},"!module":"sap/ui/core/UIComponent","!helpDescription":"Base Class for UIComponent.\n\nIf you are extending a UIComponent make sure you read the {@link #.extend} documentation since the metadata is special.","getUIArea":{"!description":"Returns the reference to the UIArea of the container.","!static":false,"!category":"function","!type":"fn() -> sap.ui.core.UIArea"},"createId":{"!description":"Convert the given component local element ID to a globally unique ID by prefixing it with the component ID.","!static":false,"!category":"function","!type":"fn(sId: String) -> String","parameters":{"sId":"type: string, description: Component local ID of the element"}},"byId":{"!description":"Returns an element by its ID in the context of the component.","!static":false,"!category":"function","!type":"fn(sId: String) -> sap.ui.core.Element","parameters":{"sId":"type: string, description: Component local ID of the element"}},"setContainer":{"!description":"Sets the reference to the ComponentContainer - later required for the determination of the UIArea for the UIComponent.","!static":false,"!category":"function","!type":"fn(oContainer: sap.ui.core.ComponentContainer) -> sap.ui.core.UIComponent","parameters":{"oContainer":"type: sap.ui.core.ComponentContainer, description: reference to a ComponentContainer"}}},"sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS":{"!description":"Protocol versions.\n\nOne (or more) of these have to be selected to create an SapPcpWebSocket connection (or no protocol at all).","!module":"sap/ui/core/ws/SapPcpWebSocket","v10":{"!category":"enum","!type":"String"},"!category":"static class"},"sap.ui.core.TooltipBase_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.core.TooltipBase"},"sap.ui.core.mvc":{"displayBlock":{"!description":"Whether the CSS display should be set to \"block\". Set this to \"true\" if the default display \"inline-block\" causes a vertical scrollbar with Views that are set to 100% height. Do not set this to \"true\" if you want to display other content in the same HTML parent on either side of the View (setting to \"true\" may push that other content to the next/previous line).","!category":"enum","!type":"Boolean"},"busyIndicatorSize":{"!description":"The size of the BusyIndicator. For controls with a width smaller 3rem a <code>sap.ui.core.BusyIndicatorSize.Small<\/code> should be used. If the size could vary in width and the width could get smaller than 3rem, the <code>sap.ui.core.BusyIndicatorSize.Auto<\/code> option could be used. The default is set to <code>sap.ui.core.BusyIndicatorSize.Medium<\/code> For a full screen BusyIndicator use <code>sap.ui.core.BusyIndicatorSize.Large<\/code>.","!category":"enum","!type":"sap.ui.core.BusyIndicatorSize"},"ControllerExtension":"sap.ui.core.mvc.ControllerExtension_obj","!category":"namespace","JSView":"sap.ui.core.mvc.JSView_obj","JSONView":"sap.ui.core.mvc.JSONView_obj","blocked":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.69 The blocked property is deprecated. There is no accessibility support for this property. Blocked controls should not be used inside Controls, which rely on keyboard navigation, e.g. List controls.<br>Whether the control is currently in blocked state.","!category":"enum","!type":"Boolean"},"viewName":{"!description":"Name of the View","!category":"enum","!type":"String"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!category":"enum","!type":"Number"},"busy":{"!description":"Whether the control is currently in busy state.","!category":"enum","!type":"Boolean"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to.\n\nAll fields in a logical field group should share the same <code>fieldGroupId<\/code>. Once a logical field group is left, the <code>validateFieldGroup<\/code> event is fired.\n\nFor backward compatibility with older releases, field group IDs are syntactically not limited, but it is suggested to use only valid {@link sap.ui.core.ID}s.\n\nSee {@link #attachValidateFieldGroup} or consult the {@link topic:5b0775397e394b1fb973fa207554003e Field Group} documentation.","!category":"enum","!type":"[String]"},"asyncSupport":{"!description":"Flag for feature detection of asynchronous loading/rendering","!category":"enum","!type":"String"},"XMLView":"sap.ui.core.mvc.XMLView_obj","height":{"!description":"The height","!category":"enum","!type":"sap.ui.core.CSSSize"},"OverrideExecution":"sap.ui.core.mvc.OverrideExecution","visible":{"!description":"Whether the control should be visible on the screen.\n\nIf set to false, a placeholder will be rendered to mark the location of the invisible control in the DOM of the current page. The placeholder will be hidden and have zero dimensions (<code>display: none<\/code>).\n\nAlso see {@link module:sap/ui/core/InvisibleRenderer InvisibleRenderer}.","!category":"enum","!type":"Boolean"},"Controller":"sap.ui.core.mvc.Controller_obj","HTMLView":"sap.ui.core.mvc.HTMLView_obj","View":"sap.ui.core.mvc.View_obj","IControllerExtension":"sap.ui.core.mvc.IControllerExtension","_legacyCreate":{"!description":"Used to bypass the public APIs returning a Promise. Some internal use-cases need the View instance synchronously instead of the wrapping Promises of the [...]View.create() factories: e.g. root-view creation in sap/ui/core/UIComponent Internally, the views might still be loaded and processed asynchronously.","!category":"enum","!type":"String"},"!module":"sap/ui/core/mvc/View","width":{"!description":"The width","!category":"enum","!type":"sap.ui.core.CSSSize"},"Preprocessor":"sap.ui.core.mvc.View.Preprocessor","PreprocessorType":"sap.ui.core.mvc.XMLView.PreprocessorType","TemplateView":"sap.ui.core.mvc.TemplateView_obj"},"sap.ui.core.Fragment":{"!description":"Fragments support the definition of light-weight stand-alone UI control trees. This class acts as factory which returns the UI control tree defined inside the Fragments. When used within declarative Views, the Fragment content is imported and seamlessly integrated into the View.\n\nFragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their own (they may know one, though), they are not a Control, they are not part of the UI tree and they have no representation in HTML. By default, in contrast to declarative Views, they do not do anything to guarantee ID uniqueness.\n\nBut like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for other types can be plugged in), the declaration syntax is the same as in declarative Views and the name and location of the Fragment files is similar to Views. Controller methods can also be referenced in the declarations, but as Fragments do not have their own controllers, this requires the Fragments to be used within a View which does have a controller. That controller is used, then.\n\nDo not call the Fragment constructor directly!\n\nUse-cases for Fragments are e.g.: - Modularization of UIs without fragmenting the controller structure - Re-use of UI parts - 100%-declarative definition of Views","getMetadata":{"!description":"Returns a metadata object for class sap.ui.core.Fragment.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!proto":"sap.ui.base.ManagedObject","!category":"class","registerType":{"!description":"Registers a new Fragment type","!static":true,"!category":"function","!type":"fn(sType: String, oFragmentImpl: Object)","parameters":{"sType":"type: string, description: the Fragment type. Types \"XML\", \"HTML\" and JS\" are built-in and always available.","oFragmentImpl":"type: object, description: an object having a property \"init\" of type \"function\" which is called on Fragment instantiation with the settings map as argument"}},"setType":{"!description":"Sets a new value for property {@link #getType type}.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!static":false,"!category":"function","!type":"fn(sType: String) -> sap.ui.core.Fragment","parameters":{"sType":"type: string, description: New value for property <code>type<\/code>"}},"extend":{"!description":"Creates a new subclass of class sap.ui.core.Fragment with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!constructorDescription":"Accepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n<\/p><p>\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getType type} : string<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","!module":"sap/ui/core/Fragment","load":{"!description":"Loads and instantiates a Fragment. A Promise is returned, which resolves with the Fragments content.\n\nThe Fragment object itself is not an entity with significance beyond this factory.\n\nThe Fragment types \"XML\", \"JS\" and \"HTML\" are available by default; additional Fragment types can be added using the sap.ui.core.Fragment.registerType() function.\n\nFurther properties may be supported by future or custom Fragment types. Any given properties will be forwarded to the Fragment implementation.\n\nIf no fixed ID is given, the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the IDs of all contained controls.","!static":true,"!category":"function","!type":"fn(mOptions: Object) -> Promise","parameters":{"mOptions":"type: object, description: options map"}},"!helpDescription":"Fragments support the definition of light-weight stand-alone UI control trees. This class acts as factory which returns the UI control tree defined inside the Fragments. When used within declarative Views, the Fragment content is imported and seamlessly integrated into the View.\n\nFragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their own (they may know one, though), they are not a Control, they are not part of the UI tree and they have no representation in HTML. By default, in contrast to declarative Views, they do not do anything to guarantee ID uniqueness.\n\nBut like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for other types can be plugged in), the declaration syntax is the same as in declarative Views and the name and location of the Fragment files is similar to Views. Controller methods can also be referenced in the declarations, but as Fragments do not have their own controllers, this requires the Fragments to be used within a View which does have a controller. That controller is used, then.\n\nDo not call the Fragment constructor directly!\n\nUse-cases for Fragments are e.g.: - Modularization of UIs without fragmenting the controller structure - Re-use of UI parts - 100%-declarative definition of Views","getType":{"!description":"Gets current value of property {@link #getType type}.","!static":false,"!category":"function","!type":"fn() -> String"},"createId":{"!description":"Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have","!static":true,"!category":"function","!type":"fn(sFragmentId: String, sId: String)","parameters":{"sFragmentId":"type: string, description: undefined","sId":"type: string, description: undefined"}},"byId":{"!description":"Returns an Element/Control by its ID in the context of the Fragment with the given ID","!static":true,"!category":"function","!type":"fn(sFragmentId: String, sId: String)","parameters":{"sFragmentId":"type: string, description: undefined","sId":"type: string, description: undefined"}}},"sap.ui.model.odata.ODataPropertyBinding_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"!type":"fn(oModel: sap.ui.model.Model, sPath: String, oContext: sap.ui.model.Context, mParameters?: Object)","prototype":"sap.ui.model.odata.ODataPropertyBinding"},"sap.ui.model.analytics.odata4analytics.Measure":{"!description":"Representation of a property annotated with sap:aggregation-role=\"measure\".","isUpdatable":{"!description":"Get indicator whether or not the measure is updatable","!static":false,"!category":"function","!type":"fn() -> Boolean"},"!constructorDescription":"Create a representation of a measure provided by an analytic query. Do not create your own instances.","getName":{"!description":"Get the name of the measure","!static":false,"!category":"function","!type":"fn() -> String"},"!module":"sap/ui/model/analytics/odata4analytics","!helpDescription":"Representation of a property annotated with sap:aggregation-role=\"measure\".","getRawValueProperty":{"!description":"Get the raw value property","!static":false,"!category":"function","!type":"fn() -> Object"},"!proto":"sap.ui.base.Object","getFormattedValueProperty":{"!description":"Get the text property associated to the raw value property holding the formatted value related to this measure","!static":false,"!category":"function","!type":"fn() -> Object"},"!category":"class","getUnitProperty":{"!description":"Get the unit property related to this measure","!static":false,"!category":"function","!type":"fn() -> Object"},"getLabelText":{"!description":"Get label","!static":false,"!category":"function","!type":"fn() -> String"}},"sap.ui.model.ClientModel":{"!description":"Model implementation for Client models","extend":{"!description":"Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName<\/code> and enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.","!static":true,"!category":"function","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","parameters":{"oClassInfo":"type: object, description: Object literal with information about the class","FNMetaImpl":"type: function, description: Constructor function for the metadata object; if not given, it defaults to the metadata implementation used by this class","sClassName":"type: string, description: Name of the class being created"}},"updateBindings":{"!description":"update all bindings","!static":false,"!category":"function","!type":"fn(bForceUpdate: Boolean)","parameters":{"bForceUpdate":"type: boolean, description: true/false: Default = false. If set to false an update will only be done when the value of a binding changed."}},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.model.ClientModel.","!static":true,"!category":"function","!type":"fn() -> sap.ui.base.Metadata"},"!constructorDescription":"Constructor for a new ClientModel.","!module":"sap/ui/model/ClientModel","!helpDescription":"Model implementation for Client models","forceNoCache":{"!description":"Force no caching.","!static":false,"!category":"function","!type":"fn(bForceNoCache?: Boolean)","parameters":{"bForceNoCache":"type: boolean, description: whether to force not to cache"}},"!proto":"sap.ui.model.Model","destroy":{"!static":false,"!category":"function","!type":"fn()"},"!category":"class","getData":{"!description":"Returns the current data of the model. Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.","!static":false,"!category":"function","!type":"fn()"}}}}